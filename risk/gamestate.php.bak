<?php

//$a = 0;
$arr = array();
$prev = "";
$output = array();
while (/*$a < */1) {
  //exec('./risk_spi_gamestate --length 1', $output);
  //usleep(100000); // 100ms
  unset($output);
  exec('./risk_spi_gamestate --length 87', $output); // Ask the game board for the current game state
  if ($output != $prev) {
    //echo "Gamestate changed!".PHP_EOL.bin2hex($output[0]).PHP_EOL.bin2hex($prev[0]).PHP_EOL;
    //echo $output[0];
    //for ($i = 0; $i < strlen($output[0]); $i++) {
    //  echo substr($output[0], $i, 1);
    //  echo ' ';
    //}
    //echo "\n";

    unset($arr); // Delete the whole array
    $arr = array('territories' => array(), 'cards' => array()); // Setup structure -> $arr = { 'territories' : {}, 'cards' : {} }

    // Interpret the first 42 bytes as who owns each territory 0-42 (bytes should be 0-5 or 255)
    for ($i = 0; $i < 42; $i++) {
      $arr['territories'][$i] = ord(substr($output[0], $i, 1)); // Store (TerritoryId => OwnerId) -> $arr = { 'territories' : { 0 : 1, 1 : 3, ... }, 'cards' : {} }
    }

    // Interpret the next 44 bytes as who owns each card 0-44 (bytes should be 0-5 or 255)
    for ($i = 0; $i < 44; $i++) {
      $arr['cards'][$i] = ord(substr($output[0], $i + 42, 1));
      //array_push($arr['cards'][ord(substr($output[0], $i, 1))], $i - 44); // Append (OwnerId => (..., CardId))
    }

    $json = json_encode($arr);

    // Debug by printing the JSON
    //echo $json."\n";
    $fp = fopen("/var/www/gamestate.json", "w");
    fwrite($fp, $json);
    fclose($fp);

    usleep(100000); // Sleep for 100ms (0.1s)
    //$a = $a + 1;
  }
  $prev = $output;
}

?>
