Disassembly Listing for RISK-ECH100
Generated From:
/home/jacob/Documents/477/RISK/RISK-ECH100.X/dist/default/production/RISK-ECH100.X.production.elf
Mar 26, 2015 10:13:05 AM

---  /home/jacob/Documents/477/RISK/game/territory.c  ---------------------------------------------------
1:                   // territory.c:
2:                   // Individual territory functions.
3:                   //
4:                   // Part of R.I.S.K
5:                   // ECE 477 Group 2, Spring 2015
6:                   
7:                   #include "territory.h"
8:                   #include "game.h"
9:                   #include "types.h"
10:                  #include "util.h"
11:                  #include "io.h"
12:                  #include "gamedata.h"
13:                  #include "log.h"
14:                  
15:                  // Array of connected territories, used to check valid move targets.
16:                  static int connectedTerritories[NUM_TERRITORIES];
17:                  
18:                  int isNeighbor(int t1, int t2)
9D004588  8C820008   LW V0, 8(A0)
9D00458C  00452826   XOR A1, V0, A1
9D004590  03E00008   JR RA
9D004594  2CA20001   SLTIU V0, A1, 1
9D004598  03E00008   JR RA
9D00459C  00000000   NOP
19:                  {
20:                      for(int i = 0; i < MAX_NEIGHBORS; i++)
21:                      {
22:                          if(territories[t1].neighbors[i] == t2)
9D004558  000410C0   SLL V0, A0, 3
9D00455C  00041940   SLL V1, A0, 5
9D004560  00621823   SUBU V1, V1, V0
9D004564  3C028000   LUI V0, -32768
9D004568  244241A8   ADDIU V0, V0, 16808
9D00456C  00431021   ADDU V0, V0, V1
9D004570  8C420004   LW V0, 4(V0)
9D004574  50450008   BEQL V0, A1, 0x9D004598
9D004578  24020001   ADDIU V0, ZERO, 1
9D00457C  3C028000   LUI V0, -32768
9D004580  244241A8   ADDIU V0, V0, 16808
9D004584  00432021   ADDU A0, V0, V1
9D004A1C  000218C0   SLL V1, V0, 3
9D004A20  00022940   SLL A1, V0, 5
9D004A24  00A32823   SUBU A1, A1, V1
9D004A28  3C038000   LUI V1, -32768
9D004A2C  246341A8   ADDIU V1, V1, 16808
9D004A30  00651821   ADDU V1, V1, A1
9D004A34  8C630004   LW V1, 4(V1)
9D004A38  10830007   BEQ A0, V1, 0x9D004A58
9D004A3C  3C038000   LUI V1, -32768
9D004A40  246341A8   ADDIU V1, V1, 16808
9D004A44  00651021   ADDU V0, V1, A1
23:                          {
24:                              return 1;
9D004A58  24040001   ADDIU A0, ZERO, 1
25:                          }
26:                      }
27:                      return 0;
28:                  }
29:                  #define SORT(a,b) do{if(a < b) {int tmp = a; a = b; b = tmp; }}while(0)
30:                  void doBattle(int tA, int tD)
31:                  {
9D0045A0  27BDFFC8   ADDIU SP, SP, -56
9D0045A4  AFBF0034   SW RA, 52(SP)
9D0045A8  AFB30030   SW S3, 48(SP)
9D0045AC  AFB2002C   SW S2, 44(SP)
9D0045B0  AFB10028   SW S1, 40(SP)
9D0045B4  AFB00024   SW S0, 36(SP)
9D0045B8  00809021   ADDU S2, A0, ZERO
9D0045BC  00A08821   ADDU S1, A1, ZERO
32:                      int attackers = min(3, territories[tA].troops - 1);
9D0045C0  3C028000   LUI V0, -32768
9D0045C4  244241A8   ADDIU V0, V0, 16808
9D0045C8  000418C0   SLL V1, A0, 3
9D0045CC  00042140   SLL A0, A0, 5
9D0045D0  00831823   SUBU V1, A0, V1
9D0045D4  00431821   ADDU V1, V0, V1
9D0045D8  8C700014   LW S0, 20(V1)
9D0045DC  2610FFFF   ADDIU S0, S0, -1
9D0045E0  2A040004   SLTI A0, S0, 4
9D0045E4  24030003   ADDIU V1, ZERO, 3
9D0045E8  0064800A   MOVZ S0, V1, A0
33:                      int defenders = min(2, territories[tD].troops);
9D0045EC  000518C0   SLL V1, A1, 3
9D0045F0  00052140   SLL A0, A1, 5
9D0045F4  00831823   SUBU V1, A0, V1
9D0045F8  00431021   ADDU V0, V0, V1
9D0045FC  8C420014   LW V0, 20(V0)
9D004600  28530003   SLTI S3, V0, 3
9D004604  24030002   ADDIU V1, ZERO, 2
9D004608  0053180B   MOVN V1, V0, S3
9D00460C  00609821   ADDU S3, V1, ZERO
34:                      attackerDice[0] = randint(1,6);     
9D004610  24040001   ADDIU A0, ZERO, 1
9D004614  0F40133F   JAL randint
9D004618  24050006   ADDIU A1, ZERO, 6
9D00461C  3C038000   LUI V1, -32768
9D004620  AC62023C   SW V0, 572(V1)
35:                      attackerDice[1] = attackers > 1? randint(1,6) : 0;
9D004624  2A020002   SLTI V0, S0, 2
9D004628  14400005   BNE V0, ZERO, 0x9D004640
9D00462C  24040001   ADDIU A0, ZERO, 1
9D004630  0F40133F   JAL randint
9D004634  24050006   ADDIU A1, ZERO, 6
9D004638  0B401192   J 0x9D004648
9D00463C  3C038000   LUI V1, -32768
9D004640  00001021   ADDU V0, ZERO, ZERO
9D004644  3C038000   LUI V1, -32768
9D004648  AC620240   SW V0, 576(V1)
36:                      attackerDice[2] = attackers > 2? randint(1,6) : 0;
9D00464C  2A020003   SLTI V0, S0, 3
9D004650  54400006   BNEL V0, ZERO, 0x9D00466C
9D004654  00001021   ADDU V0, ZERO, ZERO
9D004658  24040001   ADDIU A0, ZERO, 1
9D00465C  0F40133F   JAL randint
9D004660  24050006   ADDIU A1, ZERO, 6
9D004664  0B40119C   J 0x9D004670
9D004668  3C038000   LUI V1, -32768
9D00466C  3C038000   LUI V1, -32768
9D004670  AC620244   SW V0, 580(V1)
37:                      defenderDice[0] = randint(1,6);     
9D004674  24040001   ADDIU A0, ZERO, 1
9D004678  0F40133F   JAL randint
9D00467C  24050006   ADDIU A1, ZERO, 6
9D004680  AF8280D8   SW V0, -32552(GP)
38:                      defenderDice[1] = defenders > 1? randint(1,6) : 0;
9D004684  2A620002   SLTI V0, S3, 2
9D004688  14400005   BNE V0, ZERO, 0x9D0046A0
9D00468C  24040001   ADDIU A0, ZERO, 1
9D004690  0F40133F   JAL randint
9D004694  24050006   ADDIU A1, ZERO, 6
9D004698  0B4011AA   J 0x9D0046A8
9D00469C  AF8280DC   SW V0, -32548(GP)
9D0046A0  00001021   ADDU V0, ZERO, ZERO
9D0046A4  AF8280DC   SW V0, -32548(GP)
39:                  
40:                      SORT(attackerDice[0], attackerDice[1]);
9D0046A8  3C038000   LUI V1, -32768
9D0046AC  8C64023C   LW A0, 572(V1)
9D0046B0  2463023C   ADDIU V1, V1, 572
9D0046B4  8C630004   LW V1, 4(V1)
9D0046B8  0083282A   SLT A1, A0, V1
9D0046BC  50A00006   BEQL A1, ZERO, 0x9D0046D8
9D0046C0  3C038000   LUI V1, -32768
9D0046C4  3C058000   LUI A1, -32768
9D0046C8  ACA3023C   SW V1, 572(A1)
9D0046CC  24A5023C   ADDIU A1, A1, 572
9D0046D0  ACA40004   SW A0, 4(A1)
41:                      SORT(attackerDice[0], attackerDice[2]);
9D0046D4  3C038000   LUI V1, -32768
9D0046D8  8C64023C   LW A0, 572(V1)
9D0046DC  2463023C   ADDIU V1, V1, 572
9D0046E0  8C630008   LW V1, 8(V1)
9D0046E4  0083282A   SLT A1, A0, V1
9D0046E8  50A00006   BEQL A1, ZERO, 0x9D004704
9D0046EC  3C038000   LUI V1, -32768
9D0046F0  3C058000   LUI A1, -32768
9D0046F4  ACA3023C   SW V1, 572(A1)
9D0046F8  24A5023C   ADDIU A1, A1, 572
9D0046FC  ACA40008   SW A0, 8(A1)
42:                      SORT(attackerDice[1], attackerDice[2]);
9D004700  3C038000   LUI V1, -32768
9D004704  2463023C   ADDIU V1, V1, 572
9D004708  8C640004   LW A0, 4(V1)
9D00470C  8C630008   LW V1, 8(V1)
9D004710  0083282A   SLT A1, A0, V1
9D004714  50A00006   BEQL A1, ZERO, 0x9D004730
9D004718  8F8380D8   LW V1, -32552(GP)
9D00471C  3C058000   LUI A1, -32768
9D004720  24A5023C   ADDIU A1, A1, 572
9D004724  ACA30004   SW V1, 4(A1)
9D004728  ACA40008   SW A0, 8(A1)
43:                      SORT(defenderDice[0], defenderDice[1]);
9D00472C  8F8380D8   LW V1, -32552(GP)
9D004730  0062202A   SLT A0, V1, V0
9D004734  50800004   BEQL A0, ZERO, 0x9D004748
9D004738  3C028000   LUI V0, -32768
9D00473C  AF8280D8   SW V0, -32552(GP)
9D004740  AF8380DC   SW V1, -32548(GP)
44:                  
45:                      // Kill some troops
46:                      if(attackerDice[0] > defenderDice[0])
9D004744  3C028000   LUI V0, -32768
9D004748  8C43023C   LW V1, 572(V0)
9D00474C  8F8280D8   LW V0, -32552(GP)
9D004750  0043102A   SLT V0, V0, V1
9D004754  1040000B   BEQ V0, ZERO, 0x9D004784
9D004758  001210C0   SLL V0, S2, 3
47:                          territories[tD].troops -= 1;
9D00475C  001110C0   SLL V0, S1, 3
9D004760  00111940   SLL V1, S1, 5
9D004764  00621823   SUBU V1, V1, V0
9D004768  3C028000   LUI V0, -32768
9D00476C  244241A8   ADDIU V0, V0, 16808
9D004770  00431021   ADDU V0, V0, V1
9D004774  8C430014   LW V1, 20(V0)
9D004778  2463FFFF   ADDIU V1, V1, -1
9D00477C  0B4011E9   J 0x9D0047A4
9D004780  AC430014   SW V1, 20(V0)
48:                      else
49:                          territories[tA].troops -= 1;
9D004784  00121940   SLL V1, S2, 5
9D004788  00621823   SUBU V1, V1, V0
9D00478C  3C028000   LUI V0, -32768
9D004790  244241A8   ADDIU V0, V0, 16808
9D004794  00431021   ADDU V0, V0, V1
9D004798  8C430014   LW V1, 20(V0)
9D00479C  2463FFFF   ADDIU V1, V1, -1
9D0047A0  AC430014   SW V1, 20(V0)
50:                      if(attackers > 1 && defenders > 1)
9D0047A4  2A100002   SLTI S0, S0, 2
9D0047A8  1600001A   BNE S0, ZERO, 0x9D004814
9D0047AC  2A730002   SLTI S3, S3, 2
9D0047B0  16600018   BNE S3, ZERO, 0x9D004814
9D0047B4  3C028000   LUI V0, -32768
51:                      {
52:                          if(attackerDice[1] > defenderDice[1])
9D0047B8  8C430240   LW V1, 576(V0)
9D0047BC  8F8280DC   LW V0, -32548(GP)
9D0047C0  0043102A   SLT V0, V0, V1
9D0047C4  1040000B   BEQ V0, ZERO, 0x9D0047F4
9D0047C8  001210C0   SLL V0, S2, 3
53:                              territories[tD].troops -= 1;
9D0047CC  001110C0   SLL V0, S1, 3
9D0047D0  00111940   SLL V1, S1, 5
9D0047D4  00621823   SUBU V1, V1, V0
9D0047D8  3C028000   LUI V0, -32768
9D0047DC  244241A8   ADDIU V0, V0, 16808
9D0047E0  00431021   ADDU V0, V0, V1
9D0047E4  8C430014   LW V1, 20(V0)
9D0047E8  2463FFFF   ADDIU V1, V1, -1
9D0047EC  0B401205   J 0x9D004814
9D0047F0  AC430014   SW V1, 20(V0)
54:                          else
55:                              territories[tA].troops -= 1;
9D0047F4  00129140   SLL S2, S2, 5
9D0047F8  02429023   SUBU S2, S2, V0
9D0047FC  3C028000   LUI V0, -32768
9D004800  244241A8   ADDIU V0, V0, 16808
9D004804  00529021   ADDU S2, V0, S2
9D004808  8E420014   LW V0, 20(S2)
9D00480C  2442FFFF   ADDIU V0, V0, -1
9D004810  AE420014   SW V0, 20(S2)
56:                      }
57:                  
58:                      logBattle(currentPlayer, territories[tD].owner, attackerDice[0],
9D004814  001110C0   SLL V0, S1, 3
9D004818  00118940   SLL S1, S1, 5
9D00481C  02228823   SUBU S1, S1, V0
9D004820  3C028000   LUI V0, -32768
9D004824  244241A8   ADDIU V0, V0, 16808
9D004828  02228821   ADDU S1, S1, V0
9D00482C  8E250010   LW A1, 16(S1)
9D004830  3C028000   LUI V0, -32768
9D004834  8C46023C   LW A2, 572(V0)
9D004838  2442023C   ADDIU V0, V0, 572
9D00483C  8C470004   LW A3, 4(V0)
9D004840  8C420008   LW V0, 8(V0)
9D004844  AFA20010   SW V0, 16(SP)
9D004848  8F8280D8   LW V0, -32552(GP)
9D00484C  AFA20014   SW V0, 20(SP)
9D004850  8F8280DC   LW V0, -32548(GP)
9D004854  AFA20018   SW V0, 24(SP)
9D004858  0F401AFE   JAL logBattle
9D00485C  8F8480C8   LW A0, -32568(GP)
59:                              attackerDice[1], attackerDice[2], defenderDice[0],
60:                              defenderDice[1]);
61:                  }
9D004860  8FBF0034   LW RA, 52(SP)
9D004864  8FB30030   LW S3, 48(SP)
9D004868  8FB2002C   LW S2, 44(SP)
9D00486C  8FB10028   LW S1, 40(SP)
9D004870  8FB00024   LW S0, 36(SP)
9D004874  03E00008   JR RA
9D004878  27BD0038   ADDIU SP, SP, 56
62:                  
63:                  int predUnowned(int t)
64:                  {
65:                      return territories[t].owner == -1;
9D00487C  000410C0   SLL V0, A0, 3
9D004880  00042140   SLL A0, A0, 5
9D004884  00822023   SUBU A0, A0, V0
9D004888  3C028000   LUI V0, -32768
9D00488C  244241A8   ADDIU V0, V0, 16808
9D004890  00822021   ADDU A0, A0, V0
9D004894  8C820010   LW V0, 16(A0)
9D004898  24420001   ADDIU V0, V0, 1
66:                  }
9D00489C  03E00008   JR RA
9D0048A0  2C420001   SLTIU V0, V0, 1
67:                  int predOwnedCurrent(int t)
68:                  {
69:                      return territories[t].owner == currentPlayer;
9D0048A4  000410C0   SLL V0, A0, 3
9D0048A8  00042140   SLL A0, A0, 5
9D0048AC  00822023   SUBU A0, A0, V0
9D0048B0  3C028000   LUI V0, -32768
9D0048B4  244241A8   ADDIU V0, V0, 16808
9D0048B8  00822021   ADDU A0, A0, V0
9D0048BC  8C830010   LW V1, 16(A0)
9D0048C0  8F8280C8   LW V0, -32568(GP)
9D0048C4  00621026   XOR V0, V1, V0
9D0048D0  000410C0   SLL V0, A0, 3
70:                  }
9D0048C8  03E00008   JR RA
9D0048CC  2C420001   SLTIU V0, V0, 1
71:                  int predOwnerOther(int t)
72:                  {
73:                      return !predOwnedCurrent(t);
9D0048E8  8C830010   LW V1, 16(A0)
74:                  }
9D0048F4  03E00008   JR RA
75:                  int predAttackSource(int t)
76:                  {
77:                      if(territories[t].owner != currentPlayer)
9D0048FC  000410C0   SLL V0, A0, 3
9D004900  00041940   SLL V1, A0, 5
9D004904  00621023   SUBU V0, V1, V0
9D004908  3C038000   LUI V1, -32768
9D00490C  246341A8   ADDIU V1, V1, 16808
9D004910  00431021   ADDU V0, V0, V1
9D004914  8C420010   LW V0, 16(V0)
9D004918  8F8380C8   LW V1, -32568(GP)
9D00491C  54430032   BNEL V0, V1, 0x9D0049E8
9D004920  00001021   ADDU V0, ZERO, ZERO
78:                          return 0;
79:                      if(territories[t].troops == 1)
9D004924  000418C0   SLL V1, A0, 3
9D004928  00042940   SLL A1, A0, 5
9D00492C  00A32823   SUBU A1, A1, V1
9D004930  3C038000   LUI V1, -32768
9D004934  246341A8   ADDIU V1, V1, 16808
9D004938  00651821   ADDU V1, V1, A1
9D00493C  8C650014   LW A1, 20(V1)
9D004940  24030001   ADDIU V1, ZERO, 1
9D004944  10A30026   BEQ A1, V1, 0x9D0049E0
9D004948  000418C0   SLL V1, A0, 3
80:                          return 0;
9D0049E0  03E00008   JR RA
9D0049E4  00001021   ADDU V0, ZERO, ZERO
9D0049E8  03E00008   JR RA
9D0049EC  00000000   NOP
81:                      for(int i = 0; i < MAX_NEIGHBORS; i++)
82:                      {
83:                          if(territories[t].neighbors[i] != -1 &&
9D00494C  00042940   SLL A1, A0, 5
9D004950  00A32823   SUBU A1, A1, V1
9D004954  3C038000   LUI V1, -32768
9D004958  246341A8   ADDIU V1, V1, 16808
9D00495C  00651821   ADDU V1, V1, A1
9D004960  8C630004   LW V1, 4(V1)
9D004964  2405FFFF   ADDIU A1, ZERO, -1
9D004968  10650009   BEQ V1, A1, 0x9D004990
9D00496C  000328C0   SLL A1, V1, 3
9D004984  8C630010   LW V1, 16(V1)
9D004988  54430017   BNEL V0, V1, 0x9D0049E8
9D00498C  24020001   ADDIU V0, ZERO, 1
9D004990  000418C0   SLL V1, A0, 3
9D004994  00042140   SLL A0, A0, 5
9D004998  00832023   SUBU A0, A0, V1
9D00499C  3C038000   LUI V1, -32768
9D0049A0  246341A8   ADDIU V1, V1, 16808
9D0049A4  00642021   ADDU A0, V1, A0
9D0049A8  8C830008   LW V1, 8(A0)
9D0049AC  2404FFFF   ADDIU A0, ZERO, -1
9D0049B0  10640009   BEQ V1, A0, 0x9D0049D8
9D0049B4  000320C0   SLL A0, V1, 3
9D0049CC  8C630010   LW V1, 16(V1)
9D0049D0  54430005   BNEL V0, V1, 0x9D0049E8
9D0049D4  24020001   ADDIU V0, ZERO, 1
84:                                  territories[territories[t].neighbors[i]].owner !=
9D004970  00031940   SLL V1, V1, 5
9D004974  00651823   SUBU V1, V1, A1
9D004978  3C058000   LUI A1, -32768
9D00497C  24A541A8   ADDIU A1, A1, 16808
9D004980  00651821   ADDU V1, V1, A1
9D0049B8  00031940   SLL V1, V1, 5
9D0049BC  00641823   SUBU V1, V1, A0
9D0049C0  3C048000   LUI A0, -32768
9D0049C4  248441A8   ADDIU A0, A0, 16808
9D0049C8  00641821   ADDU V1, V1, A0
85:                                  currentPlayer)
86:                          {
87:                              return 1;
88:                          }
89:                      }
90:                      return 0;
9D0049D8  03E00008   JR RA
9D0049DC  00001021   ADDU V0, ZERO, ZERO
91:                  }
92:                  int predAttackTarget(int t)
9D004A48  8C420008   LW V0, 8(V0)
9D004A4C  00822026   XOR A0, A0, V0
9D004A50  0B401297   J 0x9D004A5C
9D004A54  2C840001   SLTIU A0, A0, 1
93:                  {
94:                      if(territories[t].owner == currentPlayer)
9D0049F0  000410C0   SLL V0, A0, 3
9D0049F4  00041940   SLL V1, A0, 5
9D0049F8  00621023   SUBU V0, V1, V0
9D0049FC  3C038000   LUI V1, -32768
9D004A00  246341A8   ADDIU V1, V1, 16808
9D004A04  00431021   ADDU V0, V0, V1
9D004A08  8C430010   LW V1, 16(V0)
9D004A0C  8F8280C8   LW V0, -32568(GP)
9D004A10  10620014   BEQ V1, V0, 0x9D004A64
9D004A14  00001021   ADDU V0, ZERO, ZERO
95:                          return 0;
9D004A5C  03E00008   JR RA
9D004A60  0004102B   SLTU V0, ZERO, A0
9D004A64  03E00008   JR RA
9D004A68  00000000   NOP
96:                      if(!isNeighbor(source, t))
9D004A18  8F8280E0   LW V0, -32544(GP)
97:                          return 0;
98:                      return 1;
99:                  }
100:                 int predMoveSource(int t)
101:                 {
102:                     if(territories[t].owner != currentPlayer)
9D004A6C  000410C0   SLL V0, A0, 3
9D004A70  00041940   SLL V1, A0, 5
9D004A74  00621023   SUBU V0, V1, V0
9D004A78  3C038000   LUI V1, -32768
9D004A7C  246341A8   ADDIU V1, V1, 16808
9D004A80  00431021   ADDU V0, V0, V1
9D004A84  8C420010   LW V0, 16(V0)
9D004A88  8F8380C8   LW V1, -32568(GP)
9D004A8C  54430032   BNEL V0, V1, 0x9D004B58
9D004A90  00001021   ADDU V0, ZERO, ZERO
103:                         return 0;
104:                     if(territories[t].troops == 1)
9D004A94  000418C0   SLL V1, A0, 3
9D004A98  00042940   SLL A1, A0, 5
9D004A9C  00A32823   SUBU A1, A1, V1
9D004AA0  3C038000   LUI V1, -32768
9D004AA4  246341A8   ADDIU V1, V1, 16808
9D004AA8  00651821   ADDU V1, V1, A1
9D004AAC  8C650014   LW A1, 20(V1)
9D004AB0  24030001   ADDIU V1, ZERO, 1
9D004AB4  10A30026   BEQ A1, V1, 0x9D004B50
9D004AB8  000418C0   SLL V1, A0, 3
105:                         return 0;
9D004B50  03E00008   JR RA
9D004B54  00001021   ADDU V0, ZERO, ZERO
9D004B58  03E00008   JR RA
9D004B5C  00000000   NOP
106:                     for(int i = 0; i < MAX_NEIGHBORS; i++)
107:                     {
108:                         if(territories[t].neighbors[i] != -1 &&
9D004ABC  00042940   SLL A1, A0, 5
9D004AC0  00A32823   SUBU A1, A1, V1
9D004AC4  3C038000   LUI V1, -32768
9D004AC8  246341A8   ADDIU V1, V1, 16808
9D004ACC  00651821   ADDU V1, V1, A1
9D004AD0  8C630004   LW V1, 4(V1)
9D004AD4  2405FFFF   ADDIU A1, ZERO, -1
9D004AD8  10650009   BEQ V1, A1, 0x9D004B00
9D004ADC  000328C0   SLL A1, V1, 3
9D004AF4  8C630010   LW V1, 16(V1)
9D004AF8  50430017   BEQL V0, V1, 0x9D004B58
9D004AFC  24020001   ADDIU V0, ZERO, 1
9D004B00  000418C0   SLL V1, A0, 3
9D004B04  00042140   SLL A0, A0, 5
9D004B08  00832023   SUBU A0, A0, V1
9D004B0C  3C038000   LUI V1, -32768
9D004B10  246341A8   ADDIU V1, V1, 16808
9D004B14  00642021   ADDU A0, V1, A0
9D004B18  8C830008   LW V1, 8(A0)
9D004B1C  2404FFFF   ADDIU A0, ZERO, -1
9D004B20  10640009   BEQ V1, A0, 0x9D004B48
9D004B24  000320C0   SLL A0, V1, 3
9D004B3C  8C630010   LW V1, 16(V1)
9D004B40  50430005   BEQL V0, V1, 0x9D004B58
9D004B44  24020001   ADDIU V0, ZERO, 1
109:                                 territories[territories[t].neighbors[i]].owner == currentPlayer)
9D004AE0  00031940   SLL V1, V1, 5
9D004AE4  00651823   SUBU V1, V1, A1
9D004AE8  3C058000   LUI A1, -32768
9D004AEC  24A541A8   ADDIU A1, A1, 16808
9D004AF0  00651821   ADDU V1, V1, A1
9D004B28  00031940   SLL V1, V1, 5
9D004B2C  00641823   SUBU V1, V1, A0
9D004B30  3C048000   LUI A0, -32768
9D004B34  248441A8   ADDIU A0, A0, 16808
9D004B38  00641821   ADDU V1, V1, A0
110:                         {
111:                             return 1;
112:                         }
113:                     }
114:                     return 0;
9D004B48  03E00008   JR RA
9D004B4C  00001021   ADDU V0, ZERO, ZERO
115:                 }
116:                 int predMoveTarget(int t)
117:                 {
118:                     if(t == source)
9D004B60  8F8280E0   LW V0, -32544(GP)
9D004B64  10820010   BEQ A0, V0, 0x9D004BA8
9D004B68  00041940   SLL V1, A0, 5
119:                         return 0;
9D004B94  2782807C   ADDIU V0, GP, -32644
9D004B98  7C44100A   LWX V0, A0(V0)
9D004B9C  38420001   XORI V0, V0, 1
9D004BA0  03E00008   JR RA
9D004BA4  2C420001   SLTIU V0, V0, 1
9D004BA8  03E00008   JR RA
9D004BAC  00001021   ADDU V0, ZERO, ZERO
9D004BB0  03E00008   JR RA
9D004BB4  00000000   NOP
120:                     if(territories[t].owner != currentPlayer)
9D004B6C  000410C0   SLL V0, A0, 3
9D004B70  00621023   SUBU V0, V1, V0
9D004B74  3C038000   LUI V1, -32768
9D004B78  246341A8   ADDIU V1, V1, 16808
9D004B7C  00431021   ADDU V0, V0, V1
9D004B80  8C430010   LW V1, 16(V0)
9D004B84  8F8280C8   LW V0, -32568(GP)
9D004B88  54620009   BNEL V1, V0, 0x9D004BB0
9D004B8C  00001021   ADDU V0, ZERO, ZERO
121:                         return 0;
122:                     if(connectedTerritories[t] != 1)
9D004B90  00042080   SLL A0, A0, 2
123:                         return 0;
124:                     return 1;
125:                 }
126:                 
127:                 // Find all connected territories by doing a breadth-first search of the
128:                 // territory graph. XXX: This uses quite a bit of stack, make sure there's
129:                 // enough space on the micro!
130:                 // In connectedTerritories: 
131:                 // -1 => visited and not connected, 0 => not visited, 1 => connected
132:                 void computeConnected(int sourceTerritory)
133:                 {
9D004BB8  27BDFFF8   ADDIU SP, SP, -8
134:                     int stack[NUM_TERRITORIES];
135:                     int stackIdx = 0;
136:                     int sourceOwner = territories[sourceTerritory].owner;
9D004BBC  000410C0   SLL V0, A0, 3
9D004BC0  00041940   SLL V1, A0, 5
9D004BC4  00621023   SUBU V0, V1, V0
9D004BC8  3C038000   LUI V1, -32768
9D004BCC  246341A8   ADDIU V1, V1, 16808
9D004BD0  00431021   ADDU V0, V0, V1
9D004BD4  8C490010   LW T1, 16(V0)
137:                     
138:                     for(int i = 0; i < NUM_TERRITORIES; i++)
139:                         connectedTerritories[i] = 0;
9D004BD8  2782807C   ADDIU V0, GP, -32644
9D004BDC  AC400000   SW ZERO, 0(V0)
9D004BE0  AF808080   SW ZERO, -32640(GP)
140:                 
141:                     stack[stackIdx++] = sourceTerritory;
9D004BE4  AFA40000   SW A0, 0(SP)
142:                     connectedTerritories[sourceTerritory] = 1;
9D004BE8  00042080   SLL A0, A0, 2
9D004BEC  00441021   ADDU V0, V0, A0
9D004BF0  24030001   ADDIU V1, ZERO, 1
9D004BF4  AC430000   SW V1, 0(V0)
143:                     
144:                     while(stackIdx > 0)
9D004CEC  5C60FFC8   BGTZL V1, 0x9D004C10
9D004CF0  2463FFFF   ADDIU V1, V1, -1
145:                     {
146:                         int t = stack[--stackIdx];
9D004C0C  2463FFFF   ADDIU V1, V1, -1
9D004C10  00031080   SLL V0, V1, 2
9D004C14  7FA2100A   LWX V0, V0(SP)
147:                         for(int i = 0; i < MAX_NEIGHBORS; i++)
148:                         {
149:                             if(territories[t].neighbors[i] == -1)
9D004BF8  3C058000   LUI A1, -32768
9D004BFC  24A541A8   ADDIU A1, A1, 16808
9D004C00  2407FFFF   ADDIU A3, ZERO, -1
9D004C18  000220C0   SLL A0, V0, 3
9D004C1C  00024140   SLL T0, V0, 5
9D004C20  01042023   SUBU A0, T0, A0
9D004C24  00A42021   ADDU A0, A1, A0
9D004C28  8C840004   LW A0, 4(A0)
9D004C2C  1087002F   BEQ A0, A3, 0x9D004CEC
9D004C30  00044080   SLL T0, A0, 2
9D004C84  000220C0   SLL A0, V0, 3
9D004C88  00021140   SLL V0, V0, 5
9D004C8C  00441023   SUBU V0, V0, A0
9D004C90  00A21021   ADDU V0, A1, V0
9D004C94  8C420008   LW V0, 8(V0)
9D004C98  10470014   BEQ V0, A3, 0x9D004CEC
9D004C9C  00022080   SLL A0, V0, 2
150:                                 break;
151:                             int neighbor = territories[t].neighbors[i];
152:                             if(connectedTerritories[neighbor])
9D004C04  2786807C   ADDIU A2, GP, -32644
9D004C34  7CC8400A   LWX T0, T0(A2)
9D004C38  55000013   BNEL T0, ZERO, 0x9D004C88
9D004C3C  000220C0   SLL A0, V0, 3
9D004CA0  7CC4200A   LWX A0, A0(A2)
9D004CA4  14800011   BNE A0, ZERO, 0x9D004CEC
9D004CA8  000220C0   SLL A0, V0, 3
153:                                 continue;
154:                             if(territories[neighbor].owner == sourceOwner)
9D004C40  000440C0   SLL T0, A0, 3
9D004C44  00045140   SLL T2, A0, 5
9D004C48  01484023   SUBU T0, T2, T0
9D004C4C  01054021   ADDU T0, T0, A1
9D004C50  8D080010   LW T0, 16(T0)
9D004C54  11090005   BEQ T0, T1, 0x9D004C6C
9D004C58  00034080   SLL T0, V1, 2
9D004CAC  00024140   SLL T0, V0, 5
9D004CB0  01042023   SUBU A0, T0, A0
9D004CB4  00852021   ADDU A0, A0, A1
9D004CB8  8C840010   LW A0, 16(A0)
9D004CBC  54890009   BNEL A0, T1, 0x9D004CE4
9D004CC0  00021080   SLL V0, V0, 2
155:                             {
156:                                 stack[stackIdx++] = neighbor;
9D004C6C  03A84021   ADDU T0, SP, T0
9D004C70  AD040000   SW A0, 0(T0)
9D004C74  24630001   ADDIU V1, V1, 1
9D004CC4  00032080   SLL A0, V1, 2
9D004CC8  03A42021   ADDU A0, SP, A0
9D004CCC  AC820000   SW V0, 0(A0)
9D004CD0  24630001   ADDIU V1, V1, 1
157:                                 connectedTerritories[neighbor] = 1;
9D004C08  240B0001   ADDIU T3, ZERO, 1
9D004C78  00042080   SLL A0, A0, 2
9D004C7C  00C42021   ADDU A0, A2, A0
9D004C80  AC8B0000   SW T3, 0(A0)
9D004CD4  00021080   SLL V0, V0, 2
9D004CD8  00C21021   ADDU V0, A2, V0
9D004CDC  0B40133B   J 0x9D004CEC
9D004CE0  AC4B0000   SW T3, 0(V0)
158:                             }
159:                             else
160:                                 connectedTerritories[neighbor] = -1;
9D004C5C  00042080   SLL A0, A0, 2
9D004C60  00C42021   ADDU A0, A2, A0
9D004C64  0B401321   J 0x9D004C84
9D004C68  AC870000   SW A3, 0(A0)
9D004CE4  00C21021   ADDU V0, A2, V0
9D004CE8  AC470000   SW A3, 0(V0)
161:                         }
162:                     }
163:                 }
9D004CF4  03E00008   JR RA
9D004CF8  27BD0008   ADDIU SP, SP, 8
---  /home/jacob/Documents/477/RISK/game/log.c  ---------------------------------------------------------
1:                   // log.c:
2:                   // Game logs: creating and storing
3:                   //
4:                   // Part of R.I.S.K
5:                   // ECE 477 Group 2, Spring 2015
6:                   
7:                   #include "types.h"
8:                   #include "log.h"
9:                   #include "io.h"
10:                  
11:                  #include <stdlib.h>
12:                  
13:                  #ifdef HEAP
14:                  LogEntry * gamelog;
15:                  int gamelogCapacity;
16:                  int gamelogSize;
17:                  #else
18:                  LogEntry stLog[4000];
19:                  LogEntry * gamelog = stLog;
20:                  int gamelogCapacity = 4000;
21:                  int gamelogSize;
22:                  #endif
23:                  
24:                  void addLogEntry(LogEntry entry)
25:                  {
9D006B60  27BDFFE8   ADDIU SP, SP, -24
9D006B64  AFBF0014   SW RA, 20(SP)
26:                      if(gamelogSize < gamelogCapacity)
9D006B68  8F8280E8   LW V0, -32536(GP)
9D006B6C  8F838014   LW V1, -32748(GP)
9D006B70  0043182A   SLT V1, V0, V1
9D006B74  10600007   BEQ V1, ZERO, 0x9D006B94
9D006B78  00021880   SLL V1, V0, 2
27:                      {
28:                          gamelog[gamelogSize++] = entry;
9D006B7C  8F858010   LW A1, -32752(GP)
9D006B80  00A31821   ADDU V1, A1, V1
9D006B84  AC640000   SW A0, 0(V1)
9D006B88  24420001   ADDIU V0, V0, 1
29:                          return;
9D006B8C  0B401AED   J 0x9D006BB4
9D006B90  AF8280E8   SW V0, -32536(GP)
30:                      }
31:                  
32:                  #ifdef HEAP
33:                      gamelogCapacity += 2000;
34:                      gamelog = realloc(gamelog, gamelogCapacity);
35:                      if(!gamelog)
36:                      {
37:                          PANIC("failed to allocate memory for game log");
38:                      }
39:                      gamelog[gamelogSize++] = entry;
40:                  #else
41:                      PANIC("game log overflowed, no heap available");
9D006B94  24040029   ADDIU A0, ZERO, 41
9D006B98  3C059D01   LUI A1, -25343
9D006B9C  24A58F1C   ADDIU A1, A1, -28900
9D006BA0  3C069D01   LUI A2, -25343
9D006BA4  24C68F54   ADDIU A2, A2, -28844
9D006BA8  3C079D01   LUI A3, -25343
9D006BAC  0F401341   JAL panic
9D006BB0  24E78F2C   ADDIU A3, A3, -28884
42:                  #endif
43:                  }
9D006BB4  8FBF0014   LW RA, 20(SP)
9D006BB8  03E00008   JR RA
9D006BBC  27BD0018   ADDIU SP, SP, 24
44:                  
45:                  void clearLog()
46:                  {
47:                      gamelogSize = 0;
48:                  }
9D006BC0  03E00008   JR RA
9D006BC4  AF8080E8   SW ZERO, -32536(GP)
49:                  
50:                  void logAttack(int aPlayer, int dPlayer, int aTerritory, int dTerritory)
51:                  {
9D006BC8  27BDFFE8   ADDIU SP, SP, -24
9D006BCC  AFBF0014   SW RA, 20(SP)
52:                      LogEntry le = {
9D006BD0  24020001   ADDIU V0, ZERO, 1
9D006BD4  7C825204   INS V0, A0, 8, 3
9D006BD8  7CA26AC4   INS V0, A1, 11, 3
9D006BDC  7CC29B84   INS V0, A2, 14, 6
9D006BE0  7CE2CD04   INS V0, A3, 20, 6
53:                          .attack = {LOG_ATTACK, aPlayer, dPlayer, aTerritory, dTerritory}
54:                      };
55:                      addLogEntry(le);
9D006BE4  0F401AD8   JAL addLogEntry
9D006BE8  00402021   ADDU A0, V0, ZERO
56:                  }
9D006BEC  8FBF0014   LW RA, 20(SP)
9D006BF0  03E00008   JR RA
9D006BF4  27BD0018   ADDIU SP, SP, 24
57:                  
58:                  void logBattle(int aPlayer, int dPlayer, int aD1, int aD2, int aD3, 
59:                          int dD1, int dD2)
60:                  {
9D006BF8  27BDFFE8   ADDIU SP, SP, -24
9D006BFC  AFBF0014   SW RA, 20(SP)
61:                      LogEntry le = {
9D006C00  24020002   ADDIU V0, ZERO, 2
9D006C04  7C825204   INS V0, A0, 8, 3
9D006C08  7CA26AC4   INS V0, A1, 11, 3
9D006C0C  7CC28384   INS V0, A2, 14, 3
9D006C10  7CE29C44   INS V0, A3, 17, 3
9D006C14  8FA30028   LW V1, 40(SP)
9D006C18  7C62B504   INS V0, V1, 20, 3
9D006C1C  8FA3002C   LW V1, 44(SP)
9D006C20  7C62CDC4   INS V0, V1, 23, 3
9D006C24  8FA30030   LW V1, 48(SP)
9D006C28  7C62E684   INS V0, V1, 26, 3
62:                          .battle = {LOG_BATTLE, aPlayer, dPlayer, aD1, aD2, aD3, dD1, dD2}
63:                      };
64:                      addLogEntry(le);
9D006C2C  0F401AD8   JAL addLogEntry
9D006C30  00402021   ADDU A0, V0, ZERO
65:                  }
9D006C34  8FBF0014   LW RA, 20(SP)
9D006C38  03E00008   JR RA
9D006C3C  27BD0018   ADDIU SP, SP, 24
66:                  
67:                  void logConquer(int aPlayer, int territory, int troops)
68:                  {
9D006C40  27BDFFE8   ADDIU SP, SP, -24
9D006C44  AFBF0014   SW RA, 20(SP)
69:                      LogEntry le = {
9D006C48  24020003   ADDIU V0, ZERO, 3
9D006C4C  7C825204   INS V0, A0, 8, 3
9D006C50  7CA282C4   INS V0, A1, 11, 6
9D006C54  7CC2E444   INS V0, A2, 17, 12
70:                          .conquer = {LOG_CONQUER, aPlayer, territory, troops}
71:                      };
72:                      addLogEntry(le);
9D006C58  0F401AD8   JAL addLogEntry
9D006C5C  00402021   ADDU A0, V0, ZERO
73:                  }
9D006C60  8FBF0014   LW RA, 20(SP)
9D006C64  03E00008   JR RA
9D006C68  27BD0018   ADDIU SP, SP, 24
74:                  void logMove(int player, int sTerritory, int dTerritory, int troops)
75:                  {
9D006C6C  27BDFFE8   ADDIU SP, SP, -24
9D006C70  AFBF0014   SW RA, 20(SP)
76:                      LogEntry le = {
9D006C74  24020004   ADDIU V0, ZERO, 4
9D006C78  7C825204   INS V0, A0, 8, 3
9D006C7C  7CA282C4   INS V0, A1, 11, 6
9D006C80  7CC2B444   INS V0, A2, 17, 6
9D006C84  7CE2FDC4   INS V0, A3, 23, 9
77:                          .move = {LOG_MOVE, player, sTerritory, dTerritory, troops}
78:                      };
79:                      addLogEntry(le);
9D006C88  0F401AD8   JAL addLogEntry
9D006C8C  00402021   ADDU A0, V0, ZERO
80:                  }
9D006C90  8FBF0014   LW RA, 20(SP)
9D006C94  03E00008   JR RA
9D006C98  27BD0018   ADDIU SP, SP, 24
81:                  void logCard(int player, CardType cardtype, int territory)
82:                  {
9D006C9C  27BDFFE8   ADDIU SP, SP, -24
9D006CA0  AFBF0014   SW RA, 20(SP)
83:                      LogEntry le = {
9D006CA4  24020005   ADDIU V0, ZERO, 5
9D006CA8  7C825204   INS V0, A0, 8, 3
9D006CAC  7CA262C4   INS V0, A1, 11, 2
9D006CB0  7CC29B44   INS V0, A2, 13, 7
84:                          .cardgiven = {LOG_CARD_GIVEN, player, cardtype, territory}
85:                      };
86:                      addLogEntry(le);
9D006CB4  0F401AD8   JAL addLogEntry
9D006CB8  00402021   ADDU A0, V0, ZERO
87:                  }
9D006CBC  8FBF0014   LW RA, 20(SP)
9D006CC0  03E00008   JR RA
9D006CC4  27BD0018   ADDIU SP, SP, 24
88:                  void logExchange(int player, CardType type1, CardType type2, CardType type3, 
89:                          int troops)
90:                  {
9D006CC8  27BDFFE8   ADDIU SP, SP, -24
9D006CCC  AFBF0014   SW RA, 20(SP)
91:                      LogEntry le = {
9D006CD0  24020006   ADDIU V0, ZERO, 6
9D006CD4  7C825204   INS V0, A0, 8, 3
9D006CD8  7CA262C4   INS V0, A1, 11, 2
9D006CDC  7CC27344   INS V0, A2, 13, 2
9D006CE0  7CE283C4   INS V0, A3, 15, 2
9D006CE4  8FA30028   LW V1, 40(SP)
9D006CE8  7C62E444   INS V0, V1, 17, 12
92:                          .exchange = {LOG_CARD_EXCHANGE, player, type1, type2, type3, troops}
93:                      };
94:                      addLogEntry(le);
9D006CEC  0F401AD8   JAL addLogEntry
9D006CF0  00402021   ADDU A0, V0, ZERO
95:                  }
9D006CF4  8FBF0014   LW RA, 20(SP)
9D006CF8  03E00008   JR RA
9D006CFC  27BD0018   ADDIU SP, SP, 24
96:                  
97:                  
98:                  static int loggingPlayer = 0;
99:                  static int loggedTroops[NUM_TERRITORIES] = {0};
100:                 void writeReinforceLogs()
101:                 {
9D006D00  27BDFFE8   ADDIU SP, SP, -24
9D006D04  AFBF0014   SW RA, 20(SP)
102:                     for(int i = 0; i < NUM_TERRITORIES; i++)
103:                     {
104:                         if(loggedTroops[i] != 0)
9D006D08  8F828074   LW V0, -32652(GP)
9D006D0C  50400009   BEQL V0, ZERO, 0x9D006D34
9D006D10  8F828078   LW V0, -32648(GP)
9D006D30  8F828078   LW V0, -32648(GP)
9D006D34  1040000A   BEQ V0, ZERO, 0x9D006D60
9D006D38  8FBF0014   LW RA, 20(SP)
105:                         {
106:                             LogEntry le = {
9D006D14  00002021   ADDU A0, ZERO, ZERO
9D006D18  8F838070   LW V1, -32656(GP)
9D006D1C  7C645204   INS A0, V1, 8, 3
9D006D20  7C0482C4   INS A0, ZERO, 11, 6
9D006D3C  00002021   ADDU A0, ZERO, ZERO
9D006D40  8F838070   LW V1, -32656(GP)
9D006D44  7C645204   INS A0, V1, 8, 3
9D006D48  24030001   ADDIU V1, ZERO, 1
9D006D4C  7C6482C4   INS A0, V1, 11, 6
107:                                 .reinforce = {LOG_REINFORCE, loggingPlayer, i, loggedTroops[i]}
108:                             };
109:                             addLogEntry(le);
9D006D24  0F401AD8   JAL addLogEntry
9D006D28  7C44E444   INS A0, V0, 17, 12
9D006D50  0F401AD8   JAL addLogEntry
9D006D54  7C44E444   INS A0, V0, 17, 12
110:                             loggedTroops[i] = 0;
9D006D2C  AF808074   SW ZERO, -32652(GP)
9D006D58  AF808078   SW ZERO, -32648(GP)
111:                         }
112:                     }
113:                 }
9D006D5C  8FBF0014   LW RA, 20(SP)
9D006D60  03E00008   JR RA
9D006D64  27BD0018   ADDIU SP, SP, 24
114:                 
115:                 void logReinforce(int player, int territory, int troops)
116:                 {
9D006D68  27BDFFE0   ADDIU SP, SP, -32
9D006D6C  AFBF001C   SW RA, 28(SP)
9D006D70  AFB20018   SW S2, 24(SP)
9D006D74  AFB10014   SW S1, 20(SP)
9D006D78  AFB00010   SW S0, 16(SP)
9D006D7C  00808821   ADDU S1, A0, ZERO
9D006D80  00A08021   ADDU S0, A1, ZERO
117:                     if(territory == -1)
9D006D84  2402FFFF   ADDIU V0, ZERO, -1
9D006D88  14A20005   BNE A1, V0, 0x9D006DA0
9D006D8C  00C09021   ADDU S2, A2, ZERO
118:                     {
119:                         writeReinforceLogs();
9D006D90  0F401B40   JAL writeReinforceLogs
9D006D94  00000000   NOP
120:                         return;
9D006D98  0B401B7B   J 0x9D006DEC
9D006D9C  8FBF001C   LW RA, 28(SP)
121:                     }
122:                 
123:                     // Each log has only 12 bits for troop number, so in the rare case where
124:                     // some player is placing more than that, we need to write out immediately.
125:                     if(player != loggingPlayer || loggedTroops[territory] + troops >= 0xFFF)
9D006DA0  8F828070   LW V0, -32656(GP)
9D006DA4  14820007   BNE A0, V0, 0x9D006DC4
9D006DA8  00051080   SLL V0, A1, 2
9D006DAC  27838074   ADDIU V1, GP, -32652
9D006DB0  7C62100A   LWX V0, V0(V1)
9D006DB4  00C21021   ADDU V0, A2, V0
9D006DB8  28420FFF   SLTI V0, V0, 4095
9D006DBC  54400004   BNEL V0, ZERO, 0x9D006DD0
9D006DC0  AF918070   SW S1, -32656(GP)
126:                         writeReinforceLogs();
9D006DC4  0F401B40   JAL writeReinforceLogs
9D006DC8  00000000   NOP
127:                 
128:                     loggingPlayer = player;
9D006DCC  AF918070   SW S1, -32656(GP)
129:                     loggedTroops[territory] += troops;
9D006DD0  00108080   SLL S0, S0, 2
9D006DD4  27828074   ADDIU V0, GP, -32652
9D006DD8  00508021   ADDU S0, V0, S0
9D006DDC  8E020000   LW V0, 0(S0)
9D006DE0  00529021   ADDU S2, V0, S2
9D006DE4  AE120000   SW S2, 0(S0)
130:                 }
9D006DE8  8FBF001C   LW RA, 28(SP)
9D006DEC  8FB20018   LW S2, 24(SP)
9D006DF0  8FB10014   LW S1, 20(SP)
9D006DF4  8FB00010   LW S0, 16(SP)
9D006DF8  03E00008   JR RA
9D006DFC  27BD0020   ADDIU SP, SP, 32
---  /home/jacob/Documents/477/RISK/game/game.c  --------------------------------------------------------
1:                   // game.c:
2:                   // Main game loop, game initialization, and game flow.
3:                   //
4:                   // Part of R.I.S.K
5:                   // ECE 477 Group 2, Spring 2015
6:                   
7:                   #include "game.h"
8:                   #include "types.h"
9:                   #include "territory.h"
10:                  #include "gamedata.h"
11:                  #include "io.h"
12:                  #include "util.h"
13:                  #include "cards.h"
14:                  #include "log.h"
15:                  // Global variables
16:                  int numPlayers;
17:                  int randomTerritories;
18:                  int multipleDeploy;
19:                  // cardValueScheme is handled by cards.c
20:                  
21:                  int currentPlayer;
22:                  int source;
23:                  int destination;
24:                  int attackerDice[3];
25:                  int defenderDice[2];
26:                  
27:                  // Game variables that don't need to be exposed to the IO systems
28:                  static State state;
29:                  static int firstPlayer;
30:                  static int territoriesRemaining;
31:                  static int numTroops;
32:                  static int deployTroopsLeft[MAX_PLAYERS];
33:                  static int mustTrade;
34:                  static int needCard;
35:                  static int currentOption;
36:                  static int reinforceMenu;
37:                  static int confirm;
38:                  
39:                  void gameInput(Input input)
40:                  {
9D0038A0  27BDFFE8   ADDIU SP, SP, -24
9D0038A4  AFBF0014   SW RA, 20(SP)
41:                      switch(state)
9D0038A8  8F828044   LW V0, -32700(GP)
9D0038AC  2C42000C   SLTIU V0, V0, 12
9D0038B0  50400044   BEQL V0, ZERO, 0x9D0039C4
9D0038B4  24040044   ADDIU A0, ZERO, 68
9D0038B8  8F838044   LW V1, -32700(GP)
9D0038BC  00031880   SLL V1, V1, 2
9D0038C0  3C029D00   LUI V0, -25344
9D0038C4  244238D4   ADDIU V0, V0, 14548
9D0038C8  7C43100A   LWX V0, V1(V0)
9D0038CC  00400008   JR V0
9D0038D0  00000000   NOP
42:                      {
43:                          case INIT:
44:                              chooseOptions(input); break;
9D003904  0F400DBF   JAL chooseOptions
9D003908  00000000   NOP
9D00390C  0B400E78   J 0x9D0039E0
9D003910  00000000   NOP
45:                          case SELECT:
46:                              selectTerritories(input); break;
9D003914  0F400D53   JAL 0x9D00354C
9D003918  00000000   NOP
9D00391C  0B400E78   J 0x9D0039E0
9D003920  00000000   NOP
47:                          case DEPLOY:
48:                              deployTroops(input); break;
9D003924  0F400CE9   JAL deployTroops
9D003928  00000000   NOP
9D00392C  0B400E78   J 0x9D0039E0
9D003930  00000000   NOP
49:                          case REINFORCE:
50:                              reinforce(input); break;
9D003934  0F400C94   JAL reinforce
9D003938  00000000   NOP
9D00393C  0B400E78   J 0x9D0039E0
9D003940  00000000   NOP
51:                          case ATTACK1:
52:                              declareAttack(input); break;
9D003944  0F400C5F   JAL declareAttack
9D003948  00000000   NOP
9D00394C  0B400E78   J 0x9D0039E0
9D003950  00000000   NOP
53:                          case ATTACK2:
54:                              declareAttackTarget(input); break;
9D003954  0F400C31   JAL declareAttackTarget
9D003958  00000000   NOP
9D00395C  0B400E78   J 0x9D0039E0
9D003960  00000000   NOP
55:                          case BATTLE:
56:                              resolveBattle(input); break;
9D003964  0F400BD9   JAL resolveBattle
9D003968  00000000   NOP
9D00396C  0B400E78   J 0x9D0039E0
9D003970  00000000   NOP
57:                          case CONQUER:
58:                              conquerTerritory(input); break;
9D003974  0F400B6C   JAL conquerTerritory
9D003978  00000000   NOP
9D00397C  0B400E78   J 0x9D0039E0
9D003980  00000000   NOP
59:                          case MOVE1:
60:                              moveTroops(input); break;
9D003984  0F400B2C   JAL moveTroops
9D003988  00000000   NOP
9D00398C  0B400E78   J 0x9D0039E0
9D003990  00000000   NOP
61:                          case MOVE2:
62:                              moveTroopsTarget(input); break;
9D003994  0F400B07   JAL moveTroopsTarget
9D003998  00000000   NOP
9D00399C  0B400E78   J 0x9D0039E0
9D0039A0  00000000   NOP
63:                          case MOVE3:
64:                              moveTroopsNumber(input); break;
9D0039A4  0F400A8C   JAL moveTroopsNumber
9D0039A8  00000000   NOP
9D0039AC  0B400E78   J 0x9D0039E0
9D0039B0  00000000   NOP
65:                          case GAMEOVER:
66:                              gameOver(input); break;
9D0039B4  0F400A83   JAL gameOver
9D0039B8  00000000   NOP
9D0039BC  0B400E78   J 0x9D0039E0
9D0039C0  00000000   NOP
67:                          default:
68:                              PANIC("game in invalid state");
9D0039C4  3C059D00   LUI A1, -25344
9D0039C8  24A56B20   ADDIU A1, A1, 27424
9D0039CC  3C069D00   LUI A2, -25344
9D0039D0  24C66B54   ADDIU A2, A2, 27476
9D0039D4  3C079D00   LUI A3, -25344
9D0039D8  0F401341   JAL panic
9D0039DC  24E76B30   ADDIU A3, A3, 27440
69:                      }
70:                      updateText();
9D0039E0  0F40078C   JAL updateText
9D0039E4  00000000   NOP
71:                  }
9D0039E8  8FBF0014   LW RA, 20(SP)
9D0039EC  03E00008   JR RA
9D0039F0  27BD0018   ADDIU SP, SP, 24
72:                  
73:                  int cardInput(int card1, int card2, int card3)
74:                  {
9D00264C  27BDFFE8   ADDIU SP, SP, -24
9D002650  AFBF0014   SW RA, 20(SP)
9D002654  AFB00010   SW S0, 16(SP)
9D002658  00801821   ADDU V1, A0, ZERO
9D00265C  00A01021   ADDU V0, A1, ZERO
75:                      if(state != REINFORCE)
9D002660  24040003   ADDIU A0, ZERO, 3
9D002664  8F858044   LW A1, -32700(GP)
9D002668  14A4001A   BNE A1, A0, 0x9D0026D4
9D00266C  00C03821   ADDU A3, A2, ZERO
76:                          return 0;
9D0026D4  00008021   ADDU S0, ZERO, ZERO
77:                      int troops = exchangeCards(currentPlayer, card1, card2, card3);
9D002670  8F8480C8   LW A0, -32568(GP)
9D002674  00602821   ADDU A1, V1, ZERO
9D002678  0F400F7E   JAL exchangeCards
9D00267C  00403021   ADDU A2, V0, ZERO
9D002680  00408021   ADDU S0, V0, ZERO
78:                      numTroops += troops;
9D002684  8F82805C   LW V0, -32676(GP)
9D002688  00501021   ADDU V0, V0, S0
9D00268C  AF82805C   SW V0, -32676(GP)
79:                      if(hands[currentPlayer].cards < 5)
9D002690  8F8380C8   LW V1, -32568(GP)
9D002694  00031080   SLL V0, V1, 2
9D002698  00031900   SLL V1, V1, 4
9D00269C  00431021   ADDU V0, V0, V1
9D0026A0  00021880   SLL V1, V0, 2
9D0026A4  00431021   ADDU V0, V0, V1
9D0026A8  3C038000   LUI V1, -32768
9D0026AC  24630114   ADDIU V1, V1, 276
9D0026B0  00431021   ADDU V0, V0, V1
9D0026B4  8C420060   LW V0, 96(V0)
9D0026B8  28420005   SLTI V0, V0, 5
9D0026BC  54400001   BNEL V0, ZERO, 0x9D0026C4
9D0026C0  AF808060   SW ZERO, -32672(GP)
80:                          mustTrade = 0;
81:                      updateText();
9D0026C4  0F40078C   JAL updateText
9D0026C8  00000000   NOP
82:                      return troops;
9D0026CC  0B4009B7   J 0x9D0026DC
9D0026D0  02001021   ADDU V0, S0, ZERO
83:                  }
9D0026D8  02001021   ADDU V0, S0, ZERO
9D0026DC  8FBF0014   LW RA, 20(SP)
9D0026E0  8FB00010   LW S0, 16(SP)
9D0026E4  03E00008   JR RA
9D0026E8  27BD0018   ADDIU SP, SP, 24
84:                  
85:                  void updateText()
86:                  {
9D001E30  27BDFFE8   ADDIU SP, SP, -24
9D001E34  AFBF0014   SW RA, 20(SP)
9D001E38  AFB00010   SW S0, 16(SP)
87:                      switch(state)
9D001E3C  8F828044   LW V0, -32700(GP)
9D001E40  2C42000C   SLTIU V0, V0, 12
9D001E44  104001F6   BEQ V0, ZERO, 0x9D002620
9D001E48  240400FB   ADDIU A0, ZERO, 251
9D001E4C  8F838044   LW V1, -32700(GP)
9D001E50  00031880   SLL V1, V1, 2
9D001E54  3C029D00   LUI V0, -25344
9D001E58  24421E68   ADDIU V0, V0, 7784
9D001E5C  7C43100A   LWX V0, V1(V0)
9D001E60  00400008   JR V0
9D001E64  00000000   NOP
88:                      {
89:                          case INIT:
90:                              if(currentOption == OPTION_NUM_PLAYERS)
9D001E98  8F828048   LW V0, -32696(GP)
9D001E9C  1440000C   BNE V0, ZERO, 0x9D001ED0
9D001EA0  24030001   ADDIU V1, ZERO, 1
91:                              {
92:                                  setTextDisplay(0, "Number of players");
9D001EA4  00002021   ADDU A0, ZERO, ZERO
9D001EA8  3C059D00   LUI A1, -25344
9D001EAC  0F401D99   JAL setTextDisplay
9D001EB0  24A56758   ADDIU A1, A1, 26456
93:                                  setTextDisplay(1, "%d", numPlayers);
9D001EB4  24040001   ADDIU A0, ZERO, 1
9D001EB8  3C059D00   LUI A1, -25344
9D001EBC  24A5676C   ADDIU A1, A1, 26476
9D001EC0  0F401D99   JAL setTextDisplay
9D001EC4  8F8680D0   LW A2, -32560(GP)
94:                              }
95:                              else if(currentOption == OPTION_CARD_SCHEME)
9D001ED0  1443001E   BNE V0, V1, 0x9D001F4C
9D001ED4  24030002   ADDIU V1, ZERO, 2
96:                              {
97:                                  setTextDisplay(0, "Card exchange values");
9D001ED8  00002021   ADDU A0, ZERO, ZERO
9D001EDC  3C059D00   LUI A1, -25344
9D001EE0  0F401D99   JAL setTextDisplay
9D001EE4  24A56770   ADDIU A1, A1, 26480
98:                                  if(cardValueScheme == INCREASING)
9D001EE8  8F8280C0   LW V0, -32576(GP)
9D001EEC  14400007   BNE V0, ZERO, 0x9D001F0C
9D001EF0  24030001   ADDIU V1, ZERO, 1
99:                                      setTextDisplay(1, "Increasing");
9D001EF4  24040001   ADDIU A0, ZERO, 1
9D001EF8  3C059D00   LUI A1, -25344
9D001EFC  0F401D99   JAL setTextDisplay
9D001F00  24A56788   ADDIU A1, A1, 26504
100:                                 else if(cardValueScheme == INCREASING_ONE)
9D001F0C  14430007   BNE V0, V1, 0x9D001F2C
9D001F10  24030002   ADDIU V1, ZERO, 2
101:                                     setTextDisplay(1, "Increasing by 1");
9D001F14  24040001   ADDIU A0, ZERO, 1
9D001F18  3C059D00   LUI A1, -25344
9D001F1C  0F401D99   JAL setTextDisplay
9D001F20  24A56794   ADDIU A1, A1, 26516
102:                                 else if(cardValueScheme == SET_VALUE)
9D001F2C  54430026   BNEL V0, V1, 0x9D001FC8
9D001F30  24040002   ADDIU A0, ZERO, 2
103:                                     setTextDisplay(1, "Set Value");
9D001F34  24040001   ADDIU A0, ZERO, 1
9D001F38  3C059D00   LUI A1, -25344
9D001F3C  0F401D99   JAL setTextDisplay
9D001F40  24A567A4   ADDIU A1, A1, 26532
104:                             }
105:                             else if(currentOption == OPTION_RANDOM_TERRITORIES)
9D001F4C  14430012   BNE V0, V1, 0x9D001F98
9D001F50  24030003   ADDIU V1, ZERO, 3
106:                             {
107:                                 setTextDisplay(0, "Territory allocation");
9D001F54  00002021   ADDU A0, ZERO, ZERO
9D001F58  3C059D00   LUI A1, -25344
9D001F5C  0F401D99   JAL setTextDisplay
9D001F60  24A567B0   ADDIU A1, A1, 26544
108:                                 if(randomTerritories)
9D001F64  8F8280CC   LW V0, -32564(GP)
9D001F68  10400006   BEQ V0, ZERO, 0x9D001F84
9D001F6C  24040001   ADDIU A0, ZERO, 1
109:                                     setTextDisplay(1, "Random");
9D001F70  3C059D00   LUI A1, -25344
9D001F74  0F401D99   JAL setTextDisplay
9D001F78  24A567C8   ADDIU A1, A1, 26568
110:                                 else
111:                                     setTextDisplay(1, "Select");
9D001F84  3C059D00   LUI A1, -25344
9D001F88  0F401D99   JAL setTextDisplay
9D001F8C  24A567D0   ADDIU A1, A1, 26576
112:                             }
113:                             else if(currentOption == OPTION_MULTIPLE_DEPLOY)
9D001F98  1443000B   BNE V0, V1, 0x9D001FC8
9D001F9C  24040002   ADDIU A0, ZERO, 2
114:                             {
115:                                 setTextDisplay(0, "Troop deployment");
9D001FA0  00002021   ADDU A0, ZERO, ZERO
9D001FA4  3C059D00   LUI A1, -25344
9D001FA8  0F401D99   JAL setTextDisplay
9D001FAC  24A567D8   ADDIU A1, A1, 26584
116:                                 setTextDisplay(1, "%d at a time", multipleDeploy);
9D001FB0  24040001   ADDIU A0, ZERO, 1
9D001FB4  3C059D00   LUI A1, -25344
9D001FB8  24A567EC   ADDIU A1, A1, 26604
9D001FBC  0F401D99   JAL setTextDisplay
9D001FC0  8F8680E4   LW A2, -32540(GP)
117:                             }
118:                             setTextDisplay(2, "A: Start game");
9D001EC8  0B4007F2   J 0x9D001FC8
9D001ECC  24040002   ADDIU A0, ZERO, 2
9D001F04  0B4007F2   J 0x9D001FC8
9D001F08  24040002   ADDIU A0, ZERO, 2
9D001F24  0B4007F2   J 0x9D001FC8
9D001F28  24040002   ADDIU A0, ZERO, 2
9D001F44  0B4007F2   J 0x9D001FC8
9D001F48  24040002   ADDIU A0, ZERO, 2
9D001F7C  0B4007F2   J 0x9D001FC8
9D001F80  24040002   ADDIU A0, ZERO, 2
9D001F90  0B4007F2   J 0x9D001FC8
9D001F94  24040002   ADDIU A0, ZERO, 2
9D001FC4  24040002   ADDIU A0, ZERO, 2
9D001FC8  3C059D00   LUI A1, -25344
9D001FCC  0F401D99   JAL setTextDisplay
9D001FD0  24A567FC   ADDIU A1, A1, 26620
119:                             setTextDisplay(3, "B: Next option");
9D001FD4  24040003   ADDIU A0, ZERO, 3
9D001FD8  3C059D00   LUI A1, -25344
9D001FDC  0F401D99   JAL setTextDisplay
9D001FE0  24A5680C   ADDIU A1, A1, 26636
120:                             break;
9D001FE4  0B400990   J 0x9D002640
9D001FE8  8FBF0014   LW RA, 20(SP)
121:                         case SELECT:
122:                             setTextDisplay(0, "Player %d:", currentPlayer);
9D001FEC  00002021   ADDU A0, ZERO, ZERO
9D001FF0  3C059D00   LUI A1, -25344
9D001FF4  24A5681C   ADDIU A1, A1, 26652
9D001FF8  0F401D99   JAL setTextDisplay
9D001FFC  8F8680C8   LW A2, -32568(GP)
123:                             setTextDisplay(1, "Pick territory");
9D002000  24040001   ADDIU A0, ZERO, 1
9D002004  3C059D00   LUI A1, -25344
9D002008  0F401D99   JAL setTextDisplay
9D00200C  24A56828   ADDIU A1, A1, 26664
124:                             setTextDisplay(2, "A: Select");
9D002010  24040002   ADDIU A0, ZERO, 2
9D002014  3C059D00   LUI A1, -25344
9D002018  0F401D99   JAL setTextDisplay
9D00201C  24A56838   ADDIU A1, A1, 26680
125:                             setTextDisplay(3, "%d available", territoriesRemaining);
9D002020  24040003   ADDIU A0, ZERO, 3
9D002024  3C059D00   LUI A1, -25344
9D002028  24A56844   ADDIU A1, A1, 26692
9D00202C  0F401D99   JAL setTextDisplay
9D002030  8F86804C   LW A2, -32692(GP)
126:                             break;
9D002034  0B400990   J 0x9D002640
9D002038  8FBF0014   LW RA, 20(SP)
127:                         case DEPLOY:
128:                             if(!confirm)
9D00203C  8F82806C   LW V0, -32660(GP)
9D002040  14400028   BNE V0, ZERO, 0x9D0020E4
9D002044  00002021   ADDU A0, ZERO, ZERO
129:                             {
130:                                 setTextDisplay(0, "Player %d:", currentPlayer);
9D002048  3C059D00   LUI A1, -25344
9D00204C  24A5681C   ADDIU A1, A1, 26652
9D002050  0F401D99   JAL setTextDisplay
9D002054  8F8680C8   LW A2, -32568(GP)
131:                                 if(multipleDeploy > 1)
9D002058  8F8280E4   LW V0, -32540(GP)
9D00205C  28420002   SLTI V0, V0, 2
9D002060  1440000E   BNE V0, ZERO, 0x9D00209C
9D002064  24020001   ADDIU V0, ZERO, 1
132:                                 {
133:                                     setTextDisplay(1, "Deploy %d troop%s",
9D00206C  54C20004   BNEL A2, V0, 0x9D002080
9D002070  3C079D00   LUI A3, -25344
9D002074  3C079D00   LUI A3, -25344
9D002078  0B400821   J 0x9D002084
9D00207C  24E76750   ADDIU A3, A3, 26448
9D002080  24E76754   ADDIU A3, A3, 26452
9D002084  24040001   ADDIU A0, ZERO, 1
9D002088  3C059D00   LUI A1, -25344
9D00208C  0F401D99   JAL setTextDisplay
9D002090  24A56854   ADDIU A1, A1, 26708
134:                                             numTroops, numTroops == 1? "" : "s");
9D002068  8F86805C   LW A2, -32676(GP)
135:                                 }
136:                                 else
137:                                 {
138:                                     setTextDisplay(1, "Deploy troop");
9D00209C  24040001   ADDIU A0, ZERO, 1
9D0020A0  3C059D00   LUI A1, -25344
9D0020A4  0F401D99   JAL setTextDisplay
9D0020A8  24A56868   ADDIU A1, A1, 26728
139:                                 }
140:                                 setTextDisplay(2, "A: Place troop");
9D002094  0B40082C   J 0x9D0020B0
9D002098  24040002   ADDIU A0, ZERO, 2
9D0020AC  24040002   ADDIU A0, ZERO, 2
9D0020B0  3C059D00   LUI A1, -25344
9D0020B4  0F401D99   JAL setTextDisplay
9D0020B8  24A56878   ADDIU A1, A1, 26744
141:                                 setTextDisplay(3, "%d troops left", deployTroopsLeft[currentPlayer]);
9D0020BC  8F8280C8   LW V0, -32568(GP)
9D0020C0  00021080   SLL V0, V0, 2
9D0020C4  24040003   ADDIU A0, ZERO, 3
9D0020C8  3C059D00   LUI A1, -25344
9D0020CC  24A56888   ADDIU A1, A1, 26760
9D0020D0  27868054   ADDIU A2, GP, -32684
9D0020D4  0F401D99   JAL setTextDisplay
9D0020D8  7CC2300A   LWX A2, V0(A2)
142:                             }
143:                             else
144:                             {
145:                                 setTextDisplay(0, "All troops have been");
9D0020E4  3C059D00   LUI A1, -25344
9D0020E8  0F401D99   JAL setTextDisplay
9D0020EC  24A56898   ADDIU A1, A1, 26776
146:                                 setTextDisplay(1, "deployed.");
9D0020F0  24040001   ADDIU A0, ZERO, 1
9D0020F4  3C059D00   LUI A1, -25344
9D0020F8  0F401D99   JAL setTextDisplay
9D0020FC  24A568B0   ADDIU A1, A1, 26800
147:                                 setTextDisplay(2, "");
9D002100  24040002   ADDIU A0, ZERO, 2
9D002104  3C059D00   LUI A1, -25344
9D002108  0F401D99   JAL setTextDisplay
9D00210C  24A56750   ADDIU A1, A1, 26448
148:                                 setTextDisplay(3, "B: Begin play");
9D002110  24040003   ADDIU A0, ZERO, 3
9D002114  3C059D00   LUI A1, -25344
9D002118  0F401D99   JAL setTextDisplay
9D00211C  24A568BC   ADDIU A1, A1, 26812
149:                             }
150:                             break;
151:                         case REINFORCE:
152:                             if(reinforceMenu && !confirm)
9D002128  8F828064   LW V0, -32668(GP)
9D00212C  10400026   BEQ V0, ZERO, 0x9D0021C8
9D002130  8F82805C   LW V0, -32676(GP)
9D002134  8F82806C   LW V0, -32660(GP)
9D002138  14400012   BNE V0, ZERO, 0x9D002184
9D00213C  00002021   ADDU A0, ZERO, ZERO
153:                             {
154:                                 setTextDisplay(0, "Options:");
9D002140  3C059D00   LUI A1, -25344
9D002144  0F401D99   JAL setTextDisplay
9D002148  24A568CC   ADDIU A1, A1, 26828
155:                                 setTextDisplay(1, "End game?");
9D00214C  24040001   ADDIU A0, ZERO, 1
9D002150  3C059D00   LUI A1, -25344
9D002154  0F401D99   JAL setTextDisplay
9D002158  24A568D8   ADDIU A1, A1, 26840
156:                                 setTextDisplay(2, "A: End game");
9D00215C  24040002   ADDIU A0, ZERO, 2
9D002160  3C059D00   LUI A1, -25344
9D002164  0F401D99   JAL setTextDisplay
9D002168  24A568E4   ADDIU A1, A1, 26852
157:                                 setTextDisplay(3, "B: Cancel");
9D00216C  24040003   ADDIU A0, ZERO, 3
9D002170  3C059D00   LUI A1, -25344
9D002174  0F401D99   JAL setTextDisplay
9D002178  24A568F0   ADDIU A1, A1, 26864
9D00217C  0B400990   J 0x9D002640
9D002180  8FBF0014   LW RA, 20(SP)
158:                             }
159:                             else if(reinforceMenu && confirm)
160:                             {
161:                                 setTextDisplay(0, "Really end game?");
9D002184  3C059D00   LUI A1, -25344
9D002188  0F401D99   JAL setTextDisplay
9D00218C  24A568FC   ADDIU A1, A1, 26876
162:                                 setTextDisplay(1, "");
9D002190  24040001   ADDIU A0, ZERO, 1
9D002194  3C059D00   LUI A1, -25344
9D002198  0F401D99   JAL setTextDisplay
9D00219C  24A56750   ADDIU A1, A1, 26448
163:                                 setTextDisplay(2, "A: Yes");
9D0021A0  24040002   ADDIU A0, ZERO, 2
9D0021A4  3C059D00   LUI A1, -25344
9D0021A8  0F401D99   JAL setTextDisplay
9D0021AC  24A56910   ADDIU A1, A1, 26896
164:                                 setTextDisplay(3, "B: No");
9D0021B0  24040003   ADDIU A0, ZERO, 3
9D0021B4  3C059D00   LUI A1, -25344
9D0021B8  0F401D99   JAL setTextDisplay
9D0021BC  24A56918   ADDIU A1, A1, 26904
9D0021C0  0B400990   J 0x9D002640
9D0021C4  8FBF0014   LW RA, 20(SP)
165:                             }
166:                             else if(numTroops == 0 && mustTrade)
9D0021C8  1440001E   BNE V0, ZERO, 0x9D002244
9D0021CC  8F828060   LW V0, -32672(GP)
9D0021D0  1040001D   BEQ V0, ZERO, 0x9D002248
9D0021D4  00002021   ADDU A0, ZERO, ZERO
167:                             {
168:                                 setTextDisplay(0, "%d cards in hand", 
9D0021D8  8F8380C8   LW V1, -32568(GP)
9D0021DC  00031080   SLL V0, V1, 2
9D0021E0  00031900   SLL V1, V1, 4
9D0021E4  00431021   ADDU V0, V0, V1
9D0021E8  00021880   SLL V1, V0, 2
9D0021EC  00431021   ADDU V0, V0, V1
9D0021F0  3C038000   LUI V1, -32768
9D0021F4  24630114   ADDIU V1, V1, 276
9D0021F8  00431021   ADDU V0, V0, V1
9D0021FC  3C059D00   LUI A1, -25344
9D002200  24A56920   ADDIU A1, A1, 26912
9D002204  0F401D99   JAL setTextDisplay
9D002208  8C460060   LW A2, 96(V0)
169:                                         hands[currentPlayer].cards);
170:                                 setTextDisplay(1, "You must exchange");
9D00220C  24040001   ADDIU A0, ZERO, 1
9D002210  3C059D00   LUI A1, -25344
9D002214  0F401D99   JAL setTextDisplay
9D002218  24A56934   ADDIU A1, A1, 26932
171:                                 setTextDisplay(2, "cards to continue");
9D00221C  24040002   ADDIU A0, ZERO, 2
9D002220  3C059D00   LUI A1, -25344
9D002224  0F401D99   JAL setTextDisplay
9D002228  24A56948   ADDIU A1, A1, 26952
172:                                 setTextDisplay(3, "B: Other options");            
9D00222C  24040003   ADDIU A0, ZERO, 3
9D002230  3C059D00   LUI A1, -25344
9D002234  0F401D99   JAL setTextDisplay
9D002238  24A5695C   ADDIU A1, A1, 26972
9D00223C  0B400990   J 0x9D002640
9D002240  8FBF0014   LW RA, 20(SP)
173:                             }
174:                             else
175:                             {
176:                                 setTextDisplay(0, "Reinforcements");
9D002244  00002021   ADDU A0, ZERO, ZERO
9D002248  3C059D00   LUI A1, -25344
9D00224C  0F401D99   JAL setTextDisplay
9D002250  24A56970   ADDIU A1, A1, 26992
177:                                 setTextDisplay(1, "%d troops left", numTroops);
9D002254  24040001   ADDIU A0, ZERO, 1
9D002258  3C059D00   LUI A1, -25344
9D00225C  24A56888   ADDIU A1, A1, 26760
9D002260  0F401D99   JAL setTextDisplay
9D002264  8F86805C   LW A2, -32676(GP)
178:                                 setTextDisplay(2, "A: Place troop");
9D002268  24040002   ADDIU A0, ZERO, 2
9D00226C  3C059D00   LUI A1, -25344
9D002270  0F401D99   JAL setTextDisplay
9D002274  24A56878   ADDIU A1, A1, 26744
179:                                 setTextDisplay(3, "B: Other options");
9D002278  24040003   ADDIU A0, ZERO, 3
9D00227C  3C059D00   LUI A1, -25344
9D002280  0F401D99   JAL setTextDisplay
9D002284  24A5695C   ADDIU A1, A1, 26972
180:                             }
181:                             break;
182:                         case ATTACK1:
183:                             if(!confirm)
9D002290  8F82806C   LW V0, -32660(GP)
9D002294  14400012   BNE V0, ZERO, 0x9D0022E0
9D002298  00002021   ADDU A0, ZERO, ZERO
184:                             {
185:                                 setTextDisplay(0, "Declare attacks");
9D00229C  3C059D00   LUI A1, -25344
9D0022A0  0F401D99   JAL setTextDisplay
9D0022A4  24A56980   ADDIU A1, A1, 27008
186:                                 setTextDisplay(1, "");
9D0022A8  24040001   ADDIU A0, ZERO, 1
9D0022AC  3C059D00   LUI A1, -25344
9D0022B0  0F401D99   JAL setTextDisplay
9D0022B4  24A56750   ADDIU A1, A1, 26448
187:                                 setTextDisplay(2, "A: Choose attacker");
9D0022B8  24040002   ADDIU A0, ZERO, 2
9D0022BC  3C059D00   LUI A1, -25344
9D0022C0  0F401D99   JAL setTextDisplay
9D0022C4  24A56990   ADDIU A1, A1, 27024
188:                                 setTextDisplay(3, "B: Stop attacking");
9D0022C8  24040003   ADDIU A0, ZERO, 3
9D0022CC  3C059D00   LUI A1, -25344
9D0022D0  0F401D99   JAL setTextDisplay
9D0022D4  24A569A4   ADDIU A1, A1, 27044
189:                             }
190:                             else
191:                             {
192:                                 setTextDisplay(0, "Really stop");
9D0022E0  3C059D00   LUI A1, -25344
9D0022E4  0F401D99   JAL setTextDisplay
9D0022E8  24A569B8   ADDIU A1, A1, 27064
193:                                 setTextDisplay(1, "attacking?");
9D0022EC  24040001   ADDIU A0, ZERO, 1
9D0022F0  3C059D00   LUI A1, -25344
9D0022F4  0F401D99   JAL setTextDisplay
9D0022F8  24A569C4   ADDIU A1, A1, 27076
194:                                 setTextDisplay(2, "A: Yes");
9D0022FC  24040002   ADDIU A0, ZERO, 2
9D002300  3C059D00   LUI A1, -25344
9D002304  0F401D99   JAL setTextDisplay
9D002308  24A56910   ADDIU A1, A1, 26896
195:                                 setTextDisplay(3, "B: No");
9D00230C  24040003   ADDIU A0, ZERO, 3
9D002310  3C059D00   LUI A1, -25344
9D002314  0F401D99   JAL setTextDisplay
9D002318  24A56918   ADDIU A1, A1, 26904
196:                             }
197:                             break;
198:                         case ATTACK2:
199:                             setTextDisplay(0, "Declare attacks");
9D002324  00002021   ADDU A0, ZERO, ZERO
9D002328  3C059D00   LUI A1, -25344
9D00232C  0F401D99   JAL setTextDisplay
9D002330  24A56980   ADDIU A1, A1, 27008
200:                             setTextDisplay(1, "(%s)", territories[source].name);
9D002334  8F8380E0   LW V1, -32544(GP)
9D002338  000320C0   SLL A0, V1, 3
9D00233C  00031140   SLL V0, V1, 5
9D002340  00441023   SUBU V0, V0, A0
9D002344  24040001   ADDIU A0, ZERO, 1
9D002348  3C059D00   LUI A1, -25344
9D00234C  24A569D0   ADDIU A1, A1, 27088
9D002350  3C068000   LUI A2, -32768
9D002354  24C641A8   ADDIU A2, A2, 16808
9D002358  0F401D99   JAL setTextDisplay
9D00235C  7CC2300A   LWX A2, V0(A2)
201:                             setTextDisplay(2, "A: Choose target");
9D002360  24040002   ADDIU A0, ZERO, 2
9D002364  3C059D00   LUI A1, -25344
9D002368  0F401D99   JAL setTextDisplay
9D00236C  24A569D8   ADDIU A1, A1, 27096
202:                             setTextDisplay(3, "B: Back");
9D002370  24040003   ADDIU A0, ZERO, 3
9D002374  3C059D00   LUI A1, -25344
9D002378  0F401D99   JAL setTextDisplay
9D00237C  24A569EC   ADDIU A1, A1, 27116
203:                             break;
9D002380  0B400990   J 0x9D002640
9D002384  8FBF0014   LW RA, 20(SP)
204:                         case BATTLE:
205:                             setTextDisplay(0, "%s vs", territories[source].name);
9D002388  8F8280E0   LW V0, -32544(GP)
9D00238C  000218C0   SLL V1, V0, 3
9D002390  00023140   SLL A2, V0, 5
9D002394  00C33023   SUBU A2, A2, V1
9D002398  3C108000   LUI S0, -32768
9D00239C  261041A8   ADDIU S0, S0, 16808
9D0023A0  00002021   ADDU A0, ZERO, ZERO
9D0023A4  3C059D00   LUI A1, -25344
9D0023A8  24A569F4   ADDIU A1, A1, 27124
9D0023AC  0F401D99   JAL setTextDisplay
9D0023B0  7E06300A   LWX A2, A2(S0)
206:                             setTextDisplay(1, "%s!", territories[destination].name);
9D0023B4  8F8280D4   LW V0, -32556(GP)
9D0023B8  000218C0   SLL V1, V0, 3
9D0023BC  00023140   SLL A2, V0, 5
9D0023C0  00C33023   SUBU A2, A2, V1
9D0023C4  24040001   ADDIU A0, ZERO, 1
9D0023C8  3C059D00   LUI A1, -25344
9D0023CC  24A569FC   ADDIU A1, A1, 27132
9D0023D0  0F401D99   JAL setTextDisplay
9D0023D4  7E06300A   LWX A2, A2(S0)
207:                             setTextDisplay(2, "A: Roll dice");
9D0023D8  24040002   ADDIU A0, ZERO, 2
9D0023DC  3C059D00   LUI A1, -25344
9D0023E0  0F401D99   JAL setTextDisplay
9D0023E4  24A56A00   ADDIU A1, A1, 27136
208:                             setTextDisplay(3, "B: Retreat");
9D0023E8  24040003   ADDIU A0, ZERO, 3
9D0023EC  3C059D00   LUI A1, -25344
9D0023F0  0F401D99   JAL setTextDisplay
9D0023F4  24A56A10   ADDIU A1, A1, 27152
209:                             break;
9D0023F8  0B400990   J 0x9D002640
9D0023FC  8FBF0014   LW RA, 20(SP)
210:                         case CONQUER:
211:                             setTextDisplay(0, "Move troops into");
9D002400  00002021   ADDU A0, ZERO, ZERO
9D002404  3C059D00   LUI A1, -25344
9D002408  0F401D99   JAL setTextDisplay
9D00240C  24A56A1C   ADDIU A1, A1, 27164
212:                             setTextDisplay(1, "%s", territories[destination].name);
9D002410  8F8380D4   LW V1, -32556(GP)
9D002414  000320C0   SLL A0, V1, 3
9D002418  00031140   SLL V0, V1, 5
9D00241C  00441023   SUBU V0, V0, A0
9D002420  24040001   ADDIU A0, ZERO, 1
9D002424  3C059D00   LUI A1, -25344
9D002428  24A56A30   ADDIU A1, A1, 27184
9D00242C  3C068000   LUI A2, -32768
9D002430  24C641A8   ADDIU A2, A2, 16808
9D002434  0F401D99   JAL setTextDisplay
9D002438  7CC2300A   LWX A2, V0(A2)
213:                             setTextDisplay(2, "A: Confirm troops");
9D00243C  24040002   ADDIU A0, ZERO, 2
9D002440  3C059D00   LUI A1, -25344
9D002444  0F401D99   JAL setTextDisplay
9D002448  24A56A34   ADDIU A1, A1, 27188
214:                             setTextDisplay(3, "");
9D00244C  24040003   ADDIU A0, ZERO, 3
9D002450  3C059D00   LUI A1, -25344
9D002454  0F401D99   JAL setTextDisplay
9D002458  24A56750   ADDIU A1, A1, 26448
215:                             break;
9D00245C  0B400990   J 0x9D002640
9D002460  8FBF0014   LW RA, 20(SP)
216:                         case MOVE1:
217:                             if(!confirm)
9D002464  8F82806C   LW V0, -32660(GP)
9D002468  14400012   BNE V0, ZERO, 0x9D0024B4
9D00246C  00002021   ADDU A0, ZERO, ZERO
218:                             {
219:                                 setTextDisplay(0, "Make free move");
9D002470  3C059D00   LUI A1, -25344
9D002474  0F401D99   JAL setTextDisplay
9D002478  24A56A48   ADDIU A1, A1, 27208
220:                                 setTextDisplay(1, "");
9D00247C  24040001   ADDIU A0, ZERO, 1
9D002480  3C059D00   LUI A1, -25344
9D002484  0F401D99   JAL setTextDisplay
9D002488  24A56750   ADDIU A1, A1, 26448
221:                                 setTextDisplay(2, "A: Choose source");
9D00248C  24040002   ADDIU A0, ZERO, 2
9D002490  3C059D00   LUI A1, -25344
9D002494  0F401D99   JAL setTextDisplay
9D002498  24A56A58   ADDIU A1, A1, 27224
222:                                 setTextDisplay(3, "B: End turn");
9D00249C  24040003   ADDIU A0, ZERO, 3
9D0024A0  3C059D00   LUI A1, -25344
9D0024A4  0F401D99   JAL setTextDisplay
9D0024A8  24A56A6C   ADDIU A1, A1, 27244
223:                             }
224:                             else
225:                             {
226:                                 setTextDisplay(0, "Really end turn");
9D0024B4  3C059D00   LUI A1, -25344
9D0024B8  0F401D99   JAL setTextDisplay
9D0024BC  24A56A78   ADDIU A1, A1, 27256
227:                                 setTextDisplay(1, "without a move?");
9D0024C0  24040001   ADDIU A0, ZERO, 1
9D0024C4  3C059D00   LUI A1, -25344
9D0024C8  0F401D99   JAL setTextDisplay
9D0024CC  24A56A88   ADDIU A1, A1, 27272
228:                                 setTextDisplay(2, "A: Yes");
9D0024D0  24040002   ADDIU A0, ZERO, 2
9D0024D4  3C059D00   LUI A1, -25344
9D0024D8  0F401D99   JAL setTextDisplay
9D0024DC  24A56910   ADDIU A1, A1, 26896
229:                                 setTextDisplay(3, "B: No");
9D0024E0  24040003   ADDIU A0, ZERO, 3
9D0024E4  3C059D00   LUI A1, -25344
9D0024E8  0F401D99   JAL setTextDisplay
9D0024EC  24A56918   ADDIU A1, A1, 26904
230:                             }
231:                             break;
232:                         case MOVE2:
233:                             setTextDisplay(0, "Make free move");
9D0024F8  00002021   ADDU A0, ZERO, ZERO
9D0024FC  3C059D00   LUI A1, -25344
9D002500  0F401D99   JAL setTextDisplay
9D002504  24A56A48   ADDIU A1, A1, 27208
234:                             setTextDisplay(1, "(%s)", territories[source].name);
9D002508  8F8380E0   LW V1, -32544(GP)
9D00250C  000320C0   SLL A0, V1, 3
9D002510  00031140   SLL V0, V1, 5
9D002514  00441023   SUBU V0, V0, A0
9D002518  24040001   ADDIU A0, ZERO, 1
9D00251C  3C059D00   LUI A1, -25344
9D002520  24A569D0   ADDIU A1, A1, 27088
9D002524  3C068000   LUI A2, -32768
9D002528  24C641A8   ADDIU A2, A2, 16808
9D00252C  0F401D99   JAL setTextDisplay
9D002530  7CC2300A   LWX A2, V0(A2)
235:                             setTextDisplay(2, "A: Choose detination");
9D002534  24040002   ADDIU A0, ZERO, 2
9D002538  3C059D00   LUI A1, -25344
9D00253C  0F401D99   JAL setTextDisplay
9D002540  24A56A98   ADDIU A1, A1, 27288
236:                             setTextDisplay(3, "B: Back");
9D002544  24040003   ADDIU A0, ZERO, 3
9D002548  3C059D00   LUI A1, -25344
9D00254C  0F401D99   JAL setTextDisplay
9D002550  24A569EC   ADDIU A1, A1, 27116
237:                             break;
9D002554  0B400990   J 0x9D002640
9D002558  8FBF0014   LW RA, 20(SP)
238:                         case MOVE3:
239:                             setTextDisplay(0, "%s -->", territories[source].name);
9D00255C  8F8280E0   LW V0, -32544(GP)
9D002560  000218C0   SLL V1, V0, 3
9D002564  00023140   SLL A2, V0, 5
9D002568  00C33023   SUBU A2, A2, V1
9D00256C  3C108000   LUI S0, -32768
9D002570  261041A8   ADDIU S0, S0, 16808
9D002574  00002021   ADDU A0, ZERO, ZERO
9D002578  3C059D00   LUI A1, -25344
9D00257C  24A56AB0   ADDIU A1, A1, 27312
9D002580  0F401D99   JAL setTextDisplay
9D002584  7E06300A   LWX A2, A2(S0)
240:                             setTextDisplay(1, "%s", territories[destination].name);
9D002588  8F8280D4   LW V0, -32556(GP)
9D00258C  000218C0   SLL V1, V0, 3
9D002590  00023140   SLL A2, V0, 5
9D002594  00C33023   SUBU A2, A2, V1
9D002598  24040001   ADDIU A0, ZERO, 1
9D00259C  3C059D00   LUI A1, -25344
9D0025A0  24A56A30   ADDIU A1, A1, 27184
9D0025A4  0F401D99   JAL setTextDisplay
9D0025A8  7E06300A   LWX A2, A2(S0)
241:                             setTextDisplay(2, "A: Confirm number");
9D0025AC  24040002   ADDIU A0, ZERO, 2
9D0025B0  3C059D00   LUI A1, -25344
9D0025B4  0F401D99   JAL setTextDisplay
9D0025B8  24A56AB8   ADDIU A1, A1, 27320
242:                             setTextDisplay(3, "B: Back");
9D0025BC  24040003   ADDIU A0, ZERO, 3
9D0025C0  3C059D00   LUI A1, -25344
9D0025C4  0F401D99   JAL setTextDisplay
9D0025C8  24A569EC   ADDIU A1, A1, 27116
243:                             break;
9D0025CC  0B400990   J 0x9D002640
9D0025D0  8FBF0014   LW RA, 20(SP)
244:                         case GAMEOVER:
245:                             setTextDisplay(0, "Player %d wins!", currentPlayer);
9D0025D4  00002021   ADDU A0, ZERO, ZERO
9D0025D8  3C059D00   LUI A1, -25344
9D0025DC  24A56ACC   ADDIU A1, A1, 27340
9D0025E0  0F401D99   JAL setTextDisplay
9D0025E4  8F8680C8   LW A2, -32568(GP)
246:                             setTextDisplay(1, "   R   I   S   K    ");
9D0025E8  24040001   ADDIU A0, ZERO, 1
9D0025EC  3C059D00   LUI A1, -25344
9D0025F0  0F401D99   JAL setTextDisplay
9D0025F4  24A56ADC   ADDIU A1, A1, 27356
247:                             setTextDisplay(2, "  C H A M P I O N   ");
9D0025F8  24040002   ADDIU A0, ZERO, 2
9D0025FC  3C059D00   LUI A1, -25344
9D002600  0F401D99   JAL setTextDisplay
9D002604  24A56AF4   ADDIU A1, A1, 27380
248:                             setTextDisplay(3, "B: Start new game");
9D002608  24040003   ADDIU A0, ZERO, 3
9D00260C  3C059D00   LUI A1, -25344
9D002610  0F401D99   JAL setTextDisplay
9D002614  24A56B0C   ADDIU A1, A1, 27404
249:                             break;
9D002618  0B400990   J 0x9D002640
9D00261C  8FBF0014   LW RA, 20(SP)
250:                         default:
251:                             PANIC("game in invalid state");
9D002620  3C059D00   LUI A1, -25344
9D002624  24A56B20   ADDIU A1, A1, 27424
9D002628  3C069D00   LUI A2, -25344
9D00262C  24C66B48   ADDIU A2, A2, 27464
9D002630  3C079D00   LUI A3, -25344
9D002634  0F401341   JAL panic
9D002638  24E76B30   ADDIU A3, A3, 27440
252:                     }
253:                 }
9D0020DC  0B400990   J 0x9D002640
9D0020E0  8FBF0014   LW RA, 20(SP)
9D002120  0B400990   J 0x9D002640
9D002124  8FBF0014   LW RA, 20(SP)
9D002288  0B400990   J 0x9D002640
9D00228C  8FBF0014   LW RA, 20(SP)
9D0022D8  0B400990   J 0x9D002640
9D0022DC  8FBF0014   LW RA, 20(SP)
9D00231C  0B400990   J 0x9D002640
9D002320  8FBF0014   LW RA, 20(SP)
9D0024AC  0B400990   J 0x9D002640
9D0024B0  8FBF0014   LW RA, 20(SP)
9D0024F0  0B400990   J 0x9D002640
9D0024F4  8FBF0014   LW RA, 20(SP)
9D00263C  8FBF0014   LW RA, 20(SP)
9D002640  8FB00010   LW S0, 16(SP)
9D002644  03E00008   JR RA
9D002648  27BD0018   ADDIU SP, SP, 24
254:                 
255:                 void chooseOptions(Input input)
256:                 {
9D0036FC  27BDFFE8   ADDIU SP, SP, -24
257:                     if(input == ADVANCE)
9D003700  1480000C   BNE A0, ZERO, 0x9D003734
9D003704  AFBF0014   SW RA, 20(SP)
258:                     {
259:                         changeState(SELECT);
9D003708  0F4009F3   JAL changeState
9D00370C  24040001   ADDIU A0, ZERO, 1
260:                         if(randomTerritories)
9D003710  8F8280CC   LW V0, -32564(GP)
9D003714  50400060   BEQL V0, ZERO, 0x9D003898
9D003718  8FBF0014   LW RA, 20(SP)
261:                         {
262:                             allocateRandomTerritories();
9D00371C  0F400D9B   JAL allocateRandomTerritories
9D003720  00000000   NOP
263:                             changeState(DEPLOY);
9D003724  0F4009F3   JAL changeState
9D003728  24040002   ADDIU A0, ZERO, 2
264:                         }
265:                         return;
266:                     }
267:                     if(currentOption == OPTION_NUM_PLAYERS)
9D003734  8F828048   LW V0, -32696(GP)
9D003738  14400018   BNE V0, ZERO, 0x9D00379C
9D00373C  24030002   ADDIU V1, ZERO, 2
268:                     {
269:                         if(input == NEXT && numPlayers < MAX_PLAYERS)
9D003740  24020002   ADDIU V0, ZERO, 2
9D003744  14820008   BNE A0, V0, 0x9D003768
9D003748  24020003   ADDIU V0, ZERO, 3
9D00374C  8F8280D0   LW V0, -32560(GP)
9D003750  28430002   SLTI V1, V0, 2
9D003754  10600050   BEQ V1, ZERO, 0x9D003898
9D003758  8FBF0014   LW RA, 20(SP)
270:                             numPlayers += 1;
9D00375C  24420001   ADDIU V0, V0, 1
9D003760  0B400E25   J 0x9D003894
9D003764  AF8280D0   SW V0, -32560(GP)
271:                         else if(input == PREVIOUS && numPlayers > 2)
9D003768  14820008   BNE A0, V0, 0x9D00378C
9D00376C  24020001   ADDIU V0, ZERO, 1
9D003770  8F8280D0   LW V0, -32560(GP)
9D003774  28430003   SLTI V1, V0, 3
9D003778  14600047   BNE V1, ZERO, 0x9D003898
9D00377C  8FBF0014   LW RA, 20(SP)
272:                             numPlayers -= 1;
9D003780  2442FFFF   ADDIU V0, V0, -1
9D003784  0B400E25   J 0x9D003894
9D003788  AF8280D0   SW V0, -32560(GP)
273:                         else if(input == CANCEL)
9D00378C  14820041   BNE A0, V0, 0x9D003894
9D003790  24020002   ADDIU V0, ZERO, 2
274:                             currentOption = OPTION_RANDOM_TERRITORIES;
9D003794  0B400E25   J 0x9D003894
9D003798  AF828048   SW V0, -32696(GP)
275:                     }
276:                     else if(currentOption == OPTION_RANDOM_TERRITORIES)
9D00379C  5443000E   BNEL V0, V1, 0x9D0037D8
9D0037A0  24030003   ADDIU V1, ZERO, 3
277:                     {
278:                         if(input == NEXT || input == PREVIOUS)
9D0037A4  2482FFFE   ADDIU V0, A0, -2
9D0037A8  2C420002   SLTIU V0, V0, 2
9D0037AC  10400005   BEQ V0, ZERO, 0x9D0037C4
9D0037B0  24020001   ADDIU V0, ZERO, 1
279:                             randomTerritories = !randomTerritories;
9D0037B4  8F8280CC   LW V0, -32564(GP)
9D0037B8  2C420001   SLTIU V0, V0, 1
9D0037BC  0B400E25   J 0x9D003894
9D0037C0  AF8280CC   SW V0, -32564(GP)
280:                         else if(input == CANCEL)
9D0037C4  14820034   BNE A0, V0, 0x9D003898
9D0037C8  8FBF0014   LW RA, 20(SP)
281:                             currentOption = OPTION_MULTIPLE_DEPLOY;
9D0037CC  24020003   ADDIU V0, ZERO, 3
9D0037D0  0B400E25   J 0x9D003894
9D0037D4  AF828048   SW V0, -32696(GP)
282:                     }
283:                     else if(currentOption == OPTION_MULTIPLE_DEPLOY)
9D0037D8  14430018   BNE V0, V1, 0x9D00383C
9D0037DC  24030001   ADDIU V1, ZERO, 1
284:                     {
285:                         if(input == NEXT)
9D0037E0  24020002   ADDIU V0, ZERO, 2
9D0037E4  14820008   BNE A0, V0, 0x9D003808
9D0037E8  24020003   ADDIU V0, ZERO, 3
286:                             multipleDeploy = (multipleDeploy == 5? 1 : multipleDeploy + 2);
9D0037EC  8F8280E4   LW V0, -32540(GP)
9D0037F0  24030005   ADDIU V1, ZERO, 5
9D0037F4  14430002   BNE V0, V1, 0x9D003800
9D0037F8  24420002   ADDIU V0, V0, 2
9D0037FC  24020001   ADDIU V0, ZERO, 1
9D003800  0B400E25   J 0x9D003894
9D003804  AF8280E4   SW V0, -32540(GP)
287:                         else if(input == PREVIOUS)
9D003808  14820008   BNE A0, V0, 0x9D00382C
9D00380C  24020001   ADDIU V0, ZERO, 1
288:                             multipleDeploy = (multipleDeploy == 1? 5 : multipleDeploy - 2);
9D003810  8F8280E4   LW V0, -32540(GP)
9D003814  24030001   ADDIU V1, ZERO, 1
9D003818  14430002   BNE V0, V1, 0x9D003824
9D00381C  2442FFFE   ADDIU V0, V0, -2
9D003820  24020005   ADDIU V0, ZERO, 5
9D003824  0B400E25   J 0x9D003894
9D003828  AF8280E4   SW V0, -32540(GP)
289:                         else if(input == CANCEL)
9D00382C  50820019   BEQL A0, V0, 0x9D003894
9D003830  AF828048   SW V0, -32696(GP)
290:                             currentOption = OPTION_CARD_SCHEME;
291:                     }
292:                     else if(currentOption == OPTION_CARD_SCHEME)
9D00383C  14430016   BNE V0, V1, 0x9D003898
9D003840  8FBF0014   LW RA, 20(SP)
293:                     {
294:                         if(input == NEXT)
9D003844  24020002   ADDIU V0, ZERO, 2
9D003848  14820008   BNE A0, V0, 0x9D00386C
9D00384C  24020003   ADDIU V0, ZERO, 3
295:                             cardValueScheme = (cardValueScheme == 2? 0 : cardValueScheme + 1);
9D003850  8F8280C0   LW V0, -32576(GP)
9D003854  24030002   ADDIU V1, ZERO, 2
9D003858  14430002   BNE V0, V1, 0x9D003864
9D00385C  24420001   ADDIU V0, V0, 1
9D003860  00001021   ADDU V0, ZERO, ZERO
9D003864  0B400E25   J 0x9D003894
9D003868  AF8280C0   SW V0, -32576(GP)
296:                         else if(input == PREVIOUS)
9D00386C  14820007   BNE A0, V0, 0x9D00388C
9D003870  24020001   ADDIU V0, ZERO, 1
297:                             cardValueScheme = (cardValueScheme == 0? 2 : cardValueScheme - 1);
9D003874  8F8280C0   LW V0, -32576(GP)
9D003878  14400002   BNE V0, ZERO, 0x9D003884
9D00387C  2442FFFF   ADDIU V0, V0, -1
9D003880  24020002   ADDIU V0, ZERO, 2
9D003884  0B400E25   J 0x9D003894
9D003888  AF8280C0   SW V0, -32576(GP)
298:                         else if(input == CANCEL)
9D00388C  50820001   BEQL A0, V0, 0x9D003894
9D003890  AF808048   SW ZERO, -32696(GP)
299:                             currentOption = OPTION_NUM_PLAYERS;
300:                     }
301:                 }
9D00372C  0B400E26   J 0x9D003898
9D003730  8FBF0014   LW RA, 20(SP)
9D003834  0B400E26   J 0x9D003898
9D003838  8FBF0014   LW RA, 20(SP)
9D003894  8FBF0014   LW RA, 20(SP)
9D003898  03E00008   JR RA
9D00389C  27BD0018   ADDIU SP, SP, 24
302:                 
303:                 void selectTerritories(Input input)
304:                 {
9D00354C  27BDFFE8   ADDIU SP, SP, -24
305:                     if(input == NEXT)
9D003550  24020002   ADDIU V0, ZERO, 2
9D003554  14820008   BNE A0, V0, 0x9D003578
9D003558  AFBF0014   SW RA, 20(SP)
306:                         moveSelection(0, 1, predUnowned);
9D00355C  00002021   ADDU A0, ZERO, ZERO
9D003560  24050001   ADDIU A1, ZERO, 1
9D003564  3C069D00   LUI A2, -25344
9D003568  0F4009BB   JAL moveSelection
9D00356C  24C6487C   ADDIU A2, A2, 18556
307:                     else if(input == PREVIOUS)
9D003578  24020003   ADDIU V0, ZERO, 3
9D00357C  14820007   BNE A0, V0, 0x9D00359C
9D003580  2405FFFF   ADDIU A1, ZERO, -1
308:                         moveSelection(0, -1, predUnowned);
9D003584  00002021   ADDU A0, ZERO, ZERO
9D003588  3C069D00   LUI A2, -25344
9D00358C  0F4009BB   JAL moveSelection
9D003590  24C6487C   ADDIU A2, A2, 18556
309:                     else if(input == ADVANCE)
9D00359C  14800023   BNE A0, ZERO, 0x9D00362C
9D0035A0  8F8280D4   LW V0, -32556(GP)
310:                     {
311:                         if(destination == -1)
9D0035A4  2403FFFF   ADDIU V1, ZERO, -1
9D0035A8  10430020   BEQ V0, V1, 0x9D00362C
9D0035AC  8F8380C8   LW V1, -32568(GP)
312:                             return;
313:                 
314:                         territories[destination].owner = currentPlayer;
9D0035B0  000220C0   SLL A0, V0, 3
9D0035B4  00021140   SLL V0, V0, 5
9D0035B8  00441023   SUBU V0, V0, A0
9D0035BC  3C048000   LUI A0, -32768
9D0035C0  248441A8   ADDIU A0, A0, 16808
9D0035C4  00441021   ADDU V0, V0, A0
9D0035C8  AC430010   SW V1, 16(V0)
315:                         territories[destination].troops = 1;
9D0035CC  24040001   ADDIU A0, ZERO, 1
9D0035D0  AC440014   SW A0, 20(V0)
316:                         destination = -1;
9D0035D4  2402FFFF   ADDIU V0, ZERO, -1
9D0035D8  AF8280D4   SW V0, -32556(GP)
317:                         deployTroopsLeft[currentPlayer] -= 1;
9D0035DC  00031080   SLL V0, V1, 2
9D0035E0  27848054   ADDIU A0, GP, -32684
9D0035E4  00821021   ADDU V0, A0, V0
9D0035E8  8C440000   LW A0, 0(V0)
9D0035EC  2484FFFF   ADDIU A0, A0, -1
9D0035F0  AC440000   SW A0, 0(V0)
318:                 
319:                         currentPlayer += 1;
9D0035F4  24630001   ADDIU V1, V1, 1
9D0035F8  AF8380C8   SW V1, -32568(GP)
320:                         if(currentPlayer == numPlayers)
9D0035FC  8F8280D0   LW V0, -32560(GP)
9D003600  50620001   BEQL V1, V0, 0x9D003608
9D003604  AF8080C8   SW ZERO, -32568(GP)
321:                             currentPlayer = 0;
322:                 
323:                         territoriesRemaining -= 1;
9D003608  8F82804C   LW V0, -32692(GP)
9D00360C  2442FFFF   ADDIU V0, V0, -1
324:                 
325:                         // Changing the state here after random allocation would cause
326:                         // recursion, so the function for the INIT state handles the state
327:                         // change instead right after the random deployment. 
328:                         if(territoriesRemaining == 0 && !randomTerritories)
9D003610  14400006   BNE V0, ZERO, 0x9D00362C
9D003614  AF82804C   SW V0, -32692(GP)
9D003618  8F8280CC   LW V0, -32564(GP)
9D00361C  14400004   BNE V0, ZERO, 0x9D003630
9D003620  8FBF0014   LW RA, 20(SP)
329:                             changeState(DEPLOY);
9D003624  0F4009F3   JAL changeState
9D003628  24040002   ADDIU A0, ZERO, 2
330:                     }
331:                 }
9D003570  0B400D8C   J 0x9D003630
9D003574  8FBF0014   LW RA, 20(SP)
9D003594  0B400D8C   J 0x9D003630
9D003598  8FBF0014   LW RA, 20(SP)
9D00362C  8FBF0014   LW RA, 20(SP)
9D003630  03E00008   JR RA
9D003634  27BD0018   ADDIU SP, SP, 24
332:                 
333:                 void deployTroops(Input input)
334:                 {
9D0033A4  27BDFFE8   ADDIU SP, SP, -24
9D0033A8  AFBF0014   SW RA, 20(SP)
335:                     if(input == NEXT && !confirm)
9D0033AC  24020002   ADDIU V0, ZERO, 2
9D0033B0  1482000B   BNE A0, V0, 0x9D0033E0
9D0033B4  AFB00010   SW S0, 16(SP)
9D0033B8  8F82806C   LW V0, -32660(GP)
9D0033BC  1440004A   BNE V0, ZERO, 0x9D0034E8
9D0033C0  24020001   ADDIU V0, ZERO, 1
336:                         moveSelection(0, 1, predOwnedCurrent);
9D0033C4  00002021   ADDU A0, ZERO, ZERO
9D0033C8  24050001   ADDIU A1, ZERO, 1
9D0033CC  3C069D00   LUI A2, -25344
9D0033D0  0F4009BB   JAL moveSelection
9D0033D4  24C648A4   ADDIU A2, A2, 18596
9D0033D8  0B400D50   J 0x9D003540
9D0033DC  8FBF0014   LW RA, 20(SP)
337:                     else if(input == PREVIOUS && !confirm)
9D0033E0  24020003   ADDIU V0, ZERO, 3
9D0033E4  1482000A   BNE A0, V0, 0x9D003410
9D0033E8  8F82806C   LW V0, -32660(GP)
9D0033EC  54400054   BNEL V0, ZERO, 0x9D003540
9D0033F0  8FBF0014   LW RA, 20(SP)
338:                         moveSelection(0, -1, predOwnedCurrent);
9D0033F4  00002021   ADDU A0, ZERO, ZERO
9D0033F8  2405FFFF   ADDIU A1, ZERO, -1
9D0033FC  3C069D00   LUI A2, -25344
9D003400  0F4009BB   JAL moveSelection
9D003404  24C648A4   ADDIU A2, A2, 18596
9D003408  0B400D50   J 0x9D003540
9D00340C  8FBF0014   LW RA, 20(SP)
339:                     else if(input == ADVANCE)
9D003410  54800035   BNEL A0, ZERO, 0x9D0034E8
9D003414  24020001   ADDIU V0, ZERO, 1
340:                     {
341:                         if(confirm)
9D003418  14400048   BNE V0, ZERO, 0x9D00353C
9D00341C  8F8280D4   LW V0, -32556(GP)
342:                             return;
343:                         if(destination == -1)
9D003420  2403FFFF   ADDIU V1, ZERO, -1
9D003424  10430045   BEQ V0, V1, 0x9D00353C
9D003428  000218C0   SLL V1, V0, 3
344:                             return;
345:                 
346:                         territories[destination].troops += 1;
9D00342C  00021140   SLL V0, V0, 5
9D003430  00431023   SUBU V0, V0, V1
9D003434  3C038000   LUI V1, -32768
9D003438  246341A8   ADDIU V1, V1, 16808
9D00343C  00621021   ADDU V0, V1, V0
9D003440  8C430014   LW V1, 20(V0)
9D003444  24630001   ADDIU V1, V1, 1
9D003448  AC430014   SW V1, 20(V0)
347:                         deployTroopsLeft[currentPlayer] -= 1;
9D00344C  8F8280C8   LW V0, -32568(GP)
9D003450  00021080   SLL V0, V0, 2
9D003454  27838054   ADDIU V1, GP, -32684
9D003458  00621021   ADDU V0, V1, V0
9D00345C  8C440000   LW A0, 0(V0)
9D003460  2484FFFF   ADDIU A0, A0, -1
9D003464  AC440000   SW A0, 0(V0)
348:                         numTroops -= 1;
9D003468  8F82805C   LW V0, -32676(GP)
9D00346C  2442FFFF   ADDIU V0, V0, -1
349:                 
350:                         if(numTroops == 0)
9D003470  14400032   BNE V0, ZERO, 0x9D00353C
9D003474  AF82805C   SW V0, -32676(GP)
351:                         {
352:                             destination = -1;
9D003478  2402FFFF   ADDIU V0, ZERO, -1
9D00347C  AF8280D4   SW V0, -32556(GP)
353:                 
354:                             for(int i = 0; i < numPlayers; i++)
9D003480  8F8580D0   LW A1, -32560(GP)
9D003484  18A0000E   BLEZ A1, 0x9D0034C0
9D003488  8F8280C8   LW V0, -32568(GP)
9D00348C  00001821   ADDU V1, ZERO, ZERO
9D0034B0  5465FFF9   BNEL V1, A1, 0x9D003498
9D0034B4  24420001   ADDIU V0, V0, 1
9D0034B8  0B400D32   J 0x9D0034C8
9D0034BC  AF8280C8   SW V0, -32568(GP)
355:                             {
356:                                 currentPlayer += 1;
9D003494  24420001   ADDIU V0, V0, 1
357:                                 if(currentPlayer == numPlayers)
9D003498  50A20001   BEQL A1, V0, 0x9D0034A0
9D00349C  00001021   ADDU V0, ZERO, ZERO
358:                                     currentPlayer = 0;
359:                                 if(deployTroopsLeft[currentPlayer] != 0)
9D003490  27868054   ADDIU A2, GP, -32684
9D0034A0  00022080   SLL A0, V0, 2
9D0034A4  7CC4200A   LWX A0, A0(A2)
9D0034A8  14800022   BNE A0, ZERO, 0x9D003534
9D0034AC  24630001   ADDIU V1, V1, 1
360:                                     break;
361:                             }
362:                 
363:                             if(deployTroopsLeft[currentPlayer] == 0)
9D0034C0  14800005   BNE A0, ZERO, 0x9D0034D8
9D0034C4  8F8280E4   LW V0, -32540(GP)
364:                                 confirm = 1;
9D0034C8  24020001   ADDIU V0, ZERO, 1
9D0034CC  0B400D4F   J 0x9D00353C
9D0034D0  AF82806C   SW V0, -32660(GP)
365:                             else
366:                                 numTroops = min(deployTroopsLeft[currentPlayer], multipleDeploy);
9D0034D4  8F8280E4   LW V0, -32540(GP)
9D0034D8  0044182A   SLT V1, V0, A0
9D0034DC  0043200B   MOVN A0, V0, V1
9D0034E0  0B400D4F   J 0x9D00353C
9D0034E4  AF84805C   SW A0, -32676(GP)
367:                         }
368:                     }
369:                     else if(input == CANCEL)
9D0034E8  14820014   BNE A0, V0, 0x9D00353C
9D0034EC  8F82806C   LW V0, -32660(GP)
370:                     {
371:                         if(confirm)
9D0034F0  10400012   BEQ V0, ZERO, 0x9D00353C
9D0034F4  8F828050   LW V0, -32688(GP)
372:                         {
373:                             currentPlayer = firstPlayer;
9D0034F8  AF8280C8   SW V0, -32568(GP)
374:                             for(int i = 0; i < NUM_TERRITORIES; i++)
375:                                 logReinforce(territories[i].owner, i, territories[i].troops);
9D0034FC  3C108000   LUI S0, -32768
9D003500  261041A8   ADDIU S0, S0, 16808
9D003504  8E040010   LW A0, 16(S0)
9D003508  00002821   ADDU A1, ZERO, ZERO
9D00350C  0F401B5A   JAL logReinforce
9D003510  8E060014   LW A2, 20(S0)
9D003514  8E040028   LW A0, 40(S0)
9D003518  24050001   ADDIU A1, ZERO, 1
9D00351C  0F401B5A   JAL logReinforce
9D003520  8E06002C   LW A2, 44(S0)
376:                             changeState(REINFORCE);
9D003524  0F4009F3   JAL changeState
9D003528  24040003   ADDIU A0, ZERO, 3
9D003534  0B400D35   J 0x9D0034D4
9D003538  AF8280C8   SW V0, -32568(GP)
377:                         }
378:                     }
379:                 }
9D00352C  0B400D50   J 0x9D003540
9D003530  8FBF0014   LW RA, 20(SP)
9D00353C  8FBF0014   LW RA, 20(SP)
9D003540  8FB00010   LW S0, 16(SP)
9D003544  03E00008   JR RA
9D003548  27BD0018   ADDIU SP, SP, 24
380:                 
381:                 void reinforce(Input input)
382:                 {
9D003250  27BDFFE8   ADDIU SP, SP, -24
383:                     if(input == NEXT && !reinforceMenu)
9D003254  24020002   ADDIU V0, ZERO, 2
9D003258  1482000B   BNE A0, V0, 0x9D003288
9D00325C  AFBF0014   SW RA, 20(SP)
9D003260  8F828064   LW V0, -32668(GP)
9D003264  14400042   BNE V0, ZERO, 0x9D003370
9D003268  24020001   ADDIU V0, ZERO, 1
384:                         moveSelection(0, 1, predOwnedCurrent);
9D00326C  00002021   ADDU A0, ZERO, ZERO
9D003270  24050001   ADDIU A1, ZERO, 1
9D003274  3C069D00   LUI A2, -25344
9D003278  0F4009BB   JAL moveSelection
9D00327C  24C648A4   ADDIU A2, A2, 18596
9D003280  0B400CE7   J 0x9D00339C
9D003284  8FBF0014   LW RA, 20(SP)
385:                     else if(input == PREVIOUS && !reinforceMenu)
9D003288  24020003   ADDIU V0, ZERO, 3
9D00328C  1482000A   BNE A0, V0, 0x9D0032B8
9D003290  8F828064   LW V0, -32668(GP)
9D003294  54400041   BNEL V0, ZERO, 0x9D00339C
9D003298  8FBF0014   LW RA, 20(SP)
386:                         moveSelection(0, -1, predOwnedCurrent);
9D00329C  00002021   ADDU A0, ZERO, ZERO
9D0032A0  2405FFFF   ADDIU A1, ZERO, -1
9D0032A4  3C069D00   LUI A2, -25344
9D0032A8  0F4009BB   JAL moveSelection
9D0032AC  24C648A4   ADDIU A2, A2, 18596
9D0032B0  0B400CE7   J 0x9D00339C
9D0032B4  8FBF0014   LW RA, 20(SP)
387:                     else if(input == ADVANCE)
9D0032B8  5480002D   BNEL A0, ZERO, 0x9D003370
9D0032BC  24020001   ADDIU V0, ZERO, 1
388:                     {
389:                         if(reinforceMenu)
9D0032C0  1040000A   BEQ V0, ZERO, 0x9D0032EC
9D0032C4  8F8580D4   LW A1, -32556(GP)
390:                         {
391:                             if(!confirm)
9D0032C8  8F82806C   LW V0, -32660(GP)
9D0032CC  14400003   BNE V0, ZERO, 0x9D0032DC
9D0032D0  24020001   ADDIU V0, ZERO, 1
392:                                 confirm = 1;
9D0032D4  0B400CE6   J 0x9D003398
9D0032D8  AF82806C   SW V0, -32660(GP)
393:                             else
394:                                 changeState(INIT);
9D0032DC  0F4009F3   JAL changeState
9D0032E0  00002021   ADDU A0, ZERO, ZERO
395:                             return;
396:                         }
397:                 
398:                         if(destination == -1)
9D0032EC  2402FFFF   ADDIU V0, ZERO, -1
9D0032F0  10A20029   BEQ A1, V0, 0x9D003398
9D0032F4  8F82805C   LW V0, -32676(GP)
399:                             return;
400:                 
401:                         if(numTroops > 0)
9D0032F8  18400011   BLEZ V0, 0x9D003340
9D0032FC  8F8480C8   LW A0, -32568(GP)
402:                         {
403:                             logReinforce(currentPlayer, destination, 1);
9D003300  0F401B5A   JAL logReinforce
9D003304  24060001   ADDIU A2, ZERO, 1
404:                             territories[destination].troops += 1;
9D003308  8F8380D4   LW V1, -32556(GP)
9D00330C  000320C0   SLL A0, V1, 3
9D003310  00031940   SLL V1, V1, 5
9D003314  00641823   SUBU V1, V1, A0
9D003318  3C028000   LUI V0, -32768
9D00331C  244241A8   ADDIU V0, V0, 16808
9D003320  00431021   ADDU V0, V0, V1
9D003324  8C430014   LW V1, 20(V0)
9D003328  24630001   ADDIU V1, V1, 1
9D00332C  AC430014   SW V1, 20(V0)
405:                             numTroops -= 1;
9D003330  8F82805C   LW V0, -32676(GP)
9D003334  2442FFFF   ADDIU V0, V0, -1
9D003338  AF82805C   SW V0, -32676(GP)
406:                         }
407:                 
408:                         if(numTroops == 0 && !mustTrade)
9D00333C  8F82805C   LW V0, -32676(GP)
9D003340  14400015   BNE V0, ZERO, 0x9D003398
9D003344  8F828060   LW V0, -32672(GP)
9D003348  54400014   BNEL V0, ZERO, 0x9D00339C
9D00334C  8FBF0014   LW RA, 20(SP)
409:                         {
410:                             logReinforce(currentPlayer, -1, 0);
9D003350  8F8480C8   LW A0, -32568(GP)
9D003354  2405FFFF   ADDIU A1, ZERO, -1
9D003358  0F401B5A   JAL logReinforce
9D00335C  00003021   ADDU A2, ZERO, ZERO
411:                             changeState(ATTACK1);
9D003360  0F4009F3   JAL changeState
9D003364  24040004   ADDIU A0, ZERO, 4
412:                         }
413:                     }
414:                     else if(input == CANCEL)
9D003370  14820009   BNE A0, V0, 0x9D003398
9D003374  8F828064   LW V0, -32668(GP)
415:                     {
416:                         if(reinforceMenu && confirm)
9D003378  10400006   BEQ V0, ZERO, 0x9D003394
9D00337C  24020001   ADDIU V0, ZERO, 1
9D003380  8F82806C   LW V0, -32660(GP)
9D003384  50400004   BEQL V0, ZERO, 0x9D003398
9D003388  AF808064   SW ZERO, -32668(GP)
417:                             confirm = 0;
9D00338C  0B400CE6   J 0x9D003398
9D003390  AF80806C   SW ZERO, -32660(GP)
418:                         else if(reinforceMenu)
419:                             reinforceMenu = 0;
420:                         else
421:                             reinforceMenu = 1;
9D003394  AF828064   SW V0, -32668(GP)
422:                     }
423:                 }
9D0032E4  0B400CE7   J 0x9D00339C
9D0032E8  8FBF0014   LW RA, 20(SP)
9D003368  0B400CE7   J 0x9D00339C
9D00336C  8FBF0014   LW RA, 20(SP)
9D003398  8FBF0014   LW RA, 20(SP)
9D00339C  03E00008   JR RA
9D0033A0  27BD0018   ADDIU SP, SP, 24
424:                 
425:                 void declareAttack(Input input)
426:                 {
9D00317C  27BDFFD8   ADDIU SP, SP, -40
427:                     if(input == NEXT && !confirm)
9D003180  24020002   ADDIU V0, ZERO, 2
9D003184  1482000B   BNE A0, V0, 0x9D0031B4
9D003188  AFBF0024   SW RA, 36(SP)
9D00318C  8F82806C   LW V0, -32660(GP)
9D003190  14400028   BNE V0, ZERO, 0x9D003234
9D003194  24020001   ADDIU V0, ZERO, 1
428:                         moveSelection(1, 1, predAttackSource);
9D003198  24040001   ADDIU A0, ZERO, 1
9D00319C  24050001   ADDIU A1, ZERO, 1
9D0031A0  3C069D00   LUI A2, -25344
9D0031A4  0F4009BB   JAL moveSelection
9D0031A8  24C648FC   ADDIU A2, A2, 18684
9D0031AC  0B400C92   J 0x9D003248
9D0031B0  8FBF0024   LW RA, 36(SP)
429:                     else if(input == PREVIOUS && !confirm)
9D0031B4  24020003   ADDIU V0, ZERO, 3
9D0031B8  1482000A   BNE A0, V0, 0x9D0031E4
9D0031BC  8F82806C   LW V0, -32660(GP)
9D0031C0  54400021   BNEL V0, ZERO, 0x9D003248
9D0031C4  8FBF0024   LW RA, 36(SP)
430:                         moveSelection(1, -1, predAttackSource);
9D0031C8  24040001   ADDIU A0, ZERO, 1
9D0031CC  2405FFFF   ADDIU A1, ZERO, -1
9D0031D0  3C069D00   LUI A2, -25344
9D0031D4  0F4009BB   JAL moveSelection
9D0031D8  24C648FC   ADDIU A2, A2, 18684
9D0031DC  0B400C92   J 0x9D003248
9D0031E0  8FBF0024   LW RA, 36(SP)
431:                     else if(input == ADVANCE)
9D0031E4  54800013   BNEL A0, ZERO, 0x9D003234
9D0031E8  24020001   ADDIU V0, ZERO, 1
432:                     {
433:                         if(confirm)
9D0031EC  1040000A   BEQ V0, ZERO, 0x9D003218
9D0031F0  2402FFFF   ADDIU V0, ZERO, -1
434:                         {
435:                             if(needCard)
9D0031F4  8F828068   LW V0, -32664(GP)
9D0031F8  10400003   BEQ V0, ZERO, 0x9D003208
9D0031FC  27A40010   ADDIU A0, SP, 16
436:                                 drawCard(currentPlayer);
9D003200  0F400ECD   JAL drawCard
9D003204  8F8580C8   LW A1, -32568(GP)
437:                             changeState(MOVE1);
9D003208  0F4009F3   JAL changeState
9D00320C  24040008   ADDIU A0, ZERO, 8
438:                             return;
9D003210  0B400C92   J 0x9D003248
9D003214  8FBF0024   LW RA, 36(SP)
439:                         }
440:                 
441:                         if(source == -1)
9D003218  8F8380E0   LW V1, -32544(GP)
9D00321C  5062000A   BEQL V1, V0, 0x9D003248
9D003220  8FBF0024   LW RA, 36(SP)
442:                             return;
443:                         changeState(ATTACK2);
9D003224  0F4009F3   JAL changeState
9D003228  24040005   ADDIU A0, ZERO, 5
444:                     }
445:                     else if(input == CANCEL)
9D003234  14820003   BNE A0, V0, 0x9D003244
9D003238  8F82806C   LW V0, -32660(GP)
446:                     {
447:                         confirm = !confirm;
9D00323C  2C420001   SLTIU V0, V0, 1
9D003240  AF82806C   SW V0, -32660(GP)
448:                     }
449:                 }
9D00322C  0B400C92   J 0x9D003248
9D003230  8FBF0024   LW RA, 36(SP)
9D003244  8FBF0024   LW RA, 36(SP)
9D003248  03E00008   JR RA
9D00324C  27BD0028   ADDIU SP, SP, 40
450:                 void declareAttackTarget(Input input)
451:                 {
9D0030C4  27BDFFE8   ADDIU SP, SP, -24
452:                     if(input == NEXT)
9D0030C8  24020002   ADDIU V0, ZERO, 2
9D0030CC  14820008   BNE A0, V0, 0x9D0030F0
9D0030D0  AFBF0014   SW RA, 20(SP)
453:                         moveSelection(0, 1, predAttackTarget);
9D0030D4  00002021   ADDU A0, ZERO, ZERO
9D0030D8  24050001   ADDIU A1, ZERO, 1
9D0030DC  3C069D00   LUI A2, -25344
9D0030E0  0F4009BB   JAL moveSelection
9D0030E4  24C649F0   ADDIU A2, A2, 18928
454:                     else if(input == PREVIOUS)
9D0030F0  24020003   ADDIU V0, ZERO, 3
9D0030F4  14820007   BNE A0, V0, 0x9D003114
9D0030F8  2405FFFF   ADDIU A1, ZERO, -1
455:                         moveSelection(0, -1, predAttackTarget);
9D0030FC  00002021   ADDU A0, ZERO, ZERO
9D003100  3C069D00   LUI A2, -25344
9D003104  0F4009BB   JAL moveSelection
9D003108  24C649F0   ADDIU A2, A2, 18928
456:                     else if(input == ADVANCE)
9D003114  14800012   BNE A0, ZERO, 0x9D003160
9D003118  24020001   ADDIU V0, ZERO, 1
457:                     {
458:                         if(destination == -1)
9D00311C  8F8780D4   LW A3, -32556(GP)
9D003120  2402FFFF   ADDIU V0, ZERO, -1
9D003124  10E20012   BEQ A3, V0, 0x9D003170
9D003128  000710C0   SLL V0, A3, 3
459:                             return;
460:                         logAttack(currentPlayer, territories[destination].owner, source,
9D00312C  00071940   SLL V1, A3, 5
9D003130  00621023   SUBU V0, V1, V0
9D003134  3C038000   LUI V1, -32768
9D003138  246341A8   ADDIU V1, V1, 16808
9D00313C  00431021   ADDU V0, V0, V1
9D003140  8F8480C8   LW A0, -32568(GP)
9D003144  8C450010   LW A1, 16(V0)
9D003148  0F401AF2   JAL logAttack
9D00314C  8F8680E0   LW A2, -32544(GP)
461:                                 destination);
462:                         changeState(BATTLE);
9D003150  0F4009F3   JAL changeState
9D003154  24040006   ADDIU A0, ZERO, 6
463:                     }
464:                     else if(input == CANCEL)
9D003160  14820004   BNE A0, V0, 0x9D003174
9D003164  8FBF0014   LW RA, 20(SP)
465:                         changeState(ATTACK1);
9D003168  0F4009F3   JAL changeState
9D00316C  24040004   ADDIU A0, ZERO, 4
466:                 }
9D0030E8  0B400C5D   J 0x9D003174
9D0030EC  8FBF0014   LW RA, 20(SP)
9D00310C  0B400C5D   J 0x9D003174
9D003110  8FBF0014   LW RA, 20(SP)
9D003158  0B400C5D   J 0x9D003174
9D00315C  8FBF0014   LW RA, 20(SP)
9D003170  8FBF0014   LW RA, 20(SP)
9D003174  03E00008   JR RA
9D003178  27BD0018   ADDIU SP, SP, 24
467:                 
468:                 void resolveBattle(Input input)
469:                 {
9D002F64  27BDFFE8   ADDIU SP, SP, -24
470:                     if(input == ADVANCE)
9D002F68  1480003B   BNE A0, ZERO, 0x9D003058
9D002F6C  AFBF0014   SW RA, 20(SP)
471:                     {
472:                         doBattle(source, destination);
9D002F70  8F8480E0   LW A0, -32544(GP)
9D002F74  0F401168   JAL doBattle
9D002F78  8F8580D4   LW A1, -32556(GP)
473:                 
474:                         if(territories[source].troops == 1)
9D002F7C  8F8280E0   LW V0, -32544(GP)
9D002F80  000218C0   SLL V1, V0, 3
9D002F84  00022140   SLL A0, V0, 5
9D002F88  00832023   SUBU A0, A0, V1
9D002F8C  3C038000   LUI V1, -32768
9D002F90  246341A8   ADDIU V1, V1, 16808
9D002F94  00641821   ADDU V1, V1, A0
9D002F98  8C640014   LW A0, 20(V1)
9D002F9C  24030001   ADDIU V1, ZERO, 1
9D002FA0  14830005   BNE A0, V1, 0x9D002FB8
9D002FA4  8F8380D4   LW V1, -32556(GP)
475:                             changeState(ATTACK1);
9D002FA8  0F4009F3   JAL changeState
9D002FAC  24040004   ADDIU A0, ZERO, 4
476:                         else if(territories[destination].troops == 0)
9D002FB8  000320C0   SLL A0, V1, 3
9D002FBC  00032940   SLL A1, V1, 5
9D002FC0  00A42823   SUBU A1, A1, A0
9D002FC4  3C048000   LUI A0, -32768
9D002FC8  248441A8   ADDIU A0, A0, 16808
9D002FCC  00852021   ADDU A0, A0, A1
9D002FD0  8C840014   LW A0, 20(A0)
9D002FD4  14800038   BNE A0, ZERO, 0x9D0030B8
9D002FD8  3C068000   LUI A2, -32768
477:                         {
478:                             int defeatedPlayer = territories[destination].owner;
9D002FDC  24C641A8   ADDIU A2, A2, 16808
9D002FE0  00A61821   ADDU V1, A1, A2
9D002FE4  8C650010   LW A1, 16(V1)
479:                             territories[destination].owner = currentPlayer;
9D002FE8  8F8480C8   LW A0, -32568(GP)
9D002FEC  AC640010   SW A0, 16(V1)
480:                 
481:                             numTroops = min(3, territories[source].troops - 1);
9D002FF0  000238C0   SLL A3, V0, 3
9D002FF4  00021140   SLL V0, V0, 5
9D002FF8  00471023   SUBU V0, V0, A3
9D002FFC  00C21021   ADDU V0, A2, V0
9D003000  8C470014   LW A3, 20(V0)
9D003004  24E7FFFF   ADDIU A3, A3, -1
9D003008  28E90004   SLTI T1, A3, 4
9D00300C  24080003   ADDIU T0, ZERO, 3
9D003010  00E9400B   MOVN T0, A3, T1
9D003014  AF88805C   SW T0, -32676(GP)
482:                             territories[destination].troops = 
9D003018  AC670014   SW A3, 20(V1)
483:                                 territories[source].troops - 1;
484:                             territories[source].troops = 1;
9D00301C  24030001   ADDIU V1, ZERO, 1
9D003020  AC430014   SW V1, 20(V0)
485:                 
486:                             if(!playerLiving(defeatedPlayer))
487:                             {
488:                                 takeHand(currentPlayer, defeatedPlayer);
9D003074  0F401115   JAL takeHand
9D003078  00000000   NOP
489:                                 if(hands[currentPlayer].cards >= 5)
9D00307C  8F8380C8   LW V1, -32568(GP)
9D003080  00031080   SLL V0, V1, 2
9D003084  00031900   SLL V1, V1, 4
9D003088  00431021   ADDU V0, V0, V1
9D00308C  00021880   SLL V1, V0, 2
9D003090  00431021   ADDU V0, V0, V1
9D003094  3C038000   LUI V1, -32768
9D003098  24630114   ADDIU V1, V1, 276
9D00309C  00431021   ADDU V0, V0, V1
9D0030A0  8C420060   LW V0, 96(V0)
9D0030A4  28420005   SLTI V0, V0, 5
9D0030A8  1040FFE6   BEQ V0, ZERO, 0x9D003044
9D0030AC  24020001   ADDIU V0, ZERO, 1
9D0030B0  0B400C12   J 0x9D003048
9D0030B4  00000000   NOP
490:                                     mustTrade = 1;
9D003044  AF828060   SW V0, -32672(GP)
491:                             }
492:                             changeState(CONQUER);
9D003048  0F4009F3   JAL changeState
9D00304C  24040007   ADDIU A0, ZERO, 7
493:                         }
494:                     }
495:                     else if(input == CANCEL)
9D003058  24020001   ADDIU V0, ZERO, 1
9D00305C  54820017   BNEL A0, V0, 0x9D0030BC
9D003060  8FBF0014   LW RA, 20(SP)
496:                         changeState(ATTACK1);
9D003064  0F4009F3   JAL changeState
9D003068  24040004   ADDIU A0, ZERO, 4
497:                       
498:                 }
9D002FB0  0B400C2F   J 0x9D0030BC
9D002FB4  8FBF0014   LW RA, 20(SP)
9D003050  0B400C2F   J 0x9D0030BC
9D003054  8FBF0014   LW RA, 20(SP)
9D00306C  0B400C2F   J 0x9D0030BC
9D003070  8FBF0014   LW RA, 20(SP)
9D0030B8  8FBF0014   LW RA, 20(SP)
9D0030BC  03E00008   JR RA
9D0030C0  27BD0018   ADDIU SP, SP, 24
499:                 void conquerTerritory(Input input)
500:                 {
9D002DB0  27BDFFE8   ADDIU SP, SP, -24
501:                     if(input == NEXT)
9D002DB4  24020002   ADDIU V0, ZERO, 2
9D002DB8  1482001D   BNE A0, V0, 0x9D002E30
9D002DBC  AFBF0014   SW RA, 20(SP)
502:                     {
503:                         if(territories[source].troops > 1)
9D002DC0  8F8280E0   LW V0, -32544(GP)
9D002DC4  000218C0   SLL V1, V0, 3
9D002DC8  00022140   SLL A0, V0, 5
9D002DCC  00832023   SUBU A0, A0, V1
9D002DD0  3C038000   LUI V1, -32768
9D002DD4  246341A8   ADDIU V1, V1, 16808
9D002DD8  00641821   ADDU V1, V1, A0
9D002DDC  8C630014   LW V1, 20(V1)
9D002DE0  28630002   SLTI V1, V1, 2
9D002DE4  1460005C   BNE V1, ZERO, 0x9D002F58
9D002DE8  8F8580D4   LW A1, -32556(GP)
504:                         {
505:                             territories[destination].troops += 1;
9D002DEC  3C038000   LUI V1, -32768
9D002DF0  246341A8   ADDIU V1, V1, 16808
9D002DF4  000520C0   SLL A0, A1, 3
9D002DF8  00052940   SLL A1, A1, 5
9D002DFC  00A42023   SUBU A0, A1, A0
9D002E00  00642021   ADDU A0, V1, A0
9D002E04  8C850014   LW A1, 20(A0)
9D002E08  24A50001   ADDIU A1, A1, 1
9D002E0C  AC850014   SW A1, 20(A0)
506:                             territories[source].troops -= 1;
9D002E10  000220C0   SLL A0, V0, 3
9D002E14  00021140   SLL V0, V0, 5
9D002E18  00441023   SUBU V0, V0, A0
9D002E1C  00621021   ADDU V0, V1, V0
9D002E20  8C430014   LW V1, 20(V0)
9D002E24  2463FFFF   ADDIU V1, V1, -1
9D002E28  0B400BD6   J 0x9D002F58
9D002E2C  AC430014   SW V1, 20(V0)
507:                         }
508:                     }
509:                     else if(input == PREVIOUS)
9D002E30  24020003   ADDIU V0, ZERO, 3
9D002E34  1482001D   BNE A0, V0, 0x9D002EAC
9D002E38  8F8280D4   LW V0, -32556(GP)
510:                     {
511:                         if(territories[destination].troops > numTroops)
9D002E3C  000218C0   SLL V1, V0, 3
9D002E40  00022140   SLL A0, V0, 5
9D002E44  00832023   SUBU A0, A0, V1
9D002E48  3C038000   LUI V1, -32768
9D002E4C  246341A8   ADDIU V1, V1, 16808
9D002E50  00641821   ADDU V1, V1, A0
9D002E54  8C630014   LW V1, 20(V1)
9D002E58  8F84805C   LW A0, -32676(GP)
9D002E5C  0083202A   SLT A0, A0, V1
9D002E60  1080003E   BEQ A0, ZERO, 0x9D002F5C
9D002E64  8FBF0014   LW RA, 20(SP)
512:                         {
513:                             territories[destination].troops -= 1;
9D002E68  3C048000   LUI A0, -32768
9D002E6C  248441A8   ADDIU A0, A0, 16808
9D002E70  000228C0   SLL A1, V0, 3
9D002E74  00021140   SLL V0, V0, 5
9D002E78  00451023   SUBU V0, V0, A1
9D002E7C  00821021   ADDU V0, A0, V0
9D002E80  2463FFFF   ADDIU V1, V1, -1
9D002E84  AC430014   SW V1, 20(V0)
514:                             territories[source].troops += 1;
9D002E88  8F8380E0   LW V1, -32544(GP)
9D002E8C  000310C0   SLL V0, V1, 3
9D002E90  00031940   SLL V1, V1, 5
9D002E94  00621023   SUBU V0, V1, V0
9D002E98  00821021   ADDU V0, A0, V0
9D002E9C  8C430014   LW V1, 20(V0)
9D002EA0  24630001   ADDIU V1, V1, 1
9D002EA4  0B400BD6   J 0x9D002F58
9D002EA8  AC430014   SW V1, 20(V0)
515:                         }
516:                     }      
517:                     else if(input == ADVANCE)
9D002EAC  1480002B   BNE A0, ZERO, 0x9D002F5C
9D002EB0  8FBF0014   LW RA, 20(SP)
518:                     {
519:                         needCard = 1;
9D002EB4  24020001   ADDIU V0, ZERO, 1
9D002EB8  AF828068   SW V0, -32664(GP)
520:                         logConquer(currentPlayer, destination, territories[destination].troops);
9D002EBC  8F8580D4   LW A1, -32556(GP)
9D002EC0  000510C0   SLL V0, A1, 3
9D002EC4  00051940   SLL V1, A1, 5
9D002EC8  00621823   SUBU V1, V1, V0
9D002ECC  3C028000   LUI V0, -32768
9D002ED0  244241A8   ADDIU V0, V0, 16808
9D002ED4  00431021   ADDU V0, V0, V1
9D002ED8  8F8480C8   LW A0, -32568(GP)
9D002EDC  0F401B10   JAL logConquer
9D002EE0  8C460014   LW A2, 20(V0)
521:                         for(int i = 0; i < numPlayers; i++)
9D002EE4  8F8380D0   LW V1, -32560(GP)
9D002EE8  18600019   BLEZ V1, 0x9D002F50
9D002EEC  8F8480C8   LW A0, -32568(GP)
9D002F00  00001021   ADDU V0, ZERO, ZERO
9D002F48  1443FFEE   BNE V0, V1, 0x9D002F04
9D002F4C  00000000   NOP
522:                         {
523:                             // Game continues unless current player is the only one left.
524:                             if(i != currentPlayer && playerLiving(i))
9D002F04  50440010   BEQL V0, A0, 0x9D002F48
9D002F08  24420001   ADDIU V0, V0, 1
525:                             {
526:                                 if(mustTrade)
9D002F1C  8F828060   LW V0, -32672(GP)
9D002F20  10400005   BEQ V0, ZERO, 0x9D002F38
9D002F24  00000000   NOP
527:                                     changeState(REINFORCE);
9D002F28  0F4009F3   JAL changeState
9D002F2C  24040003   ADDIU A0, ZERO, 3
528:                                 else
529:                                     changeState(ATTACK1);
9D002F38  0F4009F3   JAL changeState
9D002F3C  24040004   ADDIU A0, ZERO, 4
530:                                 return;
531:                             }
532:                         }
533:                         changeState(GAMEOVER);
9D002F50  0F4009F3   JAL changeState
9D002F54  2404000B   ADDIU A0, ZERO, 11
534:                     }
535:                 }
9D002F30  0B400BD7   J 0x9D002F5C
9D002F34  8FBF0014   LW RA, 20(SP)
9D002F40  0B400BD7   J 0x9D002F5C
9D002F44  8FBF0014   LW RA, 20(SP)
9D002F58  8FBF0014   LW RA, 20(SP)
9D002F5C  03E00008   JR RA
9D002F60  27BD0018   ADDIU SP, SP, 24
536:                 
537:                 
538:                 void moveTroops(Input input)
539:                 {
9D002CB0  27BDFFE8   ADDIU SP, SP, -24
540:                     if(input == NEXT && !confirm)
9D002CB4  24020002   ADDIU V0, ZERO, 2
9D002CB8  1482000B   BNE A0, V0, 0x9D002CE8
9D002CBC  AFBF0014   SW RA, 20(SP)
9D002CC0  8F82806C   LW V0, -32660(GP)
9D002CC4  14400033   BNE V0, ZERO, 0x9D002D94
9D002CC8  24020001   ADDIU V0, ZERO, 1
541:                         moveSelection(1, 1, predMoveSource);
9D002CCC  24040001   ADDIU A0, ZERO, 1
9D002CD0  24050001   ADDIU A1, ZERO, 1
9D002CD4  3C069D00   LUI A2, -25344
9D002CD8  0F4009BB   JAL moveSelection
9D002CDC  24C64A6C   ADDIU A2, A2, 19052
9D002CE0  0B400B6A   J 0x9D002DA8
9D002CE4  8FBF0014   LW RA, 20(SP)
542:                     else if(input == PREVIOUS && !confirm)
9D002CE8  24020003   ADDIU V0, ZERO, 3
9D002CEC  1482000A   BNE A0, V0, 0x9D002D18
9D002CF0  8F82806C   LW V0, -32660(GP)
9D002CF4  5440002C   BNEL V0, ZERO, 0x9D002DA8
9D002CF8  8FBF0014   LW RA, 20(SP)
543:                         moveSelection(1, -1, predMoveSource);
9D002CFC  24040001   ADDIU A0, ZERO, 1
9D002D00  2405FFFF   ADDIU A1, ZERO, -1
9D002D04  3C069D00   LUI A2, -25344
9D002D08  0F4009BB   JAL moveSelection
9D002D0C  24C64A6C   ADDIU A2, A2, 19052
9D002D10  0B400B6A   J 0x9D002DA8
9D002D14  8FBF0014   LW RA, 20(SP)
544:                     else if(input == ADVANCE)
9D002D18  5480001E   BNEL A0, ZERO, 0x9D002D94
9D002D1C  24020001   ADDIU V0, ZERO, 1
545:                     {
546:                         if(confirm)
9D002D20  10400013   BEQ V0, ZERO, 0x9D002D70
9D002D24  8F8480E0   LW A0, -32544(GP)
547:                         {
548:                             do
549:                             {
550:                                 currentPlayer += 1;
9D002D40  24420001   ADDIU V0, V0, 1
551:                                 if(currentPlayer == numPlayers)
9D002D28  8F8580D0   LW A1, -32560(GP)
9D002D44  50450001   BEQL V0, A1, 0x9D002D4C
9D002D48  00001021   ADDU V0, ZERO, ZERO
552:                                     currentPlayer = 0;
553:                             } while(!playerLiving(currentPlayer));
554:                 
555:                             changeState(REINFORCE);
9D002D60  0F4009F3   JAL changeState
9D002D64  24040003   ADDIU A0, ZERO, 3
556:                             return;
9D002D68  0B400B6A   J 0x9D002DA8
9D002D6C  8FBF0014   LW RA, 20(SP)
557:                         }
558:                 
559:                         if(source == -1)
9D002D70  2402FFFF   ADDIU V0, ZERO, -1
9D002D74  5082000C   BEQL A0, V0, 0x9D002DA8
9D002D78  8FBF0014   LW RA, 20(SP)
560:                             return;
561:                 
562:                         computeConnected(source);
9D002D7C  0F4012EE   JAL computeConnected
9D002D80  00000000   NOP
563:                         changeState(MOVE2);
9D002D84  0F4009F3   JAL changeState
9D002D88  24040009   ADDIU A0, ZERO, 9
564:                     }
565:                     else if(input == CANCEL)
9D002D94  14820003   BNE A0, V0, 0x9D002DA4
9D002D98  8F82806C   LW V0, -32660(GP)
566:                     {
567:                         confirm = !confirm;
9D002D9C  2C420001   SLTIU V0, V0, 1
9D002DA0  AF82806C   SW V0, -32660(GP)
568:                     }
569:                 }
9D002D8C  0B400B6A   J 0x9D002DA8
9D002D90  8FBF0014   LW RA, 20(SP)
9D002DA4  8FBF0014   LW RA, 20(SP)
9D002DA8  03E00008   JR RA
9D002DAC  27BD0018   ADDIU SP, SP, 24
570:                 void moveTroopsTarget(Input input)
571:                 {
9D002C1C  27BDFFE8   ADDIU SP, SP, -24
572:                     if(input == NEXT)
9D002C20  24020002   ADDIU V0, ZERO, 2
9D002C24  14820008   BNE A0, V0, 0x9D002C48
9D002C28  AFBF0014   SW RA, 20(SP)
573:                         moveSelection(0, 1, predMoveTarget);
9D002C2C  00002021   ADDU A0, ZERO, ZERO
9D002C30  24050001   ADDIU A1, ZERO, 1
9D002C34  3C069D00   LUI A2, -25344
9D002C38  0F4009BB   JAL moveSelection
9D002C3C  24C64B60   ADDIU A2, A2, 19296
574:                     else if(input == PREVIOUS)
9D002C48  24020003   ADDIU V0, ZERO, 3
9D002C4C  14820007   BNE A0, V0, 0x9D002C6C
9D002C50  2405FFFF   ADDIU A1, ZERO, -1
575:                         moveSelection(0, -1, predMoveTarget);
9D002C54  00002021   ADDU A0, ZERO, ZERO
9D002C58  3C069D00   LUI A2, -25344
9D002C5C  0F4009BB   JAL moveSelection
9D002C60  24C64B60   ADDIU A2, A2, 19296
576:                     else if(input == ADVANCE)
9D002C6C  14800009   BNE A0, ZERO, 0x9D002C94
9D002C70  24020001   ADDIU V0, ZERO, 1
577:                     {
578:                         if(destination == -1)
9D002C74  2402FFFF   ADDIU V0, ZERO, -1
9D002C78  8F8380D4   LW V1, -32556(GP)
9D002C7C  5062000A   BEQL V1, V0, 0x9D002CA8
9D002C80  8FBF0014   LW RA, 20(SP)
579:                             return;
580:                         changeState(MOVE3);
9D002C84  0F4009F3   JAL changeState
9D002C88  2404000A   ADDIU A0, ZERO, 10
581:                     }
582:                     else if(input == CANCEL)
9D002C94  14820004   BNE A0, V0, 0x9D002CA8
9D002C98  8FBF0014   LW RA, 20(SP)
583:                         changeState(MOVE1);
9D002C9C  0F4009F3   JAL changeState
9D002CA0  24040008   ADDIU A0, ZERO, 8
584:                 }
9D002C40  0B400B2A   J 0x9D002CA8
9D002C44  8FBF0014   LW RA, 20(SP)
9D002C64  0B400B2A   J 0x9D002CA8
9D002C68  8FBF0014   LW RA, 20(SP)
9D002C8C  0B400B2A   J 0x9D002CA8
9D002C90  8FBF0014   LW RA, 20(SP)
9D002CA4  8FBF0014   LW RA, 20(SP)
9D002CA8  03E00008   JR RA
9D002CAC  27BD0018   ADDIU SP, SP, 24
585:                 void moveTroopsNumber(Input input)
586:                 {
9D002A30  27BDFFE8   ADDIU SP, SP, -24
9D002A34  AFBF0014   SW RA, 20(SP)
587:                     if(input == NEXT)
9D002A38  24020002   ADDIU V0, ZERO, 2
9D002A3C  1482001D   BNE A0, V0, 0x9D002AB4
9D002A40  AFB00010   SW S0, 16(SP)
588:                     {
589:                         if(territories[source].troops > 1)
9D002A44  8F8280E0   LW V0, -32544(GP)
9D002A48  000218C0   SLL V1, V0, 3
9D002A4C  00022140   SLL A0, V0, 5
9D002A50  00832023   SUBU A0, A0, V1
9D002A54  3C038000   LUI V1, -32768
9D002A58  246341A8   ADDIU V1, V1, 16808
9D002A5C  00641821   ADDU V1, V1, A0
9D002A60  8C630014   LW V1, 20(V1)
9D002A64  28630002   SLTI V1, V1, 2
9D002A68  14600068   BNE V1, ZERO, 0x9D002C0C
9D002A6C  8F8580D4   LW A1, -32556(GP)
590:                         {
591:                             territories[destination].troops += 1;
9D002A70  3C038000   LUI V1, -32768
9D002A74  246341A8   ADDIU V1, V1, 16808
9D002A78  000520C0   SLL A0, A1, 3
9D002A7C  00052940   SLL A1, A1, 5
9D002A80  00A42023   SUBU A0, A1, A0
9D002A84  00642021   ADDU A0, V1, A0
9D002A88  8C850014   LW A1, 20(A0)
9D002A8C  24A50001   ADDIU A1, A1, 1
9D002A90  AC850014   SW A1, 20(A0)
592:                             territories[source].troops -= 1;
9D002A94  000220C0   SLL A0, V0, 3
9D002A98  00021140   SLL V0, V0, 5
9D002A9C  00441023   SUBU V0, V0, A0
9D002AA0  00621021   ADDU V0, V1, V0
9D002AA4  8C430014   LW V1, 20(V0)
9D002AA8  2463FFFF   ADDIU V1, V1, -1
9D002AAC  0B400B03   J 0x9D002C0C
9D002AB0  AC430014   SW V1, 20(V0)
593:                         }
594:                     }
595:                     else if(input == PREVIOUS)
9D002AB4  24020003   ADDIU V0, ZERO, 3
9D002AB8  1482001E   BNE A0, V0, 0x9D002B34
9D002ABC  8F8280E0   LW V0, -32544(GP)
596:                     {
597:                         if(territories[source].troops < numTroops)
9D002AC0  000218C0   SLL V1, V0, 3
9D002AC4  00022140   SLL A0, V0, 5
9D002AC8  00832023   SUBU A0, A0, V1
9D002ACC  3C038000   LUI V1, -32768
9D002AD0  246341A8   ADDIU V1, V1, 16808
9D002AD4  00641821   ADDU V1, V1, A0
9D002AD8  8C640014   LW A0, 20(V1)
9D002ADC  8F83805C   LW V1, -32676(GP)
9D002AE0  0083182A   SLT V1, A0, V1
9D002AE4  1060004A   BEQ V1, ZERO, 0x9D002C10
9D002AE8  8FBF0014   LW RA, 20(SP)
598:                         {
599:                             territories[destination].troops -= 1;
9D002AEC  8F8580D4   LW A1, -32556(GP)
9D002AF0  3C038000   LUI V1, -32768
9D002AF4  246341A8   ADDIU V1, V1, 16808
9D002AF8  000520C0   SLL A0, A1, 3
9D002AFC  00052940   SLL A1, A1, 5
9D002B00  00A42023   SUBU A0, A1, A0
9D002B04  00642021   ADDU A0, V1, A0
9D002B08  8C850014   LW A1, 20(A0)
9D002B0C  24A5FFFF   ADDIU A1, A1, -1
9D002B10  AC850014   SW A1, 20(A0)
600:                             territories[source].troops += 1;
9D002B14  000220C0   SLL A0, V0, 3
9D002B18  00021140   SLL V0, V0, 5
9D002B1C  00441023   SUBU V0, V0, A0
9D002B20  00621021   ADDU V0, V1, V0
9D002B24  8C430014   LW V1, 20(V0)
9D002B28  24630001   ADDIU V1, V1, 1
9D002B2C  0B400B03   J 0x9D002C0C
9D002B30  AC430014   SW V1, 20(V0)
601:                         }
602:                     }
603:                     else if(input == ADVANCE)
9D002B34  1480001E   BNE A0, ZERO, 0x9D002BB0
9D002B38  24020001   ADDIU V0, ZERO, 1
604:                     {
605:                         logMove(currentPlayer, source, destination, 
9D002B58  8C420014   LW V0, 20(V0)
9D002B5C  8F8480C8   LW A0, -32568(GP)
9D002B60  8F8680D4   LW A2, -32556(GP)
9D002B64  8F87805C   LW A3, -32676(GP)
9D002B68  0F401B1B   JAL logMove
9D002B6C  00E23823   SUBU A3, A3, V0
606:                                 numTroops - territories[source].troops);
9D002B3C  8F8580E0   LW A1, -32544(GP)
9D002B40  3C108000   LUI S0, -32768
9D002B44  261041A8   ADDIU S0, S0, 16808
9D002B48  000510C0   SLL V0, A1, 3
9D002B4C  00051940   SLL V1, A1, 5
9D002B50  00621023   SUBU V0, V1, V0
9D002B54  02021021   ADDU V0, S0, V0
607:                 
608:                         do
609:                         {
610:                             currentPlayer += 1;
9D002B80  24420001   ADDIU V0, V0, 1
611:                             if(currentPlayer == numPlayers)
9D002B70  8F8580D0   LW A1, -32560(GP)
9D002B84  50450001   BEQL V0, A1, 0x9D002B8C
9D002B88  00001021   ADDU V0, ZERO, ZERO
612:                                 currentPlayer = 0;
613:                         } while(!playerLiving(currentPlayer));
614:                         
615:                         changeState(REINFORCE);
9D002BA0  0F4009F3   JAL changeState
9D002BA4  24040003   ADDIU A0, ZERO, 3
616:                     }
617:                     else if(input == CANCEL)
9D002BB0  14820017   BNE A0, V0, 0x9D002C10
9D002BB4  8FBF0014   LW RA, 20(SP)
618:                     {
619:                         territories[destination].troops -= 
9D002BB8  8F8780D4   LW A3, -32556(GP)
9D002BC4  3C058000   LUI A1, -32768
9D002BC8  24A541A8   ADDIU A1, A1, 16808
9D002BCC  000710C0   SLL V0, A3, 3
9D002BD0  00072140   SLL A0, A3, 5
9D002BD4  00822023   SUBU A0, A0, V0
9D002BD8  00A42021   ADDU A0, A1, A0
9D002BF8  00A32823   SUBU A1, A1, V1
9D002BFC  AC850014   SW A1, 20(A0)
620:                             numTroops - territories[source].troops;
9D002BBC  8F8680E0   LW A2, -32544(GP)
9D002BC0  8F83805C   LW V1, -32676(GP)
9D002BDC  000610C0   SLL V0, A2, 3
9D002BE0  00063140   SLL A2, A2, 5
9D002BE4  00C21023   SUBU V0, A2, V0
9D002BE8  00A21021   ADDU V0, A1, V0
9D002BEC  8C460014   LW A2, 20(V0)
9D002BF0  8C850014   LW A1, 20(A0)
9D002BF4  00C52821   ADDU A1, A2, A1
621:                         territories[source].troops = numTroops;
9D002C00  AC430014   SW V1, 20(V0)
622:                         changeState(MOVE2);
9D002C04  0F4009F3   JAL changeState
9D002C08  24040009   ADDIU A0, ZERO, 9
623:                     }
624:                 }
9D002BA8  0B400B04   J 0x9D002C10
9D002BAC  8FBF0014   LW RA, 20(SP)
9D002C0C  8FBF0014   LW RA, 20(SP)
9D002C10  8FB00010   LW S0, 16(SP)
9D002C14  03E00008   JR RA
9D002C18  27BD0018   ADDIU SP, SP, 24
625:                 void gameOver(Input input)
626:                 {
9D002A0C  27BDFFE8   ADDIU SP, SP, -24
627:                     if(input == CANCEL)
9D002A10  24020001   ADDIU V0, ZERO, 1
9D002A14  14820003   BNE A0, V0, 0x9D002A24
9D002A18  AFBF0014   SW RA, 20(SP)
628:                     {
629:                         changeState(INIT);
9D002A1C  0F4009F3   JAL changeState
9D002A20  00002021   ADDU A0, ZERO, ZERO
630:                     }
631:                 }
9D002A24  8FBF0014   LW RA, 20(SP)
9D002A28  03E00008   JR RA
9D002A2C  27BD0018   ADDIU SP, SP, 24
632:                 
633:                 void moveSelection(int movesource, int direction, int (*predicate)(int))
634:                 {
9D0026EC  27BDFFD0   ADDIU SP, SP, -48
9D0026F0  AFBF002C   SW RA, 44(SP)
9D0026F4  AFB50028   SW S5, 40(SP)
9D0026F8  AFB40024   SW S4, 36(SP)
9D0026FC  AFB30020   SW S3, 32(SP)
9D002700  AFB2001C   SW S2, 28(SP)
9D002704  AFB10018   SW S1, 24(SP)
9D002708  AFB00014   SW S0, 20(SP)
9D00270C  00A09821   ADDU S3, A1, ZERO
635:                     int * p = (movesource? &source : &destination);
9D002710  10800003   BEQ A0, ZERO, 0x9D002720
9D002714  00C09021   ADDU S2, A2, ZERO
9D002718  0B4009C9   J 0x9D002724
9D00271C  279080E0   ADDIU S0, GP, -32544
9D002720  279080D4   ADDIU S0, GP, -32556
636:                 
637:                     int tries = 0;
9D002724  00008821   ADDU S1, ZERO, ZERO
638:                     while(tries < NUM_TERRITORIES)
9D00272C  24140002   ADDIU S4, ZERO, 2
9D002764  5634FFF3   BNEL S1, S4, 0x9D002734
9D002768  8E020000   LW V0, 0(S0)
639:                     {
640:                         *p += direction;
9D002730  8E020000   LW V0, 0(S0)
9D002734  02621021   ADDU V0, S3, V0
641:                         if(*p < 0)
9D002738  04410003   BGEZ V0, 0x9D002748
9D00273C  AE020000   SW V0, 0(S0)
642:                             *p = NUM_TERRITORIES - 1;
9D002728  24150001   ADDIU S5, ZERO, 1
9D002740  0B4009D5   J 0x9D002754
9D002744  AE150000   SW S5, 0(S0)
643:                         else if(*p >= NUM_TERRITORIES)
9D002748  28420002   SLTI V0, V0, 2
9D00274C  50400001   BEQL V0, ZERO, 0x9D002754
9D002750  AE000000   SW ZERO, 0(S0)
644:                             *p = 0;
645:                 
646:                         tries++;
647:                         if(predicate(*p))
9D002754  0240F809   JALR S2
9D002758  8E040000   LW A0, 0(S0)
9D00275C  14400005   BNE V0, ZERO, 0x9D002774
9D002760  26310001   ADDIU S1, S1, 1
648:                             return;
649:                     }
650:                     // Couldn't find a valid territory, so make sure nothing is selected
651:                     *p = -1; 
9D00276C  2402FFFF   ADDIU V0, ZERO, -1
9D002770  AE020000   SW V0, 0(S0)
652:                 }
9D002774  8FBF002C   LW RA, 44(SP)
9D002778  8FB50028   LW S5, 40(SP)
9D00277C  8FB40024   LW S4, 36(SP)
9D002780  8FB30020   LW S3, 32(SP)
9D002784  8FB2001C   LW S2, 28(SP)
9D002788  8FB10018   LW S1, 24(SP)
9D00278C  8FB00014   LW S0, 20(SP)
9D002790  03E00008   JR RA
9D002794  27BD0030   ADDIU SP, SP, 48
653:                 
654:                 void changeState(State newstate)
9D0028D8  00431821   ADDU V1, V0, V1
655:                 {
9D0027CC  27BDFFE8   ADDIU SP, SP, -24
9D0027D0  AFBF0014   SW RA, 20(SP)
656:                     state = newstate;
657:                 
658:                     if(state == INIT)
9D0027D4  1480000C   BNE A0, ZERO, 0x9D002808
9D0027D8  AF848044   SW A0, -32700(GP)
659:                     {
660:                         resetGame();
9D0027DC  0F4009E6   JAL resetGame
9D0027E0  00000000   NOP
661:                         numPlayers = 2;
9D0027E4  24020002   ADDIU V0, ZERO, 2
9D0027E8  AF8280D0   SW V0, -32560(GP)
662:                         cardValueScheme = INCREASING;
9D0027EC  AF8080C0   SW ZERO, -32576(GP)
663:                         randomTerritories = 1;
9D0027F0  24020001   ADDIU V0, ZERO, 1
9D0027F4  AF8280CC   SW V0, -32564(GP)
664:                         multipleDeploy = 1;
9D0027F8  AF8280E4   SW V0, -32540(GP)
665:                         currentOption = OPTION_NUM_PLAYERS; 
9D0027FC  AF808048   SW ZERO, -32696(GP)
666:                 
667:                         currentPlayer = -1;
9D002800  2402FFFF   ADDIU V0, ZERO, -1
9D002804  AF8280C8   SW V0, -32568(GP)
668:                     }
669:                 
670:                     if(state == SELECT)
9D002808  24020001   ADDIU V0, ZERO, 1
9D00280C  8F838044   LW V1, -32700(GP)
9D002810  1462000A   BNE V1, V0, 0x9D00283C
9D002814  8F828044   LW V0, -32700(GP)
671:                     {
672:                         territoriesRemaining = NUM_TERRITORIES;
9D002818  24020002   ADDIU V0, ZERO, 2
9D00281C  AF82804C   SW V0, -32692(GP)
673:                         firstPlayer = randint(0, numPlayers - 1);
9D002820  00002021   ADDU A0, ZERO, ZERO
9D002824  8F8580D0   LW A1, -32560(GP)
9D002828  0F40133F   JAL randint
9D00282C  24A5FFFF   ADDIU A1, A1, -1
9D002830  AF828050   SW V0, -32688(GP)
674:                         currentPlayer = firstPlayer;
9D002834  AF8280C8   SW V0, -32568(GP)
675:                     }
676:                 
677:                     if(state != BATTLE && state != CONQUER && state != MOVE3)
9D002838  8F828044   LW V0, -32700(GP)
9D00283C  2443FFFA   ADDIU V1, V0, -6
9D002840  2C630002   SLTIU V1, V1, 2
9D002844  1460000A   BNE V1, ZERO, 0x9D002870
9D002848  2403000A   ADDIU V1, ZERO, 10
9D00284C  1043000E   BEQ V0, V1, 0x9D002888
9D002850  2403FFFF   ADDIU V1, ZERO, -1
678:                     {
679:                         destination = -1;
9D002854  AF8380D4   SW V1, -32556(GP)
680:                         if(state != ATTACK2 && state != MOVE2)
9D002858  24030005   ADDIU V1, ZERO, 5
9D00285C  10430004   BEQ V0, V1, 0x9D002870
9D002860  24030009   ADDIU V1, ZERO, 9
9D002864  10430002   BEQ V0, V1, 0x9D002870
9D002868  2402FFFF   ADDIU V0, ZERO, -1
681:                             source = -1;
9D00286C  AF8280E0   SW V0, -32544(GP)
682:                     }
683:                 
684:                     if(state != ATTACK1 && state != BATTLE && state != CONQUER)
9D002870  8F828044   LW V0, -32700(GP)
9D002874  24030004   ADDIU V1, ZERO, 4
9D002878  10430062   BEQ V0, V1, 0x9D002A04
9D00287C  24030006   ADDIU V1, ZERO, 6
9D002880  1043001D   BEQ V0, V1, 0x9D0028F8
9D002884  24030002   ADDIU V1, ZERO, 2
9D002888  24030007   ADDIU V1, ZERO, 7
9D00288C  10430019   BEQ V0, V1, 0x9D0028F4
9D002890  8F828044   LW V0, -32700(GP)
685:                     {
686:                         attackerDice[0] = attackerDice[1] = attackerDice[2] = 0;
9D002894  3C028000   LUI V0, -32768
9D002898  2443023C   ADDIU V1, V0, 572
9D00289C  AC600008   SW ZERO, 8(V1)
9D0028A0  AC600004   SW ZERO, 4(V1)
9D0028A4  AC40023C   SW ZERO, 572(V0)
687:                         defenderDice[0] = defenderDice[1] = 0;
9D0028A8  AF8080DC   SW ZERO, -32548(GP)
9D0028AC  AF8080D8   SW ZERO, -32552(GP)
688:                     }
689:                     
690:                     if(state == SELECT)
9D0028B0  8F828044   LW V0, -32700(GP)
9D0028B4  24030001   ADDIU V1, ZERO, 1
9D0028B8  1443000E   BNE V0, V1, 0x9D0028F4
9D0028BC  8F8380D0   LW V1, -32560(GP)
9D002A04  0B400A3D   J 0x9D0028F4
9D002A08  8F828044   LW V0, -32700(GP)
691:                     {
692:                         for(int i = 0; i < numPlayers; i++)
9D0028C0  1860002D   BLEZ V1, 0x9D002978
9D0028C4  00031880   SLL V1, V1, 2
9D0028E4  5443FFFE   BNEL V0, V1, 0x9D0028E0
9D0028E8  AC440000   SW A0, 0(V0)
693:                             deployTroopsLeft[i] = initialTroops[numPlayers];
9D0028C8  3C049D01   LUI A0, -25343
9D0028CC  24848FD8   ADDIU A0, A0, -28712
9D0028D0  7C83200A   LWX A0, V1(A0)
9D0028D4  27828054   ADDIU V0, GP, -32684
9D0028DC  AC440000   SW A0, 0(V0)
9D0028E0  24420004   ADDIU V0, V0, 4
694:                     }
695:                     else if(state == DEPLOY)
9D0028F4  24030002   ADDIU V1, ZERO, 2
9D0028F8  1443000A   BNE V0, V1, 0x9D002924
9D0028FC  24030003   ADDIU V1, ZERO, 3
696:                     {
697:                         numTroops = min(deployTroopsLeft[currentPlayer], multipleDeploy);
9D002900  8F8380C8   LW V1, -32568(GP)
9D002904  00031880   SLL V1, V1, 2
9D002908  8F8280E4   LW V0, -32540(GP)
9D00290C  27848054   ADDIU A0, GP, -32684
9D002910  7C83180A   LWX V1, V1(A0)
9D002914  0043202A   SLT A0, V0, V1
9D002918  0064100A   MOVZ V0, V1, A0
9D00291C  0B400A5D   J 0x9D002974
9D002920  AF82805C   SW V0, -32676(GP)
698:                     }
699:                     else if(state == REINFORCE)
9D002924  14430008   BNE V0, V1, 0x9D002948
9D002928  2403000A   ADDIU V1, ZERO, 10
700:                     {
701:                         if(mustTrade)
9D00292C  8F828060   LW V0, -32672(GP)
9D002930  10400003   BEQ V0, ZERO, 0x9D002940
9D002934  24020003   ADDIU V0, ZERO, 3
702:                             numTroops = 0;
9D002938  0B400A5D   J 0x9D002974
9D00293C  AF80805C   SW ZERO, -32676(GP)
703:                         else
704:                             numTroops = computeReinforcements(currentPlayer);
9D002940  0B400A5D   J 0x9D002974
9D002944  AF82805C   SW V0, -32676(GP)
705:                     }
706:                     else if(state == MOVE3)
9D002948  1443001F   BNE V0, V1, 0x9D0029C8
9D00294C  8F828044   LW V0, -32700(GP)
707:                         numTroops = territories[source].troops;
9D002950  8F8280E0   LW V0, -32544(GP)
9D002954  000218C0   SLL V1, V0, 3
9D002958  00021140   SLL V0, V0, 5
9D00295C  00431023   SUBU V0, V0, V1
9D002960  3C038000   LUI V1, -32768
9D002964  246341A8   ADDIU V1, V1, 16808
9D002968  00621021   ADDU V0, V1, V0
9D00296C  8C420014   LW V0, 20(V0)
9D002970  AF82805C   SW V0, -32676(GP)
708:                     // numTroops is also used by CONQUER, but it needs to be set earlier than
709:                     // this function is called
710:                 
711:                     if(state == REINFORCE)
9D0028EC  0B400A5E   J 0x9D002978
9D0028F0  8F828044   LW V0, -32700(GP)
9D002974  8F828044   LW V0, -32700(GP)
9D002978  24030003   ADDIU V1, ZERO, 3
9D00297C  14430013   BNE V0, V1, 0x9D0029CC
9D002980  24030007   ADDIU V1, ZERO, 7
712:                     {
713:                         reinforceMenu = 0;
9D002984  AF808064   SW ZERO, -32668(GP)
714:                         if(hands[currentPlayer].cards >= 5)
9D002988  8F8380C8   LW V1, -32568(GP)
9D00298C  00031080   SLL V0, V1, 2
9D002990  00031900   SLL V1, V1, 4
9D002994  00431021   ADDU V0, V0, V1
9D002998  00021880   SLL V1, V0, 2
9D00299C  00431021   ADDU V0, V0, V1
9D0029A0  3C038000   LUI V1, -32768
9D0029A4  24630114   ADDIU V1, V1, 276
9D0029A8  00431021   ADDU V0, V0, V1
9D0029AC  8C420060   LW V0, 96(V0)
9D0029B0  28420005   SLTI V0, V0, 5
9D0029B4  14400009   BNE V0, ZERO, 0x9D0029DC
9D0029B8  24020003   ADDIU V0, ZERO, 3
715:                             mustTrade = 1;
9D0029BC  24020001   ADDIU V0, ZERO, 1
9D0029C0  0B400A76   J 0x9D0029D8
9D0029C4  AF828060   SW V0, -32672(GP)
716:                     }
717:                     else if(state != CONQUER)
9D0029C8  24030007   ADDIU V1, ZERO, 7
9D0029CC  5043000A   BEQL V0, V1, 0x9D0029F8
9D0029D0  AF80806C   SW ZERO, -32660(GP)
718:                         mustTrade = 0;
9D0029D4  AF808060   SW ZERO, -32672(GP)
719:                 
720:                     if(state == REINFORCE && !mustTrade)
9D0029D8  24020003   ADDIU V0, ZERO, 3
9D0029DC  8F838044   LW V1, -32700(GP)
9D0029E0  54620005   BNEL V1, V0, 0x9D0029F8
9D0029E4  AF80806C   SW ZERO, -32660(GP)
9D0029E8  8F828060   LW V0, -32672(GP)
9D0029EC  50400001   BEQL V0, ZERO, 0x9D0029F4
9D0029F0  AF808068   SW ZERO, -32664(GP)
721:                         needCard = 0;
722:                 
723:                     confirm = 0;
9D0029F4  AF80806C   SW ZERO, -32660(GP)
724:                 }
9D0029F8  8FBF0014   LW RA, 20(SP)
9D0029FC  03E00008   JR RA
9D002A00  27BD0018   ADDIU SP, SP, 24
725:                 
726:                 void resetGame()
727:                 {
9D002798  27BDFFE8   ADDIU SP, SP, -24
9D00279C  AFBF0014   SW RA, 20(SP)
728:                     for(int i = 0; i < NUM_TERRITORIES; i++)
729:                     {
730:                         territories[i].owner = -1;
9D0027A0  3C028000   LUI V0, -32768
9D0027A4  244241A8   ADDIU V0, V0, 16808
9D0027A8  2403FFFF   ADDIU V1, ZERO, -1
9D0027AC  AC430010   SW V1, 16(V0)
9D0027B4  AC430028   SW V1, 40(V0)
731:                         territories[i].troops = 0;
9D0027B0  AC400014   SW ZERO, 20(V0)
732:                     }
733:                     initCards();
9D0027B8  0F400EA6   JAL initCards
9D0027BC  AC40002C   SW ZERO, 44(V0)
734:                 }
9D0027C0  8FBF0014   LW RA, 20(SP)
9D0027C4  03E00008   JR RA
9D0027C8  27BD0018   ADDIU SP, SP, 24
735:                 
736:                 int playerLiving(int player)
9D00364C  8C4241D0   LW V0, 16848(V0)
9D003650  00442026   XOR A0, V0, A0
9D003654  03E00008   JR RA
9D003658  2C820001   SLTIU V0, A0, 1
9D00365C  03E00008   JR RA
9D003660  00000000   NOP
737:                 {
738:                     for(int i = 0; i < NUM_TERRITORIES; i++)
739:                         if(territories[i].owner == player)
9D002B74  8E040010   LW A0, 16(S0)
9D002B78  8E030028   LW V1, 40(S0)
9D002B7C  8F8280C8   LW V0, -32568(GP)
9D002B8C  50440004   BEQL V0, A0, 0x9D002BA0
9D002B90  AF8280C8   SW V0, -32568(GP)
9D002B94  5443FFFB   BNEL V0, V1, 0x9D002B84
9D002B98  24420001   ADDIU V0, V0, 1
9D002B9C  AF8280C8   SW V0, -32568(GP)
9D002D2C  3C028000   LUI V0, -32768
9D002D30  244241A8   ADDIU V0, V0, 16808
9D002D34  8C440010   LW A0, 16(V0)
9D002D38  8C430028   LW V1, 40(V0)
9D002D3C  8F8280C8   LW V0, -32568(GP)
9D002D4C  50820004   BEQL A0, V0, 0x9D002D60
9D002D50  AF8280C8   SW V0, -32568(GP)
9D002D54  5462FFFB   BNEL V1, V0, 0x9D002D44
9D002D58  24420001   ADDIU V0, V0, 1
9D002D5C  AF8280C8   SW V0, -32568(GP)
9D002EF0  3C028000   LUI V0, -32768
9D002EF4  244241A8   ADDIU V0, V0, 16808
9D002EF8  8C460010   LW A2, 16(V0)
9D002EFC  8C450028   LW A1, 40(V0)
9D002F0C  50460004   BEQL V0, A2, 0x9D002F20
9D002F10  8F828060   LW V0, -32672(GP)
9D002F14  1445000C   BNE V0, A1, 0x9D002F48
9D002F18  24420001   ADDIU V0, V0, 1
9D003024  8CC20010   LW V0, 16(A2)
9D003028  10A20007   BEQ A1, V0, 0x9D003048
9D00302C  3C028000   LUI V0, -32768
9D003030  8C4241D0   LW V0, 16848(V0)
9D003034  14A2000F   BNE A1, V0, 0x9D003074
9D003038  00000000   NOP
9D00303C  0B400C12   J 0x9D003048
9D003040  00000000   NOP
9D003638  3C028000   LUI V0, -32768
9D00363C  8C4241B8   LW V0, 16824(V0)
9D003640  50440006   BEQL V0, A0, 0x9D00365C
9D003644  24020001   ADDIU V0, ZERO, 1
9D003648  3C028000   LUI V0, -32768
740:                             return 1;
741:                     return 0;
742:                 }
743:                 
744:                 int computeReinforcements(int player)
745:                 {
746:                     int territoriesHeld = 0;
747:                     int bonus = 0;
748:                 
749:                     for(int i = 0; i < NUM_TERRITORIES; i++)
750:                         if(territories[i].owner == player)
751:                             territoriesHeld += 1;
752:                 
753:                     for(int i = 0; i < NUM_CONTINENTS; i++)
754:                     {
755:                         int j;
756:                         for(j = 0; j < continents[i].members; j++)
757:                         {
758:                             if(territories[j+continents[i].firstmember].owner != player)
759:                                 break;
760:                         }
761:                         if(j == continents[i].members)
762:                             bonus += continents[i].value;
763:                     }
764:                 
765:                     return bonus + max(3, territoriesHeld / 3);
766:                 }
9D003664  03E00008   JR RA
9D003668  24020003   ADDIU V0, ZERO, 3
767:                 
768:                 #define SWAP(a,b) do{int tmp = a; a = b; b = tmp;}while(0)
769:                 void allocateRandomTerritories()
770:                 {
9D00366C  27BDFFE0   ADDIU SP, SP, -32
9D003670  AFBF001C   SW RA, 28(SP)
771:                     // create a list and randomize it
772:                     int list[NUM_TERRITORIES];
773:                     for(int i = 0; i < NUM_TERRITORIES; i++)
774:                         list[i] = i;
9D003674  AFA00010   SW ZERO, 16(SP)
9D003678  24020001   ADDIU V0, ZERO, 1
9D00367C  AFA20014   SW V0, 20(SP)
775:                     for(int i = 0; i < NUM_TERRITORIES; i++)
776:                     {
777:                         int r = randint(i, NUM_TERRITORIES - 1);
9D003680  00002021   ADDU A0, ZERO, ZERO
9D003684  0F40133F   JAL randint
9D003688  24050001   ADDIU A1, ZERO, 1
9D0036A8  24040001   ADDIU A0, ZERO, 1
9D0036AC  0F40133F   JAL randint
9D0036B0  24050001   ADDIU A1, ZERO, 1
778:                         SWAP(list[i], list[r]);
9D00368C  8FA30010   LW V1, 16(SP)
9D003690  00021080   SLL V0, V0, 2
9D003694  27A40010   ADDIU A0, SP, 16
9D003698  00821021   ADDU V0, A0, V0
9D00369C  8C440000   LW A0, 0(V0)
9D0036A0  AFA40010   SW A0, 16(SP)
9D0036A4  AC430000   SW V1, 0(V0)
9D0036B4  8FA30014   LW V1, 20(SP)
9D0036B8  00021080   SLL V0, V0, 2
9D0036BC  27A40010   ADDIU A0, SP, 16
9D0036C0  00821021   ADDU V0, A0, V0
9D0036C4  8C440000   LW A0, 0(V0)
9D0036C8  AFA40014   SW A0, 20(SP)
9D0036CC  AC430000   SW V1, 0(V0)
779:                     }
780:                 
781:                     // deal territories by forcing inputs
782:                     for(int i = 0; i < NUM_TERRITORIES; i++)
783:                     {
784:                         destination = list[i];
9D0036D0  8FA20010   LW V0, 16(SP)
9D0036D4  AF8280D4   SW V0, -32556(GP)
9D0036E0  8FA20014   LW V0, 20(SP)
9D0036E4  AF8280D4   SW V0, -32556(GP)
785:                         selectTerritories(ADVANCE);
9D0036D8  0F400D53   JAL 0x9D00354C
9D0036DC  00002021   ADDU A0, ZERO, ZERO
9D0036E8  0F400D53   JAL 0x9D00354C
9D0036EC  00002021   ADDU A0, ZERO, ZERO
786:                     }
787:                 }
9D0036F0  8FBF001C   LW RA, 28(SP)
9D0036F4  03E00008   JR RA
9D0036F8  27BD0020   ADDIU SP, SP, 32
---  /home/jacob/Documents/477/RISK/game/cards.c  -------------------------------------------------------
1:                   #include "cards.h"
2:                   #include "gamedata.h"
3:                   #include "territory.h"
4:                   #include "io.h"
5:                   #include "log.h"
6:                   
7:                   Hand hands[MAX_PLAYERS];
8:                   int cardExchangeValue;
9:                   CardValueScheme cardValueScheme;
10:                  
11:                  int cardValueIndex;
12:                  
13:                  Card deck[NUM_CARDS];
14:                  int deckSize;
15:                  Card discards[NUM_CARDS];
16:                  int discardsSize;
17:                  
18:                  #define SWAP(a,b) do{Card tmp = a; a = b; b = tmp;}while(0)
19:                  
20:                  void shuffleDeck()
9D003A2C  8E050000   LW A1, 0(S0)
9D003A30  8E040004   LW A0, 4(S0)
9D003A34  8E030008   LW V1, 8(S0)
21:                  {
9D0039F4  27BDFFE0   ADDIU SP, SP, -32
9D0039F8  AFBF001C   SW RA, 28(SP)
9D0039FC  AFB20018   SW S2, 24(SP)
9D003A00  AFB10014   SW S1, 20(SP)
9D003A04  AFB00010   SW S0, 16(SP)
22:                      for(int i = 0; i < deckSize; i++)
9D003A08  8F8580B8   LW A1, -32584(GP)
9D003A0C  18A0001C   BLEZ A1, 0x9D003A80
9D003A10  3C108000   LUI S0, -32768
9D003A14  2610020C   ADDIU S0, S0, 524
9D003A18  00008821   ADDU S1, ZERO, ZERO
9D003A6C  26310001   ADDIU S1, S1, 1
9D003A70  8F8580B8   LW A1, -32584(GP)
9D003A74  0225102A   SLT V0, S1, A1
9D003A78  1440FFE9   BNE V0, ZERO, 0x9D003A20
9D003A7C  2610000C   ADDIU S0, S0, 12
23:                      {
24:                          int r = randint(i, deckSize - 1);
9D003A20  02202021   ADDU A0, S1, ZERO
9D003A24  0F40133F   JAL randint
9D003A28  24A5FFFF   ADDIU A1, A1, -1
25:                          SWAP(deck[i], deck[r]);
9D003A1C  02009021   ADDU S2, S0, ZERO
9D003A38  00023080   SLL A2, V0, 2
9D003A3C  00021100   SLL V0, V0, 4
9D003A40  00461023   SUBU V0, V0, A2
9D003A44  00521021   ADDU V0, V0, S2
9D003A48  8C480000   LW T0, 0(V0)
9D003A4C  8C470004   LW A3, 4(V0)
9D003A50  8C460008   LW A2, 8(V0)
9D003A54  AE080000   SW T0, 0(S0)
9D003A58  AE070004   SW A3, 4(S0)
9D003A5C  AE060008   SW A2, 8(S0)
9D003A60  AC450000   SW A1, 0(V0)
9D003A64  AC440004   SW A0, 4(V0)
9D003A68  AC430008   SW V1, 8(V0)
26:                      }
27:                  }
9D003A80  8FBF001C   LW RA, 28(SP)
9D003A84  8FB20018   LW S2, 24(SP)
9D003A88  8FB10014   LW S1, 20(SP)
9D003A8C  8FB00010   LW S0, 16(SP)
9D003A90  03E00008   JR RA
9D003A94  27BD0020   ADDIU SP, SP, 32
28:                  
29:                  void initCards()
30:                  {
9D003A98  27BDFFE8   ADDIU SP, SP, -24
9D003A9C  AFBF0014   SW RA, 20(SP)
31:                      for(int i = 0; i < MAX_PLAYERS; i++)
32:                      {
33:                          hands[i].cards = 0;
9D003AA0  3C028000   LUI V0, -32768
9D003AA4  24420114   ADDIU V0, V0, 276
9D003AA8  AC400060   SW ZERO, 96(V0)
9D003AAC  AC4000C4   SW ZERO, 196(V0)
34:                      }
35:                      discardsSize = 0;
9D003AB0  AF8080B4   SW ZERO, -32588(GP)
9D003AB4  3C038000   LUI V1, -32768
9D003AB8  24630210   ADDIU V1, V1, 528
9D003ABC  3C048000   LUI A0, -32768
9D003AC0  248441B4   ADDIU A0, A0, 16820
36:                      
37:                      for(int i = 0; i < NUM_CARDS; i++)
9D003AC4  00001021   ADDU V0, ZERO, ZERO
9D003AD0  24060004   ADDIU A2, ZERO, 4
9D003AFC  24420001   ADDIU V0, V0, 1
9D003B00  2463000C   ADDIU V1, V1, 12
9D003B04  1446FFF3   BNE V0, A2, 0x9D003AD4
9D003B08  24840018   ADDIU A0, A0, 24
38:                      {
39:                          if(i < NUM_TERRITORIES)
9D003AD4  28450002   SLTI A1, V0, 2
9D003AD8  50A00006   BEQL A1, ZERO, 0x9D003AF4
9D003ADC  AC680000   SW T0, 0(V1)
40:                          {
41:                              deck[i].territory = i;
9D003AE0  AC620000   SW V0, 0(V1)
42:                              deck[i].type = territories[i].cardtype;
9D003AE4  8C850000   LW A1, 0(A0)
9D003AE8  AC65FFFC   SW A1, -4(V1)
43:                              deck[i].index = i;
9D003AEC  0B400EBF   J 0x9D003AFC
9D003AF0  AC620004   SW V0, 4(V1)
44:                          }
45:                          else
46:                          {
47:                              deck[i].territory = -1;
9D003AC8  2408FFFF   ADDIU T0, ZERO, -1
48:                              deck[i].type = WILD;
9D003ACC  24070003   ADDIU A3, ZERO, 3
9D003AF4  AC67FFFC   SW A3, -4(V1)
49:                              deck[i].index = i;
9D003AF8  AC620004   SW V0, 4(V1)
50:                          }
51:                      }
52:                      deckSize = NUM_CARDS;
9D003B0C  24020004   ADDIU V0, ZERO, 4
53:                      shuffleDeck();
9D003B10  0F400E7D   JAL shuffleDeck
9D003B14  AF8280B8   SW V0, -32584(GP)
54:                  
55:                      cardValueIndex = 0;
9D003B18  AF8080C4   SW ZERO, -32572(GP)
56:                      // Even if the values are increasing by 1, they start at the same first
57:                      // value. For set value sets, this number gets ignored completely.
58:                      cardExchangeValue = cardExchangeValues[0];
9D003B1C  3C029D01   LUI V0, -25343
9D003B20  8C428FC0   LW V0, -28736(V0)
9D003B24  AF8280BC   SW V0, -32580(GP)
59:                  }
9D003B28  8FBF0014   LW RA, 20(SP)
9D003B2C  03E00008   JR RA
9D003B30  27BD0018   ADDIU SP, SP, 24
60:                  
61:                  Card drawCard(int player)
9D003B64  000A4900   SLL T1, T2, 4
9D003B68  01224823   SUBU T1, T1, V0
9D003B6C  00001021   ADDU V0, ZERO, ZERO
9D003B70  3C088000   LUI T0, -32768
9D003B74  2508020C   ADDIU T0, T0, 524
9D003B78  3C078000   LUI A3, -32768
9D003B7C  24E701DC   ADDIU A3, A3, 476
9D003B80  01021821   ADDU V1, T0, V0
9D003B84  00E22021   ADDU A0, A3, V0
62:                  {
9D003B34  27BDFFE0   ADDIU SP, SP, -32
9D003B38  AFBF001C   SW RA, 28(SP)
9D003B3C  AFB20018   SW S2, 24(SP)
9D003B40  AFB10014   SW S1, 20(SP)
9D003B44  AFB00010   SW S0, 16(SP)
9D003B48  00808021   ADDU S0, A0, ZERO
63:                      if(deckSize == 0)
9D003B4C  8F8280B8   LW V0, -32584(GP)
9D003B50  14400018   BNE V0, ZERO, 0x9D003BB4
9D003B54  00A08821   ADDU S1, A1, ZERO
64:                      {
65:                          for(int i = 0; i < discardsSize; i++)
9D003B58  8F8A80B4   LW T2, -32588(GP)
9D003B5C  19400012   BLEZ T2, 0x9D003BA8
9D003B60  000A1080   SLL V0, T2, 2
9D003BA0  1449FFF7   BNE V0, T1, 0x9D003B80
9D003BA4  AC640008   SW A0, 8(V1)
66:                              deck[i] = discards[i];
9D003B88  8C860000   LW A2, 0(A0)
9D003B8C  8C850004   LW A1, 4(A0)
9D003B90  8C840008   LW A0, 8(A0)
9D003B94  AC660000   SW A2, 0(V1)
9D003B98  AC650004   SW A1, 4(V1)
9D003B9C  2442000C   ADDIU V0, V0, 12
67:                          deckSize = discardsSize;
9D003BA8  AF8A80B8   SW T2, -32584(GP)
68:                          discardsSize = 0;
69:                          shuffleDeck();
9D003BAC  0F400E7D   JAL shuffleDeck
9D003BB0  AF8080B4   SW ZERO, -32588(GP)
70:                      }
71:                  
72:                      logCard(player, deck[deckSize].type, deck[deckSize].territory);
9D003BB4  8F8380B8   LW V1, -32584(GP)
9D003BB8  00032080   SLL A0, V1, 2
9D003BBC  00031100   SLL V0, V1, 4
9D003BC0  00441023   SUBU V0, V0, A0
9D003BC4  3C128000   LUI S2, -32768
9D003BC8  2652020C   ADDIU S2, S2, 524
9D003BCC  00521021   ADDU V0, V0, S2
9D003BD0  02202021   ADDU A0, S1, ZERO
9D003BD4  8C450000   LW A1, 0(V0)
9D003BD8  0F401B27   JAL logCard
9D003BDC  8C460004   LW A2, 4(V0)
73:                  
74:                      deckSize -= 1;
9D003BE0  8F8480B8   LW A0, -32584(GP)
9D003BE4  2484FFFF   ADDIU A0, A0, -1
9D003BE8  AF8480B8   SW A0, -32584(GP)
75:                      hands[player].hand[hands[player].cards] = deck[deckSize];
9D003BEC  00111880   SLL V1, S1, 2
9D003BF0  00118900   SLL S1, S1, 4
9D003BF4  00718821   ADDU S1, V1, S1
9D003BF8  00111880   SLL V1, S1, 2
9D003BFC  02238821   ADDU S1, S1, V1
9D003C00  3C058000   LUI A1, -32768
9D003C04  24A50114   ADDIU A1, A1, 276
9D003C08  02251021   ADDU V0, S1, A1
9D003C0C  8C460060   LW A2, 96(V0)
9D003C10  00061880   SLL V1, A2, 2
9D003C14  00063100   SLL A2, A2, 4
9D003C18  00C31823   SUBU V1, A2, V1
9D003C1C  00711821   ADDU V1, V1, S1
9D003C20  00651821   ADDU V1, V1, A1
9D003C24  00042880   SLL A1, A0, 2
9D003C28  00042100   SLL A0, A0, 4
9D003C2C  00852023   SUBU A0, A0, A1
9D003C30  00929021   ADDU S2, A0, S2
9D003C34  8E460000   LW A2, 0(S2)
9D003C38  8E450004   LW A1, 4(S2)
9D003C3C  8E440008   LW A0, 8(S2)
9D003C40  AC660000   SW A2, 0(V1)
9D003C44  AC650004   SW A1, 4(V1)
9D003C48  AC640008   SW A0, 8(V1)
76:                      hands[player].cards += 1;
9D003C4C  8C430060   LW V1, 96(V0)
9D003C50  24630001   ADDIU V1, V1, 1
9D003C54  AC430060   SW V1, 96(V0)
77:                      return deck[deckSize];
9D003C58  AE060000   SW A2, 0(S0)
9D003C5C  AE050004   SW A1, 4(S0)
9D003C60  AE040008   SW A0, 8(S0)
78:                  }
9D003C64  02001021   ADDU V0, S0, ZERO
9D003C68  8FBF001C   LW RA, 28(SP)
9D003C6C  8FB20018   LW S2, 24(SP)
9D003C70  8FB10014   LW S1, 20(SP)
9D003C74  8FB00010   LW S0, 16(SP)
9D003C78  03E00008   JR RA
9D003C7C  27BD0020   ADDIU SP, SP, 32
79:                  
80:                  int cardSetValue(Card c1, Card c2, Card c3)
81:                  {
9D003C80  27BDFFF0   ADDIU SP, SP, -16
9D003C84  AFA40010   SW A0, 16(SP)
9D003C88  AFA50014   SW A1, 20(SP)
9D003C8C  AFA60018   SW A2, 24(SP)
9D003C90  AFA7001C   SW A3, 28(SP)
82:                      int amount[4] = {0,0,0,0};
9D003C94  AFA00000   SW ZERO, 0(SP)
9D003C98  AFA00004   SW ZERO, 4(SP)
9D003C9C  AFA00008   SW ZERO, 8(SP)
9D003CA0  AFA0000C   SW ZERO, 12(SP)
83:                      amount[c1.type] += 1;
9D003CA4  00042080   SLL A0, A0, 2
9D003CA8  03A42021   ADDU A0, SP, A0
9D003CAC  8C820000   LW V0, 0(A0)
9D003CB0  24420001   ADDIU V0, V0, 1
9D003CB4  AC820000   SW V0, 0(A0)
84:                      amount[c2.type] += 1;
9D003CB8  00073880   SLL A3, A3, 2
9D003CBC  03A73821   ADDU A3, SP, A3
9D003CC0  8CE20000   LW V0, 0(A3)
9D003CC4  24420001   ADDIU V0, V0, 1
9D003CC8  ACE20000   SW V0, 0(A3)
85:                      amount[c3.type] += 1;
9D003CCC  8FA20028   LW V0, 40(SP)
9D003CD0  00021080   SLL V0, V0, 2
9D003CD4  03A21021   ADDU V0, SP, V0
9D003CD8  8C430000   LW V1, 0(V0)
9D003CDC  24630001   ADDIU V1, V1, 1
9D003CE0  AC430000   SW V1, 0(V0)
86:                  
87:                      if(amount[INFANTRY] == 3 || (amount[INFANTRY] == 2 && amount[WILD] == 1))
9D003CE4  8FA20000   LW V0, 0(SP)
9D003CE8  24030003   ADDIU V1, ZERO, 3
9D003CEC  1043002F   BEQ V0, V1, 0x9D003DAC
9D003CF0  24030002   ADDIU V1, ZERO, 2
9D003CF4  14430005   BNE V0, V1, 0x9D003D0C
9D003CF8  8FA30004   LW V1, 4(SP)
9D003CFC  24030001   ADDIU V1, ZERO, 1
9D003D00  8FA4000C   LW A0, 12(SP)
9D003D04  1083002B   BEQ A0, V1, 0x9D003DB4
9D003D08  8FA30004   LW V1, 4(SP)
88:                          return 4;
9D003DAC  0B400F7C   J 0x9D003DF0
9D003DB0  24020004   ADDIU V0, ZERO, 4
9D003DB4  0B400F7C   J 0x9D003DF0
9D003DB8  24020004   ADDIU V0, ZERO, 4
89:                      if(amount[CAVALRY] == 3 || (amount[CAVALRY] == 2 && amount[WILD] == 1))
9D003D0C  24040003   ADDIU A0, ZERO, 3
9D003D10  1064002A   BEQ V1, A0, 0x9D003DBC
9D003D14  24040002   ADDIU A0, ZERO, 2
9D003D18  14640005   BNE V1, A0, 0x9D003D30
9D003D1C  8FA40008   LW A0, 8(SP)
9D003D20  24040001   ADDIU A0, ZERO, 1
9D003D24  8FA5000C   LW A1, 12(SP)
9D003D28  10A40026   BEQ A1, A0, 0x9D003DC4
9D003D2C  8FA40008   LW A0, 8(SP)
90:                          return 6;
9D003DBC  0B400F7C   J 0x9D003DF0
9D003DC0  24020006   ADDIU V0, ZERO, 6
9D003DC4  0B400F7C   J 0x9D003DF0
9D003DC8  24020006   ADDIU V0, ZERO, 6
91:                      if(amount[ARTILLERY] == 3 || (amount[ARTILLERY] == 2 && amount[WILD] == 1))
9D003D30  24050003   ADDIU A1, ZERO, 3
9D003D34  10850025   BEQ A0, A1, 0x9D003DCC
9D003D38  24050002   ADDIU A1, ZERO, 2
9D003D3C  14850004   BNE A0, A1, 0x9D003D50
9D003D40  24050001   ADDIU A1, ZERO, 1
9D003D44  8FA6000C   LW A2, 12(SP)
9D003D48  50C50029   BEQL A2, A1, 0x9D003DF0
9D003D4C  24020008   ADDIU V0, ZERO, 8
92:                          return 8;
9D003DCC  0B400F7C   J 0x9D003DF0
9D003DD0  24020008   ADDIU V0, ZERO, 8
93:                      if((amount[INFANTRY] == 1 && amount[CAVALRY] == 1 
9D003D50  10450003   BEQ V0, A1, 0x9D003D60
9D003D54  8FA6000C   LW A2, 12(SP)
94:                                  && amount[ARTILLERY] == 1)
95:                              || (amount[WILD] == 1 && amount[CAVALRY] == 1 
9D003D58  54C50025   BNEL A2, A1, 0x9D003DF0
9D003D5C  00001021   ADDU V0, ZERO, ZERO
9D003D60  24050001   ADDIU A1, ZERO, 1
9D003D64  10650006   BEQ V1, A1, 0x9D003D80
9D003D68  00000000   NOP
96:                                  && amount[ARTILLERY] == 1)
97:                              || (amount[INFANTRY] == 1 && amount[WILD] == 1 
9D003D6C  14450019   BNE V0, A1, 0x9D003DD4
9D003D70  8FA6000C   LW A2, 12(SP)
9D003D74  54C5001E   BNEL A2, A1, 0x9D003DF0
9D003D78  00001021   ADDU V0, ZERO, ZERO
9D003D7C  24050001   ADDIU A1, ZERO, 1
9D003D80  10850016   BEQ A0, A1, 0x9D003DDC
9D003D84  24040001   ADDIU A0, ZERO, 1
98:                                  && amount[ARTILLERY] == 1)
99:                              || (amount[INFANTRY] == 1 && amount[CAVALRY] == 1 
9D003D88  14440019   BNE V0, A0, 0x9D003DF0
9D003D8C  00001021   ADDU V0, ZERO, ZERO
9D003D90  24020001   ADDIU V0, ZERO, 1
9D003D94  14620013   BNE V1, V0, 0x9D003DE4
9D003D98  8FA3000C   LW V1, 12(SP)
100:                                 && amount[WILD] == 1))
9D003D9C  10620013   BEQ V1, V0, 0x9D003DEC
9D003DA0  00001021   ADDU V0, ZERO, ZERO
9D003DA4  0B400F7C   J 0x9D003DF0
9D003DA8  00000000   NOP
101:                     {
102:                         return 10;
9D003DDC  0B400F7C   J 0x9D003DF0
9D003DE0  2402000A   ADDIU V0, ZERO, 10
9D003DEC  2402000A   ADDIU V0, ZERO, 10
103:                     }
104:                 
105:                     return 0;
9D003DD4  0B400F7C   J 0x9D003DF0
9D003DD8  00001021   ADDU V0, ZERO, ZERO
9D003DE4  0B400F7C   J 0x9D003DF0
9D003DE8  00001021   ADDU V0, ZERO, ZERO
106:                 }
9D003DF0  03E00008   JR RA
9D003DF4  27BD0010   ADDIU SP, SP, 16
107:                 
108:                 int exchangeCardIndices(int player, int cardidx1, int cardidx2, int cardidx3)
9D0043BC  00041100   SLL V0, A0, 4
9D0043C0  01621021   ADDU V0, T3, V0
9D0043C4  00025880   SLL T3, V0, 2
9D0043C8  004B1021   ADDU V0, V0, T3
9D0043CC  24420008   ADDIU V0, V0, 8
9D0043D0  00625821   ADDU T3, V1, V0
109:                 {
9D004388  27BDFFE8   ADDIU SP, SP, -24
9D00438C  AFBF0014   SW RA, 20(SP)
110:                     int idx1 = -1, idx2 = -1, idx3 = -1;
9D0043D8  2402FFFF   ADDIU V0, ZERO, -1
9D0043DC  2403FFFF   ADDIU V1, ZERO, -1
9D0043E0  2408FFFF   ADDIU T0, ZERO, -1
111:                     for(int i = 0; i < hands[player].cards; i++)
9D004390  00041880   SLL V1, A0, 2
9D004394  00041100   SLL V0, A0, 4
9D004398  00621021   ADDU V0, V1, V0
9D00439C  00021880   SLL V1, V0, 2
9D0043A0  00431021   ADDU V0, V0, V1
9D0043A4  3C038000   LUI V1, -32768
9D0043A8  24630114   ADDIU V1, V1, 276
9D0043AC  00431021   ADDU V0, V0, V1
9D0043B0  8C4C0060   LW T4, 96(V0)
9D0043B4  19800021   BLEZ T4, 0x9D00443C
9D0043B8  00045880   SLL T3, A0, 2
9D0043D4  00005021   ADDU T2, ZERO, ZERO
9D004400  254A0001   ADDIU T2, T2, 1
9D004404  154CFFF7   BNE T2, T4, 0x9D0043E4
9D004408  256B000C   ADDIU T3, T3, 12
112:                     {
113:                         if(hands[player].hand[i].index == cardidx1)
9D0043E4  8D690000   LW T1, 0(T3)
9D0043E8  51250001   BEQL T1, A1, 0x9D0043F0
9D0043EC  01404021   ADDU T0, T2, ZERO
114:                             idx1 = i;
115:                         if(hands[player].hand[i].index == cardidx2)
9D0043F0  51260001   BEQL T1, A2, 0x9D0043F8
9D0043F4  01401821   ADDU V1, T2, ZERO
116:                             idx2 = i;
117:                         if(hands[player].hand[i].index == cardidx3)
9D0043F8  51270001   BEQL T1, A3, 0x9D004400
9D0043FC  01401021   ADDU V0, T2, ZERO
118:                             idx3 = i;
119:                     }
120:                     if(idx1 == -1 || idx2 == -1 || idx3 == -1)
9D00440C  2405FFFF   ADDIU A1, ZERO, -1
9D004410  5105000D   BEQL T0, A1, 0x9D004448
9D004414  00001021   ADDU V0, ZERO, ZERO
9D004418  5065000B   BEQL V1, A1, 0x9D004448
9D00441C  00001021   ADDU V0, ZERO, ZERO
9D004420  10450008   BEQ V0, A1, 0x9D004444
9D004424  01002821   ADDU A1, T0, ZERO
121:                         return 0;
9D00443C  0B401112   J 0x9D004448
9D004440  00001021   ADDU V0, ZERO, ZERO
9D004444  00001021   ADDU V0, ZERO, ZERO
122:                     return exchangeCards(player, idx1, idx2, idx3);
9D004428  00603021   ADDU A2, V1, ZERO
9D00442C  0F400F7E   JAL exchangeCards
9D004430  00403821   ADDU A3, V0, ZERO
9D004434  0B401113   J 0x9D00444C
9D004438  8FBF0014   LW RA, 20(SP)
123:                 }
9D004448  8FBF0014   LW RA, 20(SP)
9D00444C  03E00008   JR RA
9D004450  27BD0018   ADDIU SP, SP, 24
124:                 
125:                 int exchangeCards(int player, int idx1, int idx2, int idx3)
126:                 {
9D003DF8  27BDFF70   ADDIU SP, SP, -144
9D003DFC  AFBF008C   SW RA, 140(SP)
9D003E00  AFBE0088   SW S8, 136(SP)
9D003E04  AFB70084   SW S7, 132(SP)
9D003E08  AFB60080   SW S6, 128(SP)
9D003E0C  AFB5007C   SW S5, 124(SP)
9D003E10  AFB40078   SW S4, 120(SP)
9D003E14  AFB30074   SW S3, 116(SP)
9D003E18  AFB20070   SW S2, 112(SP)
9D003E1C  AFB1006C   SW S1, 108(SP)
9D003E20  AFB00068   SW S0, 104(SP)
9D003E24  00808021   ADDU S0, A0, ZERO
9D003E28  00A08821   ADDU S1, A1, ZERO
9D003E2C  00C09021   ADDU S2, A2, ZERO
9D003E30  00E09821   ADDU S3, A3, ZERO
127:                     int handsize = hands[player].cards;
9D003E34  00041880   SLL V1, A0, 2
9D003E38  00041100   SLL V0, A0, 4
9D003E3C  00621021   ADDU V0, V1, V0
9D003E40  00021880   SLL V1, V0, 2
9D003E44  00431021   ADDU V0, V0, V1
9D003E48  3C038000   LUI V1, -32768
9D003E4C  24630114   ADDIU V1, V1, 276
9D003E50  00431021   ADDU V0, V0, V1
128:                     if(idx1 == idx2 || idx1 == idx3 || idx2 == idx3)
9D003E54  10A60136   BEQ A1, A2, 0x9D004330
9D003E58  8C550060   LW S5, 96(V0)
9D003E5C  50A7013D   BEQL A1, A3, 0x9D004354
9D003E60  0000A021   ADDU S4, ZERO, ZERO
9D003E64  10C70134   BEQ A2, A3, 0x9D004338
9D003E68  00B5102A   SLT V0, A1, S5
129:                         return 0;
9D004330  0B4010D5   J 0x9D004354
9D004334  0000A021   ADDU S4, ZERO, ZERO
9D004338  0B4010D5   J 0x9D004354
9D00433C  0000A021   ADDU S4, ZERO, ZERO
130:                     if(idx1 >= handsize || idx2 >= handsize || idx3 >= handsize)
9D003E6C  10400134   BEQ V0, ZERO, 0x9D004340
9D003E70  00D5102A   SLT V0, A2, S5
9D003E74  10400134   BEQ V0, ZERO, 0x9D004348
9D003E78  00F5102A   SLT V0, A3, S5
9D003E7C  10400134   BEQ V0, ZERO, 0x9D004350
9D003E80  00051080   SLL V0, A1, 2
131:                         return 0;
9D004340  0B4010D5   J 0x9D004354
9D004344  0000A021   ADDU S4, ZERO, ZERO
9D004348  0B4010D5   J 0x9D004354
9D00434C  0000A021   ADDU S4, ZERO, ZERO
9D004350  0000A021   ADDU S4, ZERO, ZERO
132:                 
133:                     Card c1 = hands[player].hand[idx1];
9D003E84  00051900   SLL V1, A1, 4
9D003E88  00621023   SUBU V0, V1, V0
9D003E8C  00042080   SLL A0, A0, 2
9D003E90  00101900   SLL V1, S0, 4
9D003E94  00832021   ADDU A0, A0, V1
9D003E98  00041880   SLL V1, A0, 2
9D003E9C  00832021   ADDU A0, A0, V1
9D003EA0  00441021   ADDU V0, V0, A0
9D003EA4  3C038000   LUI V1, -32768
9D003EA8  24630114   ADDIU V1, V1, 276
9D003EAC  00431021   ADDU V0, V0, V1
9D003EB0  8C560000   LW S6, 0(V0)
9D003EB4  8C570004   LW S7, 4(V0)
9D003EB8  8C460008   LW A2, 8(V0)
9D003EBC  AFB60028   SW S6, 40(SP)
9D003EC0  AFB7002C   SW S7, 44(SP)
9D003EC4  AFA60030   SW A2, 48(SP)
9D003EC8  AFB60060   SW S6, 96(SP)
134:                     Card c2 = hands[player].hand[idx2];
9D003ECC  00121080   SLL V0, S2, 2
9D003ED0  00122900   SLL A1, S2, 4
9D003ED4  00A21023   SUBU V0, A1, V0
9D003ED8  00441021   ADDU V0, V0, A0
9D003EDC  00431021   ADDU V0, V0, V1
9D003EE0  8C5E0000   LW S8, 0(V0)
9D003EE4  8C450004   LW A1, 4(V0)
9D003EE8  AFA50054   SW A1, 84(SP)
9D003EEC  8C450008   LW A1, 8(V0)
9D003EF0  AFBE0034   SW S8, 52(SP)
9D003EF4  8FA20054   LW V0, 84(SP)
9D003EF8  AFA20038   SW V0, 56(SP)
9D003EFC  AFA5003C   SW A1, 60(SP)
9D003F00  AFBE005C   SW S8, 92(SP)
135:                     Card c3 = hands[player].hand[idx3];
9D003F04  00071080   SLL V0, A3, 2
9D003F08  00073900   SLL A3, A3, 4
9D003F0C  00E21023   SUBU V0, A3, V0
9D003F10  00441021   ADDU V0, V0, A0
9D003F14  00431021   ADDU V0, V0, V1
9D003F18  8C430000   LW V1, 0(V0)
9D003F1C  AFA30050   SW V1, 80(SP)
9D003F20  8C440004   LW A0, 4(V0)
9D003F24  AFA40058   SW A0, 88(SP)
9D003F28  8C420008   LW V0, 8(V0)
9D003F2C  AFA30040   SW V1, 64(SP)
9D003F30  AFA40044   SW A0, 68(SP)
9D003F34  AFA20048   SW V0, 72(SP)
9D003F38  AFA30064   SW V1, 100(SP)
136:                     int value = cardSetValue(c1, c2, c3);
9D003F3C  AFA30018   SW V1, 24(SP)
9D003F40  AFA4001C   SW A0, 28(SP)
9D003F44  AFA20020   SW V0, 32(SP)
9D003F48  8FA40054   LW A0, 84(SP)
9D003F4C  AFA40010   SW A0, 16(SP)
9D003F50  AFA50014   SW A1, 20(SP)
9D003F54  03C03821   ADDU A3, S8, ZERO
9D003F58  02C02021   ADDU A0, S6, ZERO
9D003F5C  0F400F20   JAL cardSetValue
9D003F60  02E02821   ADDU A1, S7, ZERO
137:                     if(value == 0)
9D003F64  104000FB   BEQ V0, ZERO, 0x9D004354
9D003F68  0040A021   ADDU S4, V0, ZERO
138:                         return 0;
139:                 
140:                     
141:                     // Add the cards to the discard pile
142:                     discards[discardsSize++] = c1;
9D003F6C  8F8280B4   LW V0, -32588(GP)
9D003F70  00021880   SLL V1, V0, 2
9D003F74  00022100   SLL A0, V0, 4
9D003F78  00831823   SUBU V1, A0, V1
9D003F7C  3C048000   LUI A0, -32768
9D003F80  248401DC   ADDIU A0, A0, 476
9D003F84  00641821   ADDU V1, V1, A0
9D003F88  8FA50030   LW A1, 48(SP)
9D003F8C  AC650008   SW A1, 8(V1)
9D003F90  AC760000   SW S6, 0(V1)
9D003F94  AC770004   SW S7, 4(V1)
9D003F98  24450001   ADDIU A1, V0, 1
143:                     discards[discardsSize++] = c2;
9D003F9C  00051880   SLL V1, A1, 2
9D003FA0  00052900   SLL A1, A1, 4
9D003FA4  00A31823   SUBU V1, A1, V1
9D003FA8  00641821   ADDU V1, V1, A0
9D003FAC  8FA5003C   LW A1, 60(SP)
9D003FB0  AC650008   SW A1, 8(V1)
9D003FB4  AC7E0000   SW S8, 0(V1)
9D003FB8  8FA50054   LW A1, 84(SP)
9D003FBC  AC650004   SW A1, 4(V1)
9D003FC0  24450002   ADDIU A1, V0, 2
144:                     discards[discardsSize++] = c3;
9D003FC4  00051880   SLL V1, A1, 2
9D003FC8  00052900   SLL A1, A1, 4
9D003FCC  00A31823   SUBU V1, A1, V1
9D003FD0  00641821   ADDU V1, V1, A0
9D003FD4  8FA40048   LW A0, 72(SP)
9D003FD8  AC640008   SW A0, 8(V1)
9D003FDC  8FA40050   LW A0, 80(SP)
9D003FE0  AC640000   SW A0, 0(V1)
9D003FE4  8FA50058   LW A1, 88(SP)
9D003FE8  AC650004   SW A1, 4(V1)
9D003FEC  24420003   ADDIU V0, V0, 3
9D003FF0  AF8280B4   SW V0, -32588(GP)
9D003FF4  00111080   SLL V0, S1, 2
9D003FF8  00111900   SLL V1, S1, 4
9D003FFC  00621823   SUBU V1, V1, V0
9D004000  00103080   SLL A2, S0, 2
9D004004  00101100   SLL V0, S0, 4
9D004008  00C23021   ADDU A2, A2, V0
9D00400C  00061080   SLL V0, A2, 2
9D004010  00C23021   ADDU A2, A2, V0
9D004014  00661821   ADDU V1, V1, A2
9D004018  3C058000   LUI A1, -32768
9D00401C  24A50114   ADDIU A1, A1, 276
9D004020  00651821   ADDU V1, V1, A1
9D004024  8C670008   LW A3, 8(V1)
145:                 
146:                     // Move selected cards to end of hand, then remove them
147:                     SWAP(hands[player].hand[idx1], hands[player].hand[handsize - 1]);
9D004028  26A4FFFF   ADDIU A0, S5, -1
9D00402C  00041080   SLL V0, A0, 2
9D004030  00044100   SLL T0, A0, 4
9D004034  01021023   SUBU V0, T0, V0
9D004038  00461021   ADDU V0, V0, A2
9D00403C  00451021   ADDU V0, V0, A1
9D004040  8C480000   LW T0, 0(V0)
9D004044  8C460004   LW A2, 4(V0)
9D004048  8C450008   LW A1, 8(V0)
9D00404C  AC680000   SW T0, 0(V1)
9D004050  AC660004   SW A2, 4(V1)
9D004054  AC650008   SW A1, 8(V1)
9D004058  AC560000   SW S6, 0(V0)
9D00405C  AC570004   SW S7, 4(V0)
148:                     if(idx2 == handsize - 1)
9D004060  12440005   BEQ S2, A0, 0x9D004078
9D004064  AC470008   SW A3, 8(V0)
149:                         idx2 = idx1;
150:                     if(idx3 == handsize - 1)
9D004068  16640005   BNE S3, A0, 0x9D004080
9D00406C  00121080   SLL V0, S2, 2
9D00407C  00121080   SLL V0, S2, 2
9D004080  00121900   SLL V1, S2, 4
9D004084  00621823   SUBU V1, V1, V0
9D004088  00103080   SLL A2, S0, 2
9D00408C  00101100   SLL V0, S0, 4
9D004090  00C23021   ADDU A2, A2, V0
9D004094  00061080   SLL V0, A2, 2
9D004098  00C23021   ADDU A2, A2, V0
9D00409C  00661821   ADDU V1, V1, A2
9D0040A0  3C058000   LUI A1, -32768
9D0040A4  24A50114   ADDIU A1, A1, 276
9D0040A8  00651821   ADDU V1, V1, A1
9D0040AC  8C690000   LW T1, 0(V1)
9D0040B0  8C680004   LW T0, 4(V1)
9D0040B4  8C670008   LW A3, 8(V1)
151:                         idx3 = idx1;
9D004070  0B40101F   J 0x9D00407C
9D004074  02209821   ADDU S3, S1, ZERO
9D004078  02209021   ADDU S2, S1, ZERO
152:                     SWAP(hands[player].hand[idx2], hands[player].hand[handsize - 2]);
9D0040B8  26A4FFFE   ADDIU A0, S5, -2
9D0040BC  00041080   SLL V0, A0, 2
9D0040C0  00045100   SLL T2, A0, 4
9D0040C4  01421023   SUBU V0, T2, V0
9D0040C8  00461021   ADDU V0, V0, A2
9D0040CC  00451021   ADDU V0, V0, A1
9D0040D0  8C4A0000   LW T2, 0(V0)
9D0040D4  8C460004   LW A2, 4(V0)
9D0040D8  8C450008   LW A1, 8(V0)
9D0040DC  AC6A0000   SW T2, 0(V1)
9D0040E0  AC660004   SW A2, 4(V1)
9D0040E4  AC650008   SW A1, 8(V1)
9D0040E8  AC490000   SW T1, 0(V0)
9D0040EC  AC480004   SW T0, 4(V0)
153:                     if(idx3 == handsize - 2)
9D0040F0  16640002   BNE S3, A0, 0x9D0040FC
9D0040F4  AC470008   SW A3, 8(V0)
9D0040F8  02409821   ADDU S3, S2, ZERO
9D0040FC  00131080   SLL V0, S3, 2
9D004100  00131900   SLL V1, S3, 4
9D004104  00621823   SUBU V1, V1, V0
9D004108  00102880   SLL A1, S0, 2
9D00410C  00101100   SLL V0, S0, 4
9D004110  00A22821   ADDU A1, A1, V0
9D004114  00052080   SLL A0, A1, 2
9D004118  00A42821   ADDU A1, A1, A0
9D00411C  00651821   ADDU V1, V1, A1
9D004120  3C048000   LUI A0, -32768
9D004124  24840114   ADDIU A0, A0, 276
9D004128  00641821   ADDU V1, V1, A0
9D00412C  8C680000   LW T0, 0(V1)
9D004130  8C670004   LW A3, 4(V1)
9D004134  8C660008   LW A2, 8(V1)
154:                         idx3 = idx2;
155:                     SWAP(hands[player].hand[idx3], hands[player].hand[handsize - 3]);
9D004138  26B5FFFD   ADDIU S5, S5, -3
9D00413C  00151080   SLL V0, S5, 2
9D004140  0015A900   SLL S5, S5, 4
9D004144  02A21023   SUBU V0, S5, V0
9D004148  00451021   ADDU V0, V0, A1
9D00414C  00441021   ADDU V0, V0, A0
9D004150  8C4B0000   LW T3, 0(V0)
9D004154  8C4A0004   LW T2, 4(V0)
9D004158  8C490008   LW T1, 8(V0)
9D00415C  AC6B0000   SW T3, 0(V1)
9D004160  AC6A0004   SW T2, 4(V1)
9D004164  AC690008   SW T1, 8(V1)
9D004168  AC480000   SW T0, 0(V0)
9D00416C  AC470004   SW A3, 4(V0)
9D004170  AC460008   SW A2, 8(V0)
156:                 
157:                     hands[player].cards -= 3;
9D004174  00A42021   ADDU A0, A1, A0
9D004178  8C820060   LW V0, 96(A0)
9D00417C  2442FFFD   ADDIU V0, V0, -3
9D004180  AC820060   SW V0, 96(A0)
158:                 
159:                     // Bonuses for owning the territories being traded.
160:                     if(c1.type != WILD && territories[c1.territory].owner == player)
9D004184  24020003   ADDIU V0, ZERO, 3
9D004188  8FA30060   LW V1, 96(SP)
9D00418C  10620015   BEQ V1, V0, 0x9D0041E4
9D004190  001710C0   SLL V0, S7, 3
9D004194  00171940   SLL V1, S7, 5
9D004198  00621023   SUBU V0, V1, V0
9D00419C  3C038000   LUI V1, -32768
9D0041A0  246341A8   ADDIU V1, V1, 16808
9D0041A4  00431021   ADDU V0, V0, V1
9D0041A8  8C440010   LW A0, 16(V0)
9D0041AC  1490000E   BNE A0, S0, 0x9D0041E8
9D0041B0  24020003   ADDIU V0, ZERO, 3
161:                     {
162:                         territories[c1.territory].troops += 2;
9D0041B4  001710C0   SLL V0, S7, 3
9D0041B8  00171940   SLL V1, S7, 5
9D0041BC  00621823   SUBU V1, V1, V0
9D0041C0  3C028000   LUI V0, -32768
9D0041C4  244241A8   ADDIU V0, V0, 16808
9D0041C8  00431021   ADDU V0, V0, V1
9D0041CC  8C430014   LW V1, 20(V0)
9D0041D0  24630002   ADDIU V1, V1, 2
9D0041D4  AC430014   SW V1, 20(V0)
163:                         logReinforce(player, c1.territory, 2);
9D0041D8  02E02821   ADDU A1, S7, ZERO
9D0041DC  0F401B5A   JAL logReinforce
9D0041E0  24060002   ADDIU A2, ZERO, 2
164:                     }
165:                     if(c2.type != WILD && territories[c2.territory].owner == player)
9D0041E4  24020003   ADDIU V0, ZERO, 3
9D0041E8  8FA4005C   LW A0, 92(SP)
9D0041EC  10820016   BEQ A0, V0, 0x9D004248
9D0041F0  8FA50054   LW A1, 84(SP)
9D0041F4  000510C0   SLL V0, A1, 3
9D0041F8  00051940   SLL V1, A1, 5
9D0041FC  00621023   SUBU V0, V1, V0
9D004200  3C038000   LUI V1, -32768
9D004204  246341A8   ADDIU V1, V1, 16808
9D004208  00431021   ADDU V0, V0, V1
9D00420C  8C440010   LW A0, 16(V0)
9D004210  1490000E   BNE A0, S0, 0x9D00424C
9D004214  24020003   ADDIU V0, ZERO, 3
166:                     {
167:                         territories[c2.territory].troops += 2;
9D004218  000510C0   SLL V0, A1, 3
9D00421C  00051940   SLL V1, A1, 5
9D004220  00621823   SUBU V1, V1, V0
9D004224  3C028000   LUI V0, -32768
9D004228  244241A8   ADDIU V0, V0, 16808
9D00422C  00431021   ADDU V0, V0, V1
9D004230  8C430014   LW V1, 20(V0)
9D004234  24630002   ADDIU V1, V1, 2
9D004238  AC430014   SW V1, 20(V0)
168:                         logReinforce(player, c1.territory, 2);
9D00423C  02E02821   ADDU A1, S7, ZERO
9D004240  0F401B5A   JAL logReinforce
9D004244  24060002   ADDIU A2, ZERO, 2
169:                     }
170:                     if(c3.type != WILD && territories[c3.territory].owner == player)
9D004248  24020003   ADDIU V0, ZERO, 3
9D00424C  8FA30064   LW V1, 100(SP)
9D004250  10620017   BEQ V1, V0, 0x9D0042B0
9D004254  8FA40058   LW A0, 88(SP)
9D004258  000410C0   SLL V0, A0, 3
9D00425C  00041940   SLL V1, A0, 5
9D004260  00621023   SUBU V0, V1, V0
9D004264  3C038000   LUI V1, -32768
9D004268  246341A8   ADDIU V1, V1, 16808
9D00426C  00431021   ADDU V0, V0, V1
9D004270  8C440010   LW A0, 16(V0)
9D004274  1490000F   BNE A0, S0, 0x9D0042B4
9D004278  8F8280C0   LW V0, -32576(GP)
171:                     {
172:                         logReinforce(player, c1.territory, 2);
9D00427C  02E02821   ADDU A1, S7, ZERO
9D004280  0F401B5A   JAL logReinforce
9D004284  24060002   ADDIU A2, ZERO, 2
173:                         territories[c3.territory].troops += 2;
9D004288  8FA50058   LW A1, 88(SP)
9D00428C  000510C0   SLL V0, A1, 3
9D004290  00051940   SLL V1, A1, 5
9D004294  00621823   SUBU V1, V1, V0
9D004298  3C028000   LUI V0, -32768
9D00429C  244241A8   ADDIU V0, V0, 16808
9D0042A0  00431021   ADDU V0, V0, V1
9D0042A4  8C430014   LW V1, 20(V0)
9D0042A8  24630002   ADDIU V1, V1, 2
9D0042AC  AC430014   SW V1, 20(V0)
174:                     }
175:                 
176:                     // If scheme is SET_VALUE, value is already set.
177:                     
178:                     if(cardValueScheme == INCREASING_ONE)
9D0042B0  8F8280C0   LW V0, -32576(GP)
9D0042B4  24030001   ADDIU V1, ZERO, 1
9D0042B8  14430005   BNE V0, V1, 0x9D0042D0
9D0042BC  00000000   NOP
179:                     {
180:                         value = cardExchangeValue;
9D0042C0  8F9480BC   LW S4, -32580(GP)
181:                         cardExchangeValue += 1;
9D0042C4  26820001   ADDIU V0, S4, 1
9D0042C8  0B4010C4   J 0x9D004310
9D0042CC  AF8280BC   SW V0, -32580(GP)
182:                     }
183:                     else if(cardValueScheme == INCREASING)
9D0042D0  54400010   BNEL V0, ZERO, 0x9D004314
9D0042D4  AFB40010   SW S4, 16(SP)
184:                     {
185:                         value = cardExchangeValue;
186:                         if(cardValueIndex < NUM_EXCHANGE_VALUES - 1)
9D0042D8  8F8280C4   LW V0, -32572(GP)
9D0042DC  28430005   SLTI V1, V0, 5
9D0042E0  10600009   BEQ V1, ZERO, 0x9D004308
9D0042E4  8F9480BC   LW S4, -32580(GP)
187:                         {
188:                             cardValueIndex += 1;
9D0042E8  24420001   ADDIU V0, V0, 1
9D0042EC  AF8280C4   SW V0, -32572(GP)
189:                             cardExchangeValue = cardExchangeValues[cardValueIndex];
9D0042F0  00021080   SLL V0, V0, 2
9D0042F4  3C039D01   LUI V1, -25343
9D0042F8  24638FC0   ADDIU V1, V1, -28736
9D0042FC  7C62100A   LWX V0, V0(V1)
9D004300  0B4010C4   J 0x9D004310
9D004304  AF8280BC   SW V0, -32580(GP)
190:                         }
191:                         else
192:                         {
193:                             cardExchangeValue += 5;
9D004308  26820005   ADDIU V0, S4, 5
9D00430C  AF8280BC   SW V0, -32580(GP)
194:                         }
195:                     }
196:                 
197:                     logExchange(player, c1.type, c2.type, c3.type, value);
9D004310  AFB40010   SW S4, 16(SP)
9D004314  02002021   ADDU A0, S0, ZERO
9D004318  02C02821   ADDU A1, S6, ZERO
9D00431C  03C03021   ADDU A2, S8, ZERO
9D004320  0F401B32   JAL 0x9D006CC8
9D004324  8FA70050   LW A3, 80(SP)
198:                 
199:                     return value;
9D004328  0B4010D6   J 0x9D004358
9D00432C  02801021   ADDU V0, S4, ZERO
200:                 }
9D004354  02801021   ADDU V0, S4, ZERO
9D004358  8FBF008C   LW RA, 140(SP)
9D00435C  8FBE0088   LW S8, 136(SP)
9D004360  8FB70084   LW S7, 132(SP)
9D004364  8FB60080   LW S6, 128(SP)
9D004368  8FB5007C   LW S5, 124(SP)
9D00436C  8FB40078   LW S4, 120(SP)
9D004370  8FB30074   LW S3, 116(SP)
9D004374  8FB20070   LW S2, 112(SP)
9D004378  8FB1006C   LW S1, 108(SP)
9D00437C  8FB00068   LW S0, 104(SP)
9D004380  03E00008   JR RA
9D004384  27BD0090   ADDIU SP, SP, 144
201:                 
202:                 void takeHand(int player, int eliminatedPlayer)
9D004480  00051100   SLL V0, A1, 4
9D004484  00621021   ADDU V0, V1, V0
9D004488  00021880   SLL V1, V0, 2
9D00448C  00431021   ADDU V0, V0, V1
9D004490  3C038000   LUI V1, -32768
9D004494  24630114   ADDIU V1, V1, 276
9D004498  00621021   ADDU V0, V1, V0
203:                 {
204:                     for(int i = 0; i < hands[eliminatedPlayer].cards; i++)
9D004454  00051880   SLL V1, A1, 2
9D004458  00051100   SLL V0, A1, 4
9D00445C  00621021   ADDU V0, V1, V0
9D004460  00021880   SLL V1, V0, 2
9D004464  00431021   ADDU V0, V0, V1
9D004468  3C038000   LUI V1, -32768
9D00446C  24630114   ADDIU V1, V1, 276
9D004470  00431021   ADDU V0, V0, V1
9D004474  8C460060   LW A2, 96(V0)
9D004478  18C00024   BLEZ A2, 0x9D00450C
9D00447C  00051880   SLL V1, A1, 2
9D00449C  00001821   ADDU V1, ZERO, ZERO
9D0044C0  00406021   ADDU T4, V0, ZERO
9D0044F8  24630001   ADDIU V1, V1, 1
9D0044FC  8D860060   LW A2, 96(T4)
9D004500  0066382A   SLT A3, V1, A2
9D004504  14E0FFEF   BNE A3, ZERO, 0x9D0044C4
9D004508  2442000C   ADDIU V0, V0, 12
205:                     {
206:                         hands[player].hand[hands[player].cards + i] = 
9D0044A0  00045880   SLL T3, A0, 2
9D0044A4  00043100   SLL A2, A0, 4
9D0044A8  01665821   ADDU T3, T3, A2
9D0044AC  000B3080   SLL A2, T3, 2
9D0044B0  01665821   ADDU T3, T3, A2
9D0044B4  3C0A8000   LUI T2, -32768
9D0044B8  254A0114   ADDIU T2, T2, 276
9D0044BC  016A6821   ADDU T5, T3, T2
9D0044C4  8DA70060   LW A3, 96(T5)
9D0044C8  00673821   ADDU A3, V1, A3
9D0044CC  00074080   SLL T0, A3, 2
9D0044D0  00073100   SLL A2, A3, 4
9D0044D4  00C83023   SUBU A2, A2, T0
9D0044D8  00CB3021   ADDU A2, A2, T3
9D0044DC  00CA3021   ADDU A2, A2, T2
9D0044E0  8C490000   LW T1, 0(V0)
9D0044E4  8C480004   LW T0, 4(V0)
9D0044E8  8C470008   LW A3, 8(V0)
9D0044EC  ACC90000   SW T1, 0(A2)
9D0044F0  ACC80004   SW T0, 4(A2)
9D0044F4  ACC70008   SW A3, 8(A2)
207:                             hands[eliminatedPlayer].hand[i];
208:                     }
209:                     hands[player].cards += hands[eliminatedPlayer].cards;
9D00450C  00041080   SLL V0, A0, 2
9D004510  00042100   SLL A0, A0, 4
9D004514  00442021   ADDU A0, V0, A0
9D004518  00041080   SLL V0, A0, 2
9D00451C  00822021   ADDU A0, A0, V0
9D004520  3C028000   LUI V0, -32768
9D004524  24420114   ADDIU V0, V0, 276
9D004528  00822021   ADDU A0, A0, V0
9D00452C  8C830060   LW V1, 96(A0)
9D004530  00C33021   ADDU A2, A2, V1
9D004534  AC860060   SW A2, 96(A0)
210:                     hands[eliminatedPlayer].cards = 0;
9D004538  00051880   SLL V1, A1, 2
9D00453C  00052900   SLL A1, A1, 4
9D004540  00652821   ADDU A1, V1, A1
9D004544  00051880   SLL V1, A1, 2
9D004548  00A32821   ADDU A1, A1, V1
9D00454C  00A21021   ADDU V0, A1, V0
211:                 }
9D004550  03E00008   JR RA
9D004554  AC400060   SW ZERO, 96(V0)
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/pi.c  -------------------------------------------------
1:                   #include "pi.h"
2:                   #include <p32xxxx.h>
3:                   #include <sys/attribs.h>
4:                   #include "gamelogic.h"
5:                   
6:                   unsigned char piData[PI_DATA_LENGTH];
7:                   static unsigned char * terrPtr = piData;
8:                   static unsigned char * cardsPtr = piData + NUM_TERRITORIES;
9:                   
10:                  void updatePiData()
9D007EE4  3C098000   LUI T1, -32768
9D007EE8  0B401FC9   J 0x9D007F24
9D007EEC  25290114   ADDIU T1, T1, 276
9D007F30  00051880   SLL V1, A1, 2
9D007F34  00051100   SLL V0, A1, 4
9D007F38  00621021   ADDU V0, V1, V0
9D007F3C  00021880   SLL V1, V0, 2
9D007F40  00431821   ADDU V1, V0, V1
9D007F44  24630008   ADDIU V1, V1, 8
9D007F48  01231821   ADDU V1, T1, V1
9D007F4C  0B401FBC   J 0x9D007EF0
9D007F50  00001021   ADDU V0, ZERO, ZERO
9D007F54  03E00008   JR RA
9D007F58  00000000   NOP
11:                  {
12:                      for(int i = 0; i < NUM_TERRITORIES; i++)
13:                      {
14:                          terrPtr[i] = territories[i].owner;
9D007E9C  3C028000   LUI V0, -32768
9D007EA0  244241A8   ADDIU V0, V0, 16808
9D007EA4  8C430010   LW V1, 16(V0)
9D007EA8  A38380EC   SB V1, -32532(GP)
9D007EAC  8C420028   LW V0, 40(V0)
9D007EB0  A38280ED   SB V0, -32531(GP)
15:                      }
16:                  
17:                      for(int i = 0; i < NUM_CARDS; i++)
18:                      {
19:                          cardsPtr[i] = 0xFF;
9D007EB4  3C029D00   LUI V0, -25344
9D007EB8  8C4601FC   LW A2, 508(V0)
9D007EBC  2402FFFF   ADDIU V0, ZERO, -1
9D007EC0  A0C20000   SB V0, 0(A2)
9D007EC4  A0C20001   SB V0, 1(A2)
9D007EC8  A0C20002   SB V0, 2(A2)
9D007ECC  A0C20003   SB V0, 3(A2)
20:                      }
21:                      for(int i = 0; i < numPlayers; i++)
9D007ED0  8F8280D0   LW V0, -32560(GP)
9D007ED4  1840001F   BLEZ V0, 0x9D007F54
9D007ED8  3C088000   LUI T0, -32768
9D007EDC  25080174   ADDIU T0, T0, 372
9D007EE0  00002821   ADDU A1, ZERO, ZERO
9D007F10  24A50001   ADDIU A1, A1, 1
9D007F14  8F8280D0   LW V0, -32560(GP)
9D007F18  00A2102A   SLT V0, A1, V0
9D007F1C  1040000D   BEQ V0, ZERO, 0x9D007F54
9D007F20  25080064   ADDIU T0, T0, 100
22:                      {
23:                          for(int j = 0; j < hands[i].cards; j++)
9D007EFC  24420001   ADDIU V0, V0, 1
9D007F00  8CE40000   LW A0, 0(A3)
9D007F04  0044202A   SLT A0, V0, A0
9D007F08  1480FFF9   BNE A0, ZERO, 0x9D007EF0
9D007F0C  2463000C   ADDIU V1, V1, 12
9D007F24  8D020000   LW V0, 0(T0)
9D007F28  1840FFF9   BLEZ V0, 0x9D007F10
9D007F2C  01003821   ADDU A3, T0, ZERO
24:                          {
25:                              cardsPtr[hands[i].hand[j].index] = i;
9D007EF0  8C640000   LW A0, 0(V1)
9D007EF4  00C42021   ADDU A0, A2, A0
9D007EF8  A0850000   SB A1, 0(A0)
26:                          }
27:                      }
28:                  }
29:                  
30:                  void __ISR(_SPI3_RX_VECTOR, IPL4SRS) SPI3RXisr()
31:                  {
9D007F5C  415DE800   RDPGPR SP, SP
9D007F60  401A7000   MFC0 K0, EPC
9D007F64  401B6000   MFC0 K1, Status
9D007F68  27BDFFF0   ADDIU SP, SP, -16
9D007F6C  AFBA000C   SW K0, 12(SP)
9D007F70  401A6002   MFC0 K0, SRSCtl
9D007F74  AFBB0008   SW K1, 8(SP)
9D007F78  AFBA0004   SW K0, 4(SP)
9D007F7C  7C1B7844   INS K1, ZERO, 1, 15
9D007F80  377B1000   ORI K1, K1, 4096
9D007F84  409B6000   MTC0 K1, Status
32:                      static unsigned char * piDataPtr = NULL;
33:                  
34:                      unsigned char rx = SPI3BUF;
9D007F88  3C02BF82   LUI V0, -16510
9D007F8C  8C431420   LW V1, 5152(V0)
35:                  
36:                      if(rx == 0xFF)
9D007F90  306300FF   ANDI V1, V1, 255
9D007F94  240200FF   ADDIU V0, ZERO, 255
9D007F98  14620016   BNE V1, V0, 0x9D007FF4
9D007F9C  240300FF   ADDIU V1, ZERO, 255
37:                      {
38:                          if(piDataPtr == NULL)
9D007FA0  8F8280A8   LW V0, -32600(GP)
9D007FA4  14400005   BNE V0, ZERO, 0x9D007FBC
9D007FA8  2443FFFA   ADDIU V1, V0, -6
39:                          {
40:                              // Pi is starting a data request
41:                              piDataPtr = piData;
9D007FAC  278280EC   ADDIU V0, GP, -32532
9D007FB0  AF8280A8   SW V0, -32600(GP)
42:                          }
43:                  
44:                          if(piDataPtr - piData == PI_DATA_LENGTH)
9D007FB4  8F8280A8   LW V0, -32600(GP)
9D007FB8  2443FFFA   ADDIU V1, V0, -6
9D007FBC  278480EC   ADDIU A0, GP, -32532
9D007FC0  54830007   BNEL A0, V1, 0x9D007FE0
9D007FC4  90440000   LBU A0, 0(V0)
45:                          {
46:                              // End of data
47:                              piDataPtr = NULL;
9D007FC8  AF8080A8   SW ZERO, -32600(GP)
48:                              SPI3BUF = 0xFF;
9D007FCC  240300FF   ADDIU V1, ZERO, 255
9D007FD0  3C02BF82   LUI V0, -16510
9D007FD4  AC431420   SW V1, 5152(V0)
49:                          }
50:                          else
51:                          {
52:                              // Prepare next byte
53:                              SPI3BUF = *piDataPtr++;
9D007FE0  3C03BF82   LUI V1, -16510
9D007FE4  AC641420   SW A0, 5152(V1)
9D007FE8  24420001   ADDIU V0, V0, 1
9D007FEC  0B401FFF   J 0x9D007FFC
9D007FF0  AF8280A8   SW V0, -32600(GP)
54:                          }
55:                      }
56:                      else
57:                      {
58:                          SPI3BUF = 0xFF;
9D007FF4  3C02BF82   LUI V0, -16510
9D007FF8  AC431420   SW V1, 5152(V0)
59:                      }
60:                  
61:                      IFS4bits.SPI3RXIF = 0; // clear interrupt flag
9D007FD8  0B402000   J 0x9D008000
9D007FDC  3C02BF81   LUI V0, -16511
9D007FFC  3C02BF81   LUI V0, -16511
9D008000  8C430080   LW V1, 128(V0)
9D008004  7C03DEC4   INS V1, ZERO, 27, 1
9D008008  AC430080   SW V1, 128(V0)
62:                  }
9D00800C  41606000   DI ZERO
9D008010  000000C0   EHB
9D008014  8FBB0004   LW K1, 4(SP)
9D008018  8FBA000C   LW K0, 12(SP)
9D00801C  409B6002   MTC0 K1, SRSCtl
9D008020  8FBB0008   LW K1, 8(SP)
9D008024  409A7000   MTC0 K0, EPC
9D008028  27BD0010   ADDIU SP, SP, 16
9D00802C  41DDE800   WRPGPR SP, SP
9D008030  409B6000   MTC0 K1, Status
9D008034  42000018   ERET
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/main.c  -----------------------------------------------
1:                   /*
2:                    * File:   main.c
3:                    * Author: jacob
4:                    *
5:                    * Created on February 19, 2015, 6:12 PM
6:                    */
7:                   
8:                   #include <p32xxxx.h>
9:                   #include <xc.h>
10:                  #include <sys/attribs.h> // __ISR macro here
11:                  
12:                  #include <string.h>
13:                  
14:                  #include "device_config.h"
15:                  #include "init.h"
16:                  #include "lcd.h"
17:                  #include "gamelogic.h"
18:                  #include "buttons.h"
19:                  #include "pi.h"
20:                  
21:                  // implement function required for game logic in io.h
22:                  #ifdef NO_RANDOM
23:                  int randint(int min, int max)
24:                  {
25:                      return min;
26:                  }
9D004CFC  03E00008   JR RA
9D004D00  00801021   ADDU V0, A0, ZERO
27:                  #else
28:                  int randint(int min, int max)
29:                  {
30:                      unsigned random = RNGNUMGEN1;
31:                      return min + (random % (max - min + 1));
32:                  }
33:                  #endif
34:                  void panic(int line, const char * file, const char * fun, const char * text)
35:                  {
9D004D04  27BDFFE0   ADDIU SP, SP, -32
9D004D08  AFBF001C   SW RA, 28(SP)
9D004D0C  AFB20018   SW S2, 24(SP)
9D004D10  AFB10014   SW S1, 20(SP)
9D004D14  AFB00010   SW S0, 16(SP)
9D004D18  00809021   ADDU S2, A0, ZERO
9D004D1C  00A08821   ADDU S1, A1, ZERO
36:                      static int panicking = 0;
37:                      if(panicking)
9D004D20  8F82808C   LW V0, -32628(GP)
9D004D24  10400003   BEQ V0, ZERO, 0x9D004D34
9D004D28  00E08021   ADDU S0, A3, ZERO
38:                          abort(); // recursion is bad!
9D004D2C  0F402418   JAL abort
9D004D30  00000000   NOP
39:                      panicking = 1;
9D004D34  24020001   ADDIU V0, ZERO, 1
9D004D38  AF82808C   SW V0, -32628(GP)
40:                      
41:                      __builtin_disable_interrupts();
9D004D3C  41626000   DI V0
9D004D40  000000C0   EHB
42:                      setTextDisplay(0, "Error %s", fun);
9D004D44  00002021   ADDU A0, ZERO, ZERO
9D004D48  3C059D01   LUI A1, -25343
9D004D4C  0F401D99   JAL setTextDisplay
9D004D50  24A58DB4   ADDIU A1, A1, -29260
43:                      setTextDisplay(1, "at %s:%d", file, line);
9D004D54  24040001   ADDIU A0, ZERO, 1
9D004D58  3C059D01   LUI A1, -25343
9D004D5C  24A58DC0   ADDIU A1, A1, -29248
9D004D60  02203021   ADDU A2, S1, ZERO
9D004D64  0F401D99   JAL setTextDisplay
9D004D68  02403821   ADDU A3, S2, ZERO
44:                      setTextDisplay(2, "%s", text);
9D004D6C  24040002   ADDIU A0, ZERO, 2
9D004D70  3C059D01   LUI A1, -25343
9D004D74  24A58DCC   ADDIU A1, A1, -29236
9D004D78  0F401D99   JAL setTextDisplay
9D004D7C  02003021   ADDU A2, S0, ZERO
45:                      if(strlen(text) > 16)
9D004D80  0F40200E   JAL 0x9D008038
9D004D84  02002021   ADDU A0, S0, ZERO
9D004D88  2C420011   SLTIU V0, V0, 17
9D004D8C  14400007   BNE V0, ZERO, 0x9D004DAC
9D004D90  24040003   ADDIU A0, ZERO, 3
46:                          setTextDisplay(3, "%s", text + 16);
9D004D94  3C059D01   LUI A1, -25343
9D004D98  24A58DCC   ADDIU A1, A1, -29236
9D004D9C  0F401D99   JAL setTextDisplay
9D004DA0  26060010   ADDIU A2, S0, 16
9D004DA4  0B40136E   J 0x9D004DB8
9D004DA8  00000000   NOP
47:                      else
48:                          setTextDisplay(3, "");
9D004DAC  3C059D01   LUI A1, -25343
9D004DB0  0F401D99   JAL setTextDisplay
9D004DB4  24A58DD0   ADDIU A1, A1, -29232
9D004DB8  0B40136E   J 0x9D004DB8
9D004DBC  00000000   NOP
49:                      while(1)
50:                      {
51:                          // Go into an infinte loop until the micro is reset.
52:                      }
53:                      abort();
54:                  }
55:                  
56:                  // Making two different writes to the same port in quick succession can cause
57:                  // problems, so call this macro to make sure both writes get through.
58:                  // eg: PORTAbits.RA0 = 1; SHORTWAIT(); PORTAbits.RA1 = 1;
59:                  #define SHORTWAIT() asm volatile ("nop\n nop\n nop\n nop\n nop\n nop")
60:                  
61:                  void msleep(int msecs);
62:                  void usleep(int usecs);
63:                  void SPIRiskTerritory(int terr);
64:                  void SPIblank();
65:                  void SPIbyte(unsigned char byte);
66:                  
67:                  unsigned char counter = 0;
68:                  int main(void)
69:                  {
9D0051D8  27BDFFE0   ADDIU SP, SP, -32
9D0051DC  AFBF001C   SW RA, 28(SP)
9D0051E0  AFB10018   SW S1, 24(SP)
9D0051E4  AFB00014   SW S0, 20(SP)
70:                      territories[0].troops = 0;
9D0051E8  3C028000   LUI V0, -32768
71:                      initClocks();
9D0051EC  0F401666   JAL initClocks
9D0051F0  AC4041BC   SW ZERO, 16828(V0)
72:                      initInterrupts();
9D0051F4  0F401690   JAL initInterrupts
9D0051F8  00000000   NOP
73:                      initPorts();
9D0051FC  0F4016CC   JAL initPorts
9D005200  00000000   NOP
74:                      initTimers();
9D005204  0F4016F1   JAL initTimers
9D005208  00000000   NOP
75:                      initSPI();
9D00520C  0F401748   JAL initSPI
9D005210  00000000   NOP
76:                      initRNG();
9D005214  0F40178E   JAL initRNG
9D005218  00000000   NOP
77:                  
78:                      startLCD();
9D00521C  0F401D7A   JAL startLCD
9D005220  00000000   NOP
79:                  
80:                      changeState(INIT);
9D005224  0F4009F3   JAL changeState
9D005228  00002021   ADDU A0, ZERO, ZERO
81:                      updateText();
9D00522C  0F40078C   JAL updateText
9D005230  00000000   NOP
82:                  
83:                      PORTFbits.RF2 = 0;
9D005234  3C02BF86   LUI V0, -16506
9D005238  8C430520   LW V1, 1312(V0)
9D00523C  7C031084   INS V1, ZERO, 2, 1
9D005240  AC430520   SW V1, 1312(V0)
84:                  
85:                      while(1)
86:                      {
87:                          SPIRiskTerritory(0);
9D00524C  0F4013B6   JAL SPIRiskTerritory
9D005250  00002021   ADDU A0, ZERO, ZERO
88:                          SPIRiskTerritory(1);
9D005254  0F4013B6   JAL SPIRiskTerritory
9D005258  24040001   ADDIU A0, ZERO, 1
89:                          usleep(1000);
90:                          SPIblank();
9D00528C  0F40143E   JAL SPIblank
9D005290  00000000   NOP
91:                          SPIblank();
9D005294  0F40143E   JAL SPIblank
9D005298  00000000   NOP
92:                  
93:                          if(flagSet_advance())
9D00529C  0F401F29   JAL 0x9D007CA4
9D0052A0  00000000   NOP
9D0052A4  1040000B   BEQ V0, ZERO, 0x9D0052D4
9D0052A8  8F828088   LW V0, -32632(GP)
94:                          {
95:                              static int RNGseeded = 0;
96:                              if(!RNGseeded)
9D0052AC  14400005   BNE V0, ZERO, 0x9D0052C4
9D0052B0  00000000   NOP
97:                              {
98:                                  seedRNG();
9D0052B4  0F401799   JAL seedRNG
9D0052B8  00000000   NOP
99:                                  RNGseeded = 1;
9D0052BC  24020001   ADDIU V0, ZERO, 1
9D0052C0  AF828088   SW V0, -32632(GP)
100:                             }
101:                             gameInput(ADVANCE);
9D0052C4  0F400E28   JAL gameInput
9D0052C8  00002021   ADDU A0, ZERO, ZERO
102:                 
103:                             clearFlag_advance();
9D0052CC  0F401F35   JAL clearFlag_advance
9D0052D0  00000000   NOP
104:                         }
105:                         if(flagSet_cancel())
9D0052D4  0F401F2D   JAL flagSet_cancel
9D0052D8  00000000   NOP
9D0052DC  10400005   BEQ V0, ZERO, 0x9D0052F4
9D0052E0  00000000   NOP
106:                         {
107:                             gameInput(CANCEL);
9D0052E4  0F400E28   JAL gameInput
9D0052E8  24040001   ADDIU A0, ZERO, 1
108:                             clearFlag_cancel();
9D0052EC  0F401F38   JAL clearFlag_cancel
9D0052F0  00000000   NOP
109:                         }
110:                         if(flagSet_next())
9D0052F4  0F401F31   JAL flagSet_next
9D0052F8  00000000   NOP
9D0052FC  10400005   BEQ V0, ZERO, 0x9D005314
9D005300  00000000   NOP
111:                         {
112:                             gameInput(NEXT);
9D005304  0F400E28   JAL gameInput
9D005308  24040002   ADDIU A0, ZERO, 2
113:                             clearFlag_next();
9D00530C  0F401F3B   JAL clearFlag_next
9D005310  00000000   NOP
114:                         }
115:                         updatePiData();
9D005314  0F401FA7   JAL updatePiData
9D005318  00000000   NOP
116:                         msleep(4);
9D00531C  0F401370   JAL msleep
9D005320  24040004   ADDIU A0, ZERO, 4
117:                 
118:                     }
9D005324  0B401493   J 0x9D00524C
9D005328  00000000   NOP
119:                 
120:                     return EXIT_SUCCESS;
121:                 }
122:                 
123:                 void msleep(int msecs)
124:                 {
125:                     // The timer has a maximum value of 0xFFFF * 0.64us ~= 41 ms
126:                     while(msecs > 40)
9D004DC0  28820029   SLTI V0, A0, 41
9D004DC4  14400013   BNE V0, ZERO, 0x9D004E14
9D004DC8  3C03BF84   LUI V1, -16508
9D004E08  28820029   SLTI V0, A0, 41
9D004E0C  1040FFF2   BEQ V0, ZERO, 0x9D004DD8
9D004E10  00000000   NOP
127:                     {
128:                         usleep(40000);
129:                         msecs -= 40;
9D004E04  2484FFD8   ADDIU A0, A0, -40
130:                     }
131:                 
132:                     usleep(msecs * 1000);
133:                 
134:                 }
9D004E6C  03E00008   JR RA
9D004E70  00000000   NOP
135:                 void usleep(int usecs)
136:                 {
137:                     TMR1 = 0;
9D004DD8  AC600010   SW ZERO, 16(V1)
9D004E14  3C02BF84   LUI V0, -16508
9D004E18  AC400010   SW ZERO, 16(V0)
9D004E74  3C02BF84   LUI V0, -16508
9D004E78  AC400010   SW ZERO, 16(V0)
9D005064  AC400010   SW ZERO, 16(V0)
9D0050A8  3C03BF84   LUI V1, -16508
9D0050AC  AC600010   SW ZERO, 16(V1)
9D005144  AC400010   SW ZERO, 16(V0)
9D005188  3C03BF84   LUI V1, -16508
9D00518C  AC600010   SW ZERO, 16(V1)
9D005244  3C10BF84   LUI S0, -16508
9D00525C  AE000010   SW ZERO, 16(S0)
9D00534C  AC400010   SW ZERO, 16(V0)
9D005390  3C03BF84   LUI V1, -16508
9D005394  AC600010   SW ZERO, 16(V1)
138:                     T1CONbits.ON = 1;
9D004DCC  3C06BF84   LUI A2, -16508
9D004DD0  24070001   ADDIU A3, ZERO, 1
9D004DDC  8CC20000   LW V0, 0(A2)
9D004DE0  7CE27BC4   INS V0, A3, 15, 1
9D004DE4  ACC20000   SW V0, 0(A2)
9D004E1C  3C02BF84   LUI V0, -16508
9D004E20  8C430000   LW V1, 0(V0)
9D004E24  24050001   ADDIU A1, ZERO, 1
9D004E28  7CA37BC4   INS V1, A1, 15, 1
9D004E2C  AC430000   SW V1, 0(V0)
9D004E7C  3C02BF84   LUI V0, -16508
9D004E80  8C430000   LW V1, 0(V0)
9D004E84  24050001   ADDIU A1, ZERO, 1
9D004E88  7CA37BC4   INS V1, A1, 15, 1
9D004E8C  AC430000   SW V1, 0(V0)
9D005068  3C02BF84   LUI V0, -16508
9D00506C  8C430000   LW V1, 0(V0)
9D005070  24040001   ADDIU A0, ZERO, 1
9D005074  7C837BC4   INS V1, A0, 15, 1
9D005078  AC430000   SW V1, 0(V0)
9D0050B0  8C430000   LW V1, 0(V0)
9D0050B4  24040001   ADDIU A0, ZERO, 1
9D0050B8  7C837BC4   INS V1, A0, 15, 1
9D0050BC  AC430000   SW V1, 0(V0)
9D005148  3C02BF84   LUI V0, -16508
9D00514C  8C430000   LW V1, 0(V0)
9D005150  24040001   ADDIU A0, ZERO, 1
9D005154  7C837BC4   INS V1, A0, 15, 1
9D005158  AC430000   SW V1, 0(V0)
9D005190  8C430000   LW V1, 0(V0)
9D005194  24040001   ADDIU A0, ZERO, 1
9D005198  7C837BC4   INS V1, A0, 15, 1
9D00519C  AC430000   SW V1, 0(V0)
9D005248  3C11BF84   LUI S1, -16508
9D005260  8E220000   LW V0, 0(S1)
9D005264  24030001   ADDIU V1, ZERO, 1
9D005268  7C627BC4   INS V0, V1, 15, 1
9D00526C  AE220000   SW V0, 0(S1)
9D005350  3C02BF84   LUI V0, -16508
9D005354  8C430000   LW V1, 0(V0)
9D005358  24040001   ADDIU A0, ZERO, 1
9D00535C  7C837BC4   INS V1, A0, 15, 1
9D005360  AC430000   SW V1, 0(V0)
9D005398  8C430000   LW V1, 0(V0)
9D00539C  24040001   ADDIU A0, ZERO, 1
9D0053A0  7C837BC4   INS V1, A0, 15, 1
9D0053A4  AC430000   SW V1, 0(V0)
139:                     while(TMR1 < usecs * 100 / 64) // timer counts in increments of 0.64 us
9D004DD4  3405F424   ORI A1, ZERO, -3036
9D004DE8  8C620010   LW V0, 16(V1)
9D004DEC  0045102B   SLTU V0, V0, A1
9D004DF0  1440FFFD   BNE V0, ZERO, 0x9D004DE8
9D004DF4  00000000   NOP
9D004E30  3C020001   LUI V0, 1
9D004E34  344286A0   ORI V0, V0, -31072
9D004E38  70822002   MUL A0, A0, V0
9D004E3C  04810002   BGEZ A0, 0x9D004E48
9D004E40  00801021   ADDU V0, A0, ZERO
9D004E44  2482003F   ADDIU V0, A0, 63
9D004E48  00022183   SRA A0, V0, 6
9D004E4C  3C03BF84   LUI V1, -16508
9D004E50  8C620010   LW V0, 16(V1)
9D004E54  0044102B   SLTU V0, V0, A0
9D004E58  1440FFFD   BNE V0, ZERO, 0x9D004E50
9D004E5C  3C02BF84   LUI V0, -16508
9D004E90  00041080   SLL V0, A0, 2
9D004E94  00042100   SLL A0, A0, 4
9D004E98  00441021   ADDU V0, V0, A0
9D004E9C  00022080   SLL A0, V0, 2
9D004EA0  00822021   ADDU A0, A0, V0
9D004EA4  04820001   BLTZL A0, 0x9D004EAC
9D004EA8  2484003F   ADDIU A0, A0, 63
9D004EAC  00042183   SRA A0, A0, 6
9D004EB0  3C03BF84   LUI V1, -16508
9D004EB4  8C620010   LW V0, 16(V1)
9D004EB8  0044102B   SLTU V0, V0, A0
9D004EBC  1440FFFD   BNE V0, ZERO, 0x9D004EB4
9D004EC0  3C02BF84   LUI V0, -16508
9D00507C  3C03BF84   LUI V1, -16508
9D005080  8C620010   LW V0, 16(V1)
9D005084  1040FFFE   BEQ V0, ZERO, 0x9D005080
9D005088  3C02BF84   LUI V0, -16508
9D0050C0  3C03BF84   LUI V1, -16508
9D0050C4  8C620010   LW V0, 16(V1)
9D0050C8  1040FFFE   BEQ V0, ZERO, 0x9D0050C4
9D0050CC  3C02BF84   LUI V0, -16508
9D00515C  3C03BF84   LUI V1, -16508
9D005160  8C620010   LW V0, 16(V1)
9D005164  1040FFFE   BEQ V0, ZERO, 0x9D005160
9D005168  3C02BF84   LUI V0, -16508
9D0051A0  3C03BF84   LUI V1, -16508
9D0051A4  8C620010   LW V0, 16(V1)
9D0051A8  1040FFFE   BEQ V0, ZERO, 0x9D0051A4
9D0051AC  3C02BF84   LUI V0, -16508
9D005270  8E020010   LW V0, 16(S0)
9D005274  2C42061A   SLTIU V0, V0, 1562
9D005278  1440FFFD   BNE V0, ZERO, 0x9D005270
9D00527C  00000000   NOP
9D005364  3C03BF84   LUI V1, -16508
9D005368  8C620010   LW V0, 16(V1)
9D00536C  1040FFFE   BEQ V0, ZERO, 0x9D005368
9D005370  3C02BF84   LUI V0, -16508
9D0053A8  3C03BF84   LUI V1, -16508
9D0053AC  8C620010   LW V0, 16(V1)
9D0053B0  1040FFFE   BEQ V0, ZERO, 0x9D0053AC
9D0053B4  3C02BF84   LUI V0, -16508
140:                     {}
141:                     T1CONbits.ON = 0;
9D004DF8  8CC20000   LW V0, 0(A2)
9D004DFC  7C027BC4   INS V0, ZERO, 15, 1
9D004E00  ACC20000   SW V0, 0(A2)
9D004E60  8C430000   LW V1, 0(V0)
9D004E64  7C037BC4   INS V1, ZERO, 15, 1
9D004E68  AC430000   SW V1, 0(V0)
9D004EC4  8C430000   LW V1, 0(V0)
9D004EC8  7C037BC4   INS V1, ZERO, 15, 1
9D004ECC  AC430000   SW V1, 0(V0)
9D00508C  8C430000   LW V1, 0(V0)
9D005090  7C037BC4   INS V1, ZERO, 15, 1
9D005094  AC430000   SW V1, 0(V0)
9D0050D0  8C430000   LW V1, 0(V0)
9D0050D4  7C037BC4   INS V1, ZERO, 15, 1
9D0050D8  AC430000   SW V1, 0(V0)
9D00516C  8C430000   LW V1, 0(V0)
9D005170  7C037BC4   INS V1, ZERO, 15, 1
9D005174  AC430000   SW V1, 0(V0)
9D0051B0  8C430000   LW V1, 0(V0)
9D0051B4  7C037BC4   INS V1, ZERO, 15, 1
9D0051B8  AC430000   SW V1, 0(V0)
9D005280  8E220000   LW V0, 0(S1)
9D005284  7C027BC4   INS V0, ZERO, 15, 1
9D005288  AE220000   SW V0, 0(S1)
9D005374  8C430000   LW V1, 0(V0)
9D005378  7C037BC4   INS V1, ZERO, 15, 1
9D00537C  AC430000   SW V1, 0(V0)
9D0053B8  8C430000   LW V1, 0(V0)
9D0053BC  7C037BC4   INS V1, ZERO, 15, 1
9D0053C0  AC430000   SW V1, 0(V0)
142:                 }
9D004ED0  03E00008   JR RA
9D004ED4  00000000   NOP
143:                 
144:                 void SPIRiskTerritory(int terr)
145:                 {
146:                     static int digits[10] = {
147:                         //gfedcba
148:                         0b01111110, // 0
149:                         0b00001100, // 1
150:                         0b10110110, // 2
151:                         0b10011110, // 3
152:                         0b11001100, // 4
153:                         0b11011010, // 5
154:                         0b11111000, // 6
155:                         0b00001110, // 7
156:                         0b11111110, // 8
157:                         0b11001110, // 9
158:                     };
159:                 
160:                     int color = territories[terr].owner + 1;
9D004ED8  000410C0   SLL V0, A0, 3
9D004EDC  00041940   SLL V1, A0, 5
9D004EE0  00621023   SUBU V0, V1, V0
9D004EE4  3C038000   LUI V1, -32768
9D004EE8  246341A8   ADDIU V1, V1, 16808
9D004EEC  00431021   ADDU V0, V0, V1
9D004EF0  8C450010   LW A1, 16(V0)
161:                     if((source == terr && TMR8 < T8_MSECS(125)) ||
9D004EF4  8F8280E0   LW V0, -32544(GP)
9D004EF8  14440008   BNE V0, A0, 0x9D004F1C
9D004EFC  24A50001   ADDIU A1, A1, 1
9D004F00  3C02BF84   LUI V0, -16508
9D004F04  8C430E10   LW V1, 3600(V0)
9D004F08  3C020002   LUI V0, 2
9D004F0C  3442FAB2   ORI V0, V0, -1358
9D004F10  0062102B   SLTU V0, V1, V0
9D004F14  5440000D   BNEL V0, ZERO, 0x9D004F4C
9D004F18  24050007   ADDIU A1, ZERO, 7
9D004F1C  8F8280D4   LW V0, -32556(GP)
9D004F20  1444000B   BNE V0, A0, 0x9D004F50
9D004F24  000410C0   SLL V0, A0, 3
162:                             (destination == terr && TMR8 > T8_MSECS(125)))
9D004F28  3C02BF84   LUI V0, -16508
9D004F2C  8C430E10   LW V1, 3600(V0)
9D004F30  3C020002   LUI V0, 2
9D004F34  3442FAB3   ORI V0, V0, -1357
9D004F38  0062102B   SLTU V0, V1, V0
9D004F3C  50400003   BEQL V0, ZERO, 0x9D004F4C
9D004F40  24050007   ADDIU A1, ZERO, 7
163:                     {
164:                         color = 7;
165:                     }
166:                     
167:                     int ones = territories[terr].troops % 10;
9D004F44  0B4013D4   J 0x9D004F50
9D004F48  000410C0   SLL V0, A0, 3
9D004F4C  000410C0   SLL V0, A0, 3
9D004F50  00042140   SLL A0, A0, 5
9D004F54  00822023   SUBU A0, A0, V0
9D004F58  3C028000   LUI V0, -32768
9D004F5C  244241A8   ADDIU V0, V0, 16808
9D004F60  00442021   ADDU A0, V0, A0
9D004F64  8C860014   LW A2, 20(A0)
9D004F68  3C046666   LUI A0, 26214
9D004F6C  24846667   ADDIU A0, A0, 26215
9D004F70  00C40018   MULT 0, A2, A0
9D004F74  00004810   MFHI T1, 0
9D004F78  00091083   SRA V0, T1, 2
9D004F7C  00061FC3   SRA V1, A2, 31
9D004F80  00431023   SUBU V0, V0, V1
9D004F84  00023840   SLL A3, V0, 1
9D004F88  000210C0   SLL V0, V0, 3
9D004F8C  00E21021   ADDU V0, A3, V0
9D004F90  00C21023   SUBU V0, A2, V0
168:                     int tens = (territories[terr].troops % 100) / 10;
9D004F94  3C0751EB   LUI A3, 20971
9D004F98  34E7851F   ORI A3, A3, -31457
9D004F9C  00C70018   MULT 0, A2, A3
9D004FA0  00004810   MFHI T1, 0
9D004FA4  00093943   SRA A3, T1, 5
9D004FA8  00E33823   SUBU A3, A3, V1
9D004FAC  00071880   SLL V1, A3, 2
9D004FB0  00073900   SLL A3, A3, 4
9D004FB4  00671821   ADDU V1, V1, A3
9D004FB8  00033880   SLL A3, V1, 2
9D004FBC  00671821   ADDU V1, V1, A3
9D004FC0  00C31823   SUBU V1, A2, V1
9D004FC4  00640018   MULT 0, V1, A0
9D004FC8  00002010   MFHI A0, 0
9D004FCC  00042083   SRA A0, A0, 2
9D004FD0  00031FC3   SRA V1, V1, 31
9D004FD4  00831823   SUBU V1, A0, V1
169:                 
170:                  
171:                     while(SPI1STATbits.SPITBE != 1) {}
9D004FD8  3C07BF82   LUI A3, -16510
9D004FDC  8CE61010   LW A2, 4112(A3)
9D004FE0  30C60008   ANDI A2, A2, 8
9D004FE4  10C0FFFD   BEQ A2, ZERO, 0x9D004FDC
9D004FE8  3C049D01   LUI A0, -25343
172:                     SPI1BUF = digits[ones];
9D004FEC  00021080   SLL V0, V0, 2
9D004FF0  24848DD4   ADDIU A0, A0, -29228
9D004FF4  7C82100A   LWX V0, V0(A0)
9D004FF8  3C04BF82   LUI A0, -16510
9D004FFC  AC821020   SW V0, 4128(A0)
173:                     while(SPI1STATbits.SPITBE != 1) {}
9D005000  3C06BF82   LUI A2, -16510
9D005004  8CC21010   LW V0, 4112(A2)
9D005008  30420008   ANDI V0, V0, 8
9D00500C  1040FFFD   BEQ V0, ZERO, 0x9D005004
9D005010  00000000   NOP
174:                     SPI1BUF = (tens? digits[tens] : 0x00);
9D005014  50600005   BEQL V1, ZERO, 0x9D00502C
9D005018  00001821   ADDU V1, ZERO, ZERO
9D00501C  00031880   SLL V1, V1, 2
9D005020  3C029D01   LUI V0, -25343
9D005024  24428DD4   ADDIU V0, V0, -29228
9D005028  7C43180A   LWX V1, V1(V0)
9D00502C  3C02BF82   LUI V0, -16510
9D005030  AC431020   SW V1, 4128(V0)
175:                     while(SPI1STATbits.SPITBE != 1) {}
9D005034  3C03BF82   LUI V1, -16510
9D005038  8C621010   LW V0, 4112(V1)
9D00503C  30420008   ANDI V0, V0, 8
9D005040  1040FFFD   BEQ V0, ZERO, 0x9D005038
9D005044  3C02BF82   LUI V0, -16510
176:                     SPI1BUF = color << 2;
9D005048  00052880   SLL A1, A1, 2
9D00504C  AC451020   SW A1, 4128(V0)
177:                 
178:                     while(SPI1STATbits.SPITBE != 1) {}
9D005050  3C03BF82   LUI V1, -16510
9D005054  8C621010   LW V0, 4112(V1)
9D005058  30420008   ANDI V0, V0, 8
9D00505C  1040FFFD   BEQ V0, ZERO, 0x9D005054
9D005060  3C02BF84   LUI V0, -16508
179:                 
180:                 
181:                 
182:                     usleep(1);
183:                 
184:                     PORTFbits.RF2 = 0;
9D005098  3C03BF86   LUI V1, -16506
9D00509C  8C640520   LW A0, 1312(V1)
9D0050A0  7C041084   INS A0, ZERO, 2, 1
9D0050A4  AC640520   SW A0, 1312(V1)
185:                 
186:                     usleep(1);
187:                 
188:                     PORTFbits.RF2 = 1;
9D0050DC  3C02BF86   LUI V0, -16506
9D0050E0  8C430520   LW V1, 1312(V0)
9D0050E4  24040001   ADDIU A0, ZERO, 1
9D0050E8  7C831084   INS V1, A0, 2, 1
9D0050EC  AC430520   SW V1, 1312(V0)
189:                 
190:                 }
9D0050F0  03E00008   JR RA
9D0050F4  00000000   NOP
191:                 
192:                 void SPIblank()
193:                 {
194:                     SPI1BUF = 0;
9D0050F8  3C02BF82   LUI V0, -16510
9D0050FC  AC401020   SW ZERO, 4128(V0)
195:                     while(SPI1STATbits.SPITBE != 1) {}
9D005100  3C03BF82   LUI V1, -16510
9D005104  8C621010   LW V0, 4112(V1)
9D005108  30420008   ANDI V0, V0, 8
9D00510C  1040FFFD   BEQ V0, ZERO, 0x9D005104
9D005110  3C02BF82   LUI V0, -16510
196:                     SPI1BUF = 0;
9D005114  AC401020   SW ZERO, 4128(V0)
197:                     while(SPI1STATbits.SPITBE != 1) {}
9D005118  3C03BF82   LUI V1, -16510
9D00511C  8C621010   LW V0, 4112(V1)
9D005120  30420008   ANDI V0, V0, 8
9D005124  1040FFFD   BEQ V0, ZERO, 0x9D00511C
9D005128  3C02BF82   LUI V0, -16510
198:                     SPI1BUF = 0;
9D00512C  AC401020   SW ZERO, 4128(V0)
199:                     while(SPI1STATbits.SPITBE != 1) {}
9D005130  3C03BF82   LUI V1, -16510
9D005134  8C621010   LW V0, 4112(V1)
9D005138  30420008   ANDI V0, V0, 8
9D00513C  1040FFFD   BEQ V0, ZERO, 0x9D005134
9D005140  3C02BF84   LUI V0, -16508
200:                 
201:                     usleep(1);
202:                     PORTFbits.RF2 = 0;
9D005178  3C03BF86   LUI V1, -16506
9D00517C  8C640520   LW A0, 1312(V1)
9D005180  7C041084   INS A0, ZERO, 2, 1
9D005184  AC640520   SW A0, 1312(V1)
203:                     usleep(1);
204:                     PORTFbits.RF2 = 1;
9D0051BC  3C02BF86   LUI V0, -16506
9D0051C0  8C430520   LW V1, 1312(V0)
9D0051C4  24040001   ADDIU A0, ZERO, 1
9D0051C8  7C831084   INS V1, A0, 2, 1
9D0051CC  AC430520   SW V1, 1312(V0)
205:                 }
9D0051D0  03E00008   JR RA
9D0051D4  00000000   NOP
206:                 
207:                 void SPIbyte(unsigned char byte)
208:                 {
9D00532C  308400FF   ANDI A0, A0, 255
209:                     SPI1BUF = byte;
9D005330  3C02BF82   LUI V0, -16510
9D005334  AC441020   SW A0, 4128(V0)
210:                     while(SPI1STATbits.SPITBE != 1) {}
9D005338  3C03BF82   LUI V1, -16510
9D00533C  8C621010   LW V0, 4112(V1)
9D005340  30420008   ANDI V0, V0, 8
9D005344  1040FFFD   BEQ V0, ZERO, 0x9D00533C
9D005348  3C02BF84   LUI V0, -16508
211:                     usleep(1);
212:                     PORTFbits.RF2 = 0;
9D005380  3C03BF86   LUI V1, -16506
9D005384  8C640520   LW A0, 1312(V1)
9D005388  7C041084   INS A0, ZERO, 2, 1
9D00538C  AC640520   SW A0, 1312(V1)
213:                     usleep(1);
214:                     PORTFbits.RF2 = 1;
9D0053C4  3C02BF86   LUI V0, -16506
9D0053C8  8C430520   LW V1, 1312(V0)
9D0053CC  24040001   ADDIU A0, ZERO, 1
9D0053D0  7C831084   INS V1, A0, 2, 1
9D0053D4  AC430520   SW V1, 1312(V0)
215:                 }
9D0053D8  03E00008   JR RA
9D0053DC  00000000   NOP
216:                 
217:                 void __ISR(_TIMER_3_VECTOR, IPL3SRS) timer3isr()
218:                 {
9D0053E0  415DE800   RDPGPR SP, SP
9D0053E4  401A7000   MFC0 K0, EPC
9D0053E8  401B6000   MFC0 K1, Status
9D0053EC  27BDFFF0   ADDIU SP, SP, -16
9D0053F0  AFBA000C   SW K0, 12(SP)
9D0053F4  401A6002   MFC0 K0, SRSCtl
9D0053F8  AFBB0008   SW K1, 8(SP)
9D0053FC  AFBA0004   SW K0, 4(SP)
9D005400  7C1B7844   INS K1, ZERO, 1, 15
9D005404  377B0C00   ORI K1, K1, 3072
9D005408  409B6000   MTC0 K1, Status
219:                     IFS0bits.T3IF = 0; // clear interrupt flag
9D00540C  3C02BF81   LUI V0, -16511
9D005410  8C430040   LW V1, 64(V0)
9D005414  7C037384   INS V1, ZERO, 14, 1
9D005418  AC430040   SW V1, 64(V0)
220:                 }
9D00541C  41606000   DI ZERO
9D005420  000000C0   EHB
9D005424  8FBB0004   LW K1, 4(SP)
9D005428  8FBA000C   LW K0, 12(SP)
9D00542C  409B6002   MTC0 K1, SRSCtl
9D005430  8FBB0008   LW K1, 8(SP)
9D005434  409A7000   MTC0 K0, EPC
9D005438  27BD0010   ADDIU SP, SP, 16
9D00543C  41DDE800   WRPGPR SP, SP
9D005440  409B6000   MTC0 K1, Status
9D005444  42000018   ERET
221:                 
222:                 
223:                 //unsigned int counter = 0;
224:                 
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/lcd.c  ------------------------------------------------
1:                   #include <p32xxxx.h>
2:                   #include "lcd.h"
3:                   
4:                   #define SHORTWAIT() asm volatile ("nop\n nop\n nop\n nop\n nop\n nop")
5:                   void msleep(int msecs);
6:                   void usleep(int msecs);
7:                   
8:                   #include <stdio.h>
9:                   #include <stdarg.h>
10:                  
11:                  // LCD needs 37us between commands, according to its datasheet.
12:                  
13:                  
14:                  #define LCDCMD_ON      0x0C
15:                  #define LCDCMD_TWOLINE 0x38
16:                  #define LCDCMD_CLR     0x01
17:                  #define LCDCMD_LINE1   0x80
18:                  #define LCDCMD_LINE2   0xC0
19:                  
20:                  #define LCD_LONG_WAIT_USEC 2000
21:                  #define LCD_SHORT_WAIT_USEC 40
22:                  
23:                  
24:                  void startLCD()
25:                  {
9D0075E8  27BDFFE8   ADDIU SP, SP, -24
9D0075EC  AFBF0014   SW RA, 20(SP)
26:                      usleep(LCD_LONG_WAIT_USEC); // make sure LCD has a chance to power up
9D0075F0  0F40139D   JAL 0x9D004E74
9D0075F4  240407D0   ADDIU A0, ZERO, 2000
27:                  
28:                      LCD_RW = 0;  // writing
9D0075F8  3C02BF86   LUI V0, -16506
9D0075FC  8C430220   LW V1, 544(V0)
9D007600  7C032104   INS V1, ZERO, 4, 1
9D007604  AC430220   SW V1, 544(V0)
29:                      SHORTWAIT();
9D007608  00000000   NOP
9D00760C  00000000   NOP
9D007610  00000000   NOP
9D007614  00000000   NOP
9D007618  00000000   NOP
9D00761C  00000000   NOP
30:                      LCD_CLK = 1; // hold clock high
9D007620  8C430220   LW V1, 544(V0)
9D007624  24040001   ADDIU A0, ZERO, 1
9D007628  7C8318C4   INS V1, A0, 3, 1
9D00762C  AC430220   SW V1, 544(V0)
31:                      
32:                      usleep(LCD_LONG_WAIT_USEC);
9D007630  0F40139D   JAL 0x9D004E74
9D007634  240407D0   ADDIU A0, ZERO, 2000
33:                      sendLCDcmd(LCDCMD_ON);
9D007638  0F401D52   JAL sendLCDcmd
9D00763C  2404000C   ADDIU A0, ZERO, 12
34:                      sendLCDcmd(LCDCMD_TWOLINE);
9D007640  0F401D52   JAL sendLCDcmd
9D007644  24040038   ADDIU A0, ZERO, 56
35:                      sendLCDcmd(LCDCMD_CLR);
9D007648  0F401D52   JAL sendLCDcmd
9D00764C  24040001   ADDIU A0, ZERO, 1
36:                      usleep(LCD_LONG_WAIT_USEC);
9D007650  0F40139D   JAL 0x9D004E74
9D007654  240407D0   ADDIU A0, ZERO, 2000
37:                  }
9D007658  8FBF0014   LW RA, 20(SP)
9D00765C  03E00008   JR RA
9D007660  27BD0018   ADDIU SP, SP, 24
38:                  
39:                  void clearLCD()
40:                  {
9D0075CC  27BDFFE8   ADDIU SP, SP, -24
9D0075D0  AFBF0014   SW RA, 20(SP)
41:                      sendLCDcmd(0x01);
9D0075D4  0F401D52   JAL sendLCDcmd
9D0075D8  24040001   ADDIU A0, ZERO, 1
42:                  }
9D0075DC  8FBF0014   LW RA, 20(SP)
9D0075E0  03E00008   JR RA
9D0075E4  27BD0018   ADDIU SP, SP, 24
43:                  void sendLCDcmd(unsigned char cmd)
44:                  {
9D007548  27BDFFE0   ADDIU SP, SP, -32
9D00754C  AFBF001C   SW RA, 28(SP)
9D007550  AFB10018   SW S1, 24(SP)
9D007554  AFB00014   SW S0, 20(SP)
9D007558  309100FF   ANDI S1, A0, 255
45:                      LCD_RS = 0;
9D00755C  3C10BF86   LUI S0, -16506
9D007560  8E020120   LW V0, 288(S0)
9D007564  7C027BC4   INS V0, ZERO, 15, 1
9D007568  AE020120   SW V0, 288(S0)
46:                      usleep(LCD_SHORT_WAIT_USEC);
9D00756C  0F40139D   JAL 0x9D004E74
9D007570  24040028   ADDIU A0, ZERO, 40
47:                      LCD_DATA = cmd;
9D007574  3C02BF86   LUI V0, -16506
9D007578  AC510420   SW S1, 1056(V0)
48:                      LCD_CLK = 0;
9D00757C  3C11BF86   LUI S1, -16506
9D007580  8E220220   LW V0, 544(S1)
9D007584  7C0218C4   INS V0, ZERO, 3, 1
9D007588  AE220220   SW V0, 544(S1)
49:                      usleep(LCD_SHORT_WAIT_USEC);
9D00758C  0F40139D   JAL 0x9D004E74
9D007590  24040028   ADDIU A0, ZERO, 40
50:                      LCD_RS = 1;
9D007594  8E020120   LW V0, 288(S0)
9D007598  24030001   ADDIU V1, ZERO, 1
9D00759C  7C627BC4   INS V0, V1, 15, 1
9D0075A0  AE020120   SW V0, 288(S0)
51:                      LCD_CLK = 1;
9D0075A4  8E220220   LW V0, 544(S1)
9D0075A8  7C6218C4   INS V0, V1, 3, 1
9D0075AC  AE220220   SW V0, 544(S1)
52:                      usleep(LCD_SHORT_WAIT_USEC);
9D0075B0  0F40139D   JAL 0x9D004E74
9D0075B4  24040028   ADDIU A0, ZERO, 40
53:                  }
9D0075B8  8FBF001C   LW RA, 28(SP)
9D0075BC  8FB10018   LW S1, 24(SP)
9D0075C0  8FB00014   LW S0, 20(SP)
9D0075C4  03E00008   JR RA
9D0075C8  27BD0020   ADDIU SP, SP, 32
54:                  
55:                  void setTextDisplay(int line, const char * format, ...)
9D0076FC  27B40020   ADDIU S4, SP, 32
56:                  {
9D007664  27BDFFC0   ADDIU SP, SP, -64
9D007668  AFBF003C   SW RA, 60(SP)
9D00766C  AFB40038   SW S4, 56(SP)
9D007670  AFB30034   SW S3, 52(SP)
9D007674  AFB20030   SW S2, 48(SP)
9D007678  AFB1002C   SW S1, 44(SP)
9D00767C  AFB00028   SW S0, 40(SP)
9D007680  00808021   ADDU S0, A0, ZERO
9D007684  AFA60048   SW A2, 72(SP)
9D007688  AFA7004C   SW A3, 76(SP)
57:                      if(line != 0 && line != 1)
9D00768C  2C820002   SLTIU V0, A0, 2
9D007690  1040002F   BEQ V0, ZERO, 0x9D007750
9D007694  00A03021   ADDU A2, A1, ZERO
58:                          return;
59:                      char text[17] = {0};
9D007698  AFA00010   SW ZERO, 16(SP)
9D00769C  AFA00014   SW ZERO, 20(SP)
9D0076A0  AFA00018   SW ZERO, 24(SP)
9D0076A4  AFA0001C   SW ZERO, 28(SP)
9D0076A8  A3A00020   SB ZERO, 32(SP)
60:                      va_list args;
61:                      va_start(args, format);
9D0076AC  27A70048   ADDIU A3, SP, 72
9D0076B0  AFA70024   SW A3, 36(SP)
62:                      vsnprintf(text, 17, format, args);
9D0076B4  27A40010   ADDIU A0, SP, 16
9D0076B8  0F400064   JAL vsnprintf
9D0076BC  24050011   ADDIU A1, ZERO, 17
63:                      va_end(args);
64:                  
65:                      usleep(LCD_SHORT_WAIT_USEC);
9D0076C0  0F40139D   JAL 0x9D004E74
9D0076C4  24040028   ADDIU A0, ZERO, 40
66:                      if(line == 0)
9D0076C8  16000005   BNE S0, ZERO, 0x9D0076E0
9D0076CC  24020001   ADDIU V0, ZERO, 1
67:                          sendLCDcmd(LCDCMD_LINE1);
9D0076D0  0F401D52   JAL sendLCDcmd
9D0076D4  24040080   ADDIU A0, ZERO, 128
9D0076D8  0B401DBC   J 0x9D0076F0
9D0076DC  00000000   NOP
68:                      if(line == 1)
9D0076E0  16020003   BNE S0, V0, 0x9D0076F0
9D0076E4  00000000   NOP
69:                          sendLCDcmd(LCDCMD_LINE2);
9D0076E8  0F401D52   JAL sendLCDcmd
9D0076EC  240400C0   ADDIU A0, ZERO, 192
70:                      usleep(LCD_SHORT_WAIT_USEC);
9D0076F0  0F40139D   JAL 0x9D004E74
9D0076F4  24040028   ADDIU A0, ZERO, 40
9D0076F8  27B10010   ADDIU S1, SP, 16
71:                      for(int i = 0; i < 16; i++)
9D007748  5634FFF1   BNEL S1, S4, 0x9D007710
9D00774C  82220000   LB V0, 0(S1)
72:                      {
73:                          LCD_DATA = text[i]? text[i] : ' ';
9D007700  3C12BF86   LUI S2, -16506
9D00770C  82220000   LB V0, 0(S1)
9D007710  50400001   BEQL V0, ZERO, 0x9D007718
9D007714  24020020   ADDIU V0, ZERO, 32
9D007718  AE420420   SW V0, 1056(S2)
74:                          LCD_CLK = 0;
9D007704  3C10BF86   LUI S0, -16506
9D00771C  8E020220   LW V0, 544(S0)
9D007720  7C0218C4   INS V0, ZERO, 3, 1
9D007724  AE020220   SW V0, 544(S0)
75:                          usleep(LCD_SHORT_WAIT_USEC);
9D007728  0F40139D   JAL 0x9D004E74
9D00772C  24040028   ADDIU A0, ZERO, 40
76:                          LCD_CLK = 1;
9D007708  24130001   ADDIU S3, ZERO, 1
9D007730  8E020220   LW V0, 544(S0)
9D007734  7E6218C4   INS V0, S3, 3, 1
9D007738  AE020220   SW V0, 544(S0)
77:                          usleep(LCD_SHORT_WAIT_USEC);
9D00773C  0F40139D   JAL 0x9D004E74
9D007740  24040028   ADDIU A0, ZERO, 40
9D007744  26310001   ADDIU S1, S1, 1
78:                      }
79:                  }
9D007750  8FBF003C   LW RA, 60(SP)
9D007754  8FB40038   LW S4, 56(SP)
9D007758  8FB30034   LW S3, 52(SP)
9D00775C  8FB20030   LW S2, 48(SP)
9D007760  8FB1002C   LW S1, 44(SP)
9D007764  8FB00028   LW S0, 40(SP)
9D007768  03E00008   JR RA
9D00776C  27BD0040   ADDIU SP, SP, 64
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/init.c  -----------------------------------------------
1:                   #include <p32xxxx.h>
2:                   #include "init.h"
3:                   
4:                   static inline void systemUnlock()
5:                   {
6:                       __builtin_disable_interrupts();
9D005998  41626000   DI V0
7:                       // The datasheet emphasizes that these writes MUST be consecutive
8:                       // instructions, which is why we disable interrupts
9:                       SYSKEY = 0x0;
9D0059A0  3C03BF80   LUI V1, -16512
9D0059A4  AC600030   SW ZERO, 48(V1)
10:                      SYSKEY = 0xAA996655;
9D0059A8  3C02AA99   LUI V0, -21863
9D0059AC  24426655   ADDIU V0, V0, 26197
9D0059B0  AC620030   SW V0, 48(V1)
11:                      SYSKEY = 0x556699AA;
9D0059B4  3C025566   LUI V0, 21862
9D0059B8  344299AA   ORI V0, V0, -26198
9D0059BC  AC620030   SW V0, 48(V1)
12:                  }
13:                  
14:                  static inline void systemLock()
15:                  {
16:                      SYSKEY = 0x0;
9D005A30  AC600030   SW ZERO, 48(V1)
17:                     __builtin_enable_interrupts();
9D005A34  41626020   EI V0
18:                  }
19:                  
20:                  // PB clocks are maximum 100 MHz, except PB7 at 200 MHz
21:                  void initClocks()
22:                  {
23:                      systemUnlock();
24:                  
25:                      OSCCONbits.FRCDIV = 0;
9D0059C0  3C02BF80   LUI V0, -16512
26:                      PB1DIV = 0x8001; // system usage
9D0059D0  34028001   ORI V0, ZERO, -32767
27:                      PB2DIV = 0x8001; // SPI
9D0059DC  3C04BF80   LUI A0, -16512
28:                      PB3DIV = 0x8001; // timers
9D0059E4  3C04BF80   LUI A0, -16512
29:                      PB4DIV = 0x8001; // I/O port access
9D0059EC  3C04BF80   LUI A0, -16512
30:                      PB5DIV = 0x8001; // RNG
9D0059F4  3C04BF80   LUI A0, -16512
31:                      PB7DIV = 0x8000; // CPU clock
9D0059FC  34058000   ORI A1, ZERO, -32768
32:                      PB8DIV = 0x8001; // not used in this project
9D005A08  3C04BF80   LUI A0, -16512
33:                  
34:                      REFO1CON = 0;
9D005A10  3C02BF80   LUI V0, -16512
35:                      REFO2CON = 0;
9D005A18  3C02BF80   LUI V0, -16512
36:                      REFO3CON = 0;
9D005A20  3C02BF80   LUI V0, -16512
37:                      REFO4CON = 0;
9D005A28  3C02BF80   LUI V0, -16512
38:                  
39:                      systemLock();
40:                  }
9D005A38  03E00008   JR RA
41:                  
42:                  void initInterrupts()
43:                  {
44:                      __builtin_disable_interrupts();
9D005A40  41626000   DI V0
9D005A44  000000C0   EHB
45:                  
46:                      // Shadow register sets for each interrupt level
47:                      // why this is configurable is beyond me
48:                      PRISS = 0x76543210;
9D005A48  3C037654   LUI V1, 30292
9D005A4C  24633210   ADDIU V1, V1, 12816
9D005A50  3C02BF81   LUI V0, -16511
9D005A54  AC430010   SW V1, 16(V0)
49:                  
50:                      // Timer 2 interrupts
51:                      // Interrupt every 2 ms, priority 2.0
52:                      // ISR in buttons.c
53:                      IFS0bits.T2IF = 0;
9D005A58  3C04BF81   LUI A0, -16511
9D005A5C  8C820040   LW V0, 64(A0)
9D005A60  7C024A44   INS V0, ZERO, 9, 1
9D005A64  AC820040   SW V0, 64(A0)
54:                      IEC0bits.T2IE = 1;
9D005A68  3C03BF81   LUI V1, -16511
9D005A6C  8C6500C0   LW A1, 192(V1)
9D005A70  24020001   ADDIU V0, ZERO, 1
9D005A74  7C454A44   INS A1, V0, 9, 1
9D005A78  AC6500C0   SW A1, 192(V1)
55:                      IPC2bits.T2IP = 2;
9D005A7C  3C05BF81   LUI A1, -16511
9D005A80  8CA60160   LW A2, 352(A1)
9D005A84  24070002   ADDIU A3, ZERO, 2
9D005A88  7CE66284   INS A2, A3, 10, 3
9D005A8C  ACA60160   SW A2, 352(A1)
56:                      IPC2bits.T2IS = 0;
9D005A90  8CA60160   LW A2, 352(A1)
9D005A94  7C064A04   INS A2, ZERO, 8, 2
9D005A98  ACA60160   SW A2, 352(A1)
57:                  
58:                      // Timer 3 interrupts
59:                      // Interrupt every 1 ms, priority 3.0
60:                      // ISR in main.c
61:                      IFS0bits.T3IF = 0;
9D005A9C  8C850040   LW A1, 64(A0)
9D005AA0  7C057384   INS A1, ZERO, 14, 1
9D005AA4  AC850040   SW A1, 64(A0)
62:                      IEC0bits.T3IE = 1;
9D005AA8  8C6400C0   LW A0, 192(V1)
9D005AAC  7C447384   INS A0, V0, 14, 1
9D005AB0  AC6400C0   SW A0, 192(V1)
63:                      IPC3bits.T3IP = 3;
9D005AB4  3C03BF81   LUI V1, -16511
9D005AB8  8C640170   LW A0, 368(V1)
9D005ABC  24050003   ADDIU A1, ZERO, 3
9D005AC0  7CA4A484   INS A0, A1, 18, 3
9D005AC4  AC640170   SW A0, 368(V1)
64:                      IPC3bits.T3IS = 0;
9D005AC8  8C640170   LW A0, 368(V1)
9D005ACC  7C048C04   INS A0, ZERO, 16, 2
9D005AD0  AC640170   SW A0, 368(V1)
65:                  
66:                      // SPI 3 rx interrupt
67:                      // priority 4.0
68:                      // ISR in pi.c
69:                      IFS4bits.SPI3RXIF = 0;
9D005AD4  3C03BF81   LUI V1, -16511
9D005AD8  8C640080   LW A0, 128(V1)
9D005ADC  7C04DEC4   INS A0, ZERO, 27, 1
9D005AE0  AC640080   SW A0, 128(V1)
70:                      IEC4bits.SPI3RXIE = 1;
9D005AE4  3C03BF81   LUI V1, -16511
9D005AE8  8C640100   LW A0, 256(V1)
9D005AEC  7C44DEC4   INS A0, V0, 27, 1
9D005AF0  AC640100   SW A0, 256(V1)
71:                      IPC38bits.SPI3RXIP = 4;
9D005AF4  3C03BF81   LUI V1, -16511
9D005AF8  8C6403A0   LW A0, 928(V1)
9D005AFC  24050004   ADDIU A1, ZERO, 4
9D005B00  7CA4E684   INS A0, A1, 26, 3
9D005B04  AC6403A0   SW A0, 928(V1)
72:                      IPC38bits.SPI3RXIS = 0;
9D005B08  8C6403A0   LW A0, 928(V1)
9D005B0C  7C04CE04   INS A0, ZERO, 24, 2
9D005B10  AC6403A0   SW A0, 928(V1)
73:                  
74:                      INTCONbits.MVEC = 1;
9D005B14  3C03BF81   LUI V1, -16511
9D005B18  8C640000   LW A0, 0(V1)
9D005B1C  7C446304   INS A0, V0, 12, 1
9D005B20  AC640000   SW A0, 0(V1)
75:                  
76:                      __builtin_enable_interrupts();
9D005B24  41626020   EI V0
77:                  }
9D005B28  03E00008   JR RA
9D005B2C  00000000   NOP
78:                  
79:                  void initPorts()
80:                  {
81:                      // On the Explorer 16 board, the LEDs are (from left to right):
82:                      // A7  A6  F12 F13 A3  A2  A1  A0
83:                      // Buttons are:
84:                      // N/C D13 A7  F8                   (yes A7 again)
85:                      // LCD uses:
86:                      // B15 C3  C4  E0..E7
87:                      //
88:                      // F1 and D1 are used for SPI1
89:                      // G is used for ??? but it got set that way in harmony
90:                      //
91:                      //        111111
92:                      //        5432109876543210
93:                      TRISA = 0b1111111111111111;
9D005B30  3403FFFF   ORI V1, ZERO, -1
9D005B34  3C02BF86   LUI V0, -16506
9D005B38  AC430010   SW V1, 16(V0)
94:                      TRISB = 0b0111111111111111;
9D005B3C  24037FFF   ADDIU V1, ZERO, 32767
9D005B40  3C02BF86   LUI V0, -16506
9D005B44  AC430110   SW V1, 272(V0)
95:                      TRISC = 0b1111111111100111;
9D005B48  3403FFE7   ORI V1, ZERO, -25
9D005B4C  3C02BF86   LUI V0, -16506
9D005B50  AC430210   SW V1, 528(V0)
96:                      TRISD = 0b1111111111111101;
9D005B54  3403FFFD   ORI V1, ZERO, -3
9D005B58  3C02BF86   LUI V0, -16506
9D005B5C  AC430310   SW V1, 784(V0)
97:                      TRISE = 0b1111111100000000;
9D005B60  3403FF00   ORI V1, ZERO, -256
9D005B64  3C02BF86   LUI V0, -16506
9D005B68  AC430410   SW V1, 1040(V0)
98:                      TRISF = 0b1111111111111001;
9D005B6C  3403FFF9   ORI V1, ZERO, -7
9D005B70  3C02BF86   LUI V0, -16506
9D005B74  AC430510   SW V1, 1296(V0)
99:                      TRISG = 0b1111001111000011;
9D005B78  3403F3C3   ORI V1, ZERO, -3133
9D005B7C  3C02BF86   LUI V0, -16506
9D005B80  AC430610   SW V1, 1552(V0)
100:                 
101:                     ANSELA = 0x0000;
9D005B84  3C02BF86   LUI V0, -16506
9D005B88  AC400000   SW ZERO, 0(V0)
102:                     ANSELB = 0x0000;
9D005B8C  3C02BF86   LUI V0, -16506
9D005B90  AC400100   SW ZERO, 256(V0)
103:                     ANSELC = 0x0000;
9D005B94  3C02BF86   LUI V0, -16506
9D005B98  AC400200   SW ZERO, 512(V0)
104:                     ANSELD = 0x0000;
9D005B9C  3C02BF86   LUI V0, -16506
9D005BA0  AC400300   SW ZERO, 768(V0)
105:                     ANSELE = 0x0000;
9D005BA4  3C02BF86   LUI V0, -16506
9D005BA8  AC400400   SW ZERO, 1024(V0)
106:                     ANSELF = 0x0000;
9D005BAC  3C02BF86   LUI V0, -16506
9D005BB0  AC400500   SW ZERO, 1280(V0)
107:                     ANSELG = 0x0000;
9D005BB4  3C02BF86   LUI V0, -16506
9D005BB8  AC400600   SW ZERO, 1536(V0)
108:                 
109:                     // Clear LEDs at start of program
110:                     //PORTACLR = 0b11001111;
111:                     //PORTFCLR = 0b0011000000000000;
112:                 
113:                 }
9D005BBC  03E00008   JR RA
9D005BC0  00000000   NOP
114:                 
115:                 void initTimers()
116:                 {
117:                     // ----- TIMER 1 -----
118:                     // Used to provide short, precise waits for the usleep and msleep functions
119:                     // which are used mostly in the LCD driver.
120:                     // Will be started when a wait is called for.
121:                     T1CON = 0;
9D005BC4  3C02BF84   LUI V0, -16508
9D005BC8  AC400000   SW ZERO, 0(V0)
122:                     T1CONbits.TCKPS = 0b10; // 1:64 prescale = 0.64us increments
9D005BCC  3C02BF84   LUI V0, -16508
9D005BD0  8C430000   LW V1, 0(V0)
9D005BD4  24040002   ADDIU A0, ZERO, 2
9D005BD8  7C832904   INS V1, A0, 4, 2
9D005BDC  AC430000   SW V1, 0(V0)
123:                                             // 0.64us * 0xFFFF = 41.9ms maximum
124:                     PR1 = 0xFFFF; // maximum period
9D005BE0  3403FFFF   ORI V1, ZERO, -1
9D005BE4  3C02BF84   LUI V0, -16508
9D005BE8  AC430020   SW V1, 32(V0)
125:                     TMR1 = 0;
9D005BEC  3C02BF84   LUI V0, -16508
9D005BF0  AC400010   SW ZERO, 16(V0)
126:                 
127:                     // ----- TIMER 2 -----
128:                     // Generates interrupts to poll button state.
129:                     T2CON = 0;
9D005BF4  3C02BF84   LUI V0, -16508
9D005BF8  AC400200   SW ZERO, 512(V0)
130:                     T2CONbits.TCKPS = 0b010; // 1:4 prescale = 0.04us increments
9D005BFC  3C02BF84   LUI V0, -16508
9D005C00  8C430200   LW V1, 512(V0)
9D005C04  7C833104   INS V1, A0, 4, 3
9D005C08  AC430200   SW V1, 512(V0)
131:                     PR2 = 50000; // 0.04us * 50 000 = 2 ms
9D005C0C  3405C350   ORI A1, ZERO, -15536
9D005C10  3C03BF84   LUI V1, -16508
9D005C14  AC650220   SW A1, 544(V1)
132:                     TMR2 = 0;
9D005C18  3C03BF84   LUI V1, -16508
9D005C1C  AC600210   SW ZERO, 528(V1)
133:                     T2CONbits.ON = 1;
9D005C20  8C450200   LW A1, 512(V0)
9D005C24  24030001   ADDIU V1, ZERO, 1
9D005C28  7C657BC4   INS A1, V1, 15, 1
9D005C2C  AC450200   SW A1, 512(V0)
134:                 
135:                     // ----- TIMER 3 -----
136:                     // Generates interrupts to start LED SPI shifting.
137:                     T3CON = 0;
9D005C30  3C02BF84   LUI V0, -16508
9D005C34  AC400400   SW ZERO, 1024(V0)
138:                     T3CONbits.TCKPS = 0b010; // 1:4 prescale = 0.04us increments
9D005C38  3C02BF84   LUI V0, -16508
9D005C3C  8C450400   LW A1, 1024(V0)
9D005C40  7C853104   INS A1, A0, 4, 3
9D005C44  AC450400   SW A1, 1024(V0)
139:                     PR3 = 25000; // 0.04us * 25 000 = 1 ms
9D005C48  240561A8   ADDIU A1, ZERO, 25000
9D005C4C  3C04BF84   LUI A0, -16508
9D005C50  AC850420   SW A1, 1056(A0)
140:                     TMR3 = 0;
9D005C54  3C04BF84   LUI A0, -16508
9D005C58  AC800410   SW ZERO, 1040(A0)
141:                     T3CONbits.ON = 1;
9D005C5C  8C440400   LW A0, 1024(V0)
9D005C60  7C647BC4   INS A0, V1, 15, 1
9D005C64  AC440400   SW A0, 1024(V0)
142:                 
143:                     // ----- TIMER 4 -----
144:                     // Not used
145:                     T4CON = 0;
9D005C68  3C02BF84   LUI V0, -16508
9D005C6C  AC400600   SW ZERO, 1536(V0)
146:                 
147:                     // ----- TIMER 5 -----
148:                     // Not used
149:                     T5CON = 0;
9D005C70  3C02BF84   LUI V0, -16508
9D005C74  AC400800   SW ZERO, 2048(V0)
150:                 
151:                     // ----- TIMER 6/7 -----
152:                     // Used to provide a random value to seed the RNG.
153:                     T6CON = 0;
9D005C78  3C02BF84   LUI V0, -16508
9D005C7C  AC400A00   SW ZERO, 2560(V0)
154:                     T7CON = 0;
9D005C80  3C02BF84   LUI V0, -16508
9D005C84  AC400C00   SW ZERO, 3072(V0)
155:                     T6CONbits.T32 = 1;       // 32-bit timer
9D005C88  3C02BF84   LUI V0, -16508
9D005C8C  8C440A00   LW A0, 2560(V0)
9D005C90  7C6418C4   INS A0, V1, 3, 1
9D005C94  AC440A00   SW A0, 2560(V0)
156:                     T6CONbits.TCKPS = 0b000; // no prescale
9D005C98  8C440A00   LW A0, 2560(V0)
9D005C9C  7C043104   INS A0, ZERO, 4, 3
9D005CA0  AC440A00   SW A0, 2560(V0)
157:                     PR6 = 0xFFFFFFFF;        // maximum period
9D005CA4  2405FFFF   ADDIU A1, ZERO, -1
9D005CA8  3C04BF84   LUI A0, -16508
9D005CAC  AC850A20   SW A1, 2592(A0)
158:                     TMR6 = 0;
9D005CB0  3C04BF84   LUI A0, -16508
9D005CB4  AC800A10   SW ZERO, 2576(A0)
159:                     T6CONbits.ON = 1;
9D005CB8  8C440A00   LW A0, 2560(V0)
9D005CBC  7C647BC4   INS A0, V1, 15, 1
9D005CC0  AC440A00   SW A0, 2560(V0)
160:                 
161:                     // ----- TIMER 8/9 -----
162:                     // Used to flash LEDs of selected territories.
163:                     T8CON = 0;
9D005CC4  3C02BF84   LUI V0, -16508
9D005CC8  AC400E00   SW ZERO, 3584(V0)
164:                     T9CON = 0;
9D005CCC  3C02BF84   LUI V0, -16508
9D005CD0  AC401000   SW ZERO, 4096(V0)
165:                     T8CONbits.T32 = 1;       // 32-bit timer
9D005CD4  3C02BF84   LUI V0, -16508
9D005CD8  8C440E00   LW A0, 3584(V0)
9D005CDC  7C6418C4   INS A0, V1, 3, 1
9D005CE0  AC440E00   SW A0, 3584(V0)
166:                     T8CONbits.TCKPS = 0b110; // 1:64 prescale
9D005CE4  8C440E00   LW A0, 3584(V0)
9D005CE8  24050006   ADDIU A1, ZERO, 6
9D005CEC  7CA43104   INS A0, A1, 4, 3
9D005CF0  AC440E00   SW A0, 3584(V0)
167:                     PR8 = 390625;            // 0.64us * 390625 = 250 ms
9D005CF4  3C050005   LUI A1, 5
9D005CF8  34A5F5E1   ORI A1, A1, -2591
9D005CFC  3C04BF84   LUI A0, -16508
9D005D00  AC850E20   SW A1, 3616(A0)
168:                     TMR8 = 0;
9D005D04  3C04BF84   LUI A0, -16508
9D005D08  AC800E10   SW ZERO, 3600(A0)
169:                     T8CONbits.ON = 1;
9D005D0C  8C440E00   LW A0, 3584(V0)
9D005D10  7C647BC4   INS A0, V1, 15, 1
9D005D14  AC440E00   SW A0, 3584(V0)
170:                 }
9D005D18  03E00008   JR RA
9D005D1C  00000000   NOP
171:                 
172:                 void initSPI()
173:                 {
174:                     // Let's configure an SPI!
175:                     SPI1CON = 0;
9D005D20  3C02BF82   LUI V0, -16510
9D005D24  AC401000   SW ZERO, 4096(V0)
176:                     SPI1CON2 = 0;
9D005D28  3C02BF82   LUI V0, -16510
9D005D2C  AC401040   SW ZERO, 4160(V0)
177:                     SPI1BRG = 3;                // baud rate = 12.5 MHz
9D005D30  24030003   ADDIU V1, ZERO, 3
9D005D34  3C02BF82   LUI V0, -16510
9D005D38  AC431030   SW V1, 4144(V0)
178:                     SPI1STATbits.SPIROV = 0;    // clear status
9D005D3C  3C02BF82   LUI V0, -16510
9D005D40  8C431010   LW V1, 4112(V0)
9D005D44  7C033184   INS V1, ZERO, 6, 1
9D005D48  AC431010   SW V1, 4112(V0)
179:                     RPF1R = 0b0101;             // SPI data out on F1
9D005D4C  24030005   ADDIU V1, ZERO, 5
9D005D50  3C02BF80   LUI V0, -16512
9D005D54  AC431644   SW V1, 5700(V0)
180:                     SPI1CONbits.MODE32 = 0;     // 8-bit mode
9D005D58  3C02BF82   LUI V0, -16510
9D005D5C  8C431000   LW V1, 4096(V0)
9D005D60  7C035AC4   INS V1, ZERO, 11, 1
9D005D64  AC431000   SW V1, 4096(V0)
181:                     SPI1CONbits.MODE16 = 0;
9D005D68  8C431000   LW V1, 4096(V0)
9D005D6C  7C035284   INS V1, ZERO, 10, 1
9D005D70  AC431000   SW V1, 4096(V0)
182:                     SPI1CONbits.MSTEN = 1;      // master mode
9D005D74  8C441000   LW A0, 4096(V0)
9D005D78  24030001   ADDIU V1, ZERO, 1
9D005D7C  7C642944   INS A0, V1, 5, 1
9D005D80  AC441000   SW A0, 4096(V0)
183:                     SPI1CONbits.ON = 1;         // SPI on
9D005D84  8C441000   LW A0, 4096(V0)
9D005D88  7C647BC4   INS A0, V1, 15, 1
9D005D8C  AC441000   SW A0, 4096(V0)
184:                 
185:                     // Let's configure another SPI!
186:                     SPI3CON = 0;
9D005D90  3C02BF82   LUI V0, -16510
9D005D94  AC401400   SW ZERO, 5120(V0)
187:                     SPI3CON2 = 0;
9D005D98  3C02BF82   LUI V0, -16510
9D005D9C  AC401440   SW ZERO, 5184(V0)
188:                     (void) SPI3BUF;             // clear receive buffer
9D005DA0  3C04BF82   LUI A0, -16510
9D005DA4  8C821420   LW V0, 5152(A0)
189:                     SPI3STATbits.SPIROV = 0;    // clear status
9D005DA8  3C02BF82   LUI V0, -16510
9D005DAC  8C451410   LW A1, 5136(V0)
9D005DB0  7C053184   INS A1, ZERO, 6, 1
9D005DB4  AC451410   SW A1, 5136(V0)
190:                 
191:                     SDI3R = 0b0110;             // SDI on pin B10
9D005DB8  24050006   ADDIU A1, ZERO, 6
9D005DBC  3C02BF80   LUI V0, -16512
9D005DC0  AC4514B4   SW A1, 5300(V0)
192:                     RPB5R = 0b0111;             // SDO on pin B5
9D005DC4  24050007   ADDIU A1, ZERO, 7
9D005DC8  3C02BF80   LUI V0, -16512
9D005DCC  AC451554   SW A1, 5460(V0)
193:                     SPI3CONbits.MODE32 = 0;     // 8-bit mode
9D005DD0  3C02BF82   LUI V0, -16510
9D005DD4  8C451400   LW A1, 5120(V0)
9D005DD8  7C055AC4   INS A1, ZERO, 11, 1
9D005DDC  AC451400   SW A1, 5120(V0)
194:                     SPI3CONbits.MODE16 = 0;
9D005DE0  8C451400   LW A1, 5120(V0)
9D005DE4  7C055284   INS A1, ZERO, 10, 1
9D005DE8  AC451400   SW A1, 5120(V0)
195:                     SPI3CONbits.MSTEN = 0;      // slave mode
9D005DEC  8C451400   LW A1, 5120(V0)
9D005DF0  7C052944   INS A1, ZERO, 5, 1
9D005DF4  AC451400   SW A1, 5120(V0)
196:                     SPI3CONbits.CKE = 1;        // output transition on falling clock edge
9D005DF8  8C451400   LW A1, 5120(V0)
9D005DFC  7C654204   INS A1, V1, 8, 1
9D005E00  AC451400   SW A1, 5120(V0)
197:                     SPI3CONbits.ENHBUF = 1;     // use 128-bit buffer
9D005E04  8C451400   LW A1, 5120(V0)
9D005E08  7C658404   INS A1, V1, 16, 1
9D005E0C  AC451400   SW A1, 5120(V0)
198:                     SPI3CONbits.SRXISEL = 0b01; // interrupt when rbuf not empty
9D005E10  8C451400   LW A1, 5120(V0)
9D005E14  7C650804   INS A1, V1, 0, 2
9D005E18  AC451400   SW A1, 5120(V0)
199:                     SPI3CONbits.ON = 1;         // SPI on
9D005E1C  8C451400   LW A1, 5120(V0)
9D005E20  7C657BC4   INS A1, V1, 15, 1
9D005E24  AC451400   SW A1, 5120(V0)
200:                 
201:                     SPI3BUF = 0xFF;             // Load buffer with non-command for pi
9D005E28  240200FF   ADDIU V0, ZERO, 255
9D005E2C  AC821420   SW V0, 5152(A0)
202:                 
203:                 }
9D005E30  03E00008   JR RA
9D005E34  00000000   NOP
204:                 
205:                 void initRNG()
206:                 {
207:                     RNGPOLY1 = 0x00C00003;
9D005E38  3C0300C0   LUI V1, 192
9D005E3C  24630003   ADDIU V1, V1, 3
9D005E40  3C02BF8E   LUI V0, -16498
9D005E44  AC436008   SW V1, 24584(V0)
208:                     RNGPOLY2 = 0x00000000;
9D005E48  3C02BF8E   LUI V0, -16498
9D005E4C  AC40600C   SW ZERO, 24588(V0)
209:                     RNGCONbits.PLEN = 42;
9D005E50  2403002A   ADDIU V1, ZERO, 42
9D005E54  3C02BF8E   LUI V0, -16498
9D005E58  A0436004   SB V1, 24580(V0)
210:                 
211:                     // RNG cannot be used until seedRNG() is called to start it running.
212:                 }
9D005E5C  03E00008   JR RA
9D005E60  00000000   NOP
213:                 
214:                 void seedRNG()
215:                 {
216:                     RNGNUMGEN1 = RNGNUMGEN2 = TMR6;
9D005E64  3C02BF84   LUI V0, -16508
9D005E68  8C430A10   LW V1, 2576(V0)
9D005E6C  3C02BF8E   LUI V0, -16498
9D005E70  AC436014   SW V1, 24596(V0)
9D005E74  8C436014   LW V1, 24596(V0)
9D005E78  3C02BF8E   LUI V0, -16498
9D005E7C  AC436010   SW V1, 24592(V0)
217:                     RNGCONbits.PRNGEN = 1;
9D005E80  3C02BF8E   LUI V0, -16498
9D005E84  8C436004   LW V1, 24580(V0)
9D005E88  24040001   ADDIU A0, ZERO, 1
9D005E8C  7C834A44   INS V1, A0, 9, 1
9D005E90  AC436004   SW V1, 24580(V0)
218:                 
219:                     // Turn off the timer, we don't need it anymore
220:                     T6CONbits.ON = 0;
9D005E94  3C02BF84   LUI V0, -16508
9D005E98  8C430A00   LW V1, 2560(V0)
9D005E9C  7C037BC4   INS V1, ZERO, 15, 1
9D005EA0  AC430A00   SW V1, 2560(V0)
221:                 }
9D005EA4  03E00008   JR RA
9D005EA8  00000000   NOP
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/buttons.c  --------------------------------------------
1:                   #include "buttons.h"
2:                   #include <p32xxxx.h>
3:                   #include <sys/attribs.h> // __ISR macro here
4:                   #include <stdint.h>
5:                   
6:                   #define READY 0
7:                   #define SET 1
8:                   #define CLEARED -1
9:                   
10:                  static int buttonAdvanceFlag = READY;
11:                  static int buttonCancelFlag = READY;
12:                  static int buttonNextFlag = READY;
13:                  
14:                  static unsigned buttonAdvanceState = 0;
15:                  static unsigned buttonCancelState = 0;
16:                  static unsigned buttonNextState = 0;
17:                  
18:                  // Timer 2 interrupt: poll the buttons
19:                  void __ISR(_TIMER_2_VECTOR, IPL2SRS) pollButtons()
20:                  {
9D007B4C  415DE800   RDPGPR SP, SP
9D007B50  401A7000   MFC0 K0, EPC
9D007B54  401B6000   MFC0 K1, Status
9D007B58  27BDFFF0   ADDIU SP, SP, -16
9D007B5C  AFBA000C   SW K0, 12(SP)
9D007B60  401A6002   MFC0 K0, SRSCtl
9D007B64  AFBB0008   SW K1, 8(SP)
9D007B68  AFBA0004   SW K0, 4(SP)
9D007B6C  7C1B7844   INS K1, ZERO, 1, 15
9D007B70  377B0800   ORI K1, K1, 2048
9D007B74  409B6000   MTC0 K1, Status
21:                      buttonAdvanceState = (buttonAdvanceState << 1) | BUTTON_ADVANCE_PIN;
9D007B78  3C02BF86   LUI V0, -16506
9D007B7C  8C430520   LW V1, 1312(V0)
9D007B80  7C630200   EXT V1, V1, 8, 1
9D007B84  8F82809C   LW V0, -32612(GP)
9D007B88  00021040   SLL V0, V0, 1
9D007B8C  00621025   OR V0, V1, V0
9D007B90  AF82809C   SW V0, -32612(GP)
22:                      buttonCancelState = (buttonCancelState << 1) | BUTTON_CANCEL_PIN;
9D007B94  3C03BF86   LUI V1, -16506
9D007B98  8C640320   LW A0, 800(V1)
9D007B9C  7C840340   EXT A0, A0, 13, 1
9D007BA0  8F8380A0   LW V1, -32608(GP)
9D007BA4  00031840   SLL V1, V1, 1
9D007BA8  00831825   OR V1, A0, V1
9D007BAC  AF8380A0   SW V1, -32608(GP)
23:                      buttonNextState = (buttonNextState << 1) | BUTTON_NEXT_PIN;
9D007BB0  3C03BF86   LUI V1, -16506
9D007BB4  8C640020   LW A0, 32(V1)
9D007BB8  7C8401C0   EXT A0, A0, 7, 1
9D007BBC  8F8380A4   LW V1, -32604(GP)
9D007BC0  00031840   SLL V1, V1, 1
9D007BC4  00831825   OR V1, A0, V1
9D007BC8  AF8380A4   SW V1, -32604(GP)
24:                  
25:                      // Button has been pressed if the last six reads were false
26:                      // Button has been released if the last six reads were true
27:                      if(buttonAdvanceFlag == READY)
9D007BCC  8F838098   LW V1, -32616(GP)
9D007BD0  14600006   BNE V1, ZERO, 0x9D007BEC
9D007BD4  3042003F   ANDI V0, V0, 63
28:                      {
29:                          if((buttonAdvanceState & 0x3F) == 0)
9D007BD8  14400008   BNE V0, ZERO, 0x9D007BFC
9D007BDC  8F828094   LW V0, -32620(GP)
30:                              buttonAdvanceFlag = SET;
9D007BE0  24020001   ADDIU V0, ZERO, 1
9D007BE4  0B401EFE   J 0x9D007BF8
9D007BE8  AF828098   SW V0, -32616(GP)
31:                      }
32:                      else
33:                      {
34:                          if((buttonAdvanceState & 0x3F) == 0x3F)
9D007BEC  2403003F   ADDIU V1, ZERO, 63
9D007BF0  50430001   BEQL V0, V1, 0x9D007BF8
9D007BF4  AF808098   SW ZERO, -32616(GP)
35:                              buttonAdvanceFlag = READY;
36:                      }
37:                  
38:                      if(buttonCancelFlag == READY)
9D007BF8  8F828094   LW V0, -32620(GP)
9D007BFC  14400008   BNE V0, ZERO, 0x9D007C20
9D007C00  8F8380A0   LW V1, -32608(GP)
39:                      {
40:                          if((buttonCancelState & 0x3F) == 0)
9D007C04  8F8280A0   LW V0, -32608(GP)
9D007C08  3042003F   ANDI V0, V0, 63
9D007C0C  14400009   BNE V0, ZERO, 0x9D007C34
9D007C10  8F828090   LW V0, -32624(GP)
41:                              buttonCancelFlag = SET;
9D007C14  24020001   ADDIU V0, ZERO, 1
9D007C18  0B401F0C   J 0x9D007C30
9D007C1C  AF828094   SW V0, -32620(GP)
42:                      }
43:                      else
44:                      {
45:                          if((buttonCancelState & 0x3F) == 0x3F)
9D007C20  3063003F   ANDI V1, V1, 63
9D007C24  2402003F   ADDIU V0, ZERO, 63
9D007C28  50620001   BEQL V1, V0, 0x9D007C30
9D007C2C  AF808094   SW ZERO, -32620(GP)
46:                              buttonCancelFlag = READY;
47:                      }
48:                  
49:                      if(buttonNextFlag == READY)
9D007C30  8F828090   LW V0, -32624(GP)
9D007C34  14400008   BNE V0, ZERO, 0x9D007C58
9D007C38  8F8380A4   LW V1, -32604(GP)
50:                      {
51:                          if((buttonNextState & 0x3F) == 0)
9D007C3C  8F8280A4   LW V0, -32604(GP)
9D007C40  3042003F   ANDI V0, V0, 63
9D007C44  14400009   BNE V0, ZERO, 0x9D007C6C
9D007C48  3C02BF81   LUI V0, -16511
52:                              buttonNextFlag = SET;
9D007C4C  24020001   ADDIU V0, ZERO, 1
9D007C50  0B401F1A   J 0x9D007C68
9D007C54  AF828090   SW V0, -32624(GP)
53:                      }
54:                      else
55:                      {
56:                          if((buttonNextState & 0x3F) == 0x3F)
9D007C58  3063003F   ANDI V1, V1, 63
9D007C5C  2402003F   ADDIU V0, ZERO, 63
9D007C60  50620001   BEQL V1, V0, 0x9D007C68
9D007C64  AF808090   SW ZERO, -32624(GP)
57:                              buttonNextFlag = READY;
58:                      }
59:                  
60:                      IFS0bits.T2IF = 0; // clear interrupt flag
9D007C68  3C02BF81   LUI V0, -16511
9D007C6C  8C430040   LW V1, 64(V0)
9D007C70  7C034A44   INS V1, ZERO, 9, 1
9D007C74  AC430040   SW V1, 64(V0)
61:                  }
9D007C78  41606000   DI ZERO
9D007C7C  000000C0   EHB
9D007C80  8FBB0004   LW K1, 4(SP)
9D007C84  8FBA000C   LW K0, 12(SP)
9D007C88  409B6002   MTC0 K1, SRSCtl
9D007C8C  8FBB0008   LW K1, 8(SP)
9D007C90  409A7000   MTC0 K0, EPC
9D007C94  27BD0010   ADDIU SP, SP, 16
9D007C98  41DDE800   WRPGPR SP, SP
9D007C9C  409B6000   MTC0 K1, Status
9D007CA0  42000018   ERET
62:                  
63:                  int flagSet_advance() { return buttonAdvanceFlag == SET; }
9D007CA4  8F828098   LW V0, -32616(GP)
9D007CA8  38420001   XORI V0, V0, 1
9D007CAC  03E00008   JR RA
9D007CB0  2C420001   SLTIU V0, V0, 1
64:                  int flagSet_cancel() { return buttonCancelFlag == SET; }
9D007CB4  8F828094   LW V0, -32620(GP)
9D007CB8  38420001   XORI V0, V0, 1
9D007CBC  03E00008   JR RA
9D007CC0  2C420001   SLTIU V0, V0, 1
65:                  int flagSet_next() { return buttonNextFlag == SET; }
9D007CC4  8F828090   LW V0, -32624(GP)
9D007CC8  38420001   XORI V0, V0, 1
9D007CCC  03E00008   JR RA
9D007CD0  2C420001   SLTIU V0, V0, 1
66:                  
67:                  void clearFlag_advance() { buttonAdvanceFlag = CLEARED; }
9D007CD4  2402FFFF   ADDIU V0, ZERO, -1
9D007CD8  03E00008   JR RA
9D007CDC  AF828098   SW V0, -32616(GP)
68:                  void clearFlag_cancel() { buttonCancelFlag = CLEARED; }
9D007CE0  2402FFFF   ADDIU V0, ZERO, -1
9D007CE4  03E00008   JR RA
9D007CE8  AF828094   SW V0, -32620(GP)
69:                  void clearFlag_next() { buttonNextFlag = CLEARED; }
9D007CEC  2402FFFF   ADDIU V0, ZERO, -1
9D007CF0  03E00008   JR RA
9D007CF4  AF828090   SW V0, -32624(GP)
---  /Volumes/home/c11067/xc32/build/xc32-XC32_v1_34_branch/src45x/gcc/gcc/libgcc2.c  -------------------
9D005EAC  00C01021   ADDU V0, A2, ZERO
9D006308  00C04821   ADDU T1, A2, ZERO
9D005EB0  00804021   ADDU T0, A0, ZERO
9D00630C  00804021   ADDU T0, A0, ZERO
9D005EB4  14E0003F   BNE A3, ZERO, 0x9D005FB4
9D005EB8  00A01821   ADDU V1, A1, ZERO
9D006310  14E0003B   BNE A3, ZERO, 0x9D006400
9D006314  00A01821   ADDU V1, A1, ZERO
9D005EBC  00A6302B   SLTU A2, A1, A2
9D005EC0  10C0004C   BEQ A2, ZERO, 0x9D005FF4
9D005EC4  00000000   NOP
9D006318  00A6102B   SLTU V0, A1, A2
9D00631C  10400048   BEQ V0, ZERO, 0x9D006440
9D006320  70C21020   CLZ V0, A2
9D005EC8  70442020   CLZ A0, V0
9D005ECC  50800008   BEQL A0, ZERO, 0x9D005EF0
9D005ED0  00022402   SRL A0, V0, 16
9D006324  10400008   BEQ V0, ZERO, 0x9D006348
9D006328  00093C02   SRL A3, T1, 16
9D005EE0  00821004   SLLV V0, V0, A0
9D006338  00464804   SLLV T1, A2, V0
9D005ED4  00042823   SUBU A1, ZERO, A0
9D005ED8  00A82806   SRLV A1, T0, A1
9D005EDC  00831804   SLLV V1, V1, A0
9D005EE4  00A31825   OR V1, A1, V1
9D00632C  00022023   SUBU A0, ZERO, V0
9D006330  00882006   SRLV A0, T0, A0
9D006334  00451804   SLLV V1, A1, V0
9D00633C  00831825   OR V1, A0, V1
9D005EE8  00884004   SLLV T0, T0, A0
9D006340  00484004   SLLV T0, T0, V0
9D005EEC  00022402   SRL A0, V0, 16
9D005EF0  0064001B   DIVU V1, A0
9D005EF4  008001F4   TEQ A0, ZERO
9D005EF8  3049FFFF   ANDI T1, V0, -1
9D005EFC  00085C02   SRL T3, T0, 16
9D005F00  00003812   MFLO A3, 0
9D005F04  00005010   MFHI T2, 0
9D005F08  70E93002   MUL A2, A3, T1
9D005F0C  000A2C00   SLL A1, T2, 16
9D005F10  00AB2825   OR A1, A1, T3
9D005F14  00A6502B   SLTU T2, A1, A2
9D005F18  0064001B   DIVU V1, A0
9D005F1C  008001F4   TEQ A0, ZERO
9D005F20  1140000B   BEQ T2, ZERO, 0x9D005F50
9D005F24  00A61823   SUBU V1, A1, A2
9D005F28  00A22821   ADDU A1, A1, V0
9D005F2C  00A2182B   SLTU V1, A1, V0
9D005F30  14600006   BNE V1, ZERO, 0x9D005F4C
9D005F34  24E7FFFF   ADDIU A3, A3, -1
9D005F38  00A6182B   SLTU V1, A1, A2
9D005F3C  10600004   BEQ V1, ZERO, 0x9D005F50
9D005F40  00A61823   SUBU V1, A1, A2
9D005F44  24E7FFFF   ADDIU A3, A3, -1
9D005F48  00A22821   ADDU A1, A1, V0
9D005F4C  00A61823   SUBU V1, A1, A2
9D005F50  0064001B   DIVU V1, A0
9D005F54  008001F4   TEQ A0, ZERO
9D005F58  3108FFFF   ANDI T0, T0, -1
9D005F5C  00002812   MFLO A1, 0
9D005F60  00003010   MFHI A2, 0
9D005F64  70A94802   MUL T1, A1, T1
9D005F68  00063400   SLL A2, A2, 16
9D005F6C  00C84025   OR T0, A2, T0
9D005F70  0109302B   SLTU A2, T0, T1
9D005F74  0064001B   DIVU V1, A0
9D005F78  008001F4   TEQ A0, ZERO
9D005F7C  10C00007   BEQ A2, ZERO, 0x9D005F9C
9D005F80  01024021   ADDU T0, T0, V0
9D005F84  0102102B   SLTU V0, T0, V0
9D005F88  14400004   BNE V0, ZERO, 0x9D005F9C
9D005F8C  24A5FFFF   ADDIU A1, A1, -1
9D005F90  0109482B   SLTU T1, T0, T1
9D005F94  55200001   BNEL T1, ZERO, 0x9D005F9C
9D005F98  24A5FFFF   ADDIU A1, A1, -1
9D005F9C  00073C00   SLL A3, A3, 16
9D005FA0  00A72825   OR A1, A1, A3
9D005FA4  00002021   ADDU A0, ZERO, ZERO
9D006344  00093C02   SRL A3, T1, 16
9D006348  0067001B   DIVU V1, A3
9D00634C  00E001F4   TEQ A3, ZERO
9D006350  312AFFFF   ANDI T2, T1, -1
9D006354  00082C02   SRL A1, T0, 16
9D006358  00005812   MFLO T3, 0
9D00635C  00002010   MFHI A0, 0
9D006360  716A5802   MUL T3, T3, T2
9D006364  00043400   SLL A2, A0, 16
9D006368  00C53025   OR A2, A2, A1
9D00636C  00CB602B   SLTU T4, A2, T3
9D006370  0067001B   DIVU V1, A3
9D006374  00E001F4   TEQ A3, ZERO
9D006378  11800009   BEQ T4, ZERO, 0x9D0063A0
9D00637C  00CB1823   SUBU V1, A2, T3
9D006380  00C93021   ADDU A2, A2, T1
9D006384  00C9182B   SLTU V1, A2, T1
9D006388  14600005   BNE V1, ZERO, 0x9D0063A0
9D00638C  00CB1823   SUBU V1, A2, T3
9D006390  00CB182B   SLTU V1, A2, T3
9D006394  54600001   BNEL V1, ZERO, 0x9D00639C
9D006398  00C93021   ADDU A2, A2, T1
9D00639C  00CB1823   SUBU V1, A2, T3
9D0063A0  0067001B   DIVU V1, A3
9D0063A4  00E001F4   TEQ A3, ZERO
9D0063A8  3108FFFF   ANDI T0, T0, -1
9D0063AC  00002012   MFLO A0, 0
9D0063B0  00002810   MFHI A1, 0
9D0063B4  708A5002   MUL T2, A0, T2
9D0063B8  00052C00   SLL A1, A1, 16
9D0063BC  00A84025   OR T0, A1, T0
9D0063C0  010A202B   SLTU A0, T0, T2
9D0063C4  0067001B   DIVU V1, A3
9D0063C8  00E001F4   TEQ A3, ZERO
9D0063CC  50800009   BEQL A0, ZERO, 0x9D0063F4
9D0063D0  010A4023   SUBU T0, T0, T2
9D005FF4  14400006   BNE V0, ZERO, 0x9D006010
9D005FF8  70431820   CLZ V1, V0
9D006440  14C00006   BNE A2, ZERO, 0x9D00645C
9D006444  71221020   CLZ V0, T1
9D005FFC  24030001   ADDIU V1, ZERO, 1
9D006000  0062001B   DIVU V1, V0
9D006004  004001F4   TEQ V0, ZERO
9D006008  00001012   MFLO V0, 0
9D006448  24020001   ADDIU V0, ZERO, 1
9D00644C  0046001B   DIVU V0, A2
9D006450  00C001F4   TEQ A2, ZERO
9D006454  00004812   MFLO T1, 0
9D00600C  70431820   CLZ V1, V0
9D006458  71221020   CLZ V0, T1
9D006010  5460007B   BNEL V1, ZERO, 0x9D006200
9D006014  24080020   ADDIU T0, ZERO, 32
9D00645C  5440007D   BNEL V0, ZERO, 0x9D006654
9D006460  24080020   ADDIU T0, ZERO, 32
9D006018  00A22823   SUBU A1, A1, V0
9D00601C  00023402   SRL A2, V0, 16
9D006020  3049FFFF   ANDI T1, V0, -1
9D006464  00A93023   SUBU A2, A1, T1
9D006468  00091C02   SRL V1, T1, 16
9D00646C  312AFFFF   ANDI T2, T1, -1
9D006024  24040001   ADDIU A0, ZERO, 1
9D006204  01034023   SUBU T0, T0, V1
9D006654  01024023   SUBU T0, T0, V0
9D006200  00621004   SLLV V0, V0, V1
9D006658  00494804   SLLV T1, T1, V0
9D006208  01053806   SRLV A3, A1, T0
9D00665C  01053806   SRLV A3, A1, T0
9D006218  01044006   SRLV T0, A0, T0
9D00621C  00652804   SLLV A1, A1, V1
9D006224  01052825   OR A1, T0, A1
9D006670  01046006   SRLV T4, A0, T0
9D006674  00452804   SLLV A1, A1, V0
9D006678  01856025   OR T4, T4, A1
9D006228  00644004   SLLV T0, A0, V1
9D006680  00444004   SLLV T0, A0, V0
9D00620C  00023402   SRL A2, V0, 16
9D006210  00E6001B   DIVU A3, A2
9D006214  00C001F4   TEQ A2, ZERO
9D006220  3049FFFF   ANDI T1, V0, -1
9D00622C  00056402   SRL T4, A1, 16
9D006230  00005012   MFLO T2, 0
9D006234  00005810   MFHI T3, 0
9D006238  71492002   MUL A0, T2, T1
9D00623C  000B5C00   SLL T3, T3, 16
9D006240  018B1825   OR V1, T4, T3
9D006244  0064582B   SLTU T3, V1, A0
9D006248  00E6001B   DIVU A3, A2
9D00624C  00C001F4   TEQ A2, ZERO
9D006250  5160000B   BEQL T3, ZERO, 0x9D006280
9D006254  00641823   SUBU V1, V1, A0
9D006258  00621821   ADDU V1, V1, V0
9D00625C  0062382B   SLTU A3, V1, V0
9D006260  14E00006   BNE A3, ZERO, 0x9D00627C
9D006264  254AFFFF   ADDIU T2, T2, -1
9D006268  0064382B   SLTU A3, V1, A0
9D00626C  50E00004   BEQL A3, ZERO, 0x9D006280
9D006270  00641823   SUBU V1, V1, A0
9D006274  254AFFFF   ADDIU T2, T2, -1
9D006278  00621821   ADDU V1, V1, V0
9D00627C  00641823   SUBU V1, V1, A0
9D006280  0066001B   DIVU V1, A2
9D006284  00C001F4   TEQ A2, ZERO
9D006288  30A5FFFF   ANDI A1, A1, -1
9D00628C  00002012   MFLO A0, 0
9D006290  00005810   MFHI T3, 0
9D006294  70893802   MUL A3, A0, T1
9D006298  000B5C00   SLL T3, T3, 16
9D00629C  01652825   OR A1, T3, A1
9D0062A0  00A7582B   SLTU T3, A1, A3
9D0062A4  0066001B   DIVU V1, A2
9D0062A8  00C001F4   TEQ A2, ZERO
9D0062AC  5160000B   BEQL T3, ZERO, 0x9D0062DC
9D0062B0  000A5400   SLL T2, T2, 16
9D0062B4  00A22821   ADDU A1, A1, V0
9D0062B8  00A2182B   SLTU V1, A1, V0
9D0062BC  14600006   BNE V1, ZERO, 0x9D0062D8
9D0062C0  2484FFFF   ADDIU A0, A0, -1
9D0062C4  00A7182B   SLTU V1, A1, A3
9D0062C8  50600004   BEQL V1, ZERO, 0x9D0062DC
9D0062CC  000A5400   SLL T2, T2, 16
9D0062D0  2484FFFF   ADDIU A0, A0, -1
9D0062D4  00A22821   ADDU A1, A1, V0
9D0062D8  000A5400   SLL T2, T2, 16
9D0062DC  00A72823   SUBU A1, A1, A3
9D0062E0  0B40180A   J 0x9D006028
9D0062E4  008A2025   OR A0, A0, T2
9D006660  00091C02   SRL V1, T1, 16
9D006664  00E3001B   DIVU A3, V1
9D006668  006001F4   TEQ V1, ZERO
9D00666C  312AFFFF   ANDI T2, T1, -1
9D00667C  000C2C02   SRL A1, T4, 16
9D006684  00005812   MFLO T3, 0
9D006688  00006810   MFHI T5, 0
9D00668C  716A5802   MUL T3, T3, T2
9D006690  000D6C00   SLL T5, T5, 16
9D006694  00AD2025   OR A0, A1, T5
9D006698  008B282B   SLTU A1, A0, T3
9D00669C  00E3001B   DIVU A3, V1
9D0066A0  006001F4   TEQ V1, ZERO
9D0066A4  50A00009   BEQL A1, ZERO, 0x9D0066CC
9D0066A8  008B2023   SUBU A0, A0, T3
9D0066AC  00892021   ADDU A0, A0, T1
9D0066B0  0089282B   SLTU A1, A0, T1
9D0066B4  54A00005   BNEL A1, ZERO, 0x9D0066CC
9D0066B8  008B2023   SUBU A0, A0, T3
9D0066BC  008B282B   SLTU A1, A0, T3
9D0066C0  54A00001   BNEL A1, ZERO, 0x9D0066C8
9D0066C4  00892021   ADDU A0, A0, T1
9D0066C8  008B2023   SUBU A0, A0, T3
9D0066CC  0083001B   DIVU A0, V1
9D0066D0  006001F4   TEQ V1, ZERO
9D0066D4  318CFFFF   ANDI T4, T4, -1
9D0066D8  00002812   MFLO A1, 0
9D0066DC  00003810   MFHI A3, 0
9D0066E0  70AA2802   MUL A1, A1, T2
9D0066E4  00073400   SLL A2, A3, 16
9D0066E8  00CC3025   OR A2, A2, T4
9D0066EC  00C5382B   SLTU A3, A2, A1
9D0066F0  0083001B   DIVU A0, V1
9D0066F4  006001F4   TEQ V1, ZERO
9D0066F8  50E0FF5D   BEQL A3, ZERO, 0x9D006470
9D0066FC  00C53023   SUBU A2, A2, A1
9D006700  00C93021   ADDU A2, A2, T1
9D006704  00C9202B   SLTU A0, A2, T1
9D006708  5480FF59   BNEL A0, ZERO, 0x9D006470
9D00670C  00C53023   SUBU A2, A2, A1
9D006710  00C5202B   SLTU A0, A2, A1
9D006714  54800001   BNEL A0, ZERO, 0x9D00671C
9D006718  00C93021   ADDU A2, A2, T1
9D00671C  0B40191C   J 0x9D006470
9D006720  00C53023   SUBU A2, A2, A1
9D006028  00A6001B   DIVU A1, A2
9D00602C  00C001F4   TEQ A2, ZERO
9D006030  00086402   SRL T4, T0, 16
9D006034  00003812   MFLO A3, 0
9D006038  00005810   MFHI T3, 0
9D00603C  70E95002   MUL T2, A3, T1
9D006040  000B1C00   SLL V1, T3, 16
9D006044  006C1825   OR V1, V1, T4
9D006048  006A582B   SLTU T3, V1, T2
9D00604C  00A6001B   DIVU A1, A2
9D006050  00C001F4   TEQ A2, ZERO
9D006054  51600009   BEQL T3, ZERO, 0x9D00607C
9D006058  006A1823   SUBU V1, V1, T2
9D00605C  00621821   ADDU V1, V1, V0
9D006060  0062282B   SLTU A1, V1, V0
9D006064  14A00004   BNE A1, ZERO, 0x9D006078
9D006068  24E7FFFF   ADDIU A3, A3, -1
9D00606C  006A282B   SLTU A1, V1, T2
9D006070  54A000A3   BNEL A1, ZERO, 0x9D006300
9D006074  24E7FFFF   ADDIU A3, A3, -1
9D006078  006A1823   SUBU V1, V1, T2
9D00607C  0066001B   DIVU V1, A2
9D006080  00C001F4   TEQ A2, ZERO
9D006084  3108FFFF   ANDI T0, T0, -1
9D006088  00002812   MFLO A1, 0
9D00608C  00005010   MFHI T2, 0
9D006090  70A94802   MUL T1, A1, T1
9D006094  000A5400   SLL T2, T2, 16
9D006098  01484025   OR T0, T2, T0
9D00609C  0109502B   SLTU T2, T0, T1
9D0060A0  0066001B   DIVU V1, A2
9D0060A4  00C001F4   TEQ A2, ZERO
9D0060A8  11400007   BEQ T2, ZERO, 0x9D0060C8
9D0060AC  01024021   ADDU T0, T0, V0
9D0060B0  0102102B   SLTU V0, T0, V0
9D0060B4  14400004   BNE V0, ZERO, 0x9D0060C8
9D0060B8  24A5FFFF   ADDIU A1, A1, -1
9D0060BC  0109482B   SLTU T1, T0, T1
9D0060C0  55200001   BNEL T1, ZERO, 0x9D0060C8
9D0060C4  24A5FFFF   ADDIU A1, A1, -1
9D0060C8  00073C00   SLL A3, A3, 16
9D0060CC  00A72825   OR A1, A1, A3
9D006300  0B40181E   J 0x9D006078
9D006304  00621821   ADDU V1, V1, V0
9D0063D4  01094021   ADDU T0, T0, T1
9D0063D8  0109182B   SLTU V1, T0, T1
9D0063DC  54600005   BNEL V1, ZERO, 0x9D0063F4
9D0063E0  010A4023   SUBU T0, T0, T2
9D0063E4  010A182B   SLTU V1, T0, T2
9D0063E8  54600001   BNEL V1, ZERO, 0x9D0063F0
9D0063EC  01094021   ADDU T0, T0, T1
9D0063F0  010A4023   SUBU T0, T0, T2
9D006470  00C3001B   DIVU A2, V1
9D006474  006001F4   TEQ V1, ZERO
9D006478  00086402   SRL T4, T0, 16
9D00647C  00002012   MFLO A0, 0
9D006480  00005810   MFHI T3, 0
9D006484  708A2002   MUL A0, A0, T2
9D006488  000B3C00   SLL A3, T3, 16
9D00648C  00EC3825   OR A3, A3, T4
9D006490  00E4582B   SLTU T3, A3, A0
9D006494  00C3001B   DIVU A2, V1
9D006498  006001F4   TEQ V1, ZERO
9D00649C  11600009   BEQ T3, ZERO, 0x9D0064C4
9D0064A0  00E42823   SUBU A1, A3, A0
9D0064A4  00E93821   ADDU A3, A3, T1
9D0064A8  00E9282B   SLTU A1, A3, T1
9D0064AC  14A00005   BNE A1, ZERO, 0x9D0064C4
9D0064B0  00E42823   SUBU A1, A3, A0
9D0064B4  00E4282B   SLTU A1, A3, A0
9D0064B8  54A00001   BNEL A1, ZERO, 0x9D0064C0
9D0064BC  00E93821   ADDU A3, A3, T1
9D0064C0  00E42823   SUBU A1, A3, A0
9D0064C4  00A3001B   DIVU A1, V1
9D0064C8  006001F4   TEQ V1, ZERO
9D0064CC  3108FFFF   ANDI T0, T0, -1
9D0064D0  00002012   MFLO A0, 0
9D0064D4  00003010   MFHI A2, 0
9D0064D8  708A5002   MUL T2, A0, T2
9D0064DC  00063400   SLL A2, A2, 16
9D0064E0  00C84025   OR T0, A2, T0
9D0064E4  010A202B   SLTU A0, T0, T2
9D0064E8  00A3001B   DIVU A1, V1
9D0064EC  006001F4   TEQ V1, ZERO
9D0064F0  5080FFC0   BEQL A0, ZERO, 0x9D0063F4
9D0064F4  010A4023   SUBU T0, T0, T2
9D0064F8  01094021   ADDU T0, T0, T1
9D0064FC  0109182B   SLTU V1, T0, T1
9D006500  5460FFBC   BNEL V1, ZERO, 0x9D0063F4
9D006504  010A4023   SUBU T0, T0, T2
9D006508  0B4018FA   J 0x9D0063E8
9D00650C  010A182B   SLTU V1, T0, T2
9D0063F4  00481006   SRLV V0, T0, V0
9D0063F8  03E00008   JR RA
9D0063FC  00001821   ADDU V1, ZERO, ZERO
9D005FB4  00A7102B   SLTU V0, A1, A3
9D005FB8  54400048   BNEL V0, ZERO, 0x9D0060DC
9D005FBC  00002021   ADDU A0, ZERO, ZERO
9D0060DC  00002821   ADDU A1, ZERO, ZERO
9D006400  00A7102B   SLTU V0, A1, A3
9D006404  14400042   BNE V0, ZERO, 0x9D006510
9D006408  70EA5020   CLZ T2, A3
9D006510  00801021   ADDU V0, A0, ZERO
9D006514  03E00008   JR RA
9D006518  00A01821   ADDU V1, A1, ZERO
9D005FC0  70E31820   CLZ V1, A3
9D005FC4  14600049   BNE V1, ZERO, 0x9D0060EC
9D005FC8  240C0020   ADDIU T4, ZERO, 32
9D00640C  15400043   BNE T2, ZERO, 0x9D00651C
9D006410  240C0020   ADDIU T4, ZERO, 32
9D005FCC  00E5282B   SLTU A1, A3, A1
9D005FD0  14A00003   BNE A1, ZERO, 0x9D005FE0
9D005FD4  0086302B   SLTU A2, A0, A2
9D005FD8  14C00086   BNE A2, ZERO, 0x9D0061F4
9D005FDC  00002021   ADDU A0, ZERO, ZERO
9D005FE0  00002021   ADDU A0, ZERO, ZERO
9D005FE4  24050001   ADDIU A1, ZERO, 1
9D006414  00E5102B   SLTU V0, A3, A1
9D006418  14400005   BNE V0, ZERO, 0x9D006430
9D00641C  00861023   SUBU V0, A0, A2
9D006420  0086102B   SLTU V0, A0, A2
9D006424  544000C8   BNEL V0, ZERO, 0x9D006748
9D006428  00801021   ADDU V0, A0, ZERO
9D00642C  00861023   SUBU V0, A0, A2
9D006430  00A72823   SUBU A1, A1, A3
9D006434  0082202B   SLTU A0, A0, V0
9D006438  03E00008   JR RA
9D00643C  00A41823   SUBU V1, A1, A0
9D0060EC  01836023   SUBU T4, T4, V1
9D00651C  018A6023   SUBU T4, T4, T2
9D0060F0  01864006   SRLV T0, A2, T4
9D0060F4  00673804   SLLV A3, A3, V1
9D0060F8  01074025   OR T0, T0, A3
9D006520  01473804   SLLV A3, A3, T2
9D006524  01865806   SRLV T3, A2, T4
9D006528  01675825   OR T3, T3, A3
9D006550  01463004   SLLV A2, A2, T2
9D006100  01853806   SRLV A3, A1, T4
9D00652C  01856806   SRLV T5, A1, T4
9D006110  00652804   SLLV A1, A1, V1
9D006114  01846006   SRLV T4, A0, T4
9D006118  01856025   OR T4, T4, A1
9D006540  01841006   SRLV V0, A0, T4
9D006544  01452804   SLLV A1, A1, T2
9D006548  00452825   OR A1, V0, A1
9D0060FC  00081402   SRL V0, T0, 16
9D006104  00E2001B   DIVU A3, V0
9D006108  004001F4   TEQ V0, ZERO
9D00610C  310DFFFF   ANDI T5, T0, -1
9D00611C  000C4C02   SRL T1, T4, 16
9D006120  00005812   MFLO T3, 0
9D006124  00007810   MFHI T7, 0
9D006128  716D7002   MUL T6, T3, T5
9D00612C  000F5400   SLL T2, T7, 16
9D006130  01495025   OR T2, T2, T1
9D006134  014E282B   SLTU A1, T2, T6
9D006138  00E2001B   DIVU A3, V0
9D00613C  004001F4   TEQ V0, ZERO
9D006140  10A0000A   BEQ A1, ZERO, 0x9D00616C
9D006144  00663004   SLLV A2, A2, V1
9D006148  01485021   ADDU T2, T2, T0
9D00614C  0148282B   SLTU A1, T2, T0
9D006150  14A00006   BNE A1, ZERO, 0x9D00616C
9D006154  256BFFFF   ADDIU T3, T3, -1
9D006158  014E282B   SLTU A1, T2, T6
9D00615C  50A00004   BEQL A1, ZERO, 0x9D006170
9D006160  014E5023   SUBU T2, T2, T6
9D006164  256BFFFF   ADDIU T3, T3, -1
9D006168  01485021   ADDU T2, T2, T0
9D00616C  014E5023   SUBU T2, T2, T6
9D006170  0142001B   DIVU T2, V0
9D006174  004001F4   TEQ V0, ZERO
9D006178  318CFFFF   ANDI T4, T4, -1
9D00617C  00002812   MFLO A1, 0
9D006180  00007010   MFHI T6, 0
9D006184  70AD6802   MUL T5, A1, T5
9D006188  000E4C00   SLL T1, T6, 16
9D00618C  012C4825   OR T1, T1, T4
9D006190  012D382B   SLTU A3, T1, T5
9D006194  0142001B   DIVU T2, V0
9D006198  004001F4   TEQ V0, ZERO
9D00619C  50E0000B   BEQL A3, ZERO, 0x9D0061CC
9D0061A0  000B5C00   SLL T3, T3, 16
9D0061A4  01284821   ADDU T1, T1, T0
9D0061A8  0128102B   SLTU V0, T1, T0
9D0061AC  14400006   BNE V0, ZERO, 0x9D0061C8
9D0061B0  24A5FFFF   ADDIU A1, A1, -1
9D0061B4  012D102B   SLTU V0, T1, T5
9D0061B8  50400004   BEQL V0, ZERO, 0x9D0061CC
9D0061BC  000B5C00   SLL T3, T3, 16
9D0061C0  24A5FFFF   ADDIU A1, A1, -1
9D0061C4  01284821   ADDU T1, T1, T0
9D0061C8  000B5C00   SLL T3, T3, 16
9D0061CC  00AB2825   OR A1, A1, T3
9D0061D4  012D4823   SUBU T1, T1, T5
9D006530  000B3C02   SRL A3, T3, 16
9D006534  01A7001B   DIVU T5, A3
9D006538  00E001F4   TEQ A3, ZERO
9D00653C  316FFFFF   ANDI T7, T3, -1
9D00654C  00051402   SRL V0, A1, 16
9D006554  00007012   MFLO T6, 0
9D006558  00001810   MFHI V1, 0
9D00655C  71CFC002   MUL T8, T6, T7
9D006560  00034C00   SLL T1, V1, 16
9D006564  01224825   OR T1, T1, V0
9D006568  0138102B   SLTU V0, T1, T8
9D00656C  01A7001B   DIVU T5, A3
9D006570  00E001F4   TEQ A3, ZERO
9D006574  1040000A   BEQ V0, ZERO, 0x9D0065A0
9D006578  01442004   SLLV A0, A0, T2
9D00657C  012B4821   ADDU T1, T1, T3
9D006580  012B102B   SLTU V0, T1, T3
9D006584  14400006   BNE V0, ZERO, 0x9D0065A0
9D006588  25CEFFFF   ADDIU T6, T6, -1
9D00658C  0138102B   SLTU V0, T1, T8
9D006590  50400004   BEQL V0, ZERO, 0x9D0065A4
9D006594  01384823   SUBU T1, T1, T8
9D006598  25CEFFFF   ADDIU T6, T6, -1
9D00659C  012B4821   ADDU T1, T1, T3
9D0065A0  01384823   SUBU T1, T1, T8
9D0065A4  0127001B   DIVU T1, A3
9D0065A8  00E001F4   TEQ A3, ZERO
9D0065AC  30A5FFFF   ANDI A1, A1, -1
9D0065B0  00006812   MFLO T5, 0
9D0065B4  00001810   MFHI V1, 0
9D0065B8  71AF7802   MUL T7, T5, T7
9D0065BC  00031400   SLL V0, V1, 16
9D0065C0  00451025   OR V0, V0, A1
9D0065C4  004F182B   SLTU V1, V0, T7
9D0065C8  0127001B   DIVU T1, A3
9D0065CC  00E001F4   TEQ A3, ZERO
9D0065D0  1060000B   BEQ V1, ZERO, 0x9D006600
9D0065D4  000E4400   SLL T0, T6, 16
9D0065D8  004B1021   ADDU V0, V0, T3
9D0065DC  004B182B   SLTU V1, V0, T3
9D0065E0  14600007   BNE V1, ZERO, 0x9D006600
9D0065E4  25ADFFFF   ADDIU T5, T5, -1
9D0065E8  004F182B   SLTU V1, V0, T7
9D0065EC  10600005   BEQ V1, ZERO, 0x9D006604
9D0065F0  01A84025   OR T0, T5, T0
9D0065F4  25ADFFFF   ADDIU T5, T5, -1
9D0065F8  004B1021   ADDU V0, V0, T3
9D0065FC  000E4400   SLL T0, T6, 16
9D006600  01A84025   OR T0, T5, T0
9D006608  004F7823   SUBU T7, V0, T7
9D0061D0  00A60019   MULTU 0, A1, A2
9D0061D8  00003810   MFHI A3, 0
9D006604  01060019   MULTU 0, T0, A2
9D00660C  00004810   MFHI T1, 0
9D006610  00004012   MFLO T0, 0
9D006618  01201821   ADDU V1, T1, ZERO
9D00661C  01203821   ADDU A3, T1, ZERO
9D0061DC  0127402B   SLTU T0, T1, A3
9D0061E0  15000044   BNE T0, ZERO, 0x9D0062F4
9D0061E4  00003012   MFLO A2, 0
9D0061E8  1127003F   BEQ T1, A3, 0x9D0062E8
9D0061EC  00642004   SLLV A0, A0, V1
9D0062E8  0086302B   SLTU A2, A0, A2
9D0062EC  50C0FFC1   BEQL A2, ZERO, 0x9D0061F4
9D0062F0  00002021   ADDU A0, ZERO, ZERO
9D006614  01E9282B   SLTU A1, T7, T1
9D006620  14A00040   BNE A1, ZERO, 0x9D006724
9D006624  00001012   MFLO V0, 0
9D006628  51E90043   BEQL T7, T1, 0x9D006738
9D00662C  0082182B   SLTU V1, A0, V0
9D006738  5460FFFB   BNEL V1, ZERO, 0x9D006728
9D00673C  00464023   SUBU T0, V0, A2
9D006740  0B40198D   J 0x9D006634
9D006744  00001821   ADDU V1, ZERO, ZERO
9D006748  03E00008   JR RA
9D00674C  00000000   NOP
9D0061F0  00002021   ADDU A0, ZERO, ZERO
9D0062F4  24A5FFFF   ADDIU A1, A1, -1
9D0062F8  0B40187D   J 0x9D0061F4
9D0062FC  00002021   ADDU A0, ZERO, ZERO
9D006630  01E31823   SUBU V1, T7, V1
9D006724  00464023   SUBU T0, V0, A2
9D006728  00EB1823   SUBU V1, A3, T3
9D00672C  0048102B   SLTU V0, V0, T0
9D006730  0B40198C   J 0x9D006630
9D006734  00621823   SUBU V1, V1, V0
9D006634  00883023   SUBU A2, A0, T0
9D006638  0086202B   SLTU A0, A0, A2
9D00663C  00641823   SUBU V1, V1, A0
9D006640  01836004   SLLV T4, V1, T4
9D006644  01461006   SRLV V0, A2, T2
9D006648  004C1025   OR V0, V0, T4
9D005FA8  00A01021   ADDU V0, A1, ZERO
9D005FE8  00A01021   ADDU V0, A1, ZERO
9D0060D0  00A01021   ADDU V0, A1, ZERO
9D0060E0  00A01021   ADDU V0, A1, ZERO
9D0061F4  00A01021   ADDU V0, A1, ZERO
9D00664C  03E00008   JR RA
9D006650  01431806   SRLV V1, V1, T2
9D005FAC  03E00008   JR RA
9D005FB0  00801821   ADDU V1, A0, ZERO
9D005FEC  03E00008   JR RA
9D005FF0  00801821   ADDU V1, A0, ZERO
9D0060D4  03E00008   JR RA
9D0060D8  00801821   ADDU V1, A0, ZERO
9D0060E4  03E00008   JR RA
9D0060E8  00801821   ADDU V1, A0, ZERO
9D0061F8  03E00008   JR RA
9D0061FC  00801821   ADDU V1, A0, ZERO
9D00852C  27BDFFE0   ADDIU SP, SP, -32
9D008530  AFBF001C   SW RA, 28(SP)
9D008534  AFB10018   SW S1, 24(SP)
9D008538  AFB00014   SW S0, 20(SP)
9D00853C  10A0002D   BEQ A1, ZERO, 0x9D0085F4
9D008540  00801021   ADDU V0, A0, ZERO
9D0085F4  0F40235A   JAL __floatunsisf
9D0085F8  00000000   NOP
9D008544  70A63020   CLZ A2, A1
9D008548  24100020   ADDIU S0, ZERO, 32
9D00854C  02068023   SUBU S0, S0, A2
9D008550  00101827   NOR V1, ZERO, S0
9D008554  00052040   SLL A0, A1, 1
9D008558  00642004   SLLV A0, A0, V1
9D00855C  02021806   SRLV V1, V0, S0
9D008560  00831825   OR V1, A0, V1
9D008564  32070020   ANDI A3, S0, 32
9D008568  02052006   SRLV A0, A1, S0
9D00856C  00C21004   SLLV V0, V0, A2
9D008570  14400014   BNE V0, ZERO, 0x9D0085C4
9D008574  0067200A   MOVZ A0, V1, A3
9D008578  0F40235A   JAL __floatunsisf
9D00857C  00000000   NOP
9D008580  00408821   ADDU S1, V0, ZERO
9D0085C4  0F40235A   JAL __floatunsisf
9D0085C8  34840001   ORI A0, A0, 1
9D0085CC  00408821   ADDU S1, V0, ZERO
9D008584  24020020   ADDIU V0, ZERO, 32
9D008588  12020015   BEQ S0, V0, 0x9D0085E0
9D00858C  3C029D01   LUI V0, -25343
9D0085D0  24020020   ADDIU V0, ZERO, 32
9D0085D4  1602FFEF   BNE S0, V0, 0x9D008594
9D0085D8  2402001F   ADDIU V0, ZERO, 31
9D0085DC  3C029D01   LUI V0, -25343
9D0085E0  0B40216A   J 0x9D0085A8
9D0085E4  8C459078   LW A1, -28552(V0)
9D008590  2402001F   ADDIU V0, ZERO, 31
9D008594  12020014   BEQ S0, V0, 0x9D0085E8
9D008598  24040001   ADDIU A0, ZERO, 1
9D0085E8  3C029D01   LUI V0, -25343
9D0085EC  0B40216A   J 0x9D0085A8
9D0085F0  8C45907C   LW A1, -28548(V0)
9D00859C  0F40232F   JAL __floatsisf
9D0085A0  02042004   SLLV A0, A0, S0
9D0085A4  00402821   ADDU A1, V0, ZERO
9D0085A8  0F401E64   JAL fpmul
9D0085AC  02202021   ADDU A0, S1, ZERO
9D0085B0  8FBF001C   LW RA, 28(SP)
9D0085B4  8FB10018   LW S1, 24(SP)
9D0085B8  8FB00014   LW S0, 20(SP)
9D0085BC  03E00008   JR RA
9D0085C0  27BD0020   ADDIU SP, SP, 32
9D0085FC  8FBF001C   LW RA, 28(SP)
9D008600  8FB10018   LW S1, 24(SP)
9D008604  8FB00014   LW S0, 20(SP)
9D008608  03E00008   JR RA
9D00860C  27BD0020   ADDIU SP, SP, 32
---  /Volumes/home/c11067/xc32/build/xc32-XC32_v1_34_branch/src45x/gcc/gcc/config/floatunsisf.c  --------
9D008D68  27BDFFE8   ADDIU SP, SP, -24
9D008D6C  AFBF0014   SW RA, 20(SP)
9D008D70  04800006   BLTZ A0, 0x9D008D8C
9D008D74  00801021   ADDU V0, A0, ZERO
9D008D8C  30420001   ANDI V0, V0, 1
9D008D90  00042042   SRL A0, A0, 1
9D008D94  0F40232F   JAL __floatsisf
9D008D98  00822025   OR A0, A0, V0
9D008D9C  00402021   ADDU A0, V0, ZERO
9D008DA0  0F401C2A   JAL fpadd
9D008DA4  00402821   ADDU A1, V0, ZERO
9D008D78  0F40232F   JAL __floatsisf
9D008D7C  00000000   NOP
9D008D80  8FBF0014   LW RA, 20(SP)
9D008D84  03E00008   JR RA
9D008D88  27BD0018   ADDIU SP, SP, 24
9D008DA8  8FBF0014   LW RA, 20(SP)
9D008DAC  03E00008   JR RA
9D008DB0  27BD0018   ADDIU SP, SP, 24
