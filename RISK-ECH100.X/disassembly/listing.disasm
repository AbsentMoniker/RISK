Disassembly Listing for RISK-ECH100
Generated From:
/home/jacob/Documents/477/RISK/RISK-ECH100.X/dist/default/production/RISK-ECH100.X.production.elf
Mar 30, 2015 12:10:04 PM

---  /home/jacob/Documents/477/RISK/game/territory.c  ---------------------------------------------------
1:                   // territory.c:
2:                   // Individual territory functions.
3:                   //
4:                   // Part of R.I.S.K
5:                   // ECE 477 Group 2, Spring 2015
6:                   
7:                   #include "territory.h"
8:                   #include "game.h"
9:                   #include "types.h"
10:                  #include "util.h"
11:                  #include "io.h"
12:                  #include "gamedata.h"
13:                  #include "log.h"
14:                  
15:                  // Array of connected territories, used to check valid move targets.
16:                  static int connectedTerritories[NUM_TERRITORIES];
17:                  
18:                  int isNeighbor(int t1, int t2)
19:                  {
9D005F30  27BDFFF0   ADDIU SP, SP, -16
9D005F34  AFBE000C   SW S8, 12(SP)
9D005F38  03A0F021   ADDU S8, SP, ZERO
9D005F3C  AFC40010   SW A0, 16(S8)
9D005F40  AFC50014   SW A1, 20(S8)
20:                      for(int i = 0; i < MAX_NEIGHBORS; i++)
9D005F44  AFC00000   SW ZERO, 0(S8)
9D005F48  0B4017E8   J 0x9D005FA0
9D005F4C  00000000   NOP
9D005F94  8FC20000   LW V0, 0(S8)
9D005F98  24420001   ADDIU V0, V0, 1
9D005F9C  AFC20000   SW V0, 0(S8)
9D005FA0  8FC20000   LW V0, 0(S8)
9D005FA4  28420002   SLTI V0, V0, 2
9D005FA8  1440FFE9   BNE V0, ZERO, 0x9D005F50
9D005FAC  00000000   NOP
21:                      {
22:                          if(territories[t1].neighbors[i] == t2)
9D005F50  3C048000   LUI A0, -32768
9D005F54  8FC20010   LW V0, 16(S8)
9D005F58  00021040   SLL V0, V0, 1
9D005F5C  00021880   SLL V1, V0, 2
9D005F60  00621823   SUBU V1, V1, V0
9D005F64  8FC20000   LW V0, 0(S8)
9D005F68  00621021   ADDU V0, V1, V0
9D005F6C  248341B8   ADDIU V1, A0, 16824
9D005F70  00021080   SLL V0, V0, 2
9D005F74  00621021   ADDU V0, V1, V0
9D005F78  8C430004   LW V1, 4(V0)
9D005F7C  8FC20014   LW V0, 20(S8)
9D005F80  14620004   BNE V1, V0, 0x9D005F94
9D005F84  00000000   NOP
23:                          {
24:                              return 1;
9D005F88  24020001   ADDIU V0, ZERO, 1
9D005F8C  0B4017ED   J 0x9D005FB4
9D005F90  00000000   NOP
25:                          }
26:                      }
27:                      return 0;
9D005FB0  00001021   ADDU V0, ZERO, ZERO
28:                  }
9D005FB4  03C0E821   ADDU SP, S8, ZERO
9D005FB8  8FBE000C   LW S8, 12(SP)
9D005FBC  27BD0010   ADDIU SP, SP, 16
9D005FC0  03E00008   JR RA
9D005FC4  00000000   NOP
29:                  #define SORT(a,b) do{if(a < b) {int tmp = a; a = b; b = tmp; }}while(0)
30:                  void doBattle(int tA, int tD)
31:                  {
9D005FC8  27BDFFC0   ADDIU SP, SP, -64
9D005FCC  AFBF003C   SW RA, 60(SP)
9D005FD0  AFBE0038   SW S8, 56(SP)
9D005FD4  03A0F021   ADDU S8, SP, ZERO
9D005FD8  AFC40040   SW A0, 64(S8)
9D005FDC  AFC50044   SW A1, 68(S8)
32:                      int attackers = min(3, territories[tA].troops - 1);
9D005FE0  3C038000   LUI V1, -32768
9D005FE4  8FC20040   LW V0, 64(S8)
9D005FE8  246341B8   ADDIU V1, V1, 16824
9D005FEC  000210C0   SLL V0, V0, 3
9D005FF0  00022080   SLL A0, V0, 2
9D005FF4  00821023   SUBU V0, A0, V0
9D005FF8  00621021   ADDU V0, V1, V0
9D005FFC  8C420014   LW V0, 20(V0)
9D006000  2442FFFF   ADDIU V0, V0, -1
9D006004  24030003   ADDIU V1, ZERO, 3
9D006008  28440004   SLTI A0, V0, 4
9D00600C  0064100A   MOVZ V0, V1, A0
9D006010  AFC20020   SW V0, 32(S8)
33:                      int defenders = min(2, territories[tD].troops);
9D006014  3C038000   LUI V1, -32768
9D006018  8FC20044   LW V0, 68(S8)
9D00601C  246341B8   ADDIU V1, V1, 16824
9D006020  000210C0   SLL V0, V0, 3
9D006024  00022080   SLL A0, V0, 2
9D006028  00821023   SUBU V0, A0, V0
9D00602C  00621021   ADDU V0, V1, V0
9D006030  8C420014   LW V0, 20(V0)
9D006034  24030002   ADDIU V1, ZERO, 2
9D006038  28440003   SLTI A0, V0, 3
9D00603C  0064100A   MOVZ V0, V1, A0
9D006040  AFC20024   SW V0, 36(S8)
34:                      attackerDice[0] = randint(1,6);     
9D006044  24040001   ADDIU A0, ZERO, 1
9D006048  24050006   ADDIU A1, ZERO, 6
9D00604C  0F401ACB   JAL randint
9D006050  00000000   NOP
9D006054  00401821   ADDU V1, V0, ZERO
9D006058  3C028000   LUI V0, -32768
9D00605C  AC43024C   SW V1, 588(V0)
35:                      attackerDice[1] = attackers > 1? randint(1,6) : 0;
9D006060  8FC20020   LW V0, 32(S8)
9D006064  28420002   SLTI V0, V0, 2
9D006068  14400007   BNE V0, ZERO, 0x9D006088
9D00606C  00000000   NOP
9D006070  24040001   ADDIU A0, ZERO, 1
9D006074  24050006   ADDIU A1, ZERO, 6
9D006078  0F401ACB   JAL randint
9D00607C  00000000   NOP
9D006080  0B401823   J 0x9D00608C
9D006084  00000000   NOP
9D006088  00001021   ADDU V0, ZERO, ZERO
9D00608C  3C038000   LUI V1, -32768
9D006090  2463024C   ADDIU V1, V1, 588
9D006094  AC620004   SW V0, 4(V1)
36:                      attackerDice[2] = attackers > 2? randint(1,6) : 0;
9D006098  8FC20020   LW V0, 32(S8)
9D00609C  28420003   SLTI V0, V0, 3
9D0060A0  14400007   BNE V0, ZERO, 0x9D0060C0
9D0060A4  00000000   NOP
9D0060A8  24040001   ADDIU A0, ZERO, 1
9D0060AC  24050006   ADDIU A1, ZERO, 6
9D0060B0  0F401ACB   JAL randint
9D0060B4  00000000   NOP
9D0060B8  0B401831   J 0x9D0060C4
9D0060BC  00000000   NOP
9D0060C0  00001021   ADDU V0, ZERO, ZERO
9D0060C4  3C038000   LUI V1, -32768
9D0060C8  2463024C   ADDIU V1, V1, 588
9D0060CC  AC620008   SW V0, 8(V1)
37:                      defenderDice[0] = randint(1,6);     
9D0060D0  24040001   ADDIU A0, ZERO, 1
9D0060D4  24050006   ADDIU A1, ZERO, 6
9D0060D8  0F401ACB   JAL randint
9D0060DC  00000000   NOP
9D0060E0  AF8280E4   SW V0, -32540(GP)
38:                      defenderDice[1] = defenders > 1? randint(1,6) : 0;
9D0060E4  8FC20024   LW V0, 36(S8)
9D0060E8  28420002   SLTI V0, V0, 2
9D0060EC  14400007   BNE V0, ZERO, 0x9D00610C
9D0060F0  00000000   NOP
9D0060F4  24040001   ADDIU A0, ZERO, 1
9D0060F8  24050006   ADDIU A1, ZERO, 6
9D0060FC  0F401ACB   JAL randint
9D006100  00000000   NOP
9D006104  0B401844   J 0x9D006110
9D006108  00000000   NOP
9D00610C  00001021   ADDU V0, ZERO, ZERO
9D006110  AF8280E8   SW V0, -32536(GP)
39:                  
40:                      SORT(attackerDice[0], attackerDice[1]);
9D006114  3C028000   LUI V0, -32768
9D006118  8C43024C   LW V1, 588(V0)
9D00611C  3C028000   LUI V0, -32768
9D006120  2442024C   ADDIU V0, V0, 588
9D006124  8C420004   LW V0, 4(V0)
9D006128  0062102A   SLT V0, V1, V0
9D00612C  1040000D   BEQ V0, ZERO, 0x9D006164
9D006130  00000000   NOP
9D006134  3C028000   LUI V0, -32768
9D006138  8C42024C   LW V0, 588(V0)
9D00613C  AFC20028   SW V0, 40(S8)
9D006140  3C028000   LUI V0, -32768
9D006144  2442024C   ADDIU V0, V0, 588
9D006148  8C430004   LW V1, 4(V0)
9D00614C  3C028000   LUI V0, -32768
9D006150  AC43024C   SW V1, 588(V0)
9D006154  3C028000   LUI V0, -32768
9D006158  2442024C   ADDIU V0, V0, 588
9D00615C  8FC30028   LW V1, 40(S8)
9D006160  AC430004   SW V1, 4(V0)
41:                      SORT(attackerDice[0], attackerDice[2]);
9D006164  3C028000   LUI V0, -32768
9D006168  8C43024C   LW V1, 588(V0)
9D00616C  3C028000   LUI V0, -32768
9D006170  2442024C   ADDIU V0, V0, 588
9D006174  8C420008   LW V0, 8(V0)
9D006178  0062102A   SLT V0, V1, V0
9D00617C  1040000D   BEQ V0, ZERO, 0x9D0061B4
9D006180  00000000   NOP
9D006184  3C028000   LUI V0, -32768
9D006188  8C42024C   LW V0, 588(V0)
9D00618C  AFC2002C   SW V0, 44(S8)
9D006190  3C028000   LUI V0, -32768
9D006194  2442024C   ADDIU V0, V0, 588
9D006198  8C430008   LW V1, 8(V0)
9D00619C  3C028000   LUI V0, -32768
9D0061A0  AC43024C   SW V1, 588(V0)
9D0061A4  3C028000   LUI V0, -32768
9D0061A8  2442024C   ADDIU V0, V0, 588
9D0061AC  8FC3002C   LW V1, 44(S8)
9D0061B0  AC430008   SW V1, 8(V0)
42:                      SORT(attackerDice[1], attackerDice[2]);
9D0061B4  3C028000   LUI V0, -32768
9D0061B8  2442024C   ADDIU V0, V0, 588
9D0061BC  8C430004   LW V1, 4(V0)
9D0061C0  3C028000   LUI V0, -32768
9D0061C4  2442024C   ADDIU V0, V0, 588
9D0061C8  8C420008   LW V0, 8(V0)
9D0061CC  0062102A   SLT V0, V1, V0
9D0061D0  1040000F   BEQ V0, ZERO, 0x9D006210
9D0061D4  00000000   NOP
9D0061D8  3C028000   LUI V0, -32768
9D0061DC  2442024C   ADDIU V0, V0, 588
9D0061E0  8C420004   LW V0, 4(V0)
9D0061E4  AFC20030   SW V0, 48(S8)
9D0061E8  3C028000   LUI V0, -32768
9D0061EC  2442024C   ADDIU V0, V0, 588
9D0061F0  8C430008   LW V1, 8(V0)
9D0061F4  3C028000   LUI V0, -32768
9D0061F8  2442024C   ADDIU V0, V0, 588
9D0061FC  AC430004   SW V1, 4(V0)
9D006200  3C028000   LUI V0, -32768
9D006204  2442024C   ADDIU V0, V0, 588
9D006208  8FC30030   LW V1, 48(S8)
9D00620C  AC430008   SW V1, 8(V0)
43:                      SORT(defenderDice[0], defenderDice[1]);
9D006210  8F8380E4   LW V1, -32540(GP)
9D006214  8F8280E8   LW V0, -32536(GP)
9D006218  0062102A   SLT V0, V1, V0
9D00621C  10400007   BEQ V0, ZERO, 0x9D00623C
9D006220  00000000   NOP
9D006224  8F8280E4   LW V0, -32540(GP)
9D006228  AFC20034   SW V0, 52(S8)
9D00622C  8F8280E8   LW V0, -32536(GP)
9D006230  AF8280E4   SW V0, -32540(GP)
9D006234  8FC20034   LW V0, 52(S8)
9D006238  AF8280E8   SW V0, -32536(GP)
44:                  
45:                      // Kill some troops
46:                      if(attackerDice[0] > defenderDice[0])
9D00623C  3C028000   LUI V0, -32768
9D006240  8C43024C   LW V1, 588(V0)
9D006244  8F8280E4   LW V0, -32540(GP)
9D006248  0043102A   SLT V0, V0, V1
9D00624C  10400014   BEQ V0, ZERO, 0x9D0062A0
9D006250  00000000   NOP
47:                          territories[tD].troops -= 1;
9D006254  3C038000   LUI V1, -32768
9D006258  8FC20044   LW V0, 68(S8)
9D00625C  246341B8   ADDIU V1, V1, 16824
9D006260  000210C0   SLL V0, V0, 3
9D006264  00022080   SLL A0, V0, 2
9D006268  00821023   SUBU V0, A0, V0
9D00626C  00621021   ADDU V0, V1, V0
9D006270  8C420014   LW V0, 20(V0)
9D006274  2443FFFF   ADDIU V1, V0, -1
9D006278  3C048000   LUI A0, -32768
9D00627C  8FC20044   LW V0, 68(S8)
9D006280  248441B8   ADDIU A0, A0, 16824
9D006284  000210C0   SLL V0, V0, 3
9D006288  00022880   SLL A1, V0, 2
9D00628C  00A21023   SUBU V0, A1, V0
9D006290  00821021   ADDU V0, A0, V0
9D006294  AC430014   SW V1, 20(V0)
9D006298  0B4018B9   J 0x9D0062E4
9D00629C  00000000   NOP
48:                      else
49:                          territories[tA].troops -= 1;
9D0062A0  3C038000   LUI V1, -32768
9D0062A4  8FC20040   LW V0, 64(S8)
9D0062A8  246341B8   ADDIU V1, V1, 16824
9D0062AC  000210C0   SLL V0, V0, 3
9D0062B0  00022080   SLL A0, V0, 2
9D0062B4  00821023   SUBU V0, A0, V0
9D0062B8  00621021   ADDU V0, V1, V0
9D0062BC  8C420014   LW V0, 20(V0)
9D0062C0  2443FFFF   ADDIU V1, V0, -1
9D0062C4  3C048000   LUI A0, -32768
9D0062C8  8FC20040   LW V0, 64(S8)
9D0062CC  248441B8   ADDIU A0, A0, 16824
9D0062D0  000210C0   SLL V0, V0, 3
9D0062D4  00022880   SLL A1, V0, 2
9D0062D8  00A21023   SUBU V0, A1, V0
9D0062DC  00821021   ADDU V0, A0, V0
9D0062E0  AC430014   SW V1, 20(V0)
50:                      if(attackers > 1 && defenders > 1)
9D0062E4  8FC20020   LW V0, 32(S8)
9D0062E8  28420002   SLTI V0, V0, 2
9D0062EC  14400030   BNE V0, ZERO, 0x9D0063B0
9D0062F0  00000000   NOP
9D0062F4  8FC20024   LW V0, 36(S8)
9D0062F8  28420002   SLTI V0, V0, 2
9D0062FC  1440002C   BNE V0, ZERO, 0x9D0063B0
9D006300  00000000   NOP
51:                      {
52:                          if(attackerDice[1] > defenderDice[1])
9D006304  3C028000   LUI V0, -32768
9D006308  2442024C   ADDIU V0, V0, 588
9D00630C  8C430004   LW V1, 4(V0)
9D006310  8F8280E8   LW V0, -32536(GP)
9D006314  0043102A   SLT V0, V0, V1
9D006318  10400014   BEQ V0, ZERO, 0x9D00636C
9D00631C  00000000   NOP
53:                              territories[tD].troops -= 1;
9D006320  3C038000   LUI V1, -32768
9D006324  8FC20044   LW V0, 68(S8)
9D006328  246341B8   ADDIU V1, V1, 16824
9D00632C  000210C0   SLL V0, V0, 3
9D006330  00022080   SLL A0, V0, 2
9D006334  00821023   SUBU V0, A0, V0
9D006338  00621021   ADDU V0, V1, V0
9D00633C  8C420014   LW V0, 20(V0)
9D006340  2443FFFF   ADDIU V1, V0, -1
9D006344  3C048000   LUI A0, -32768
9D006348  8FC20044   LW V0, 68(S8)
9D00634C  248441B8   ADDIU A0, A0, 16824
9D006350  000210C0   SLL V0, V0, 3
9D006354  00022880   SLL A1, V0, 2
9D006358  00A21023   SUBU V0, A1, V0
9D00635C  00821021   ADDU V0, A0, V0
9D006360  AC430014   SW V1, 20(V0)
9D006364  0B4018EC   J 0x9D0063B0
9D006368  00000000   NOP
54:                          else
55:                              territories[tA].troops -= 1;
9D00636C  3C038000   LUI V1, -32768
9D006370  8FC20040   LW V0, 64(S8)
9D006374  246341B8   ADDIU V1, V1, 16824
9D006378  000210C0   SLL V0, V0, 3
9D00637C  00022080   SLL A0, V0, 2
9D006380  00821023   SUBU V0, A0, V0
9D006384  00621021   ADDU V0, V1, V0
9D006388  8C420014   LW V0, 20(V0)
9D00638C  2443FFFF   ADDIU V1, V0, -1
9D006390  3C048000   LUI A0, -32768
9D006394  8FC20040   LW V0, 64(S8)
9D006398  248441B8   ADDIU A0, A0, 16824
9D00639C  000210C0   SLL V0, V0, 3
9D0063A0  00022880   SLL A1, V0, 2
9D0063A4  00A21023   SUBU V0, A1, V0
9D0063A8  00821021   ADDU V0, A0, V0
9D0063AC  AC430014   SW V1, 20(V0)
56:                      }
57:                  
58:                      logBattle(currentPlayer, territories[tD].owner, attackerDice[0],
9D0063B0  8F8480D4   LW A0, -32556(GP)
9D0063B4  3C058000   LUI A1, -32768
9D0063B8  8FC20044   LW V0, 68(S8)
9D0063BC  000210C0   SLL V0, V0, 3
9D0063C0  00021880   SLL V1, V0, 2
9D0063C4  00621823   SUBU V1, V1, V0
9D0063C8  24A241B8   ADDIU V0, A1, 16824
9D0063CC  00621021   ADDU V0, V1, V0
9D0063D0  8C450010   LW A1, 16(V0)
9D0063D4  3C028000   LUI V0, -32768
9D0063D8  8C43024C   LW V1, 588(V0)
9D0063DC  3C028000   LUI V0, -32768
9D0063E0  2442024C   ADDIU V0, V0, 588
9D0063E4  8C420004   LW V0, 4(V0)
9D0063E8  3C068000   LUI A2, -32768
9D0063EC  24C6024C   ADDIU A2, A2, 588
9D0063F0  8CC80008   LW T0, 8(A2)
9D0063F4  8F8780E4   LW A3, -32540(GP)
9D0063F8  8F8680E8   LW A2, -32536(GP)
9D0063FC  AFA80010   SW T0, 16(SP)
9D006400  AFA70014   SW A3, 20(SP)
9D006404  AFA60018   SW A2, 24(SP)
9D006408  00603021   ADDU A2, V1, ZERO
9D00640C  00403821   ADDU A3, V0, ZERO
9D006410  0F401D11   JAL logBattle
9D006414  00000000   NOP
59:                              attackerDice[1], attackerDice[2], defenderDice[0],
60:                              defenderDice[1]);
61:                  }
9D006418  03C0E821   ADDU SP, S8, ZERO
9D00641C  8FBF003C   LW RA, 60(SP)
9D006420  8FBE0038   LW S8, 56(SP)
9D006424  27BD0040   ADDIU SP, SP, 64
9D006428  03E00008   JR RA
9D00642C  00000000   NOP
62:                  
63:                  int predUnowned(int t)
64:                  {
9D006430  27BDFFF8   ADDIU SP, SP, -8
9D006434  AFBE0004   SW S8, 4(SP)
9D006438  03A0F021   ADDU S8, SP, ZERO
9D00643C  AFC40008   SW A0, 8(S8)
65:                      return territories[t].owner == -1;
9D006440  3C048000   LUI A0, -32768
9D006444  8FC20008   LW V0, 8(S8)
9D006448  000210C0   SLL V0, V0, 3
9D00644C  00021880   SLL V1, V0, 2
9D006450  00621823   SUBU V1, V1, V0
9D006454  248241B8   ADDIU V0, A0, 16824
9D006458  00621021   ADDU V0, V1, V0
9D00645C  8C420010   LW V0, 16(V0)
9D006460  24420001   ADDIU V0, V0, 1
9D006464  2C420001   SLTIU V0, V0, 1
66:                  }
9D006468  03C0E821   ADDU SP, S8, ZERO
9D00646C  8FBE0004   LW S8, 4(SP)
9D006470  27BD0008   ADDIU SP, SP, 8
9D006474  03E00008   JR RA
9D006478  00000000   NOP
67:                  int predOwnedCurrent(int t)
68:                  {
9D00647C  27BDFFF8   ADDIU SP, SP, -8
9D006480  AFBE0004   SW S8, 4(SP)
9D006484  03A0F021   ADDU S8, SP, ZERO
9D006488  AFC40008   SW A0, 8(S8)
69:                      return territories[t].owner == currentPlayer;
9D00648C  3C048000   LUI A0, -32768
9D006490  8FC20008   LW V0, 8(S8)
9D006494  000210C0   SLL V0, V0, 3
9D006498  00021880   SLL V1, V0, 2
9D00649C  00621823   SUBU V1, V1, V0
9D0064A0  248241B8   ADDIU V0, A0, 16824
9D0064A4  00621021   ADDU V0, V1, V0
9D0064A8  8C430010   LW V1, 16(V0)
9D0064AC  8F8280D4   LW V0, -32556(GP)
9D0064B0  00621026   XOR V0, V1, V0
9D0064B4  2C420001   SLTIU V0, V0, 1
70:                  }
9D0064B8  03C0E821   ADDU SP, S8, ZERO
9D0064BC  8FBE0004   LW S8, 4(SP)
9D0064C0  27BD0008   ADDIU SP, SP, 8
9D0064C4  03E00008   JR RA
9D0064C8  00000000   NOP
71:                  int predOwnerOther(int t)
72:                  {
9D0064CC  27BDFFE8   ADDIU SP, SP, -24
9D0064D0  AFBF0014   SW RA, 20(SP)
9D0064D4  AFBE0010   SW S8, 16(SP)
9D0064D8  03A0F021   ADDU S8, SP, ZERO
9D0064DC  AFC40018   SW A0, 24(S8)
73:                      return !predOwnedCurrent(t);
9D0064E0  8FC40018   LW A0, 24(S8)
9D0064E4  0F40191F   JAL predOwnedCurrent
9D0064E8  00000000   NOP
9D0064EC  2C420001   SLTIU V0, V0, 1
74:                  }
9D0064F0  03C0E821   ADDU SP, S8, ZERO
9D0064F4  8FBF0014   LW RA, 20(SP)
9D0064F8  8FBE0010   LW S8, 16(SP)
9D0064FC  27BD0018   ADDIU SP, SP, 24
9D006500  03E00008   JR RA
9D006504  00000000   NOP
75:                  int predAttackSource(int t)
76:                  {
9D006508  27BDFFF0   ADDIU SP, SP, -16
9D00650C  AFBE000C   SW S8, 12(SP)
9D006510  03A0F021   ADDU S8, SP, ZERO
9D006514  AFC40010   SW A0, 16(S8)
77:                      if(territories[t].owner != currentPlayer)
9D006518  3C048000   LUI A0, -32768
9D00651C  8FC20010   LW V0, 16(S8)
9D006520  000210C0   SLL V0, V0, 3
9D006524  00021880   SLL V1, V0, 2
9D006528  00621823   SUBU V1, V1, V0
9D00652C  248241B8   ADDIU V0, A0, 16824
9D006530  00621021   ADDU V0, V1, V0
9D006534  8C430010   LW V1, 16(V0)
9D006538  8F8280D4   LW V0, -32556(GP)
9D00653C  10620004   BEQ V1, V0, 0x9D006550
9D006540  00000000   NOP
78:                          return 0;
9D006544  00001021   ADDU V0, ZERO, ZERO
9D006548  0B401993   J 0x9D00664C
9D00654C  00000000   NOP
79:                      if(territories[t].troops == 1)
9D006550  3C038000   LUI V1, -32768
9D006554  8FC20010   LW V0, 16(S8)
9D006558  246341B8   ADDIU V1, V1, 16824
9D00655C  000210C0   SLL V0, V0, 3
9D006560  00022080   SLL A0, V0, 2
9D006564  00821023   SUBU V0, A0, V0
9D006568  00621021   ADDU V0, V1, V0
9D00656C  8C430014   LW V1, 20(V0)
9D006570  24020001   ADDIU V0, ZERO, 1
9D006574  14620004   BNE V1, V0, 0x9D006588
9D006578  00000000   NOP
80:                          return 0;
9D00657C  00001021   ADDU V0, ZERO, ZERO
9D006580  0B401993   J 0x9D00664C
9D006584  00000000   NOP
81:                      for(int i = 0; i < MAX_NEIGHBORS; i++)
9D006588  AFC00000   SW ZERO, 0(S8)
9D00658C  0B40198E   J 0x9D006638
9D006590  00000000   NOP
9D00662C  8FC20000   LW V0, 0(S8)
9D006630  24420001   ADDIU V0, V0, 1
9D006634  AFC20000   SW V0, 0(S8)
9D006638  8FC20000   LW V0, 0(S8)
9D00663C  28420002   SLTI V0, V0, 2
9D006640  1440FFD4   BNE V0, ZERO, 0x9D006594
9D006644  00000000   NOP
82:                      {
83:                          if(territories[t].neighbors[i] != -1 &&
9D006594  3C048000   LUI A0, -32768
9D006598  8FC20010   LW V0, 16(S8)
9D00659C  00021040   SLL V0, V0, 1
9D0065A0  00021880   SLL V1, V0, 2
9D0065A4  00621823   SUBU V1, V1, V0
9D0065A8  8FC20000   LW V0, 0(S8)
9D0065AC  00621021   ADDU V0, V1, V0
9D0065B0  248341B8   ADDIU V1, A0, 16824
9D0065B4  00021080   SLL V0, V0, 2
9D0065B8  00621021   ADDU V0, V1, V0
9D0065BC  8C430004   LW V1, 4(V0)
9D0065C0  2402FFFF   ADDIU V0, ZERO, -1
9D0065C4  10620019   BEQ V1, V0, 0x9D00662C
9D0065C8  00000000   NOP
9D006618  10620004   BEQ V1, V0, 0x9D00662C
9D00661C  00000000   NOP
84:                                  territories[territories[t].neighbors[i]].owner !=
9D0065CC  3C048000   LUI A0, -32768
9D0065D0  8FC20010   LW V0, 16(S8)
9D0065D4  00021040   SLL V0, V0, 1
9D0065D8  00021880   SLL V1, V0, 2
9D0065DC  00621823   SUBU V1, V1, V0
9D0065E0  8FC20000   LW V0, 0(S8)
9D0065E4  00621021   ADDU V0, V1, V0
9D0065E8  248341B8   ADDIU V1, A0, 16824
9D0065EC  00021080   SLL V0, V0, 2
9D0065F0  00621021   ADDU V0, V1, V0
9D0065F4  8C420004   LW V0, 4(V0)
9D0065F8  3C048000   LUI A0, -32768
9D0065FC  000210C0   SLL V0, V0, 3
9D006600  00021880   SLL V1, V0, 2
9D006604  00621823   SUBU V1, V1, V0
9D006608  248241B8   ADDIU V0, A0, 16824
9D00660C  00621021   ADDU V0, V1, V0
9D006610  8C430010   LW V1, 16(V0)
9D006614  8F8280D4   LW V0, -32556(GP)
85:                                  currentPlayer)
86:                          {
87:                              return 1;
9D006620  24020001   ADDIU V0, ZERO, 1
9D006624  0B401993   J 0x9D00664C
9D006628  00000000   NOP
88:                          }
89:                      }
90:                      return 0;
9D006648  00001021   ADDU V0, ZERO, ZERO
91:                  }
9D00664C  03C0E821   ADDU SP, S8, ZERO
9D006650  8FBE000C   LW S8, 12(SP)
9D006654  27BD0010   ADDIU SP, SP, 16
9D006658  03E00008   JR RA
9D00665C  00000000   NOP
92:                  int predAttackTarget(int t)
93:                  {
9D006660  27BDFFE8   ADDIU SP, SP, -24
9D006664  AFBF0014   SW RA, 20(SP)
9D006668  AFBE0010   SW S8, 16(SP)
9D00666C  03A0F021   ADDU S8, SP, ZERO
9D006670  AFC40018   SW A0, 24(S8)
94:                      if(territories[t].owner == currentPlayer)
9D006674  3C048000   LUI A0, -32768
9D006678  8FC20018   LW V0, 24(S8)
9D00667C  000210C0   SLL V0, V0, 3
9D006680  00021880   SLL V1, V0, 2
9D006684  00621823   SUBU V1, V1, V0
9D006688  248241B8   ADDIU V0, A0, 16824
9D00668C  00621021   ADDU V0, V1, V0
9D006690  8C430010   LW V1, 16(V0)
9D006694  8F8280D4   LW V0, -32556(GP)
9D006698  14620004   BNE V1, V0, 0x9D0066AC
9D00669C  00000000   NOP
95:                          return 0;
9D0066A0  00001021   ADDU V0, ZERO, ZERO
9D0066A4  0B4019B6   J 0x9D0066D8
9D0066A8  00000000   NOP
96:                      if(!isNeighbor(source, t))
9D0066AC  8F8280EC   LW V0, -32532(GP)
9D0066B0  00402021   ADDU A0, V0, ZERO
9D0066B4  8FC50018   LW A1, 24(S8)
9D0066B8  0F4017CC   JAL isNeighbor
9D0066BC  00000000   NOP
9D0066C0  14400004   BNE V0, ZERO, 0x9D0066D4
9D0066C4  00000000   NOP
97:                          return 0;
9D0066C8  00001021   ADDU V0, ZERO, ZERO
9D0066CC  0B4019B6   J 0x9D0066D8
9D0066D0  00000000   NOP
98:                      return 1;
9D0066D4  24020001   ADDIU V0, ZERO, 1
99:                  }
9D0066D8  03C0E821   ADDU SP, S8, ZERO
9D0066DC  8FBF0014   LW RA, 20(SP)
9D0066E0  8FBE0010   LW S8, 16(SP)
9D0066E4  27BD0018   ADDIU SP, SP, 24
9D0066E8  03E00008   JR RA
9D0066EC  00000000   NOP
100:                 int predMoveSource(int t)
101:                 {
9D0066F0  27BDFFF0   ADDIU SP, SP, -16
9D0066F4  AFBE000C   SW S8, 12(SP)
9D0066F8  03A0F021   ADDU S8, SP, ZERO
9D0066FC  AFC40010   SW A0, 16(S8)
102:                     if(territories[t].owner != currentPlayer)
9D006700  3C048000   LUI A0, -32768
9D006704  8FC20010   LW V0, 16(S8)
9D006708  000210C0   SLL V0, V0, 3
9D00670C  00021880   SLL V1, V0, 2
9D006710  00621823   SUBU V1, V1, V0
9D006714  248241B8   ADDIU V0, A0, 16824
9D006718  00621021   ADDU V0, V1, V0
9D00671C  8C430010   LW V1, 16(V0)
9D006720  8F8280D4   LW V0, -32556(GP)
9D006724  10620004   BEQ V1, V0, 0x9D006738
9D006728  00000000   NOP
103:                         return 0;
9D00672C  00001021   ADDU V0, ZERO, ZERO
9D006730  0B401A0D   J 0x9D006834
9D006734  00000000   NOP
104:                     if(territories[t].troops == 1)
9D006738  3C038000   LUI V1, -32768
9D00673C  8FC20010   LW V0, 16(S8)
9D006740  246341B8   ADDIU V1, V1, 16824
9D006744  000210C0   SLL V0, V0, 3
9D006748  00022080   SLL A0, V0, 2
9D00674C  00821023   SUBU V0, A0, V0
9D006750  00621021   ADDU V0, V1, V0
9D006754  8C430014   LW V1, 20(V0)
9D006758  24020001   ADDIU V0, ZERO, 1
9D00675C  14620004   BNE V1, V0, 0x9D006770
9D006760  00000000   NOP
105:                         return 0;
9D006764  00001021   ADDU V0, ZERO, ZERO
9D006768  0B401A0D   J 0x9D006834
9D00676C  00000000   NOP
106:                     for(int i = 0; i < MAX_NEIGHBORS; i++)
9D006770  AFC00000   SW ZERO, 0(S8)
9D006774  0B401A08   J 0x9D006820
9D006778  00000000   NOP
9D006814  8FC20000   LW V0, 0(S8)
9D006818  24420001   ADDIU V0, V0, 1
9D00681C  AFC20000   SW V0, 0(S8)
9D006820  8FC20000   LW V0, 0(S8)
9D006824  28420002   SLTI V0, V0, 2
9D006828  1440FFD4   BNE V0, ZERO, 0x9D00677C
9D00682C  00000000   NOP
107:                     {
108:                         if(territories[t].neighbors[i] != -1 &&
9D00677C  3C048000   LUI A0, -32768
9D006780  8FC20010   LW V0, 16(S8)
9D006784  00021040   SLL V0, V0, 1
9D006788  00021880   SLL V1, V0, 2
9D00678C  00621823   SUBU V1, V1, V0
9D006790  8FC20000   LW V0, 0(S8)
9D006794  00621021   ADDU V0, V1, V0
9D006798  248341B8   ADDIU V1, A0, 16824
9D00679C  00021080   SLL V0, V0, 2
9D0067A0  00621021   ADDU V0, V1, V0
9D0067A4  8C430004   LW V1, 4(V0)
9D0067A8  2402FFFF   ADDIU V0, ZERO, -1
9D0067AC  10620019   BEQ V1, V0, 0x9D006814
9D0067B0  00000000   NOP
9D006800  14620004   BNE V1, V0, 0x9D006814
9D006804  00000000   NOP
109:                                 territories[territories[t].neighbors[i]].owner == currentPlayer)
9D0067B4  3C048000   LUI A0, -32768
9D0067B8  8FC20010   LW V0, 16(S8)
9D0067BC  00021040   SLL V0, V0, 1
9D0067C0  00021880   SLL V1, V0, 2
9D0067C4  00621823   SUBU V1, V1, V0
9D0067C8  8FC20000   LW V0, 0(S8)
9D0067CC  00621021   ADDU V0, V1, V0
9D0067D0  248341B8   ADDIU V1, A0, 16824
9D0067D4  00021080   SLL V0, V0, 2
9D0067D8  00621021   ADDU V0, V1, V0
9D0067DC  8C420004   LW V0, 4(V0)
9D0067E0  3C048000   LUI A0, -32768
9D0067E4  000210C0   SLL V0, V0, 3
9D0067E8  00021880   SLL V1, V0, 2
9D0067EC  00621823   SUBU V1, V1, V0
9D0067F0  248241B8   ADDIU V0, A0, 16824
9D0067F4  00621021   ADDU V0, V1, V0
9D0067F8  8C430010   LW V1, 16(V0)
9D0067FC  8F8280D4   LW V0, -32556(GP)
110:                         {
111:                             return 1;
9D006808  24020001   ADDIU V0, ZERO, 1
9D00680C  0B401A0D   J 0x9D006834
9D006810  00000000   NOP
112:                         }
113:                     }
114:                     return 0;
9D006830  00001021   ADDU V0, ZERO, ZERO
115:                 }
9D006834  03C0E821   ADDU SP, S8, ZERO
9D006838  8FBE000C   LW S8, 12(SP)
9D00683C  27BD0010   ADDIU SP, SP, 16
9D006840  03E00008   JR RA
9D006844  00000000   NOP
116:                 int predMoveTarget(int t)
117:                 {
9D006848  27BDFFF8   ADDIU SP, SP, -8
9D00684C  AFBE0004   SW S8, 4(SP)
9D006850  03A0F021   ADDU S8, SP, ZERO
9D006854  AFC40008   SW A0, 8(S8)
118:                     if(t == source)
9D006858  8F8280EC   LW V0, -32532(GP)
9D00685C  8FC30008   LW V1, 8(S8)
9D006860  14620004   BNE V1, V0, 0x9D006874
9D006864  00000000   NOP
119:                         return 0;
9D006868  00001021   ADDU V0, ZERO, ZERO
9D00686C  0B401A37   J 0x9D0068DC
9D006870  00000000   NOP
120:                     if(territories[t].owner != currentPlayer)
9D006874  3C048000   LUI A0, -32768
9D006878  8FC20008   LW V0, 8(S8)
9D00687C  000210C0   SLL V0, V0, 3
9D006880  00021880   SLL V1, V0, 2
9D006884  00621823   SUBU V1, V1, V0
9D006888  248241B8   ADDIU V0, A0, 16824
9D00688C  00621021   ADDU V0, V1, V0
9D006890  8C430010   LW V1, 16(V0)
9D006894  8F8280D4   LW V0, -32556(GP)
9D006898  10620004   BEQ V1, V0, 0x9D0068AC
9D00689C  00000000   NOP
121:                         return 0;
9D0068A0  00001021   ADDU V0, ZERO, ZERO
9D0068A4  0B401A37   J 0x9D0068DC
9D0068A8  00000000   NOP
122:                     if(connectedTerritories[t] != 1)
9D0068AC  8FC20008   LW V0, 8(S8)
9D0068B0  00021880   SLL V1, V0, 2
9D0068B4  27828088   ADDIU V0, GP, -32632
9D0068B8  00621021   ADDU V0, V1, V0
9D0068BC  8C430000   LW V1, 0(V0)
9D0068C0  24020001   ADDIU V0, ZERO, 1
9D0068C4  10620004   BEQ V1, V0, 0x9D0068D8
9D0068C8  00000000   NOP
123:                         return 0;
9D0068CC  00001021   ADDU V0, ZERO, ZERO
9D0068D0  0B401A37   J 0x9D0068DC
9D0068D4  00000000   NOP
124:                     return 1;
9D0068D8  24020001   ADDIU V0, ZERO, 1
125:                 }
9D0068DC  03C0E821   ADDU SP, S8, ZERO
9D0068E0  8FBE0004   LW S8, 4(SP)
9D0068E4  27BD0008   ADDIU SP, SP, 8
9D0068E8  03E00008   JR RA
9D0068EC  00000000   NOP
126:                 
127:                 // Find all connected territories by doing a breadth-first search of the
128:                 // territory graph. XXX: This uses quite a bit of stack, make sure there's
129:                 // enough space on the micro!
130:                 // In connectedTerritories: 
131:                 // -1 => visited and not connected, 0 => not visited, 1 => connected
132:                 void computeConnected(int sourceTerritory)
133:                 {
9D0068F0  27BDFFD8   ADDIU SP, SP, -40
9D0068F4  AFBE0024   SW S8, 36(SP)
9D0068F8  03A0F021   ADDU S8, SP, ZERO
9D0068FC  AFC40028   SW A0, 40(S8)
134:                     int stack[NUM_TERRITORIES];
135:                     int stackIdx = 0;
9D006900  AFC00000   SW ZERO, 0(S8)
136:                     int sourceOwner = territories[sourceTerritory].owner;
9D006904  3C048000   LUI A0, -32768
9D006908  8FC20028   LW V0, 40(S8)
9D00690C  000210C0   SLL V0, V0, 3
9D006910  00021880   SLL V1, V0, 2
9D006914  00621823   SUBU V1, V1, V0
9D006918  248241B8   ADDIU V0, A0, 16824
9D00691C  00621021   ADDU V0, V1, V0
9D006920  8C420010   LW V0, 16(V0)
9D006924  AFC2000C   SW V0, 12(S8)
137:                     
138:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D006928  AFC00004   SW ZERO, 4(S8)
9D00692C  0B401A55   J 0x9D006954
9D006930  00000000   NOP
9D006948  8FC20004   LW V0, 4(S8)
9D00694C  24420001   ADDIU V0, V0, 1
9D006950  AFC20004   SW V0, 4(S8)
9D006954  8FC20004   LW V0, 4(S8)
9D006958  28420002   SLTI V0, V0, 2
9D00695C  1440FFF5   BNE V0, ZERO, 0x9D006934
9D006960  00000000   NOP
139:                         connectedTerritories[i] = 0;
9D006934  8FC20004   LW V0, 4(S8)
9D006938  00021880   SLL V1, V0, 2
9D00693C  27828088   ADDIU V0, GP, -32632
9D006940  00621021   ADDU V0, V1, V0
9D006944  AC400000   SW ZERO, 0(V0)
140:                 
141:                     stack[stackIdx++] = sourceTerritory;
9D006964  8FC20000   LW V0, 0(S8)
9D006968  00021080   SLL V0, V0, 2
9D00696C  03C21021   ADDU V0, S8, V0
9D006970  8FC30028   LW V1, 40(S8)
9D006974  AC430018   SW V1, 24(V0)
9D006978  8FC20000   LW V0, 0(S8)
9D00697C  24420001   ADDIU V0, V0, 1
9D006980  AFC20000   SW V0, 0(S8)
142:                     connectedTerritories[sourceTerritory] = 1;
9D006984  8FC20028   LW V0, 40(S8)
9D006988  00021880   SLL V1, V0, 2
9D00698C  27828088   ADDIU V0, GP, -32632
9D006990  00621021   ADDU V0, V1, V0
9D006994  24030001   ADDIU V1, ZERO, 1
9D006998  AC430000   SW V1, 0(V0)
143:                     
144:                     while(stackIdx > 0)
9D00699C  0B401AC3   J 0x9D006B0C
9D0069A0  00000000   NOP
9D006B0C  8FC20000   LW V0, 0(S8)
9D006B10  1C40FFA4   BGTZ V0, 0x9D0069A4
9D006B14  00000000   NOP
145:                     {
146:                         int t = stack[--stackIdx];
9D0069A4  8FC20000   LW V0, 0(S8)
9D0069A8  2442FFFF   ADDIU V0, V0, -1
9D0069AC  AFC20000   SW V0, 0(S8)
9D0069B0  8FC20000   LW V0, 0(S8)
9D0069B4  00021080   SLL V0, V0, 2
9D0069B8  03C21021   ADDU V0, S8, V0
9D0069BC  8C420018   LW V0, 24(V0)
9D0069C0  AFC20010   SW V0, 16(S8)
147:                         for(int i = 0; i < MAX_NEIGHBORS; i++)
9D0069C4  AFC00008   SW ZERO, 8(S8)
9D0069C8  0B401ABC   J 0x9D006AF0
9D0069CC  00000000   NOP
9D006AE4  8FC20008   LW V0, 8(S8)
9D006AE8  24420001   ADDIU V0, V0, 1
9D006AEC  AFC20008   SW V0, 8(S8)
9D006AF0  8FC20008   LW V0, 8(S8)
9D006AF4  28420002   SLTI V0, V0, 2
9D006AF8  1440FFB5   BNE V0, ZERO, 0x9D0069D0
9D006AFC  00000000   NOP
9D006B00  0B401AC3   J 0x9D006B0C
9D006B04  00000000   NOP
148:                         {
149:                             if(territories[t].neighbors[i] == -1)
9D0069D0  3C048000   LUI A0, -32768
9D0069D4  8FC20010   LW V0, 16(S8)
9D0069D8  00021040   SLL V0, V0, 1
9D0069DC  00021880   SLL V1, V0, 2
9D0069E0  00621823   SUBU V1, V1, V0
9D0069E4  8FC20008   LW V0, 8(S8)
9D0069E8  00621021   ADDU V0, V1, V0
9D0069EC  248341B8   ADDIU V1, A0, 16824
9D0069F0  00021080   SLL V0, V0, 2
9D0069F4  00621021   ADDU V0, V1, V0
9D0069F8  8C430004   LW V1, 4(V0)
9D0069FC  2402FFFF   ADDIU V0, ZERO, -1
9D006A00  10620041   BEQ V1, V0, 0x9D006B08
9D006A04  00000000   NOP
150:                                 break;
9D006B08  00000000   NOP
151:                             int neighbor = territories[t].neighbors[i];
9D006A08  3C048000   LUI A0, -32768
9D006A0C  8FC20010   LW V0, 16(S8)
9D006A10  00021040   SLL V0, V0, 1
9D006A14  00021880   SLL V1, V0, 2
9D006A18  00621823   SUBU V1, V1, V0
9D006A1C  8FC20008   LW V0, 8(S8)
9D006A20  00621021   ADDU V0, V1, V0
9D006A24  248341B8   ADDIU V1, A0, 16824
9D006A28  00021080   SLL V0, V0, 2
9D006A2C  00621021   ADDU V0, V1, V0
9D006A30  8C420004   LW V0, 4(V0)
9D006A34  AFC20014   SW V0, 20(S8)
152:                             if(connectedTerritories[neighbor])
9D006A38  8FC20014   LW V0, 20(S8)
9D006A3C  00021880   SLL V1, V0, 2
9D006A40  27828088   ADDIU V0, GP, -32632
9D006A44  00621021   ADDU V0, V1, V0
9D006A48  8C420000   LW V0, 0(V0)
9D006A4C  14400024   BNE V0, ZERO, 0x9D006AE0
9D006A50  00000000   NOP
153:                                 continue;
9D006AE0  00000000   NOP
154:                             if(territories[neighbor].owner == sourceOwner)
9D006A54  3C048000   LUI A0, -32768
9D006A58  8FC20014   LW V0, 20(S8)
9D006A5C  000210C0   SLL V0, V0, 3
9D006A60  00021880   SLL V1, V0, 2
9D006A64  00621823   SUBU V1, V1, V0
9D006A68  248241B8   ADDIU V0, A0, 16824
9D006A6C  00621021   ADDU V0, V1, V0
9D006A70  8C430010   LW V1, 16(V0)
9D006A74  8FC2000C   LW V0, 12(S8)
9D006A78  14620011   BNE V1, V0, 0x9D006AC0
9D006A7C  00000000   NOP
155:                             {
156:                                 stack[stackIdx++] = neighbor;
9D006A80  8FC20000   LW V0, 0(S8)
9D006A84  00021080   SLL V0, V0, 2
9D006A88  03C21021   ADDU V0, S8, V0
9D006A8C  8FC30014   LW V1, 20(S8)
9D006A90  AC430018   SW V1, 24(V0)
9D006A94  8FC20000   LW V0, 0(S8)
9D006A98  24420001   ADDIU V0, V0, 1
9D006A9C  AFC20000   SW V0, 0(S8)
157:                                 connectedTerritories[neighbor] = 1;
9D006AA0  8FC20014   LW V0, 20(S8)
9D006AA4  00021880   SLL V1, V0, 2
9D006AA8  27828088   ADDIU V0, GP, -32632
9D006AAC  00621021   ADDU V0, V1, V0
9D006AB0  24030001   ADDIU V1, ZERO, 1
9D006AB4  AC430000   SW V1, 0(V0)
9D006AB8  0B401AB9   J 0x9D006AE4
9D006ABC  00000000   NOP
158:                             }
159:                             else
160:                                 connectedTerritories[neighbor] = -1;
9D006AC0  8FC20014   LW V0, 20(S8)
9D006AC4  00021880   SLL V1, V0, 2
9D006AC8  27828088   ADDIU V0, GP, -32632
9D006ACC  00621021   ADDU V0, V1, V0
9D006AD0  2403FFFF   ADDIU V1, ZERO, -1
9D006AD4  AC430000   SW V1, 0(V0)
9D006AD8  0B401AB9   J 0x9D006AE4
9D006ADC  00000000   NOP
161:                         }
162:                     }
163:                 }
9D006B18  03C0E821   ADDU SP, S8, ZERO
9D006B1C  8FBE0024   LW S8, 36(SP)
9D006B20  27BD0028   ADDIU SP, SP, 40
9D006B24  03E00008   JR RA
9D006B28  00000000   NOP
---  /home/jacob/Documents/477/RISK/game/log.c  ---------------------------------------------------------
1:                   // log.c:
2:                   // Game logs: creating and storing
3:                   //
4:                   // Part of R.I.S.K
5:                   // ECE 477 Group 2, Spring 2015
6:                   
7:                   #include "types.h"
8:                   #include "log.h"
9:                   #include "io.h"
10:                  
11:                  #include <stdlib.h>
12:                  
13:                  #ifdef HEAP
14:                  LogEntry * gamelog;
15:                  int gamelogCapacity;
16:                  int gamelogSize;
17:                  #else
18:                  LogEntry stLog[4000];
19:                  LogEntry * gamelog = stLog;
20:                  int gamelogCapacity = 4000;
21:                  int gamelogSize;
22:                  #endif
23:                  
24:                  void addLogEntry(LogEntry entry)
25:                  {
9D0072D0  27BDFFE8   ADDIU SP, SP, -24
9D0072D4  AFBF0014   SW RA, 20(SP)
9D0072D8  AFBE0010   SW S8, 16(SP)
9D0072DC  03A0F021   ADDU S8, SP, ZERO
9D0072E0  AFC40018   SW A0, 24(S8)
26:                      if(gamelogSize < gamelogCapacity)
9D0072E4  8F8380F4   LW V1, -32524(GP)
9D0072E8  8F828014   LW V0, -32748(GP)
9D0072EC  0062102A   SLT V0, V1, V0
9D0072F0  1040000C   BEQ V0, ZERO, 0x9D007324
9D0072F4  00000000   NOP
27:                      {
28:                          gamelog[gamelogSize++] = entry;
9D0072F8  8F848010   LW A0, -32752(GP)
9D0072FC  8F8280F4   LW V0, -32524(GP)
9D007300  00401821   ADDU V1, V0, ZERO
9D007304  00031880   SLL V1, V1, 2
9D007308  00831821   ADDU V1, A0, V1
9D00730C  8FC40018   LW A0, 24(S8)
9D007310  AC640000   SW A0, 0(V1)
9D007314  24420001   ADDIU V0, V0, 1
9D007318  AF8280F4   SW V0, -32524(GP)
29:                          return;
9D00731C  0B401CD2   J 0x9D007348
9D007320  00000000   NOP
30:                      }
31:                  
32:                  #ifdef HEAP
33:                      gamelogCapacity += 2000;
34:                      gamelog = realloc(gamelog, gamelogCapacity);
35:                      if(!gamelog)
36:                      {
37:                          PANIC("failed to allocate memory for game log");
38:                      }
39:                      gamelog[gamelogSize++] = entry;
40:                  #else
41:                      PANIC("game log overflowed, no heap available");
9D007324  24040029   ADDIU A0, ZERO, 41
9D007328  3C029D01   LUI V0, -25343
9D00732C  2445B714   ADDIU A1, V0, -18668
9D007330  3C029D01   LUI V0, -25343
9D007334  2446B74C   ADDIU A2, V0, -18612
9D007338  3C029D01   LUI V0, -25343
9D00733C  2447B724   ADDIU A3, V0, -18652
9D007340  0F401AD6   JAL panic
9D007344  00000000   NOP
42:                  #endif
43:                  }
9D007348  03C0E821   ADDU SP, S8, ZERO
9D00734C  8FBF0014   LW RA, 20(SP)
9D007350  8FBE0010   LW S8, 16(SP)
9D007354  27BD0018   ADDIU SP, SP, 24
9D007358  03E00008   JR RA
9D00735C  00000000   NOP
44:                  
45:                  void clearLog()
46:                  {
9D007360  27BDFFF8   ADDIU SP, SP, -8
9D007364  AFBE0004   SW S8, 4(SP)
9D007368  03A0F021   ADDU S8, SP, ZERO
47:                      gamelogSize = 0;
9D00736C  AF8080F4   SW ZERO, -32524(GP)
48:                  }
9D007370  03C0E821   ADDU SP, S8, ZERO
9D007374  8FBE0004   LW S8, 4(SP)
9D007378  27BD0008   ADDIU SP, SP, 8
9D00737C  03E00008   JR RA
9D007380  00000000   NOP
49:                  
50:                  void logAttack(int aPlayer, int dPlayer, int aTerritory, int dTerritory)
51:                  {
9D007384  27BDFFE0   ADDIU SP, SP, -32
9D007388  AFBF001C   SW RA, 28(SP)
9D00738C  AFBE0018   SW S8, 24(SP)
9D007390  03A0F021   ADDU S8, SP, ZERO
9D007394  AFC40020   SW A0, 32(S8)
9D007398  AFC50024   SW A1, 36(S8)
9D00739C  AFC60028   SW A2, 40(S8)
9D0073A0  AFC7002C   SW A3, 44(S8)
52:                      LogEntry le = {
9D0073A4  8FC20020   LW V0, 32(S8)
9D0073A8  304200FF   ANDI V0, V0, 255
9D0073AC  30420007   ANDI V0, V0, 7
9D0073B0  304600FF   ANDI A2, V0, 255
9D0073B4  8FC20024   LW V0, 36(S8)
9D0073B8  304200FF   ANDI V0, V0, 255
9D0073BC  30420007   ANDI V0, V0, 7
9D0073C0  304500FF   ANDI A1, V0, 255
9D0073C4  8FC20028   LW V0, 40(S8)
9D0073C8  304200FF   ANDI V0, V0, 255
9D0073CC  3042003F   ANDI V0, V0, 63
9D0073D0  304400FF   ANDI A0, V0, 255
9D0073D4  8FC2002C   LW V0, 44(S8)
9D0073D8  304200FF   ANDI V0, V0, 255
9D0073DC  3042003F   ANDI V0, V0, 63
9D0073E0  304300FF   ANDI V1, V0, 255
9D0073E4  AFC00010   SW ZERO, 16(S8)
9D0073E8  24020001   ADDIU V0, ZERO, 1
9D0073EC  A3C20010   SB V0, 16(S8)
9D0073F0  8FC20010   LW V0, 16(S8)
9D0073F4  7CC25204   INS V0, A2, 8, 3
9D0073F8  AFC20010   SW V0, 16(S8)
9D0073FC  8FC20010   LW V0, 16(S8)
9D007400  7CA26AC4   INS V0, A1, 11, 3
9D007404  AFC20010   SW V0, 16(S8)
9D007408  8FC20010   LW V0, 16(S8)
9D00740C  7C829B84   INS V0, A0, 14, 6
9D007410  AFC20010   SW V0, 16(S8)
9D007414  8FC20010   LW V0, 16(S8)
9D007418  7C62CD04   INS V0, V1, 20, 6
9D00741C  AFC20010   SW V0, 16(S8)
53:                          .attack = {LOG_ATTACK, aPlayer, dPlayer, aTerritory, dTerritory}
54:                      };
55:                      addLogEntry(le);
9D007420  8FC40010   LW A0, 16(S8)
9D007424  0F401CB4   JAL addLogEntry
9D007428  00000000   NOP
56:                  }
9D00742C  03C0E821   ADDU SP, S8, ZERO
9D007430  8FBF001C   LW RA, 28(SP)
9D007434  8FBE0018   LW S8, 24(SP)
9D007438  27BD0020   ADDIU SP, SP, 32
9D00743C  03E00008   JR RA
9D007440  00000000   NOP
57:                  
58:                  void logBattle(int aPlayer, int dPlayer, int aD1, int aD2, int aD3, 
59:                          int dD1, int dD2)
60:                  {
9D007444  27BDFFE0   ADDIU SP, SP, -32
9D007448  AFBF001C   SW RA, 28(SP)
9D00744C  AFBE0018   SW S8, 24(SP)
9D007450  03A0F021   ADDU S8, SP, ZERO
9D007454  AFC40020   SW A0, 32(S8)
9D007458  AFC50024   SW A1, 36(S8)
9D00745C  AFC60028   SW A2, 40(S8)
9D007460  AFC7002C   SW A3, 44(S8)
61:                      LogEntry le = {
9D007464  8FC20020   LW V0, 32(S8)
9D007468  304200FF   ANDI V0, V0, 255
9D00746C  30420007   ANDI V0, V0, 7
9D007470  304900FF   ANDI T1, V0, 255
9D007474  8FC20024   LW V0, 36(S8)
9D007478  304200FF   ANDI V0, V0, 255
9D00747C  30420007   ANDI V0, V0, 7
9D007480  304800FF   ANDI T0, V0, 255
9D007484  8FC20028   LW V0, 40(S8)
9D007488  304200FF   ANDI V0, V0, 255
9D00748C  30420007   ANDI V0, V0, 7
9D007490  304700FF   ANDI A3, V0, 255
9D007494  8FC2002C   LW V0, 44(S8)
9D007498  304200FF   ANDI V0, V0, 255
9D00749C  30420007   ANDI V0, V0, 7
9D0074A0  304600FF   ANDI A2, V0, 255
9D0074A4  8FC20030   LW V0, 48(S8)
9D0074A8  304200FF   ANDI V0, V0, 255
9D0074AC  30420007   ANDI V0, V0, 7
9D0074B0  304500FF   ANDI A1, V0, 255
9D0074B4  8FC20034   LW V0, 52(S8)
9D0074B8  304200FF   ANDI V0, V0, 255
9D0074BC  30420007   ANDI V0, V0, 7
9D0074C0  304400FF   ANDI A0, V0, 255
9D0074C4  8FC20038   LW V0, 56(S8)
9D0074C8  304200FF   ANDI V0, V0, 255
9D0074CC  30420007   ANDI V0, V0, 7
9D0074D0  304300FF   ANDI V1, V0, 255
9D0074D4  AFC00010   SW ZERO, 16(S8)
9D0074D8  24020002   ADDIU V0, ZERO, 2
9D0074DC  A3C20010   SB V0, 16(S8)
9D0074E0  8FC20010   LW V0, 16(S8)
9D0074E4  7D225204   INS V0, T1, 8, 3
9D0074E8  AFC20010   SW V0, 16(S8)
9D0074EC  8FC20010   LW V0, 16(S8)
9D0074F0  7D026AC4   INS V0, T0, 11, 3
9D0074F4  AFC20010   SW V0, 16(S8)
9D0074F8  8FC20010   LW V0, 16(S8)
9D0074FC  7CE28384   INS V0, A3, 14, 3
9D007500  AFC20010   SW V0, 16(S8)
9D007504  8FC20010   LW V0, 16(S8)
9D007508  7CC29C44   INS V0, A2, 17, 3
9D00750C  AFC20010   SW V0, 16(S8)
9D007510  8FC20010   LW V0, 16(S8)
9D007514  7CA2B504   INS V0, A1, 20, 3
9D007518  AFC20010   SW V0, 16(S8)
9D00751C  8FC20010   LW V0, 16(S8)
9D007520  7C82CDC4   INS V0, A0, 23, 3
9D007524  AFC20010   SW V0, 16(S8)
9D007528  8FC20010   LW V0, 16(S8)
9D00752C  7C62E684   INS V0, V1, 26, 3
9D007530  AFC20010   SW V0, 16(S8)
62:                          .battle = {LOG_BATTLE, aPlayer, dPlayer, aD1, aD2, aD3, dD1, dD2}
63:                      };
64:                      addLogEntry(le);
9D007534  8FC40010   LW A0, 16(S8)
9D007538  0F401CB4   JAL addLogEntry
9D00753C  00000000   NOP
65:                  }
9D007540  03C0E821   ADDU SP, S8, ZERO
9D007544  8FBF001C   LW RA, 28(SP)
9D007548  8FBE0018   LW S8, 24(SP)
9D00754C  27BD0020   ADDIU SP, SP, 32
9D007550  03E00008   JR RA
9D007554  00000000   NOP
66:                  
67:                  void logConquer(int aPlayer, int territory, int troops)
68:                  {
9D007558  27BDFFE0   ADDIU SP, SP, -32
9D00755C  AFBF001C   SW RA, 28(SP)
9D007560  AFBE0018   SW S8, 24(SP)
9D007564  03A0F021   ADDU S8, SP, ZERO
9D007568  AFC40020   SW A0, 32(S8)
9D00756C  AFC50024   SW A1, 36(S8)
9D007570  AFC60028   SW A2, 40(S8)
69:                      LogEntry le = {
9D007574  8FC20020   LW V0, 32(S8)
9D007578  304200FF   ANDI V0, V0, 255
9D00757C  30420007   ANDI V0, V0, 7
9D007580  304500FF   ANDI A1, V0, 255
9D007584  8FC20024   LW V0, 36(S8)
9D007588  304200FF   ANDI V0, V0, 255
9D00758C  3042003F   ANDI V0, V0, 63
9D007590  304400FF   ANDI A0, V0, 255
9D007594  8FC20028   LW V0, 40(S8)
9D007598  3042FFFF   ANDI V0, V0, -1
9D00759C  30420FFF   ANDI V0, V0, 4095
9D0075A0  3043FFFF   ANDI V1, V0, -1
9D0075A4  AFC00010   SW ZERO, 16(S8)
9D0075A8  24020003   ADDIU V0, ZERO, 3
9D0075AC  A3C20010   SB V0, 16(S8)
9D0075B0  8FC20010   LW V0, 16(S8)
9D0075B4  7CA25204   INS V0, A1, 8, 3
9D0075B8  AFC20010   SW V0, 16(S8)
9D0075BC  8FC20010   LW V0, 16(S8)
9D0075C0  7C8282C4   INS V0, A0, 11, 6
9D0075C4  AFC20010   SW V0, 16(S8)
9D0075C8  8FC20010   LW V0, 16(S8)
9D0075CC  7C62E444   INS V0, V1, 17, 12
9D0075D0  AFC20010   SW V0, 16(S8)
70:                          .conquer = {LOG_CONQUER, aPlayer, territory, troops}
71:                      };
72:                      addLogEntry(le);
9D0075D4  8FC40010   LW A0, 16(S8)
9D0075D8  0F401CB4   JAL addLogEntry
9D0075DC  00000000   NOP
73:                  }
9D0075E0  03C0E821   ADDU SP, S8, ZERO
9D0075E4  8FBF001C   LW RA, 28(SP)
9D0075E8  8FBE0018   LW S8, 24(SP)
9D0075EC  27BD0020   ADDIU SP, SP, 32
9D0075F0  03E00008   JR RA
9D0075F4  00000000   NOP
74:                  void logMove(int player, int sTerritory, int dTerritory, int troops)
75:                  {
9D0075F8  27BDFFE0   ADDIU SP, SP, -32
9D0075FC  AFBF001C   SW RA, 28(SP)
9D007600  AFBE0018   SW S8, 24(SP)
9D007604  03A0F021   ADDU S8, SP, ZERO
9D007608  AFC40020   SW A0, 32(S8)
9D00760C  AFC50024   SW A1, 36(S8)
9D007610  AFC60028   SW A2, 40(S8)
9D007614  AFC7002C   SW A3, 44(S8)
76:                      LogEntry le = {
9D007618  8FC20020   LW V0, 32(S8)
9D00761C  304200FF   ANDI V0, V0, 255
9D007620  30420007   ANDI V0, V0, 7
9D007624  304600FF   ANDI A2, V0, 255
9D007628  8FC20024   LW V0, 36(S8)
9D00762C  304200FF   ANDI V0, V0, 255
9D007630  3042003F   ANDI V0, V0, 63
9D007634  304500FF   ANDI A1, V0, 255
9D007638  8FC20028   LW V0, 40(S8)
9D00763C  304200FF   ANDI V0, V0, 255
9D007640  3042003F   ANDI V0, V0, 63
9D007644  304400FF   ANDI A0, V0, 255
9D007648  8FC2002C   LW V0, 44(S8)
9D00764C  3042FFFF   ANDI V0, V0, -1
9D007650  304201FF   ANDI V0, V0, 511
9D007654  3043FFFF   ANDI V1, V0, -1
9D007658  AFC00010   SW ZERO, 16(S8)
9D00765C  24020004   ADDIU V0, ZERO, 4
9D007660  A3C20010   SB V0, 16(S8)
9D007664  8FC20010   LW V0, 16(S8)
9D007668  7CC25204   INS V0, A2, 8, 3
9D00766C  AFC20010   SW V0, 16(S8)
9D007670  8FC20010   LW V0, 16(S8)
9D007674  7CA282C4   INS V0, A1, 11, 6
9D007678  AFC20010   SW V0, 16(S8)
9D00767C  8FC20010   LW V0, 16(S8)
9D007680  7C82B444   INS V0, A0, 17, 6
9D007684  AFC20010   SW V0, 16(S8)
9D007688  8FC20010   LW V0, 16(S8)
9D00768C  7C62FDC4   INS V0, V1, 23, 9
9D007690  AFC20010   SW V0, 16(S8)
77:                          .move = {LOG_MOVE, player, sTerritory, dTerritory, troops}
78:                      };
79:                      addLogEntry(le);
9D007694  8FC40010   LW A0, 16(S8)
9D007698  0F401CB4   JAL addLogEntry
9D00769C  00000000   NOP
80:                  }
9D0076A0  03C0E821   ADDU SP, S8, ZERO
9D0076A4  8FBF001C   LW RA, 28(SP)
9D0076A8  8FBE0018   LW S8, 24(SP)
9D0076AC  27BD0020   ADDIU SP, SP, 32
9D0076B0  03E00008   JR RA
9D0076B4  00000000   NOP
81:                  void logCard(int player, CardType cardtype, int territory)
82:                  {
9D0076B8  27BDFFE0   ADDIU SP, SP, -32
9D0076BC  AFBF001C   SW RA, 28(SP)
9D0076C0  AFBE0018   SW S8, 24(SP)
9D0076C4  03A0F021   ADDU S8, SP, ZERO
9D0076C8  AFC40020   SW A0, 32(S8)
9D0076CC  AFC50024   SW A1, 36(S8)
9D0076D0  AFC60028   SW A2, 40(S8)
83:                      LogEntry le = {
9D0076D4  8FC20020   LW V0, 32(S8)
9D0076D8  304200FF   ANDI V0, V0, 255
9D0076DC  30420007   ANDI V0, V0, 7
9D0076E0  304500FF   ANDI A1, V0, 255
9D0076E4  8FC20024   LW V0, 36(S8)
9D0076E8  304200FF   ANDI V0, V0, 255
9D0076EC  30420003   ANDI V0, V0, 3
9D0076F0  304400FF   ANDI A0, V0, 255
9D0076F4  8FC20028   LW V0, 40(S8)
9D0076F8  7C021420   SEB V0, V0
9D0076FC  00021040   SLL V0, V0, 1
9D007700  7C021420   SEB V0, V0
9D007704  00021043   SRA V0, V0, 1
9D007708  7C021C20   SEB V1, V0
9D00770C  AFC00010   SW ZERO, 16(S8)
9D007710  24020005   ADDIU V0, ZERO, 5
9D007714  A3C20010   SB V0, 16(S8)
9D007718  8FC20010   LW V0, 16(S8)
9D00771C  7CA25204   INS V0, A1, 8, 3
9D007720  AFC20010   SW V0, 16(S8)
9D007724  8FC20010   LW V0, 16(S8)
9D007728  7C8262C4   INS V0, A0, 11, 2
9D00772C  AFC20010   SW V0, 16(S8)
9D007730  8FC20010   LW V0, 16(S8)
9D007734  7C629B44   INS V0, V1, 13, 7
9D007738  AFC20010   SW V0, 16(S8)
84:                          .cardgiven = {LOG_CARD_GIVEN, player, cardtype, territory}
85:                      };
86:                      addLogEntry(le);
9D00773C  8FC40010   LW A0, 16(S8)
9D007740  0F401CB4   JAL addLogEntry
9D007744  00000000   NOP
87:                  }
9D007748  03C0E821   ADDU SP, S8, ZERO
9D00774C  8FBF001C   LW RA, 28(SP)
9D007750  8FBE0018   LW S8, 24(SP)
9D007754  27BD0020   ADDIU SP, SP, 32
9D007758  03E00008   JR RA
9D00775C  00000000   NOP
88:                  void logExchange(int player, CardType type1, CardType type2, CardType type3, 
89:                          int troops)
90:                  {
9D007760  27BDFFE0   ADDIU SP, SP, -32
9D007764  AFBF001C   SW RA, 28(SP)
9D007768  AFBE0018   SW S8, 24(SP)
9D00776C  03A0F021   ADDU S8, SP, ZERO
9D007770  AFC40020   SW A0, 32(S8)
9D007774  AFC50024   SW A1, 36(S8)
9D007778  AFC60028   SW A2, 40(S8)
9D00777C  AFC7002C   SW A3, 44(S8)
91:                      LogEntry le = {
9D007780  8FC20020   LW V0, 32(S8)
9D007784  304200FF   ANDI V0, V0, 255
9D007788  30420007   ANDI V0, V0, 7
9D00778C  304700FF   ANDI A3, V0, 255
9D007790  8FC20024   LW V0, 36(S8)
9D007794  304200FF   ANDI V0, V0, 255
9D007798  30420003   ANDI V0, V0, 3
9D00779C  304600FF   ANDI A2, V0, 255
9D0077A0  8FC20028   LW V0, 40(S8)
9D0077A4  304200FF   ANDI V0, V0, 255
9D0077A8  30420003   ANDI V0, V0, 3
9D0077AC  304500FF   ANDI A1, V0, 255
9D0077B0  8FC2002C   LW V0, 44(S8)
9D0077B4  304200FF   ANDI V0, V0, 255
9D0077B8  30420003   ANDI V0, V0, 3
9D0077BC  304400FF   ANDI A0, V0, 255
9D0077C0  8FC20030   LW V0, 48(S8)
9D0077C4  3042FFFF   ANDI V0, V0, -1
9D0077C8  30420FFF   ANDI V0, V0, 4095
9D0077CC  3043FFFF   ANDI V1, V0, -1
9D0077D0  AFC00010   SW ZERO, 16(S8)
9D0077D4  24020006   ADDIU V0, ZERO, 6
9D0077D8  A3C20010   SB V0, 16(S8)
9D0077DC  8FC20010   LW V0, 16(S8)
9D0077E0  7CE25204   INS V0, A3, 8, 3
9D0077E4  AFC20010   SW V0, 16(S8)
9D0077E8  8FC20010   LW V0, 16(S8)
9D0077EC  7CC262C4   INS V0, A2, 11, 2
9D0077F0  AFC20010   SW V0, 16(S8)
9D0077F4  8FC20010   LW V0, 16(S8)
9D0077F8  7CA27344   INS V0, A1, 13, 2
9D0077FC  AFC20010   SW V0, 16(S8)
9D007800  8FC20010   LW V0, 16(S8)
9D007804  7C8283C4   INS V0, A0, 15, 2
9D007808  AFC20010   SW V0, 16(S8)
9D00780C  8FC20010   LW V0, 16(S8)
9D007810  7C62E444   INS V0, V1, 17, 12
9D007814  AFC20010   SW V0, 16(S8)
92:                          .exchange = {LOG_CARD_EXCHANGE, player, type1, type2, type3, troops}
93:                      };
94:                      addLogEntry(le);
9D007818  8FC40010   LW A0, 16(S8)
9D00781C  0F401CB4   JAL addLogEntry
9D007820  00000000   NOP
95:                  }
9D007824  03C0E821   ADDU SP, S8, ZERO
9D007828  8FBF001C   LW RA, 28(SP)
9D00782C  8FBE0018   LW S8, 24(SP)
9D007830  27BD0020   ADDIU SP, SP, 32
9D007834  03E00008   JR RA
9D007838  00000000   NOP
96:                  
97:                  
98:                  static int loggingPlayer = 0;
99:                  static int loggedTroops[NUM_TERRITORIES] = {0};
100:                 void writeReinforceLogs()
101:                 {
9D00783C  27BDFFE0   ADDIU SP, SP, -32
9D007840  AFBF001C   SW RA, 28(SP)
9D007844  AFBE0018   SW S8, 24(SP)
9D007848  03A0F021   ADDU S8, SP, ZERO
102:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D00784C  AFC00010   SW ZERO, 16(S8)
9D007850  0B401E42   J 0x9D007908
9D007854  00000000   NOP
9D0078FC  8FC20010   LW V0, 16(S8)
9D007900  24420001   ADDIU V0, V0, 1
9D007904  AFC20010   SW V0, 16(S8)
9D007908  8FC20010   LW V0, 16(S8)
9D00790C  28420002   SLTI V0, V0, 2
9D007910  1440FFD1   BNE V0, ZERO, 0x9D007858
9D007914  00000000   NOP
103:                     {
104:                         if(loggedTroops[i] != 0)
9D007858  8FC20010   LW V0, 16(S8)
9D00785C  00021880   SLL V1, V0, 2
9D007860  27828080   ADDIU V0, GP, -32640
9D007864  00621021   ADDU V0, V1, V0
9D007868  8C420000   LW V0, 0(V0)
9D00786C  10400023   BEQ V0, ZERO, 0x9D0078FC
9D007870  00000000   NOP
105:                         {
106:                             LogEntry le = {
9D007874  8F82807C   LW V0, -32644(GP)
9D007878  304200FF   ANDI V0, V0, 255
9D00787C  30420007   ANDI V0, V0, 7
9D007880  304500FF   ANDI A1, V0, 255
9D007884  8FC20010   LW V0, 16(S8)
9D007888  304200FF   ANDI V0, V0, 255
9D00788C  3042003F   ANDI V0, V0, 63
9D007890  304400FF   ANDI A0, V0, 255
9D0078A8  3042FFFF   ANDI V0, V0, -1
9D0078AC  30420FFF   ANDI V0, V0, 4095
9D0078B0  3043FFFF   ANDI V1, V0, -1
9D0078B4  AFC00014   SW ZERO, 20(S8)
9D0078B8  8FC20014   LW V0, 20(S8)
9D0078BC  7CA25204   INS V0, A1, 8, 3
9D0078C0  AFC20014   SW V0, 20(S8)
9D0078C4  8FC20014   LW V0, 20(S8)
9D0078C8  7C8282C4   INS V0, A0, 11, 6
9D0078CC  AFC20014   SW V0, 20(S8)
9D0078D0  8FC20014   LW V0, 20(S8)
9D0078D4  7C62E444   INS V0, V1, 17, 12
9D0078D8  AFC20014   SW V0, 20(S8)
107:                                 .reinforce = {LOG_REINFORCE, loggingPlayer, i, loggedTroops[i]}
9D007894  8FC20010   LW V0, 16(S8)
9D007898  00021880   SLL V1, V0, 2
9D00789C  27828080   ADDIU V0, GP, -32640
9D0078A0  00621021   ADDU V0, V1, V0
9D0078A4  8C420000   LW V0, 0(V0)
108:                             };
109:                             addLogEntry(le);
9D0078DC  8FC40014   LW A0, 20(S8)
9D0078E0  0F401CB4   JAL addLogEntry
9D0078E4  00000000   NOP
110:                             loggedTroops[i] = 0;
9D0078E8  8FC20010   LW V0, 16(S8)
9D0078EC  00021880   SLL V1, V0, 2
9D0078F0  27828080   ADDIU V0, GP, -32640
9D0078F4  00621021   ADDU V0, V1, V0
9D0078F8  AC400000   SW ZERO, 0(V0)
111:                         }
112:                     }
113:                 }
9D007918  03C0E821   ADDU SP, S8, ZERO
9D00791C  8FBF001C   LW RA, 28(SP)
9D007920  8FBE0018   LW S8, 24(SP)
9D007924  27BD0020   ADDIU SP, SP, 32
9D007928  03E00008   JR RA
9D00792C  00000000   NOP
114:                 
115:                 void logReinforce(int player, int territory, int troops)
116:                 {
9D007930  27BDFFE8   ADDIU SP, SP, -24
9D007934  AFBF0014   SW RA, 20(SP)
9D007938  AFBE0010   SW S8, 16(SP)
9D00793C  03A0F021   ADDU S8, SP, ZERO
9D007940  AFC40018   SW A0, 24(S8)
9D007944  AFC5001C   SW A1, 28(S8)
9D007948  AFC60020   SW A2, 32(S8)
117:                     if(territory == -1)
9D00794C  8FC3001C   LW V1, 28(S8)
9D007950  2402FFFF   ADDIU V0, ZERO, -1
9D007954  14620005   BNE V1, V0, 0x9D00796C
9D007958  00000000   NOP
118:                     {
119:                         writeReinforceLogs();
9D00795C  0F401E0F   JAL writeReinforceLogs
9D007960  00000000   NOP
120:                         return;
9D007964  0B401E79   J 0x9D0079E4
9D007968  00000000   NOP
121:                     }
122:                 
123:                     // Each log has only 12 bits for troop number, so in the rare case where
124:                     // some player is placing more than that, we need to write out immediately.
125:                     if(player != loggingPlayer || loggedTroops[territory] + troops >= 0xFFF)
9D00796C  8F82807C   LW V0, -32644(GP)
9D007970  8FC30018   LW V1, 24(S8)
9D007974  1462000B   BNE V1, V0, 0x9D0079A4
9D007978  00000000   NOP
9D00797C  8FC2001C   LW V0, 28(S8)
9D007980  00021880   SLL V1, V0, 2
9D007984  27828080   ADDIU V0, GP, -32640
9D007988  00621021   ADDU V0, V1, V0
9D00798C  8C430000   LW V1, 0(V0)
9D007990  8FC20020   LW V0, 32(S8)
9D007994  00621021   ADDU V0, V1, V0
9D007998  28420FFF   SLTI V0, V0, 4095
9D00799C  14400003   BNE V0, ZERO, 0x9D0079AC
9D0079A0  00000000   NOP
126:                         writeReinforceLogs();
9D0079A4  0F401E0F   JAL writeReinforceLogs
9D0079A8  00000000   NOP
127:                 
128:                     loggingPlayer = player;
9D0079AC  8FC20018   LW V0, 24(S8)
9D0079B0  AF82807C   SW V0, -32644(GP)
129:                     loggedTroops[territory] += troops;
9D0079B4  8FC2001C   LW V0, 28(S8)
9D0079B8  00021880   SLL V1, V0, 2
9D0079BC  27828080   ADDIU V0, GP, -32640
9D0079C0  00621021   ADDU V0, V1, V0
9D0079C4  8C430000   LW V1, 0(V0)
9D0079C8  8FC20020   LW V0, 32(S8)
9D0079CC  00621821   ADDU V1, V1, V0
9D0079D0  8FC2001C   LW V0, 28(S8)
9D0079D4  00022080   SLL A0, V0, 2
9D0079D8  27828080   ADDIU V0, GP, -32640
9D0079DC  00821021   ADDU V0, A0, V0
9D0079E0  AC430000   SW V1, 0(V0)
130:                 }
9D0079E4  03C0E821   ADDU SP, S8, ZERO
9D0079E8  8FBF0014   LW RA, 20(SP)
9D0079EC  8FBE0010   LW S8, 16(SP)
9D0079F0  27BD0018   ADDIU SP, SP, 24
9D0079F4  03E00008   JR RA
9D0079F8  00000000   NOP
---  /home/jacob/Documents/477/RISK/game/game.c  --------------------------------------------------------
1:                   // game.c:
2:                   // Main game loop, game initialization, and game flow.
3:                   //
4:                   // Part of R.I.S.K
5:                   // ECE 477 Group 2, Spring 2015
6:                   
7:                   #include "game.h"
8:                   #include "types.h"
9:                   #include "territory.h"
10:                  #include "gamedata.h"
11:                  #include "io.h"
12:                  #include "util.h"
13:                  #include "cards.h"
14:                  #include "log.h"
15:                  // Global variables
16:                  int numPlayers;
17:                  int randomTerritories;
18:                  int multipleDeploy;
19:                  // cardValueScheme is handled by cards.c
20:                  
21:                  int currentPlayer;
22:                  int source;
23:                  int destination;
24:                  int attackerDice[3];
25:                  int defenderDice[2];
26:                  
27:                  // Game variables that don't need to be exposed to the IO systems
28:                  static State state;
29:                  static int firstPlayer;
30:                  static int territoriesRemaining;
31:                  static int numTroops;
32:                  static int deployTroopsLeft[MAX_PLAYERS];
33:                  static int mustTrade;
34:                  static int needCard;
35:                  static int currentOption;
36:                  static int reinforceMenu;
37:                  static int confirm;
38:                  
39:                  void gameInput(Input input)
40:                  {
9D000250  27BDFFE8   ADDIU SP, SP, -24
9D000254  AFBF0014   SW RA, 20(SP)
9D000258  AFBE0010   SW S8, 16(SP)
9D00025C  03A0F021   ADDU S8, SP, ZERO
9D000260  AFC40018   SW A0, 24(S8)
41:                      switch(state)
9D000264  8F828050   LW V0, -32688(GP)
9D000268  2C43000C   SLTIU V1, V0, 12
9D00026C  10600050   BEQ V1, ZERO, 0x9D0003B0
9D000270  00000000   NOP
9D000274  00021880   SLL V1, V0, 2
9D000278  3C029D00   LUI V0, -25344
9D00027C  24420290   ADDIU V0, V0, 656
9D000280  00621021   ADDU V0, V1, V0
9D000284  8C420000   LW V0, 0(V0)
9D000288  00400008   JR V0
9D00028C  00000000   NOP
42:                      {
43:                          case INIT:
44:                              chooseOptions(input); break;
9D0002C0  8FC40018   LW A0, 24(S8)
9D0002C4  0F4003CD   JAL chooseOptions
9D0002C8  00000000   NOP
9D0002CC  0B4000F5   J 0x9D0003D4
9D0002D0  00000000   NOP
45:                          case SELECT:
46:                              selectTerritories(input); break;
9D0002D4  8FC40018   LW A0, 24(S8)
9D0002D8  0F400483   JAL 0x9D00120C
9D0002DC  00000000   NOP
9D0002E0  0B4000F5   J 0x9D0003D4
9D0002E4  00000000   NOP
47:                          case DEPLOY:
48:                              deployTroops(input); break;
9D0002E8  8FC40018   LW A0, 24(S8)
9D0002EC  0F4004E3   JAL deployTroops
9D0002F0  00000000   NOP
9D0002F4  0B4000F5   J 0x9D0003D4
9D0002F8  00000000   NOP
49:                          case REINFORCE:
50:                              reinforce(input); break;
9D0002FC  8FC40018   LW A0, 24(S8)
9D000300  0F40059F   JAL reinforce
9D000304  00000000   NOP
9D000308  0B4000F5   J 0x9D0003D4
9D00030C  00000000   NOP
51:                          case ATTACK1:
52:                              declareAttack(input); break;
9D000310  8FC40018   LW A0, 24(S8)
9D000314  0F400626   JAL declareAttack
9D000318  00000000   NOP
9D00031C  0B4000F5   J 0x9D0003D4
9D000320  00000000   NOP
53:                          case ATTACK2:
54:                              declareAttackTarget(input); break;
9D000324  8FC40018   LW A0, 24(S8)
9D000328  0F400676   JAL declareAttackTarget
9D00032C  00000000   NOP
9D000330  0B4000F5   J 0x9D0003D4
9D000334  00000000   NOP
55:                          case BATTLE:
56:                              resolveBattle(input); break;
9D000338  8FC40018   LW A0, 24(S8)
9D00033C  0F4006BE   JAL resolveBattle
9D000340  00000000   NOP
9D000344  0B4000F5   J 0x9D0003D4
9D000348  00000000   NOP
57:                          case CONQUER:
58:                              conquerTerritory(input); break;
9D00034C  8FC40018   LW A0, 24(S8)
9D000350  0F40074B   JAL conquerTerritory
9D000354  00000000   NOP
9D000358  0B4000F5   J 0x9D0003D4
9D00035C  00000000   NOP
59:                          case MOVE1:
60:                              moveTroops(input); break;
9D000360  8FC40018   LW A0, 24(S8)
9D000364  0F4007F8   JAL moveTroops
9D000368  00000000   NOP
9D00036C  0B4000F5   J 0x9D0003D4
9D000370  00000000   NOP
61:                          case MOVE2:
62:                              moveTroopsTarget(input); break;
9D000374  8FC40018   LW A0, 24(S8)
9D000378  0F400851   JAL moveTroopsTarget
9D00037C  00000000   NOP
9D000380  0B4000F5   J 0x9D0003D4
9D000384  00000000   NOP
63:                          case MOVE3:
64:                              moveTroopsNumber(input); break;
9D000388  8FC40018   LW A0, 24(S8)
9D00038C  0F40088A   JAL moveTroopsNumber
9D000390  00000000   NOP
9D000394  0B4000F5   J 0x9D0003D4
9D000398  00000000   NOP
65:                          case GAMEOVER:
66:                              gameOver(input); break;
9D00039C  8FC40018   LW A0, 24(S8)
9D0003A0  0F400953   JAL gameOver
9D0003A4  00000000   NOP
9D0003A8  0B4000F5   J 0x9D0003D4
9D0003AC  00000000   NOP
67:                          default:
68:                              PANIC("game in invalid state");
9D0003B0  24040044   ADDIU A0, ZERO, 68
9D0003B4  3C029D01   LUI V0, -25343
9D0003B8  24458F08   ADDIU A1, V0, -28920
9D0003BC  3C029D01   LUI V0, -25343
9D0003C0  2446930C   ADDIU A2, V0, -27892
9D0003C4  3C029D01   LUI V0, -25343
9D0003C8  24478F18   ADDIU A3, V0, -28904
9D0003CC  0F401AD6   JAL panic
9D0003D0  00000000   NOP
69:                      }
70:                      updateText();
9D0003D4  0F40012E   JAL updateText
9D0003D8  00000000   NOP
71:                  }
9D0003DC  03C0E821   ADDU SP, S8, ZERO
9D0003E0  8FBF0014   LW RA, 20(SP)
9D0003E4  8FBE0010   LW S8, 16(SP)
9D0003E8  27BD0018   ADDIU SP, SP, 24
9D0003EC  03E00008   JR RA
9D0003F0  00000000   NOP
72:                  
73:                  int cardInput(int card1, int card2, int card3)
74:                  {
9D0003F4  27BDFFE0   ADDIU SP, SP, -32
9D0003F8  AFBF001C   SW RA, 28(SP)
9D0003FC  AFBE0018   SW S8, 24(SP)
9D000400  03A0F021   ADDU S8, SP, ZERO
9D000404  AFC40020   SW A0, 32(S8)
9D000408  AFC50024   SW A1, 36(S8)
9D00040C  AFC60028   SW A2, 40(S8)
75:                      if(state != REINFORCE)
9D000410  8F838050   LW V1, -32688(GP)
9D000414  24020003   ADDIU V0, ZERO, 3
9D000418  10620004   BEQ V1, V0, 0x9D00042C
9D00041C  00000000   NOP
76:                          return 0;
9D000420  00001021   ADDU V0, ZERO, ZERO
9D000424  0B400128   J 0x9D0004A0
9D000428  00000000   NOP
77:                      int troops = exchangeCards(currentPlayer, card1, card2, card3);
9D00042C  8F8280D4   LW V0, -32556(GP)
9D000430  00402021   ADDU A0, V0, ZERO
9D000434  8FC50020   LW A1, 32(S8)
9D000438  8FC60024   LW A2, 36(S8)
9D00043C  8FC70028   LW A3, 40(S8)
9D000440  0F4014D6   JAL exchangeCards
9D000444  00000000   NOP
9D000448  AFC20010   SW V0, 16(S8)
78:                      numTroops += troops;
9D00044C  8F83805C   LW V1, -32676(GP)
9D000450  8FC20010   LW V0, 16(S8)
9D000454  00621021   ADDU V0, V1, V0
9D000458  AF82805C   SW V0, -32676(GP)
79:                      if(hands[currentPlayer].cards < 5)
9D00045C  8F8280D4   LW V0, -32556(GP)
9D000460  3C038000   LUI V1, -32768
9D000464  00021080   SLL V0, V0, 2
9D000468  00022080   SLL A0, V0, 2
9D00046C  00441021   ADDU V0, V0, A0
9D000470  00022080   SLL A0, V0, 2
9D000474  00441021   ADDU V0, V0, A0
9D000478  24630124   ADDIU V1, V1, 292
9D00047C  00431021   ADDU V0, V0, V1
9D000480  8C420060   LW V0, 96(V0)
9D000484  28420005   SLTI V0, V0, 5
9D000488  10400002   BEQ V0, ZERO, 0x9D000494
9D00048C  00000000   NOP
80:                          mustTrade = 0;
9D000490  AF808068   SW ZERO, -32664(GP)
81:                      updateText();
9D000494  0F40012E   JAL updateText
9D000498  00000000   NOP
82:                      return troops;
9D00049C  8FC20010   LW V0, 16(S8)
83:                  }
9D0004A0  03C0E821   ADDU SP, S8, ZERO
9D0004A4  8FBF001C   LW RA, 28(SP)
9D0004A8  8FBE0018   LW S8, 24(SP)
9D0004AC  27BD0020   ADDIU SP, SP, 32
9D0004B0  03E00008   JR RA
9D0004B4  00000000   NOP
84:                  
85:                  void updateText()
86:                  {
9D0004B8  27BDFFE8   ADDIU SP, SP, -24
9D0004BC  AFBF0014   SW RA, 20(SP)
9D0004C0  AFBE0010   SW S8, 16(SP)
9D0004C4  03A0F021   ADDU S8, SP, ZERO
87:                      switch(state)
9D0004C8  8F828050   LW V0, -32688(GP)
9D0004CC  2C43000C   SLTIU V1, V0, 12
9D0004D0  10600289   BEQ V1, ZERO, 0x9D000EF8
9D0004D4  00000000   NOP
9D0004D8  00021880   SLL V1, V0, 2
9D0004DC  3C029D00   LUI V0, -25344
9D0004E0  244204F4   ADDIU V0, V0, 1268
9D0004E4  00621021   ADDU V0, V1, V0
9D0004E8  8C420000   LW V0, 0(V0)
9D0004EC  00400008   JR V0
9D0004F0  00000000   NOP
88:                      {
89:                          case INIT:
90:                              if(currentOption == OPTION_NUM_PLAYERS)
9D000524  8F828070   LW V0, -32656(GP)
9D000528  1440000F   BNE V0, ZERO, 0x9D000568
9D00052C  00000000   NOP
91:                              {
92:                                  setTextDisplay(0, "Number of players");
9D000530  00002021   ADDU A0, ZERO, ZERO
9D000534  3C029D01   LUI V0, -25343
9D000538  24458F30   ADDIU A1, V0, -28880
9D00053C  0F402521   JAL setTextDisplay
9D000540  00000000   NOP
93:                                  setTextDisplay(1, "%d", numPlayers);
9D000544  8F8280DC   LW V0, -32548(GP)
9D000548  24040001   ADDIU A0, ZERO, 1
9D00054C  3C039D01   LUI V1, -25343
9D000550  24658F44   ADDIU A1, V1, -28860
9D000554  00403021   ADDU A2, V0, ZERO
9D000558  0F402521   JAL setTextDisplay
9D00055C  00000000   NOP
9D000560  0B4001AD   J 0x9D0006B4
9D000564  00000000   NOP
94:                              }
95:                              else if(currentOption == OPTION_CARD_SCHEME)
9D000568  8F838070   LW V1, -32656(GP)
9D00056C  24020001   ADDIU V0, ZERO, 1
9D000570  14620026   BNE V1, V0, 0x9D00060C
9D000574  00000000   NOP
96:                              {
97:                                  setTextDisplay(0, "Card exchange values");
9D000578  00002021   ADDU A0, ZERO, ZERO
9D00057C  3C029D01   LUI V0, -25343
9D000580  24458F48   ADDIU A1, V0, -28856
9D000584  0F402521   JAL setTextDisplay
9D000588  00000000   NOP
98:                                  if(cardValueScheme == INCREASING)
9D00058C  8F8280CC   LW V0, -32564(GP)
9D000590  14400008   BNE V0, ZERO, 0x9D0005B4
9D000594  00000000   NOP
99:                                      setTextDisplay(1, "Increasing");
9D000598  24040001   ADDIU A0, ZERO, 1
9D00059C  3C029D01   LUI V0, -25343
9D0005A0  24458F60   ADDIU A1, V0, -28832
9D0005A4  0F402521   JAL setTextDisplay
9D0005A8  00000000   NOP
9D0005AC  0B4001AD   J 0x9D0006B4
9D0005B0  00000000   NOP
100:                                 else if(cardValueScheme == INCREASING_ONE)
9D0005B4  8F8380CC   LW V1, -32564(GP)
9D0005B8  24020001   ADDIU V0, ZERO, 1
9D0005BC  14620008   BNE V1, V0, 0x9D0005E0
9D0005C0  00000000   NOP
101:                                     setTextDisplay(1, "Increasing by 1");
9D0005C4  24040001   ADDIU A0, ZERO, 1
9D0005C8  3C029D01   LUI V0, -25343
9D0005CC  24458F6C   ADDIU A1, V0, -28820
9D0005D0  0F402521   JAL setTextDisplay
9D0005D4  00000000   NOP
9D0005D8  0B4001AD   J 0x9D0006B4
9D0005DC  00000000   NOP
102:                                 else if(cardValueScheme == SET_VALUE)
9D0005E0  8F8380CC   LW V1, -32564(GP)
9D0005E4  24020002   ADDIU V0, ZERO, 2
9D0005E8  14620032   BNE V1, V0, 0x9D0006B4
9D0005EC  00000000   NOP
103:                                     setTextDisplay(1, "Set Value");
9D0005F0  24040001   ADDIU A0, ZERO, 1
9D0005F4  3C029D01   LUI V0, -25343
9D0005F8  24458F7C   ADDIU A1, V0, -28804
9D0005FC  0F402521   JAL setTextDisplay
9D000600  00000000   NOP
9D000604  0B4001AD   J 0x9D0006B4
9D000608  00000000   NOP
104:                             }
105:                             else if(currentOption == OPTION_RANDOM_TERRITORIES)
9D00060C  8F838070   LW V1, -32656(GP)
9D000610  24020002   ADDIU V0, ZERO, 2
9D000614  14620017   BNE V1, V0, 0x9D000674
9D000618  00000000   NOP
106:                             {
107:                                 setTextDisplay(0, "Territory allocation");
9D00061C  00002021   ADDU A0, ZERO, ZERO
9D000620  3C029D01   LUI V0, -25343
9D000624  24458F88   ADDIU A1, V0, -28792
9D000628  0F402521   JAL setTextDisplay
9D00062C  00000000   NOP
108:                                 if(randomTerritories)
9D000630  8F8280D8   LW V0, -32552(GP)
9D000634  10400008   BEQ V0, ZERO, 0x9D000658
9D000638  00000000   NOP
109:                                     setTextDisplay(1, "Random");
9D00063C  24040001   ADDIU A0, ZERO, 1
9D000640  3C029D01   LUI V0, -25343
9D000644  24458FA0   ADDIU A1, V0, -28768
9D000648  0F402521   JAL setTextDisplay
9D00064C  00000000   NOP
9D000650  0B4001AD   J 0x9D0006B4
9D000654  00000000   NOP
110:                                 else
111:                                     setTextDisplay(1, "Select");
9D000658  24040001   ADDIU A0, ZERO, 1
9D00065C  3C029D01   LUI V0, -25343
9D000660  24458FA8   ADDIU A1, V0, -28760
9D000664  0F402521   JAL setTextDisplay
9D000668  00000000   NOP
9D00066C  0B4001AD   J 0x9D0006B4
9D000670  00000000   NOP
112:                             }
113:                             else if(currentOption == OPTION_MULTIPLE_DEPLOY)
9D000674  8F838070   LW V1, -32656(GP)
9D000678  24020003   ADDIU V0, ZERO, 3
9D00067C  1462000D   BNE V1, V0, 0x9D0006B4
9D000680  00000000   NOP
114:                             {
115:                                 setTextDisplay(0, "Troop deployment");
9D000684  00002021   ADDU A0, ZERO, ZERO
9D000688  3C029D01   LUI V0, -25343
9D00068C  24458FB0   ADDIU A1, V0, -28752
9D000690  0F402521   JAL setTextDisplay
9D000694  00000000   NOP
116:                                 setTextDisplay(1, "%d at a time", multipleDeploy);
9D000698  8F8280F0   LW V0, -32528(GP)
9D00069C  24040001   ADDIU A0, ZERO, 1
9D0006A0  3C039D01   LUI V1, -25343
9D0006A4  24658FC4   ADDIU A1, V1, -28732
9D0006A8  00403021   ADDU A2, V0, ZERO
9D0006AC  0F402521   JAL setTextDisplay
9D0006B0  00000000   NOP
117:                             }
118:                             setTextDisplay(2, "A: Start game");
9D0006B4  24040002   ADDIU A0, ZERO, 2
9D0006B8  3C029D01   LUI V0, -25343
9D0006BC  24458FD4   ADDIU A1, V0, -28716
9D0006C0  0F402521   JAL setTextDisplay
9D0006C4  00000000   NOP
119:                             setTextDisplay(3, "B: Next option");
9D0006C8  24040003   ADDIU A0, ZERO, 3
9D0006CC  3C029D01   LUI V0, -25343
9D0006D0  24458FE4   ADDIU A1, V0, -28700
9D0006D4  0F402521   JAL setTextDisplay
9D0006D8  00000000   NOP
120:                             break;
9D0006DC  0B4003C7   J 0x9D000F1C
9D0006E0  00000000   NOP
121:                         case SELECT:
122:                             setTextDisplay(0, "Player %d:", currentPlayer);
9D0006E4  8F8280D4   LW V0, -32556(GP)
9D0006E8  00002021   ADDU A0, ZERO, ZERO
9D0006EC  3C039D01   LUI V1, -25343
9D0006F0  24658FF4   ADDIU A1, V1, -28684
9D0006F4  00403021   ADDU A2, V0, ZERO
9D0006F8  0F402521   JAL setTextDisplay
9D0006FC  00000000   NOP
123:                             setTextDisplay(1, "Pick territory");
9D000700  24040001   ADDIU A0, ZERO, 1
9D000704  3C029D01   LUI V0, -25343
9D000708  24459000   ADDIU A1, V0, -28672
9D00070C  0F402521   JAL setTextDisplay
9D000710  00000000   NOP
124:                             setTextDisplay(2, "A: Select");
9D000714  24040002   ADDIU A0, ZERO, 2
9D000718  3C029D01   LUI V0, -25343
9D00071C  24459010   ADDIU A1, V0, -28656
9D000720  0F402521   JAL setTextDisplay
9D000724  00000000   NOP
125:                             setTextDisplay(3, "%d available", territoriesRemaining);
9D000728  8F828058   LW V0, -32680(GP)
9D00072C  24040003   ADDIU A0, ZERO, 3
9D000730  3C039D01   LUI V1, -25343
9D000734  2465901C   ADDIU A1, V1, -28644
9D000738  00403021   ADDU A2, V0, ZERO
9D00073C  0F402521   JAL setTextDisplay
9D000740  00000000   NOP
126:                             break;
9D000744  0B4003C7   J 0x9D000F1C
9D000748  00000000   NOP
127:                         case DEPLOY:
128:                             if(!confirm)
9D00074C  8F828078   LW V0, -32648(GP)
9D000750  14400037   BNE V0, ZERO, 0x9D000830
9D000754  00000000   NOP
129:                             {
130:                                 setTextDisplay(0, "Player %d:", currentPlayer);
9D000758  8F8280D4   LW V0, -32556(GP)
9D00075C  00002021   ADDU A0, ZERO, ZERO
9D000760  3C039D01   LUI V1, -25343
9D000764  24658FF4   ADDIU A1, V1, -28684
9D000768  00403021   ADDU A2, V0, ZERO
9D00076C  0F402521   JAL setTextDisplay
9D000770  00000000   NOP
131:                                 if(multipleDeploy > 1)
9D000774  8F8280F0   LW V0, -32528(GP)
9D000778  28420002   SLTI V0, V0, 2
9D00077C  14400015   BNE V0, ZERO, 0x9D0007D4
9D000780  00000000   NOP
132:                                 {
133:                                     setTextDisplay(1, "Deploy %d troop%s",
9D000784  8F83805C   LW V1, -32676(GP)
9D00078C  24020001   ADDIU V0, ZERO, 1
9D000790  14820005   BNE A0, V0, 0x9D0007A8
9D000794  00000000   NOP
9D000798  3C029D01   LUI V0, -25343
9D00079C  2442902C   ADDIU V0, V0, -28628
9D0007A0  0B4001EC   J 0x9D0007B0
9D0007A4  00000000   NOP
9D0007A8  3C029D01   LUI V0, -25343
9D0007AC  24429030   ADDIU V0, V0, -28624
9D0007B0  24040001   ADDIU A0, ZERO, 1
9D0007B4  3C059D01   LUI A1, -25343
9D0007B8  24A59034   ADDIU A1, A1, -28620
9D0007BC  00603021   ADDU A2, V1, ZERO
9D0007C0  00403821   ADDU A3, V0, ZERO
9D0007C4  0F402521   JAL setTextDisplay
9D0007C8  00000000   NOP
9D0007CC  0B4001FA   J 0x9D0007E8
9D0007D0  00000000   NOP
134:                                             numTroops, numTroops == 1? "" : "s");
9D000788  8F84805C   LW A0, -32676(GP)
135:                                 }
136:                                 else
137:                                 {
138:                                     setTextDisplay(1, "Deploy troop");
9D0007D4  24040001   ADDIU A0, ZERO, 1
9D0007D8  3C029D01   LUI V0, -25343
9D0007DC  24459048   ADDIU A1, V0, -28600
9D0007E0  0F402521   JAL setTextDisplay
9D0007E4  00000000   NOP
139:                                 }
140:                                 setTextDisplay(2, "A: Place troop");
9D0007E8  24040002   ADDIU A0, ZERO, 2
9D0007EC  3C029D01   LUI V0, -25343
9D0007F0  24459058   ADDIU A1, V0, -28584
9D0007F4  0F402521   JAL setTextDisplay
9D0007F8  00000000   NOP
141:                                 setTextDisplay(3, "%d troops left", deployTroopsLeft[currentPlayer]);
9D0007FC  8F8280D4   LW V0, -32556(GP)
9D000800  00021880   SLL V1, V0, 2
9D000804  27828060   ADDIU V0, GP, -32672
9D000808  00621021   ADDU V0, V1, V0
9D00080C  8C420000   LW V0, 0(V0)
9D000810  24040003   ADDIU A0, ZERO, 3
9D000814  3C039D01   LUI V1, -25343
9D000818  24659068   ADDIU A1, V1, -28568
9D00081C  00403021   ADDU A2, V0, ZERO
9D000820  0F402521   JAL setTextDisplay
9D000824  00000000   NOP
142:                             }
143:                             else
144:                             {
145:                                 setTextDisplay(0, "All troops have been");
9D000830  00002021   ADDU A0, ZERO, ZERO
9D000834  3C029D01   LUI V0, -25343
9D000838  24459078   ADDIU A1, V0, -28552
9D00083C  0F402521   JAL setTextDisplay
9D000840  00000000   NOP
146:                                 setTextDisplay(1, "deployed.");
9D000844  24040001   ADDIU A0, ZERO, 1
9D000848  3C029D01   LUI V0, -25343
9D00084C  24459090   ADDIU A1, V0, -28528
9D000850  0F402521   JAL setTextDisplay
9D000854  00000000   NOP
147:                                 setTextDisplay(2, "");
9D000858  24040002   ADDIU A0, ZERO, 2
9D00085C  3C029D01   LUI V0, -25343
9D000860  2445902C   ADDIU A1, V0, -28628
9D000864  0F402521   JAL setTextDisplay
9D000868  00000000   NOP
148:                                 setTextDisplay(3, "B: Begin play");
9D00086C  24040003   ADDIU A0, ZERO, 3
9D000870  3C029D01   LUI V0, -25343
9D000874  2445909C   ADDIU A1, V0, -28516
9D000878  0F402521   JAL setTextDisplay
9D00087C  00000000   NOP
149:                             }
150:                             break;
9D000828  0B4003C7   J 0x9D000F1C
9D00082C  00000000   NOP
9D000880  0B4003C7   J 0x9D000F1C
9D000884  00000000   NOP
151:                         case REINFORCE:
152:                             if(reinforceMenu && !confirm)
9D000888  8F828074   LW V0, -32652(GP)
9D00088C  1040001A   BEQ V0, ZERO, 0x9D0008F8
9D000890  00000000   NOP
9D000894  8F828078   LW V0, -32648(GP)
9D000898  14400017   BNE V0, ZERO, 0x9D0008F8
9D00089C  00000000   NOP
153:                             {
154:                                 setTextDisplay(0, "Options:");
9D0008A0  00002021   ADDU A0, ZERO, ZERO
9D0008A4  3C029D01   LUI V0, -25343
9D0008A8  244590AC   ADDIU A1, V0, -28500
9D0008AC  0F402521   JAL setTextDisplay
9D0008B0  00000000   NOP
155:                                 setTextDisplay(1, "End game?");
9D0008B4  24040001   ADDIU A0, ZERO, 1
9D0008B8  3C029D01   LUI V0, -25343
9D0008BC  244590B8   ADDIU A1, V0, -28488
9D0008C0  0F402521   JAL setTextDisplay
9D0008C4  00000000   NOP
156:                                 setTextDisplay(2, "A: End game");
9D0008C8  24040002   ADDIU A0, ZERO, 2
9D0008CC  3C029D01   LUI V0, -25343
9D0008D0  244590C4   ADDIU A1, V0, -28476
9D0008D4  0F402521   JAL setTextDisplay
9D0008D8  00000000   NOP
157:                                 setTextDisplay(3, "B: Cancel");
9D0008DC  24040003   ADDIU A0, ZERO, 3
9D0008E0  3C029D01   LUI V0, -25343
9D0008E4  244590D0   ADDIU A1, V0, -28464
9D0008E8  0F402521   JAL setTextDisplay
9D0008EC  00000000   NOP
9D0008F0  0B400299   J 0x9D000A64
9D0008F4  00000000   NOP
158:                             }
159:                             else if(reinforceMenu && confirm)
9D0008F8  8F828074   LW V0, -32652(GP)
9D0008FC  1040001A   BEQ V0, ZERO, 0x9D000968
9D000900  00000000   NOP
9D000904  8F828078   LW V0, -32648(GP)
9D000908  10400017   BEQ V0, ZERO, 0x9D000968
9D00090C  00000000   NOP
160:                             {
161:                                 setTextDisplay(0, "Really end game?");
9D000910  00002021   ADDU A0, ZERO, ZERO
9D000914  3C029D01   LUI V0, -25343
9D000918  244590DC   ADDIU A1, V0, -28452
9D00091C  0F402521   JAL setTextDisplay
9D000920  00000000   NOP
162:                                 setTextDisplay(1, "");
9D000924  24040001   ADDIU A0, ZERO, 1
9D000928  3C029D01   LUI V0, -25343
9D00092C  2445902C   ADDIU A1, V0, -28628
9D000930  0F402521   JAL setTextDisplay
9D000934  00000000   NOP
163:                                 setTextDisplay(2, "A: Yes");
9D000938  24040002   ADDIU A0, ZERO, 2
9D00093C  3C029D01   LUI V0, -25343
9D000940  244590F0   ADDIU A1, V0, -28432
9D000944  0F402521   JAL setTextDisplay
9D000948  00000000   NOP
164:                                 setTextDisplay(3, "B: No");
9D00094C  24040003   ADDIU A0, ZERO, 3
9D000950  3C029D01   LUI V0, -25343
9D000954  244590F8   ADDIU A1, V0, -28424
9D000958  0F402521   JAL setTextDisplay
9D00095C  00000000   NOP
9D000960  0B400299   J 0x9D000A64
9D000964  00000000   NOP
165:                             }
166:                             else if(numTroops == 0 && mustTrade)
9D000968  8F82805C   LW V0, -32676(GP)
9D00096C  14400025   BNE V0, ZERO, 0x9D000A04
9D000970  00000000   NOP
9D000974  8F828068   LW V0, -32664(GP)
9D000978  10400022   BEQ V0, ZERO, 0x9D000A04
9D00097C  00000000   NOP
167:                             {
168:                                 setTextDisplay(0, "%d cards in hand", 
9D000980  8F8280D4   LW V0, -32556(GP)
9D000984  3C038000   LUI V1, -32768
9D000988  00021080   SLL V0, V0, 2
9D00098C  00022080   SLL A0, V0, 2
9D000990  00441021   ADDU V0, V0, A0
9D000994  00022080   SLL A0, V0, 2
9D000998  00441021   ADDU V0, V0, A0
9D00099C  24630124   ADDIU V1, V1, 292
9D0009A0  00431021   ADDU V0, V0, V1
9D0009A4  8C420060   LW V0, 96(V0)
9D0009A8  00002021   ADDU A0, ZERO, ZERO
9D0009AC  3C039D01   LUI V1, -25343
9D0009B0  24659100   ADDIU A1, V1, -28416
9D0009B4  00403021   ADDU A2, V0, ZERO
9D0009B8  0F402521   JAL setTextDisplay
9D0009BC  00000000   NOP
169:                                         hands[currentPlayer].cards);
170:                                 setTextDisplay(1, "You must exchange");
9D0009C0  24040001   ADDIU A0, ZERO, 1
9D0009C4  3C029D01   LUI V0, -25343
9D0009C8  24459114   ADDIU A1, V0, -28396
9D0009CC  0F402521   JAL setTextDisplay
9D0009D0  00000000   NOP
171:                                 setTextDisplay(2, "cards to continue");
9D0009D4  24040002   ADDIU A0, ZERO, 2
9D0009D8  3C029D01   LUI V0, -25343
9D0009DC  24459128   ADDIU A1, V0, -28376
9D0009E0  0F402521   JAL setTextDisplay
9D0009E4  00000000   NOP
172:                                 setTextDisplay(3, "B: Other options");            
9D0009E8  24040003   ADDIU A0, ZERO, 3
9D0009EC  3C029D01   LUI V0, -25343
9D0009F0  2445913C   ADDIU A1, V0, -28356
9D0009F4  0F402521   JAL setTextDisplay
9D0009F8  00000000   NOP
9D0009FC  0B400299   J 0x9D000A64
9D000A00  00000000   NOP
173:                             }
174:                             else
175:                             {
176:                                 setTextDisplay(0, "Reinforcements");
9D000A04  00002021   ADDU A0, ZERO, ZERO
9D000A08  3C029D01   LUI V0, -25343
9D000A0C  24459150   ADDIU A1, V0, -28336
9D000A10  0F402521   JAL setTextDisplay
9D000A14  00000000   NOP
177:                                 setTextDisplay(1, "%d troops left", numTroops);
9D000A18  8F82805C   LW V0, -32676(GP)
9D000A1C  24040001   ADDIU A0, ZERO, 1
9D000A20  3C039D01   LUI V1, -25343
9D000A24  24659068   ADDIU A1, V1, -28568
9D000A28  00403021   ADDU A2, V0, ZERO
9D000A2C  0F402521   JAL setTextDisplay
9D000A30  00000000   NOP
178:                                 setTextDisplay(2, "A: Place troop");
9D000A34  24040002   ADDIU A0, ZERO, 2
9D000A38  3C029D01   LUI V0, -25343
9D000A3C  24459058   ADDIU A1, V0, -28584
9D000A40  0F402521   JAL setTextDisplay
9D000A44  00000000   NOP
179:                                 setTextDisplay(3, "B: Other options");
9D000A48  24040003   ADDIU A0, ZERO, 3
9D000A4C  3C029D01   LUI V0, -25343
9D000A50  2445913C   ADDIU A1, V0, -28356
9D000A54  0F402521   JAL setTextDisplay
9D000A58  00000000   NOP
180:                             }
181:                             break;
9D000A5C  0B4003C7   J 0x9D000F1C
9D000A60  00000000   NOP
9D000A64  0B4003C7   J 0x9D000F1C
9D000A68  00000000   NOP
182:                         case ATTACK1:
183:                             if(!confirm)
9D000A6C  8F828078   LW V0, -32648(GP)
9D000A70  14400017   BNE V0, ZERO, 0x9D000AD0
9D000A74  00000000   NOP
184:                             {
185:                                 setTextDisplay(0, "Declare attacks");
9D000A78  00002021   ADDU A0, ZERO, ZERO
9D000A7C  3C029D01   LUI V0, -25343
9D000A80  24459160   ADDIU A1, V0, -28320
9D000A84  0F402521   JAL setTextDisplay
9D000A88  00000000   NOP
186:                                 setTextDisplay(1, "");
9D000A8C  24040001   ADDIU A0, ZERO, 1
9D000A90  3C029D01   LUI V0, -25343
9D000A94  2445902C   ADDIU A1, V0, -28628
9D000A98  0F402521   JAL setTextDisplay
9D000A9C  00000000   NOP
187:                                 setTextDisplay(2, "A: Choose attacker");
9D000AA0  24040002   ADDIU A0, ZERO, 2
9D000AA4  3C029D01   LUI V0, -25343
9D000AA8  24459170   ADDIU A1, V0, -28304
9D000AAC  0F402521   JAL setTextDisplay
9D000AB0  00000000   NOP
188:                                 setTextDisplay(3, "B: Stop attacking");
9D000AB4  24040003   ADDIU A0, ZERO, 3
9D000AB8  3C029D01   LUI V0, -25343
9D000ABC  24459184   ADDIU A1, V0, -28284
9D000AC0  0F402521   JAL setTextDisplay
9D000AC4  00000000   NOP
189:                             }
190:                             else
191:                             {
192:                                 setTextDisplay(0, "Really stop");
9D000AD0  00002021   ADDU A0, ZERO, ZERO
9D000AD4  3C029D01   LUI V0, -25343
9D000AD8  24459198   ADDIU A1, V0, -28264
9D000ADC  0F402521   JAL setTextDisplay
9D000AE0  00000000   NOP
193:                                 setTextDisplay(1, "attacking?");
9D000AE4  24040001   ADDIU A0, ZERO, 1
9D000AE8  3C029D01   LUI V0, -25343
9D000AEC  244591A4   ADDIU A1, V0, -28252
9D000AF0  0F402521   JAL setTextDisplay
9D000AF4  00000000   NOP
194:                                 setTextDisplay(2, "A: Yes");
9D000AF8  24040002   ADDIU A0, ZERO, 2
9D000AFC  3C029D01   LUI V0, -25343
9D000B00  244590F0   ADDIU A1, V0, -28432
9D000B04  0F402521   JAL setTextDisplay
9D000B08  00000000   NOP
195:                                 setTextDisplay(3, "B: No");
9D000B0C  24040003   ADDIU A0, ZERO, 3
9D000B10  3C029D01   LUI V0, -25343
9D000B14  244590F8   ADDIU A1, V0, -28424
9D000B18  0F402521   JAL setTextDisplay
9D000B1C  00000000   NOP
196:                             }
197:                             break;
9D000AC8  0B4003C7   J 0x9D000F1C
9D000ACC  00000000   NOP
9D000B20  0B4003C7   J 0x9D000F1C
9D000B24  00000000   NOP
198:                         case ATTACK2:
199:                             setTextDisplay(0, "Declare attacks");
9D000B28  00002021   ADDU A0, ZERO, ZERO
9D000B2C  3C029D01   LUI V0, -25343
9D000B30  24459160   ADDIU A1, V0, -28320
9D000B34  0F402521   JAL setTextDisplay
9D000B38  00000000   NOP
200:                             setTextDisplay(1, "(%s)", territories[source].name);
9D000B3C  8F8280EC   LW V0, -32532(GP)
9D000B40  3C048000   LUI A0, -32768
9D000B44  000210C0   SLL V0, V0, 3
9D000B48  00021880   SLL V1, V0, 2
9D000B4C  00621823   SUBU V1, V1, V0
9D000B50  248241B8   ADDIU V0, A0, 16824
9D000B54  00621021   ADDU V0, V1, V0
9D000B58  8C420000   LW V0, 0(V0)
9D000B5C  24040001   ADDIU A0, ZERO, 1
9D000B60  3C039D01   LUI V1, -25343
9D000B64  246591B0   ADDIU A1, V1, -28240
9D000B68  00403021   ADDU A2, V0, ZERO
9D000B6C  0F402521   JAL setTextDisplay
9D000B70  00000000   NOP
201:                             setTextDisplay(2, "A: Choose target");
9D000B74  24040002   ADDIU A0, ZERO, 2
9D000B78  3C029D01   LUI V0, -25343
9D000B7C  244591B8   ADDIU A1, V0, -28232
9D000B80  0F402521   JAL setTextDisplay
9D000B84  00000000   NOP
202:                             setTextDisplay(3, "B: Back");
9D000B88  24040003   ADDIU A0, ZERO, 3
9D000B8C  3C029D01   LUI V0, -25343
9D000B90  244591CC   ADDIU A1, V0, -28212
9D000B94  0F402521   JAL setTextDisplay
9D000B98  00000000   NOP
203:                             break;
9D000B9C  0B4003C7   J 0x9D000F1C
9D000BA0  00000000   NOP
204:                         case BATTLE:
205:                             setTextDisplay(0, "%s vs", territories[source].name);
9D000BA4  8F8280EC   LW V0, -32532(GP)
9D000BA8  3C048000   LUI A0, -32768
9D000BAC  000210C0   SLL V0, V0, 3
9D000BB0  00021880   SLL V1, V0, 2
9D000BB4  00621823   SUBU V1, V1, V0
9D000BB8  248241B8   ADDIU V0, A0, 16824
9D000BBC  00621021   ADDU V0, V1, V0
9D000BC0  8C420000   LW V0, 0(V0)
9D000BC4  00002021   ADDU A0, ZERO, ZERO
9D000BC8  3C039D01   LUI V1, -25343
9D000BCC  246591D4   ADDIU A1, V1, -28204
9D000BD0  00403021   ADDU A2, V0, ZERO
9D000BD4  0F402521   JAL setTextDisplay
9D000BD8  00000000   NOP
206:                             setTextDisplay(1, "%s!", territories[destination].name);
9D000BDC  8F8280E0   LW V0, -32544(GP)
9D000BE0  3C048000   LUI A0, -32768
9D000BE4  000210C0   SLL V0, V0, 3
9D000BE8  00021880   SLL V1, V0, 2
9D000BEC  00621823   SUBU V1, V1, V0
9D000BF0  248241B8   ADDIU V0, A0, 16824
9D000BF4  00621021   ADDU V0, V1, V0
9D000BF8  8C420000   LW V0, 0(V0)
9D000BFC  24040001   ADDIU A0, ZERO, 1
9D000C00  3C039D01   LUI V1, -25343
9D000C04  246591DC   ADDIU A1, V1, -28196
9D000C08  00403021   ADDU A2, V0, ZERO
9D000C0C  0F402521   JAL setTextDisplay
9D000C10  00000000   NOP
207:                             setTextDisplay(2, "A: Roll dice");
9D000C14  24040002   ADDIU A0, ZERO, 2
9D000C18  3C029D01   LUI V0, -25343
9D000C1C  244591E0   ADDIU A1, V0, -28192
9D000C20  0F402521   JAL setTextDisplay
9D000C24  00000000   NOP
208:                             setTextDisplay(3, "B: Retreat");
9D000C28  24040003   ADDIU A0, ZERO, 3
9D000C2C  3C029D01   LUI V0, -25343
9D000C30  244591F0   ADDIU A1, V0, -28176
9D000C34  0F402521   JAL setTextDisplay
9D000C38  00000000   NOP
209:                             break;
9D000C3C  0B4003C7   J 0x9D000F1C
9D000C40  00000000   NOP
210:                         case CONQUER:
211:                             setTextDisplay(0, "Move troops into");
9D000C44  00002021   ADDU A0, ZERO, ZERO
9D000C48  3C029D01   LUI V0, -25343
9D000C4C  244591FC   ADDIU A1, V0, -28164
9D000C50  0F402521   JAL setTextDisplay
9D000C54  00000000   NOP
212:                             setTextDisplay(1, "%s", territories[destination].name);
9D000C58  8F8280E0   LW V0, -32544(GP)
9D000C5C  3C048000   LUI A0, -32768
9D000C60  000210C0   SLL V0, V0, 3
9D000C64  00021880   SLL V1, V0, 2
9D000C68  00621823   SUBU V1, V1, V0
9D000C6C  248241B8   ADDIU V0, A0, 16824
9D000C70  00621021   ADDU V0, V1, V0
9D000C74  8C420000   LW V0, 0(V0)
9D000C78  24040001   ADDIU A0, ZERO, 1
9D000C7C  3C039D01   LUI V1, -25343
9D000C80  24659210   ADDIU A1, V1, -28144
9D000C84  00403021   ADDU A2, V0, ZERO
9D000C88  0F402521   JAL setTextDisplay
9D000C8C  00000000   NOP
213:                             setTextDisplay(2, "A: Confirm troops");
9D000C90  24040002   ADDIU A0, ZERO, 2
9D000C94  3C029D01   LUI V0, -25343
9D000C98  24459214   ADDIU A1, V0, -28140
9D000C9C  0F402521   JAL setTextDisplay
9D000CA0  00000000   NOP
214:                             setTextDisplay(3, "");
9D000CA4  24040003   ADDIU A0, ZERO, 3
9D000CA8  3C029D01   LUI V0, -25343
9D000CAC  2445902C   ADDIU A1, V0, -28628
9D000CB0  0F402521   JAL setTextDisplay
9D000CB4  00000000   NOP
215:                             break;
9D000CB8  0B4003C7   J 0x9D000F1C
9D000CBC  00000000   NOP
216:                         case MOVE1:
217:                             if(!confirm)
9D000CC0  8F828078   LW V0, -32648(GP)
9D000CC4  14400017   BNE V0, ZERO, 0x9D000D24
9D000CC8  00000000   NOP
218:                             {
219:                                 setTextDisplay(0, "Make free move");
9D000CCC  00002021   ADDU A0, ZERO, ZERO
9D000CD0  3C029D01   LUI V0, -25343
9D000CD4  24459228   ADDIU A1, V0, -28120
9D000CD8  0F402521   JAL setTextDisplay
9D000CDC  00000000   NOP
220:                                 setTextDisplay(1, "");
9D000CE0  24040001   ADDIU A0, ZERO, 1
9D000CE4  3C029D01   LUI V0, -25343
9D000CE8  2445902C   ADDIU A1, V0, -28628
9D000CEC  0F402521   JAL setTextDisplay
9D000CF0  00000000   NOP
221:                                 setTextDisplay(2, "A: Choose source");
9D000CF4  24040002   ADDIU A0, ZERO, 2
9D000CF8  3C029D01   LUI V0, -25343
9D000CFC  24459238   ADDIU A1, V0, -28104
9D000D00  0F402521   JAL setTextDisplay
9D000D04  00000000   NOP
222:                                 setTextDisplay(3, "B: End turn");
9D000D08  24040003   ADDIU A0, ZERO, 3
9D000D0C  3C029D01   LUI V0, -25343
9D000D10  2445924C   ADDIU A1, V0, -28084
9D000D14  0F402521   JAL setTextDisplay
9D000D18  00000000   NOP
223:                             }
224:                             else
225:                             {
226:                                 setTextDisplay(0, "Really end turn");
9D000D24  00002021   ADDU A0, ZERO, ZERO
9D000D28  3C029D01   LUI V0, -25343
9D000D2C  24459258   ADDIU A1, V0, -28072
9D000D30  0F402521   JAL setTextDisplay
9D000D34  00000000   NOP
227:                                 setTextDisplay(1, "without a move?");
9D000D38  24040001   ADDIU A0, ZERO, 1
9D000D3C  3C029D01   LUI V0, -25343
9D000D40  24459268   ADDIU A1, V0, -28056
9D000D44  0F402521   JAL setTextDisplay
9D000D48  00000000   NOP
228:                                 setTextDisplay(2, "A: Yes");
9D000D4C  24040002   ADDIU A0, ZERO, 2
9D000D50  3C029D01   LUI V0, -25343
9D000D54  244590F0   ADDIU A1, V0, -28432
9D000D58  0F402521   JAL setTextDisplay
9D000D5C  00000000   NOP
229:                                 setTextDisplay(3, "B: No");
9D000D60  24040003   ADDIU A0, ZERO, 3
9D000D64  3C029D01   LUI V0, -25343
9D000D68  244590F8   ADDIU A1, V0, -28424
9D000D6C  0F402521   JAL setTextDisplay
9D000D70  00000000   NOP
230:                             }
231:                             break;
9D000D1C  0B4003C7   J 0x9D000F1C
9D000D20  00000000   NOP
9D000D74  0B4003C7   J 0x9D000F1C
9D000D78  00000000   NOP
232:                         case MOVE2:
233:                             setTextDisplay(0, "Make free move");
9D000D7C  00002021   ADDU A0, ZERO, ZERO
9D000D80  3C029D01   LUI V0, -25343
9D000D84  24459228   ADDIU A1, V0, -28120
9D000D88  0F402521   JAL setTextDisplay
9D000D8C  00000000   NOP
234:                             setTextDisplay(1, "(%s)", territories[source].name);
9D000D90  8F8280EC   LW V0, -32532(GP)
9D000D94  3C048000   LUI A0, -32768
9D000D98  000210C0   SLL V0, V0, 3
9D000D9C  00021880   SLL V1, V0, 2
9D000DA0  00621823   SUBU V1, V1, V0
9D000DA4  248241B8   ADDIU V0, A0, 16824
9D000DA8  00621021   ADDU V0, V1, V0
9D000DAC  8C420000   LW V0, 0(V0)
9D000DB0  24040001   ADDIU A0, ZERO, 1
9D000DB4  3C039D01   LUI V1, -25343
9D000DB8  246591B0   ADDIU A1, V1, -28240
9D000DBC  00403021   ADDU A2, V0, ZERO
9D000DC0  0F402521   JAL setTextDisplay
9D000DC4  00000000   NOP
235:                             setTextDisplay(2, "A: Choose detination");
9D000DC8  24040002   ADDIU A0, ZERO, 2
9D000DCC  3C029D01   LUI V0, -25343
9D000DD0  24459278   ADDIU A1, V0, -28040
9D000DD4  0F402521   JAL setTextDisplay
9D000DD8  00000000   NOP
236:                             setTextDisplay(3, "B: Back");
9D000DDC  24040003   ADDIU A0, ZERO, 3
9D000DE0  3C029D01   LUI V0, -25343
9D000DE4  244591CC   ADDIU A1, V0, -28212
9D000DE8  0F402521   JAL setTextDisplay
9D000DEC  00000000   NOP
237:                             break;
9D000DF0  0B4003C7   J 0x9D000F1C
9D000DF4  00000000   NOP
238:                         case MOVE3:
239:                             setTextDisplay(0, "%s -->", territories[source].name);
9D000DF8  8F8280EC   LW V0, -32532(GP)
9D000DFC  3C048000   LUI A0, -32768
9D000E00  000210C0   SLL V0, V0, 3
9D000E04  00021880   SLL V1, V0, 2
9D000E08  00621823   SUBU V1, V1, V0
9D000E0C  248241B8   ADDIU V0, A0, 16824
9D000E10  00621021   ADDU V0, V1, V0
9D000E14  8C420000   LW V0, 0(V0)
9D000E18  00002021   ADDU A0, ZERO, ZERO
9D000E1C  3C039D01   LUI V1, -25343
9D000E20  24659290   ADDIU A1, V1, -28016
9D000E24  00403021   ADDU A2, V0, ZERO
9D000E28  0F402521   JAL setTextDisplay
9D000E2C  00000000   NOP
240:                             setTextDisplay(1, "%s", territories[destination].name);
9D000E30  8F8280E0   LW V0, -32544(GP)
9D000E34  3C048000   LUI A0, -32768
9D000E38  000210C0   SLL V0, V0, 3
9D000E3C  00021880   SLL V1, V0, 2
9D000E40  00621823   SUBU V1, V1, V0
9D000E44  248241B8   ADDIU V0, A0, 16824
9D000E48  00621021   ADDU V0, V1, V0
9D000E4C  8C420000   LW V0, 0(V0)
9D000E50  24040001   ADDIU A0, ZERO, 1
9D000E54  3C039D01   LUI V1, -25343
9D000E58  24659210   ADDIU A1, V1, -28144
9D000E5C  00403021   ADDU A2, V0, ZERO
9D000E60  0F402521   JAL setTextDisplay
9D000E64  00000000   NOP
241:                             setTextDisplay(2, "A: Confirm number");
9D000E68  24040002   ADDIU A0, ZERO, 2
9D000E6C  3C029D01   LUI V0, -25343
9D000E70  24459298   ADDIU A1, V0, -28008
9D000E74  0F402521   JAL setTextDisplay
9D000E78  00000000   NOP
242:                             setTextDisplay(3, "B: Back");
9D000E7C  24040003   ADDIU A0, ZERO, 3
9D000E80  3C029D01   LUI V0, -25343
9D000E84  244591CC   ADDIU A1, V0, -28212
9D000E88  0F402521   JAL setTextDisplay
9D000E8C  00000000   NOP
243:                             break;
9D000E90  0B4003C7   J 0x9D000F1C
9D000E94  00000000   NOP
244:                         case GAMEOVER:
245:                             setTextDisplay(0, "Player %d wins!", currentPlayer);
9D000E98  8F8280D4   LW V0, -32556(GP)
9D000E9C  00002021   ADDU A0, ZERO, ZERO
9D000EA0  3C039D01   LUI V1, -25343
9D000EA4  246592AC   ADDIU A1, V1, -27988
9D000EA8  00403021   ADDU A2, V0, ZERO
9D000EAC  0F402521   JAL setTextDisplay
9D000EB0  00000000   NOP
246:                             setTextDisplay(1, "   R   I   S   K    ");
9D000EB4  24040001   ADDIU A0, ZERO, 1
9D000EB8  3C029D01   LUI V0, -25343
9D000EBC  244592BC   ADDIU A1, V0, -27972
9D000EC0  0F402521   JAL setTextDisplay
9D000EC4  00000000   NOP
247:                             setTextDisplay(2, "  C H A M P I O N   ");
9D000EC8  24040002   ADDIU A0, ZERO, 2
9D000ECC  3C029D01   LUI V0, -25343
9D000ED0  244592D4   ADDIU A1, V0, -27948
9D000ED4  0F402521   JAL setTextDisplay
9D000ED8  00000000   NOP
248:                             setTextDisplay(3, "B: Start new game");
9D000EDC  24040003   ADDIU A0, ZERO, 3
9D000EE0  3C029D01   LUI V0, -25343
9D000EE4  244592EC   ADDIU A1, V0, -27924
9D000EE8  0F402521   JAL setTextDisplay
9D000EEC  00000000   NOP
249:                             break;
9D000EF0  0B4003C7   J 0x9D000F1C
9D000EF4  00000000   NOP
250:                         default:
251:                             PANIC("game in invalid state");
9D000EF8  240400FB   ADDIU A0, ZERO, 251
9D000EFC  3C029D01   LUI V0, -25343
9D000F00  24458F08   ADDIU A1, V0, -28920
9D000F04  3C029D01   LUI V0, -25343
9D000F08  24469300   ADDIU A2, V0, -27904
9D000F0C  3C029D01   LUI V0, -25343
9D000F10  24478F18   ADDIU A3, V0, -28904
9D000F14  0F401AD6   JAL panic
9D000F18  00000000   NOP
252:                     }
253:                 }
9D000F1C  03C0E821   ADDU SP, S8, ZERO
9D000F20  8FBF0014   LW RA, 20(SP)
9D000F24  8FBE0010   LW S8, 16(SP)
9D000F28  27BD0018   ADDIU SP, SP, 24
9D000F2C  03E00008   JR RA
9D000F30  00000000   NOP
254:                 
255:                 void chooseOptions(Input input)
256:                 {
9D000F34  27BDFFE8   ADDIU SP, SP, -24
9D000F38  AFBF0014   SW RA, 20(SP)
9D000F3C  AFBE0010   SW S8, 16(SP)
9D000F40  03A0F021   ADDU S8, SP, ZERO
9D000F44  AFC40018   SW A0, 24(S8)
257:                     if(input == ADVANCE)
9D000F48  8FC20018   LW V0, 24(S8)
9D000F4C  1440000E   BNE V0, ZERO, 0x9D000F88
9D000F50  00000000   NOP
258:                     {
259:                         changeState(SELECT);
9D000F54  24040001   ADDIU A0, ZERO, 1
9D000F58  0F4009A8   JAL changeState
9D000F5C  00000000   NOP
260:                         if(randomTerritories)
9D000F60  8F8280D8   LW V0, -32552(GP)
9D000F64  1040009C   BEQ V0, ZERO, 0x9D0011D8
9D000F68  00000000   NOP
261:                         {
262:                             allocateRandomTerritories();
9D000F6C  0F400B30   JAL allocateRandomTerritories
9D000F70  00000000   NOP
263:                             changeState(DEPLOY);
9D000F74  24040002   ADDIU A0, ZERO, 2
9D000F78  0F4009A8   JAL changeState
9D000F7C  00000000   NOP
264:                         }
265:                         return;
9D000F80  0B40047D   J 0x9D0011F4
9D000F84  00000000   NOP
9D0011D8  00000000   NOP
9D0011DC  0B40047D   J 0x9D0011F4
9D0011E0  00000000   NOP
266:                     }
267:                     if(currentOption == OPTION_NUM_PLAYERS)
9D000F88  8F828070   LW V0, -32656(GP)
9D000F8C  14400023   BNE V0, ZERO, 0x9D00101C
9D000F90  00000000   NOP
268:                     {
269:                         if(input == NEXT && numPlayers < MAX_PLAYERS)
9D000F94  8FC30018   LW V1, 24(S8)
9D000F98  24020002   ADDIU V0, ZERO, 2
9D000F9C  1462000A   BNE V1, V0, 0x9D000FC8
9D000FA0  00000000   NOP
9D000FA4  8F8280DC   LW V0, -32548(GP)
9D000FA8  28420002   SLTI V0, V0, 2
9D000FAC  10400006   BEQ V0, ZERO, 0x9D000FC8
9D000FB0  00000000   NOP
270:                             numPlayers += 1;
9D000FB4  8F8280DC   LW V0, -32548(GP)
9D000FB8  24420001   ADDIU V0, V0, 1
9D000FBC  AF8280DC   SW V0, -32548(GP)
9D000FC0  0B40047D   J 0x9D0011F4
9D000FC4  00000000   NOP
271:                         else if(input == PREVIOUS && numPlayers > 2)
9D000FC8  8FC30018   LW V1, 24(S8)
9D000FCC  24020003   ADDIU V0, ZERO, 3
9D000FD0  1462000A   BNE V1, V0, 0x9D000FFC
9D000FD4  00000000   NOP
9D000FD8  8F8280DC   LW V0, -32548(GP)
9D000FDC  28420003   SLTI V0, V0, 3
9D000FE0  14400006   BNE V0, ZERO, 0x9D000FFC
9D000FE4  00000000   NOP
272:                             numPlayers -= 1;
9D000FE8  8F8280DC   LW V0, -32548(GP)
9D000FEC  2442FFFF   ADDIU V0, V0, -1
9D000FF0  AF8280DC   SW V0, -32548(GP)
9D000FF4  0B40047D   J 0x9D0011F4
9D000FF8  00000000   NOP
273:                         else if(input == CANCEL)
9D000FFC  8FC30018   LW V1, 24(S8)
9D001000  24020001   ADDIU V0, ZERO, 1
9D001004  14620077   BNE V1, V0, 0x9D0011E4
9D001008  00000000   NOP
274:                             currentOption = OPTION_RANDOM_TERRITORIES;
9D00100C  24020002   ADDIU V0, ZERO, 2
9D001010  AF828070   SW V0, -32656(GP)
9D001014  0B40047D   J 0x9D0011F4
9D001018  00000000   NOP
9D0011E4  00000000   NOP
9D0011E8  0B40047D   J 0x9D0011F4
9D0011EC  00000000   NOP
275:                     }
276:                     else if(currentOption == OPTION_RANDOM_TERRITORIES)
9D00101C  8F838070   LW V1, -32656(GP)
9D001020  24020002   ADDIU V0, ZERO, 2
9D001024  14620016   BNE V1, V0, 0x9D001080
9D001028  00000000   NOP
277:                     {
278:                         if(input == NEXT || input == PREVIOUS)
9D00102C  8FC30018   LW V1, 24(S8)
9D001030  24020002   ADDIU V0, ZERO, 2
9D001034  10620005   BEQ V1, V0, 0x9D00104C
9D001038  00000000   NOP
9D00103C  8FC30018   LW V1, 24(S8)
9D001040  24020003   ADDIU V0, ZERO, 3
9D001044  14620006   BNE V1, V0, 0x9D001060
9D001048  00000000   NOP
279:                             randomTerritories = !randomTerritories;
9D00104C  8F8280D8   LW V0, -32552(GP)
9D001050  2C420001   SLTIU V0, V0, 1
9D001054  AF8280D8   SW V0, -32552(GP)
9D001058  0B40047D   J 0x9D0011F4
9D00105C  00000000   NOP
280:                         else if(input == CANCEL)
9D001060  8FC30018   LW V1, 24(S8)
9D001064  24020001   ADDIU V0, ZERO, 1
9D001068  14620061   BNE V1, V0, 0x9D0011F0
9D00106C  00000000   NOP
281:                             currentOption = OPTION_MULTIPLE_DEPLOY;
9D001070  24020003   ADDIU V0, ZERO, 3
9D001074  AF828070   SW V0, -32656(GP)
9D001078  0B40047D   J 0x9D0011F4
9D00107C  00000000   NOP
9D0011F0  00000000   NOP
282:                     }
283:                     else if(currentOption == OPTION_MULTIPLE_DEPLOY)
9D001080  8F838070   LW V1, -32656(GP)
9D001084  24020003   ADDIU V0, ZERO, 3
9D001088  14620029   BNE V1, V0, 0x9D001130
9D00108C  00000000   NOP
284:                     {
285:                         if(input == NEXT)
9D001090  8FC30018   LW V1, 24(S8)
9D001094  24020002   ADDIU V0, ZERO, 2
9D001098  1462000D   BNE V1, V0, 0x9D0010D0
9D00109C  00000000   NOP
286:                             multipleDeploy = (multipleDeploy == 5? 1 : multipleDeploy + 2);
9D0010A0  8F8380F0   LW V1, -32528(GP)
9D0010A4  24020005   ADDIU V0, ZERO, 5
9D0010A8  10620005   BEQ V1, V0, 0x9D0010C0
9D0010AC  00000000   NOP
9D0010B0  8F8280F0   LW V0, -32528(GP)
9D0010B4  24420002   ADDIU V0, V0, 2
9D0010B8  0B400431   J 0x9D0010C4
9D0010BC  00000000   NOP
9D0010C0  24020001   ADDIU V0, ZERO, 1
9D0010C4  AF8280F0   SW V0, -32528(GP)
9D0010C8  0B40047D   J 0x9D0011F4
9D0010CC  00000000   NOP
287:                         else if(input == PREVIOUS)
9D0010D0  8FC30018   LW V1, 24(S8)
9D0010D4  24020003   ADDIU V0, ZERO, 3
9D0010D8  1462000D   BNE V1, V0, 0x9D001110
9D0010DC  00000000   NOP
288:                             multipleDeploy = (multipleDeploy == 1? 5 : multipleDeploy - 2);
9D0010E0  8F8380F0   LW V1, -32528(GP)
9D0010E4  24020001   ADDIU V0, ZERO, 1
9D0010E8  10620005   BEQ V1, V0, 0x9D001100
9D0010EC  00000000   NOP
9D0010F0  8F8280F0   LW V0, -32528(GP)
9D0010F4  2442FFFE   ADDIU V0, V0, -2
9D0010F8  0B400441   J 0x9D001104
9D0010FC  00000000   NOP
9D001100  24020005   ADDIU V0, ZERO, 5
9D001104  AF8280F0   SW V0, -32528(GP)
9D001108  0B40047D   J 0x9D0011F4
9D00110C  00000000   NOP
289:                         else if(input == CANCEL)
9D001110  8FC30018   LW V1, 24(S8)
9D001114  24020001   ADDIU V0, ZERO, 1
9D001118  14620036   BNE V1, V0, 0x9D0011F4
9D00111C  00000000   NOP
290:                             currentOption = OPTION_CARD_SCHEME;
9D001120  24020001   ADDIU V0, ZERO, 1
9D001124  AF828070   SW V0, -32656(GP)
9D001128  0B40047D   J 0x9D0011F4
9D00112C  00000000   NOP
291:                     }
292:                     else if(currentOption == OPTION_CARD_SCHEME)
9D001130  8F838070   LW V1, -32656(GP)
9D001134  24020001   ADDIU V0, ZERO, 1
9D001138  1462002E   BNE V1, V0, 0x9D0011F4
9D00113C  00000000   NOP
293:                     {
294:                         if(input == NEXT)
9D001140  8FC30018   LW V1, 24(S8)
9D001144  24020002   ADDIU V0, ZERO, 2
9D001148  1462000D   BNE V1, V0, 0x9D001180
9D00114C  00000000   NOP
295:                             cardValueScheme = (cardValueScheme == 2? 0 : cardValueScheme + 1);
9D001150  8F8380CC   LW V1, -32564(GP)
9D001154  24020002   ADDIU V0, ZERO, 2
9D001158  10620005   BEQ V1, V0, 0x9D001170
9D00115C  00000000   NOP
9D001160  8F8280CC   LW V0, -32564(GP)
9D001164  24420001   ADDIU V0, V0, 1
9D001168  0B40045D   J 0x9D001174
9D00116C  00000000   NOP
9D001170  00001021   ADDU V0, ZERO, ZERO
9D001174  AF8280CC   SW V0, -32564(GP)
9D001178  0B40047D   J 0x9D0011F4
9D00117C  00000000   NOP
296:                         else if(input == PREVIOUS)
9D001180  8FC30018   LW V1, 24(S8)
9D001184  24020003   ADDIU V0, ZERO, 3
9D001188  1462000C   BNE V1, V0, 0x9D0011BC
9D00118C  00000000   NOP
297:                             cardValueScheme = (cardValueScheme == 0? 2 : cardValueScheme - 1);
9D001190  8F8280CC   LW V0, -32564(GP)
9D001194  10400005   BEQ V0, ZERO, 0x9D0011AC
9D001198  00000000   NOP
9D00119C  8F8280CC   LW V0, -32564(GP)
9D0011A0  2442FFFF   ADDIU V0, V0, -1
9D0011A4  0B40046C   J 0x9D0011B0
9D0011A8  00000000   NOP
9D0011AC  24020002   ADDIU V0, ZERO, 2
9D0011B0  AF8280CC   SW V0, -32564(GP)
9D0011B4  0B40047D   J 0x9D0011F4
9D0011B8  00000000   NOP
298:                         else if(input == CANCEL)
9D0011BC  8FC30018   LW V1, 24(S8)
9D0011C0  24020001   ADDIU V0, ZERO, 1
9D0011C4  1462000B   BNE V1, V0, 0x9D0011F4
9D0011C8  00000000   NOP
299:                             currentOption = OPTION_NUM_PLAYERS;
9D0011CC  AF808070   SW ZERO, -32656(GP)
9D0011D0  0B40047D   J 0x9D0011F4
9D0011D4  00000000   NOP
300:                     }
301:                 }
9D0011F4  03C0E821   ADDU SP, S8, ZERO
9D0011F8  8FBF0014   LW RA, 20(SP)
9D0011FC  8FBE0010   LW S8, 16(SP)
9D001200  27BD0018   ADDIU SP, SP, 24
9D001204  03E00008   JR RA
9D001208  00000000   NOP
302:                 
303:                 void selectTerritories(Input input)
304:                 {
9D00120C  27BDFFE8   ADDIU SP, SP, -24
9D001210  AFBF0014   SW RA, 20(SP)
9D001214  AFBE0010   SW S8, 16(SP)
9D001218  03A0F021   ADDU S8, SP, ZERO
9D00121C  AFC40018   SW A0, 24(S8)
305:                     if(input == NEXT)
9D001220  8FC30018   LW V1, 24(S8)
9D001224  24020002   ADDIU V0, ZERO, 2
9D001228  14620009   BNE V1, V0, 0x9D001250
9D00122C  00000000   NOP
306:                         moveSelection(0, 1, predUnowned);
9D001230  00002021   ADDU A0, ZERO, ZERO
9D001234  24050001   ADDIU A1, ZERO, 1
9D001238  3C029D00   LUI V0, -25344
9D00123C  24466430   ADDIU A2, V0, 25648
9D001240  0F400965   JAL moveSelection
9D001244  00000000   NOP
9D001248  0B4004DD   J 0x9D001374
9D00124C  00000000   NOP
307:                     else if(input == PREVIOUS)
9D001250  8FC30018   LW V1, 24(S8)
9D001254  24020003   ADDIU V0, ZERO, 3
9D001258  14620009   BNE V1, V0, 0x9D001280
9D00125C  00000000   NOP
308:                         moveSelection(0, -1, predUnowned);
9D001260  00002021   ADDU A0, ZERO, ZERO
9D001264  2405FFFF   ADDIU A1, ZERO, -1
9D001268  3C029D00   LUI V0, -25344
9D00126C  24466430   ADDIU A2, V0, 25648
9D001270  0F400965   JAL moveSelection
9D001274  00000000   NOP
9D001278  0B4004DD   J 0x9D001374
9D00127C  00000000   NOP
309:                     else if(input == ADVANCE)
9D001280  8FC20018   LW V0, 24(S8)
9D001284  1440003B   BNE V0, ZERO, 0x9D001374
9D001288  00000000   NOP
310:                     {
311:                         if(destination == -1)
9D00128C  8F8380E0   LW V1, -32544(GP)
9D001290  2402FFFF   ADDIU V0, ZERO, -1
9D001294  10620036   BEQ V1, V0, 0x9D001370
9D001298  00000000   NOP
312:                             return;
9D001370  00000000   NOP
313:                 
314:                         territories[destination].owner = currentPlayer;
9D00129C  8F8280E0   LW V0, -32544(GP)
9D0012A0  8F8480D4   LW A0, -32556(GP)
9D0012A4  3C058000   LUI A1, -32768
9D0012A8  000210C0   SLL V0, V0, 3
9D0012AC  00021880   SLL V1, V0, 2
9D0012B0  00621823   SUBU V1, V1, V0
9D0012B4  24A241B8   ADDIU V0, A1, 16824
9D0012B8  00621021   ADDU V0, V1, V0
9D0012BC  AC440010   SW A0, 16(V0)
315:                         territories[destination].troops = 1;
9D0012C0  8F8280E0   LW V0, -32544(GP)
9D0012C4  3C038000   LUI V1, -32768
9D0012C8  246341B8   ADDIU V1, V1, 16824
9D0012CC  000210C0   SLL V0, V0, 3
9D0012D0  00022080   SLL A0, V0, 2
9D0012D4  00821023   SUBU V0, A0, V0
9D0012D8  00621021   ADDU V0, V1, V0
9D0012DC  24030001   ADDIU V1, ZERO, 1
9D0012E0  AC430014   SW V1, 20(V0)
316:                         destination = -1;
9D0012E4  2402FFFF   ADDIU V0, ZERO, -1
9D0012E8  AF8280E0   SW V0, -32544(GP)
317:                         deployTroopsLeft[currentPlayer] -= 1;
9D0012EC  8F8280D4   LW V0, -32556(GP)
9D0012F0  8F8380D4   LW V1, -32556(GP)
9D0012F4  00032080   SLL A0, V1, 2
9D0012F8  27838060   ADDIU V1, GP, -32672
9D0012FC  00831821   ADDU V1, A0, V1
9D001300  8C630000   LW V1, 0(V1)
9D001304  2463FFFF   ADDIU V1, V1, -1
9D001308  00022080   SLL A0, V0, 2
9D00130C  27828060   ADDIU V0, GP, -32672
9D001310  00821021   ADDU V0, A0, V0
9D001314  AC430000   SW V1, 0(V0)
318:                 
319:                         currentPlayer += 1;
9D001318  8F8280D4   LW V0, -32556(GP)
9D00131C  24420001   ADDIU V0, V0, 1
9D001320  AF8280D4   SW V0, -32556(GP)
320:                         if(currentPlayer == numPlayers)
9D001324  8F8380D4   LW V1, -32556(GP)
9D001328  8F8280DC   LW V0, -32548(GP)
9D00132C  14620002   BNE V1, V0, 0x9D001338
9D001330  00000000   NOP
321:                             currentPlayer = 0;
9D001334  AF8080D4   SW ZERO, -32556(GP)
322:                 
323:                         territoriesRemaining -= 1;
9D001338  8F828058   LW V0, -32680(GP)
9D00133C  2442FFFF   ADDIU V0, V0, -1
9D001340  AF828058   SW V0, -32680(GP)
324:                 
325:                         // Changing the state here after random allocation would cause
326:                         // recursion, so the function for the INIT state handles the state
327:                         // change instead right after the random deployment. 
328:                         if(territoriesRemaining == 0 && !randomTerritories)
9D001344  8F828058   LW V0, -32680(GP)
9D001348  1440000A   BNE V0, ZERO, 0x9D001374
9D00134C  00000000   NOP
9D001350  8F8280D8   LW V0, -32552(GP)
9D001354  14400007   BNE V0, ZERO, 0x9D001374
9D001358  00000000   NOP
329:                             changeState(DEPLOY);
9D00135C  24040002   ADDIU A0, ZERO, 2
9D001360  0F4009A8   JAL changeState
9D001364  00000000   NOP
9D001368  0B4004DD   J 0x9D001374
9D00136C  00000000   NOP
330:                     }
331:                 }
9D001374  03C0E821   ADDU SP, S8, ZERO
9D001378  8FBF0014   LW RA, 20(SP)
9D00137C  8FBE0010   LW S8, 16(SP)
9D001380  27BD0018   ADDIU SP, SP, 24
9D001384  03E00008   JR RA
9D001388  00000000   NOP
332:                 
333:                 void deployTroops(Input input)
334:                 {
9D00138C  27BDFFE0   ADDIU SP, SP, -32
9D001390  AFBF001C   SW RA, 28(SP)
9D001394  AFBE0018   SW S8, 24(SP)
9D001398  03A0F021   ADDU S8, SP, ZERO
9D00139C  AFC40020   SW A0, 32(S8)
335:                     if(input == NEXT && !confirm)
9D0013A0  8FC30020   LW V1, 32(S8)
9D0013A4  24020002   ADDIU V0, ZERO, 2
9D0013A8  1462000C   BNE V1, V0, 0x9D0013DC
9D0013AC  00000000   NOP
9D0013B0  8F828078   LW V0, -32648(GP)
9D0013B4  14400009   BNE V0, ZERO, 0x9D0013DC
9D0013B8  00000000   NOP
336:                         moveSelection(0, 1, predOwnedCurrent);
9D0013BC  00002021   ADDU A0, ZERO, ZERO
9D0013C0  24050001   ADDIU A1, ZERO, 1
9D0013C4  3C029D00   LUI V0, -25344
9D0013C8  2446647C   ADDIU A2, V0, 25724
9D0013CC  0F400965   JAL moveSelection
9D0013D0  00000000   NOP
9D0013D4  0B400599   J 0x9D001664
9D0013D8  00000000   NOP
337:                     else if(input == PREVIOUS && !confirm)
9D0013DC  8FC30020   LW V1, 32(S8)
9D0013E0  24020003   ADDIU V0, ZERO, 3
9D0013E4  1462000C   BNE V1, V0, 0x9D001418
9D0013E8  00000000   NOP
9D0013EC  8F828078   LW V0, -32648(GP)
9D0013F0  14400009   BNE V0, ZERO, 0x9D001418
9D0013F4  00000000   NOP
338:                         moveSelection(0, -1, predOwnedCurrent);
9D0013F8  00002021   ADDU A0, ZERO, ZERO
9D0013FC  2405FFFF   ADDIU A1, ZERO, -1
9D001400  3C029D00   LUI V0, -25344
9D001404  2446647C   ADDIU A2, V0, 25724
9D001408  0F400965   JAL moveSelection
9D00140C  00000000   NOP
9D001410  0B400599   J 0x9D001664
9D001414  00000000   NOP
339:                     else if(input == ADVANCE)
9D001418  8FC20020   LW V0, 32(S8)
9D00141C  14400060   BNE V0, ZERO, 0x9D0015A0
9D001420  00000000   NOP
340:                     {
341:                         if(confirm)
9D001424  8F828078   LW V0, -32648(GP)
9D001428  1440008A   BNE V0, ZERO, 0x9D001654
9D00142C  00000000   NOP
342:                             return;
9D001654  00000000   NOP
9D001658  0B400599   J 0x9D001664
9D00165C  00000000   NOP
343:                         if(destination == -1)
9D001430  8F8380E0   LW V1, -32544(GP)
9D001434  2402FFFF   ADDIU V0, ZERO, -1
9D001438  10620089   BEQ V1, V0, 0x9D001660
9D00143C  00000000   NOP
344:                             return;
9D001660  00000000   NOP
345:                 
346:                         territories[destination].troops += 1;
9D001440  8F8580E0   LW A1, -32544(GP)
9D001444  8F8280E0   LW V0, -32544(GP)
9D001448  3C038000   LUI V1, -32768
9D00144C  246341B8   ADDIU V1, V1, 16824
9D001450  000210C0   SLL V0, V0, 3
9D001454  00022080   SLL A0, V0, 2
9D001458  00821023   SUBU V0, A0, V0
9D00145C  00621021   ADDU V0, V1, V0
9D001460  8C420014   LW V0, 20(V0)
9D001464  24430001   ADDIU V1, V0, 1
9D001468  3C028000   LUI V0, -32768
9D00146C  244441B8   ADDIU A0, V0, 16824
9D001470  00A01021   ADDU V0, A1, ZERO
9D001474  000210C0   SLL V0, V0, 3
9D001478  00022880   SLL A1, V0, 2
9D00147C  00A21023   SUBU V0, A1, V0
9D001480  00821021   ADDU V0, A0, V0
9D001484  AC430014   SW V1, 20(V0)
347:                         deployTroopsLeft[currentPlayer] -= 1;
9D001488  8F8280D4   LW V0, -32556(GP)
9D00148C  8F8380D4   LW V1, -32556(GP)
9D001490  00032080   SLL A0, V1, 2
9D001494  27838060   ADDIU V1, GP, -32672
9D001498  00831821   ADDU V1, A0, V1
9D00149C  8C630000   LW V1, 0(V1)
9D0014A0  2463FFFF   ADDIU V1, V1, -1
9D0014A4  00022080   SLL A0, V0, 2
9D0014A8  27828060   ADDIU V0, GP, -32672
9D0014AC  00821021   ADDU V0, A0, V0
9D0014B0  AC430000   SW V1, 0(V0)
348:                         numTroops -= 1;
9D0014B4  8F82805C   LW V0, -32676(GP)
9D0014B8  2442FFFF   ADDIU V0, V0, -1
9D0014BC  AF82805C   SW V0, -32676(GP)
349:                 
350:                         if(numTroops == 0)
9D0014C0  8F82805C   LW V0, -32676(GP)
9D0014C4  14400067   BNE V0, ZERO, 0x9D001664
9D0014C8  00000000   NOP
351:                         {
352:                             destination = -1;
9D0014CC  2402FFFF   ADDIU V0, ZERO, -1
9D0014D0  AF8280E0   SW V0, -32544(GP)
353:                 
354:                             for(int i = 0; i < numPlayers; i++)
9D0014D4  AFC00010   SW ZERO, 16(S8)
9D0014D8  0B40054A   J 0x9D001528
9D0014DC  00000000   NOP
9D00151C  8FC20010   LW V0, 16(S8)
9D001520  24420001   ADDIU V0, V0, 1
9D001524  AFC20010   SW V0, 16(S8)
9D001528  8F8280DC   LW V0, -32548(GP)
9D00152C  8FC30010   LW V1, 16(S8)
9D001530  0062102A   SLT V0, V1, V0
9D001534  1440FFEA   BNE V0, ZERO, 0x9D0014E0
9D001538  00000000   NOP
9D00153C  0B400552   J 0x9D001548
9D001540  00000000   NOP
355:                             {
356:                                 currentPlayer += 1;
9D0014E0  8F8280D4   LW V0, -32556(GP)
9D0014E4  24420001   ADDIU V0, V0, 1
9D0014E8  AF8280D4   SW V0, -32556(GP)
357:                                 if(currentPlayer == numPlayers)
9D0014EC  8F8380D4   LW V1, -32556(GP)
9D0014F0  8F8280DC   LW V0, -32548(GP)
9D0014F4  14620002   BNE V1, V0, 0x9D001500
9D0014F8  00000000   NOP
358:                                     currentPlayer = 0;
9D0014FC  AF8080D4   SW ZERO, -32556(GP)
359:                                 if(deployTroopsLeft[currentPlayer] != 0)
9D001500  8F8280D4   LW V0, -32556(GP)
9D001504  00021880   SLL V1, V0, 2
9D001508  27828060   ADDIU V0, GP, -32672
9D00150C  00621021   ADDU V0, V1, V0
9D001510  8C420000   LW V0, 0(V0)
9D001514  1440000B   BNE V0, ZERO, 0x9D001544
9D001518  00000000   NOP
360:                                     break;
9D001544  00000000   NOP
361:                             }
362:                 
363:                             if(deployTroopsLeft[currentPlayer] == 0)
9D001548  8F8280D4   LW V0, -32556(GP)
9D00154C  00021880   SLL V1, V0, 2
9D001550  27828060   ADDIU V0, GP, -32672
9D001554  00621021   ADDU V0, V1, V0
9D001558  8C420000   LW V0, 0(V0)
9D00155C  14400005   BNE V0, ZERO, 0x9D001574
9D001560  00000000   NOP
364:                                 confirm = 1;
9D001564  24020001   ADDIU V0, ZERO, 1
9D001568  AF828078   SW V0, -32648(GP)
9D00156C  0B400599   J 0x9D001664
9D001570  00000000   NOP
365:                             else
366:                                 numTroops = min(deployTroopsLeft[currentPlayer], multipleDeploy);
9D001574  8F8280D4   LW V0, -32556(GP)
9D001578  00021880   SLL V1, V0, 2
9D00157C  27828060   ADDIU V0, GP, -32672
9D001580  00621021   ADDU V0, V1, V0
9D001584  8C430000   LW V1, 0(V0)
9D001588  8F8280F0   LW V0, -32528(GP)
9D00158C  0043202A   SLT A0, V0, V1
9D001590  0064100A   MOVZ V0, V1, A0
9D001594  AF82805C   SW V0, -32676(GP)
9D001598  0B400599   J 0x9D001664
9D00159C  00000000   NOP
367:                         }
368:                     }
369:                     else if(input == CANCEL)
9D0015A0  8FC30020   LW V1, 32(S8)
9D0015A4  24020001   ADDIU V0, ZERO, 1
9D0015A8  1462002E   BNE V1, V0, 0x9D001664
9D0015AC  00000000   NOP
370:                     {
371:                         if(confirm)
9D0015B0  8F828078   LW V0, -32648(GP)
9D0015B4  1040002B   BEQ V0, ZERO, 0x9D001664
9D0015B8  00000000   NOP
372:                         {
373:                             currentPlayer = firstPlayer;
9D0015BC  8F828054   LW V0, -32684(GP)
9D0015C0  AF8280D4   SW V0, -32556(GP)
374:                             for(int i = 0; i < NUM_TERRITORIES; i++)
9D0015C4  AFC00014   SW ZERO, 20(S8)
9D0015C8  0B40058C   J 0x9D001630
9D0015CC  00000000   NOP
9D001624  8FC20014   LW V0, 20(S8)
9D001628  24420001   ADDIU V0, V0, 1
9D00162C  AFC20014   SW V0, 20(S8)
9D001630  8FC20014   LW V0, 20(S8)
9D001634  28420002   SLTI V0, V0, 2
9D001638  1440FFE5   BNE V0, ZERO, 0x9D0015D0
9D00163C  00000000   NOP
375:                                 logReinforce(territories[i].owner, i, territories[i].troops);
9D0015D0  3C048000   LUI A0, -32768
9D0015D4  8FC20014   LW V0, 20(S8)
9D0015D8  000210C0   SLL V0, V0, 3
9D0015DC  00021880   SLL V1, V0, 2
9D0015E0  00621823   SUBU V1, V1, V0
9D0015E4  248241B8   ADDIU V0, A0, 16824
9D0015E8  00621021   ADDU V0, V1, V0
9D0015EC  8C430010   LW V1, 16(V0)
9D0015F0  3C048000   LUI A0, -32768
9D0015F4  8FC20014   LW V0, 20(S8)
9D0015F8  248441B8   ADDIU A0, A0, 16824
9D0015FC  000210C0   SLL V0, V0, 3
9D001600  00022880   SLL A1, V0, 2
9D001604  00A21023   SUBU V0, A1, V0
9D001608  00821021   ADDU V0, A0, V0
9D00160C  8C420014   LW V0, 20(V0)
9D001610  00602021   ADDU A0, V1, ZERO
9D001614  8FC50014   LW A1, 20(S8)
9D001618  00403021   ADDU A2, V0, ZERO
9D00161C  0F401E4C   JAL logReinforce
9D001620  00000000   NOP
376:                             changeState(REINFORCE);
9D001640  24040003   ADDIU A0, ZERO, 3
9D001644  0F4009A8   JAL changeState
9D001648  00000000   NOP
9D00164C  0B400599   J 0x9D001664
9D001650  00000000   NOP
377:                         }
378:                     }
379:                 }
9D001664  03C0E821   ADDU SP, S8, ZERO
9D001668  8FBF001C   LW RA, 28(SP)
9D00166C  8FBE0018   LW S8, 24(SP)
9D001670  27BD0020   ADDIU SP, SP, 32
9D001674  03E00008   JR RA
9D001678  00000000   NOP
380:                 
381:                 void reinforce(Input input)
382:                 {
9D00167C  27BDFFE8   ADDIU SP, SP, -24
9D001680  AFBF0014   SW RA, 20(SP)
9D001684  AFBE0010   SW S8, 16(SP)
9D001688  03A0F021   ADDU S8, SP, ZERO
9D00168C  AFC40018   SW A0, 24(S8)
383:                     if(input == NEXT && !reinforceMenu)
9D001690  8FC30018   LW V1, 24(S8)
9D001694  24020002   ADDIU V0, ZERO, 2
9D001698  1462000C   BNE V1, V0, 0x9D0016CC
9D00169C  00000000   NOP
9D0016A0  8F828074   LW V0, -32652(GP)
9D0016A4  14400009   BNE V0, ZERO, 0x9D0016CC
9D0016A8  00000000   NOP
384:                         moveSelection(0, 1, predOwnedCurrent);
9D0016AC  00002021   ADDU A0, ZERO, ZERO
9D0016B0  24050001   ADDIU A1, ZERO, 1
9D0016B4  3C029D00   LUI V0, -25344
9D0016B8  2446647C   ADDIU A2, V0, 25724
9D0016BC  0F400965   JAL moveSelection
9D0016C0  00000000   NOP
9D0016C4  0B400620   J 0x9D001880
9D0016C8  00000000   NOP
385:                     else if(input == PREVIOUS && !reinforceMenu)
9D0016CC  8FC30018   LW V1, 24(S8)
9D0016D0  24020003   ADDIU V0, ZERO, 3
9D0016D4  1462000C   BNE V1, V0, 0x9D001708
9D0016D8  00000000   NOP
9D0016DC  8F828074   LW V0, -32652(GP)
9D0016E0  14400009   BNE V0, ZERO, 0x9D001708
9D0016E4  00000000   NOP
386:                         moveSelection(0, -1, predOwnedCurrent);
9D0016E8  00002021   ADDU A0, ZERO, ZERO
9D0016EC  2405FFFF   ADDIU A1, ZERO, -1
9D0016F0  3C029D00   LUI V0, -25344
9D0016F4  2446647C   ADDIU A2, V0, 25724
9D0016F8  0F400965   JAL moveSelection
9D0016FC  00000000   NOP
9D001700  0B400620   J 0x9D001880
9D001704  00000000   NOP
387:                     else if(input == ADVANCE)
9D001708  8FC20018   LW V0, 24(S8)
9D00170C  14400044   BNE V0, ZERO, 0x9D001820
9D001710  00000000   NOP
388:                     {
389:                         if(reinforceMenu)
9D001714  8F828074   LW V0, -32652(GP)
9D001718  1040000D   BEQ V0, ZERO, 0x9D001750
9D00171C  00000000   NOP
390:                         {
391:                             if(!confirm)
9D001720  8F828078   LW V0, -32648(GP)
9D001724  14400005   BNE V0, ZERO, 0x9D00173C
9D001728  00000000   NOP
392:                                 confirm = 1;
9D00172C  24020001   ADDIU V0, ZERO, 1
9D001730  AF828078   SW V0, -32648(GP)
393:                             else
394:                                 changeState(INIT);
9D00173C  00002021   ADDU A0, ZERO, ZERO
9D001740  0F4009A8   JAL changeState
9D001744  00000000   NOP
395:                             return;
9D001734  0B400620   J 0x9D001880
9D001738  00000000   NOP
9D001748  0B400620   J 0x9D001880
9D00174C  00000000   NOP
396:                         }
397:                 
398:                         if(destination == -1)
9D001750  8F8380E0   LW V1, -32544(GP)
9D001754  2402FFFF   ADDIU V0, ZERO, -1
9D001758  10620048   BEQ V1, V0, 0x9D00187C
9D00175C  00000000   NOP
399:                             return;
9D00187C  00000000   NOP
400:                 
401:                         if(numTroops > 0)
9D001760  8F82805C   LW V0, -32676(GP)
9D001764  1840001D   BLEZ V0, 0x9D0017DC
9D001768  00000000   NOP
402:                         {
403:                             logReinforce(currentPlayer, destination, 1);
9D00176C  8F8380D4   LW V1, -32556(GP)
9D001770  8F8280E0   LW V0, -32544(GP)
9D001774  00602021   ADDU A0, V1, ZERO
9D001778  00402821   ADDU A1, V0, ZERO
9D00177C  24060001   ADDIU A2, ZERO, 1
9D001780  0F401E4C   JAL logReinforce
9D001784  00000000   NOP
404:                             territories[destination].troops += 1;
9D001788  8F8580E0   LW A1, -32544(GP)
9D00178C  8F8280E0   LW V0, -32544(GP)
9D001790  3C038000   LUI V1, -32768
9D001794  246341B8   ADDIU V1, V1, 16824
9D001798  000210C0   SLL V0, V0, 3
9D00179C  00022080   SLL A0, V0, 2
9D0017A0  00821023   SUBU V0, A0, V0
9D0017A4  00621021   ADDU V0, V1, V0
9D0017A8  8C420014   LW V0, 20(V0)
9D0017AC  24430001   ADDIU V1, V0, 1
9D0017B0  3C028000   LUI V0, -32768
9D0017B4  244441B8   ADDIU A0, V0, 16824
9D0017B8  00A01021   ADDU V0, A1, ZERO
9D0017BC  000210C0   SLL V0, V0, 3
9D0017C0  00022880   SLL A1, V0, 2
9D0017C4  00A21023   SUBU V0, A1, V0
9D0017C8  00821021   ADDU V0, A0, V0
9D0017CC  AC430014   SW V1, 20(V0)
405:                             numTroops -= 1;
9D0017D0  8F82805C   LW V0, -32676(GP)
9D0017D4  2442FFFF   ADDIU V0, V0, -1
9D0017D8  AF82805C   SW V0, -32676(GP)
406:                         }
407:                 
408:                         if(numTroops == 0 && !mustTrade)
9D0017DC  8F82805C   LW V0, -32676(GP)
9D0017E0  14400027   BNE V0, ZERO, 0x9D001880
9D0017E4  00000000   NOP
9D0017E8  8F828068   LW V0, -32664(GP)
9D0017EC  14400024   BNE V0, ZERO, 0x9D001880
9D0017F0  00000000   NOP
409:                         {
410:                             logReinforce(currentPlayer, -1, 0);
9D0017F4  8F8280D4   LW V0, -32556(GP)
9D0017F8  00402021   ADDU A0, V0, ZERO
9D0017FC  2405FFFF   ADDIU A1, ZERO, -1
9D001800  00003021   ADDU A2, ZERO, ZERO
9D001804  0F401E4C   JAL logReinforce
9D001808  00000000   NOP
411:                             changeState(ATTACK1);
9D00180C  24040004   ADDIU A0, ZERO, 4
9D001810  0F4009A8   JAL changeState
9D001814  00000000   NOP
9D001818  0B400620   J 0x9D001880
9D00181C  00000000   NOP
412:                         }
413:                     }
414:                     else if(input == CANCEL)
9D001820  8FC30018   LW V1, 24(S8)
9D001824  24020001   ADDIU V0, ZERO, 1
9D001828  14620015   BNE V1, V0, 0x9D001880
9D00182C  00000000   NOP
415:                     {
416:                         if(reinforceMenu && confirm)
9D001830  8F828074   LW V0, -32652(GP)
9D001834  10400007   BEQ V0, ZERO, 0x9D001854
9D001838  00000000   NOP
9D00183C  8F828078   LW V0, -32648(GP)
9D001840  10400004   BEQ V0, ZERO, 0x9D001854
9D001844  00000000   NOP
417:                             confirm = 0;
9D001848  AF808078   SW ZERO, -32648(GP)
9D00184C  0B400620   J 0x9D001880
9D001850  00000000   NOP
418:                         else if(reinforceMenu)
9D001854  8F828074   LW V0, -32652(GP)
9D001858  10400004   BEQ V0, ZERO, 0x9D00186C
9D00185C  00000000   NOP
419:                             reinforceMenu = 0;
9D001860  AF808074   SW ZERO, -32652(GP)
9D001864  0B400620   J 0x9D001880
9D001868  00000000   NOP
420:                         else
421:                             reinforceMenu = 1;
9D00186C  24020001   ADDIU V0, ZERO, 1
9D001870  AF828074   SW V0, -32652(GP)
9D001874  0B400620   J 0x9D001880
9D001878  00000000   NOP
422:                     }
423:                 }
9D001880  03C0E821   ADDU SP, S8, ZERO
9D001884  8FBF0014   LW RA, 20(SP)
9D001888  8FBE0010   LW S8, 16(SP)
9D00188C  27BD0018   ADDIU SP, SP, 24
9D001890  03E00008   JR RA
9D001894  00000000   NOP
424:                 
425:                 void declareAttack(Input input)
426:                 {
9D001898  27BDFFD8   ADDIU SP, SP, -40
9D00189C  AFBF0024   SW RA, 36(SP)
9D0018A0  AFBE0020   SW S8, 32(SP)
9D0018A4  03A0F021   ADDU S8, SP, ZERO
9D0018A8  AFC40028   SW A0, 40(S8)
427:                     if(input == NEXT && !confirm)
9D0018AC  8FC30028   LW V1, 40(S8)
9D0018B0  24020002   ADDIU V0, ZERO, 2
9D0018B4  1462000C   BNE V1, V0, 0x9D0018E8
9D0018B8  00000000   NOP
9D0018BC  8F828078   LW V0, -32648(GP)
9D0018C0  14400009   BNE V0, ZERO, 0x9D0018E8
9D0018C4  00000000   NOP
428:                         moveSelection(1, 1, predAttackSource);
9D0018C8  24040001   ADDIU A0, ZERO, 1
9D0018CC  24050001   ADDIU A1, ZERO, 1
9D0018D0  3C029D00   LUI V0, -25344
9D0018D4  24466508   ADDIU A2, V0, 25864
9D0018D8  0F400965   JAL moveSelection
9D0018DC  00000000   NOP
9D0018E0  0B400670   J 0x9D0019C0
9D0018E4  00000000   NOP
429:                     else if(input == PREVIOUS && !confirm)
9D0018E8  8FC30028   LW V1, 40(S8)
9D0018EC  24020003   ADDIU V0, ZERO, 3
9D0018F0  1462000C   BNE V1, V0, 0x9D001924
9D0018F4  00000000   NOP
9D0018F8  8F828078   LW V0, -32648(GP)
9D0018FC  14400009   BNE V0, ZERO, 0x9D001924
9D001900  00000000   NOP
430:                         moveSelection(1, -1, predAttackSource);
9D001904  24040001   ADDIU A0, ZERO, 1
9D001908  2405FFFF   ADDIU A1, ZERO, -1
9D00190C  3C029D00   LUI V0, -25344
9D001910  24466508   ADDIU A2, V0, 25864
9D001914  0F400965   JAL moveSelection
9D001918  00000000   NOP
9D00191C  0B400670   J 0x9D0019C0
9D001920  00000000   NOP
431:                     else if(input == ADVANCE)
9D001924  8FC20028   LW V0, 40(S8)
9D001928  1440001B   BNE V0, ZERO, 0x9D001998
9D00192C  00000000   NOP
432:                     {
433:                         if(confirm)
9D001930  8F828078   LW V0, -32648(GP)
9D001934  1040000F   BEQ V0, ZERO, 0x9D001974
9D001938  00000000   NOP
434:                         {
435:                             if(needCard)
9D00193C  8F82806C   LW V0, -32660(GP)
9D001940  10400007   BEQ V0, ZERO, 0x9D001960
9D001944  00000000   NOP
436:                                 drawCard(currentPlayer);
9D001948  8F8280D4   LW V0, -32556(GP)
9D00194C  27C30010   ADDIU V1, S8, 16
9D001950  00602021   ADDU A0, V1, ZERO
9D001954  00402821   ADDU A1, V0, ZERO
9D001958  0F401338   JAL drawCard
9D00195C  00000000   NOP
437:                             changeState(MOVE1);
9D001960  24040008   ADDIU A0, ZERO, 8
9D001964  0F4009A8   JAL changeState
9D001968  00000000   NOP
438:                             return;
9D00196C  0B400670   J 0x9D0019C0
9D001970  00000000   NOP
439:                         }
440:                 
441:                         if(source == -1)
9D001974  8F8380EC   LW V1, -32532(GP)
9D001978  2402FFFF   ADDIU V0, ZERO, -1
9D00197C  1062000F   BEQ V1, V0, 0x9D0019BC
9D001980  00000000   NOP
442:                             return;
9D0019BC  00000000   NOP
443:                         changeState(ATTACK2);
9D001984  24040005   ADDIU A0, ZERO, 5
9D001988  0F4009A8   JAL changeState
9D00198C  00000000   NOP
9D001990  0B400670   J 0x9D0019C0
9D001994  00000000   NOP
444:                     }
445:                     else if(input == CANCEL)
9D001998  8FC30028   LW V1, 40(S8)
9D00199C  24020001   ADDIU V0, ZERO, 1
9D0019A0  14620007   BNE V1, V0, 0x9D0019C0
9D0019A4  00000000   NOP
446:                     {
447:                         confirm = !confirm;
9D0019A8  8F828078   LW V0, -32648(GP)
9D0019AC  2C420001   SLTIU V0, V0, 1
9D0019B0  AF828078   SW V0, -32648(GP)
9D0019B4  0B400670   J 0x9D0019C0
9D0019B8  00000000   NOP
448:                     }
449:                 }
9D0019C0  03C0E821   ADDU SP, S8, ZERO
9D0019C4  8FBF0024   LW RA, 36(SP)
9D0019C8  8FBE0020   LW S8, 32(SP)
9D0019CC  27BD0028   ADDIU SP, SP, 40
9D0019D0  03E00008   JR RA
9D0019D4  00000000   NOP
450:                 void declareAttackTarget(Input input)
451:                 {
9D0019D8  27BDFFE8   ADDIU SP, SP, -24
9D0019DC  AFBF0014   SW RA, 20(SP)
9D0019E0  AFBE0010   SW S8, 16(SP)
9D0019E4  03A0F021   ADDU S8, SP, ZERO
9D0019E8  AFC40018   SW A0, 24(S8)
452:                     if(input == NEXT)
9D0019EC  8FC30018   LW V1, 24(S8)
9D0019F0  24020002   ADDIU V0, ZERO, 2
9D0019F4  14620009   BNE V1, V0, 0x9D001A1C
9D0019F8  00000000   NOP
453:                         moveSelection(0, 1, predAttackTarget);
9D0019FC  00002021   ADDU A0, ZERO, ZERO
9D001A00  24050001   ADDIU A1, ZERO, 1
9D001A04  3C029D00   LUI V0, -25344
9D001A08  24466660   ADDIU A2, V0, 26208
9D001A0C  0F400965   JAL moveSelection
9D001A10  00000000   NOP
9D001A14  0B4006B8   J 0x9D001AE0
9D001A18  00000000   NOP
454:                     else if(input == PREVIOUS)
9D001A1C  8FC30018   LW V1, 24(S8)
9D001A20  24020003   ADDIU V0, ZERO, 3
9D001A24  14620009   BNE V1, V0, 0x9D001A4C
9D001A28  00000000   NOP
455:                         moveSelection(0, -1, predAttackTarget);
9D001A2C  00002021   ADDU A0, ZERO, ZERO
9D001A30  2405FFFF   ADDIU A1, ZERO, -1
9D001A34  3C029D00   LUI V0, -25344
9D001A38  24466660   ADDIU A2, V0, 26208
9D001A3C  0F400965   JAL moveSelection
9D001A40  00000000   NOP
9D001A44  0B4006B8   J 0x9D001AE0
9D001A48  00000000   NOP
456:                     else if(input == ADVANCE)
9D001A4C  8FC20018   LW V0, 24(S8)
9D001A50  14400019   BNE V0, ZERO, 0x9D001AB8
9D001A54  00000000   NOP
457:                     {
458:                         if(destination == -1)
9D001A58  8F8380E0   LW V1, -32544(GP)
9D001A5C  2402FFFF   ADDIU V0, ZERO, -1
9D001A60  1062001E   BEQ V1, V0, 0x9D001ADC
9D001A64  00000000   NOP
459:                             return;
9D001ADC  00000000   NOP
460:                         logAttack(currentPlayer, territories[destination].owner, source,
9D001A68  8F8480D4   LW A0, -32556(GP)
9D001A6C  8F8280E0   LW V0, -32544(GP)
9D001A70  3C058000   LUI A1, -32768
9D001A74  000210C0   SLL V0, V0, 3
9D001A78  00021880   SLL V1, V0, 2
9D001A7C  00621823   SUBU V1, V1, V0
9D001A80  24A241B8   ADDIU V0, A1, 16824
9D001A84  00621021   ADDU V0, V1, V0
9D001A88  8C450010   LW A1, 16(V0)
9D001A8C  8F8380EC   LW V1, -32532(GP)
9D001A90  8F8280E0   LW V0, -32544(GP)
9D001A94  00603021   ADDU A2, V1, ZERO
9D001A98  00403821   ADDU A3, V0, ZERO
9D001A9C  0F401CE1   JAL logAttack
9D001AA0  00000000   NOP
461:                                 destination);
462:                         changeState(BATTLE);
9D001AA4  24040006   ADDIU A0, ZERO, 6
9D001AA8  0F4009A8   JAL changeState
9D001AAC  00000000   NOP
9D001AB0  0B4006B8   J 0x9D001AE0
9D001AB4  00000000   NOP
463:                     }
464:                     else if(input == CANCEL)
9D001AB8  8FC30018   LW V1, 24(S8)
9D001ABC  24020001   ADDIU V0, ZERO, 1
9D001AC0  14620007   BNE V1, V0, 0x9D001AE0
9D001AC4  00000000   NOP
465:                         changeState(ATTACK1);
9D001AC8  24040004   ADDIU A0, ZERO, 4
9D001ACC  0F4009A8   JAL changeState
9D001AD0  00000000   NOP
9D001AD4  0B4006B8   J 0x9D001AE0
9D001AD8  00000000   NOP
466:                 }
9D001AE0  03C0E821   ADDU SP, S8, ZERO
9D001AE4  8FBF0014   LW RA, 20(SP)
9D001AE8  8FBE0010   LW S8, 16(SP)
9D001AEC  27BD0018   ADDIU SP, SP, 24
9D001AF0  03E00008   JR RA
9D001AF4  00000000   NOP
467:                 
468:                 void resolveBattle(Input input)
469:                 {
9D001AF8  27BDFFE0   ADDIU SP, SP, -32
9D001AFC  AFBF001C   SW RA, 28(SP)
9D001B00  AFBE0018   SW S8, 24(SP)
9D001B04  03A0F021   ADDU S8, SP, ZERO
9D001B08  AFC40020   SW A0, 32(S8)
470:                     if(input == ADVANCE)
9D001B0C  8FC20020   LW V0, 32(S8)
9D001B10  14400079   BNE V0, ZERO, 0x9D001CF8
9D001B14  00000000   NOP
471:                     {
472:                         doBattle(source, destination);
9D001B18  8F8380EC   LW V1, -32532(GP)
9D001B1C  8F8280E0   LW V0, -32544(GP)
9D001B20  00602021   ADDU A0, V1, ZERO
9D001B24  00402821   ADDU A1, V0, ZERO
9D001B28  0F4017F2   JAL doBattle
9D001B2C  00000000   NOP
473:                 
474:                         if(territories[source].troops == 1)
9D001B30  8F8280EC   LW V0, -32532(GP)
9D001B34  3C038000   LUI V1, -32768
9D001B38  246341B8   ADDIU V1, V1, 16824
9D001B3C  000210C0   SLL V0, V0, 3
9D001B40  00022080   SLL A0, V0, 2
9D001B44  00821023   SUBU V0, A0, V0
9D001B48  00621021   ADDU V0, V1, V0
9D001B4C  8C430014   LW V1, 20(V0)
9D001B50  24020001   ADDIU V0, ZERO, 1
9D001B54  14620006   BNE V1, V0, 0x9D001B70
9D001B58  00000000   NOP
475:                             changeState(ATTACK1);
9D001B5C  24040004   ADDIU A0, ZERO, 4
9D001B60  0F4009A8   JAL changeState
9D001B64  00000000   NOP
9D001B68  0B400745   J 0x9D001D14
9D001B6C  00000000   NOP
476:                         else if(territories[destination].troops == 0)
9D001B70  8F8280E0   LW V0, -32544(GP)
9D001B74  3C038000   LUI V1, -32768
9D001B78  246341B8   ADDIU V1, V1, 16824
9D001B7C  000210C0   SLL V0, V0, 3
9D001B80  00022080   SLL A0, V0, 2
9D001B84  00821023   SUBU V0, A0, V0
9D001B88  00621021   ADDU V0, V1, V0
9D001B8C  8C420014   LW V0, 20(V0)
9D001B90  14400060   BNE V0, ZERO, 0x9D001D14
9D001B94  00000000   NOP
477:                         {
478:                             int defeatedPlayer = territories[destination].owner;
9D001B98  8F8280E0   LW V0, -32544(GP)
9D001B9C  3C048000   LUI A0, -32768
9D001BA0  000210C0   SLL V0, V0, 3
9D001BA4  00021880   SLL V1, V0, 2
9D001BA8  00621823   SUBU V1, V1, V0
9D001BAC  248241B8   ADDIU V0, A0, 16824
9D001BB0  00621021   ADDU V0, V1, V0
9D001BB4  8C420010   LW V0, 16(V0)
9D001BB8  AFC20010   SW V0, 16(S8)
479:                             territories[destination].owner = currentPlayer;
9D001BBC  8F8280E0   LW V0, -32544(GP)
9D001BC0  8F8480D4   LW A0, -32556(GP)
9D001BC4  3C058000   LUI A1, -32768
9D001BC8  000210C0   SLL V0, V0, 3
9D001BCC  00021880   SLL V1, V0, 2
9D001BD0  00621823   SUBU V1, V1, V0
9D001BD4  24A241B8   ADDIU V0, A1, 16824
9D001BD8  00621021   ADDU V0, V1, V0
9D001BDC  AC440010   SW A0, 16(V0)
480:                 
481:                             numTroops = min(3, territories[source].troops - 1);
9D001BE0  8F8280EC   LW V0, -32532(GP)
9D001BE4  3C038000   LUI V1, -32768
9D001BE8  246341B8   ADDIU V1, V1, 16824
9D001BEC  000210C0   SLL V0, V0, 3
9D001BF0  00022080   SLL A0, V0, 2
9D001BF4  00821023   SUBU V0, A0, V0
9D001BF8  00621021   ADDU V0, V1, V0
9D001BFC  8C420014   LW V0, 20(V0)
9D001C00  2442FFFF   ADDIU V0, V0, -1
9D001C04  24030003   ADDIU V1, ZERO, 3
9D001C08  28440004   SLTI A0, V0, 4
9D001C0C  0064100A   MOVZ V0, V1, A0
9D001C10  AF82805C   SW V0, -32676(GP)
482:                             territories[destination].troops = 
9D001C14  8F8580E0   LW A1, -32544(GP)
9D001C3C  3C028000   LUI V0, -32768
9D001C40  244441B8   ADDIU A0, V0, 16824
9D001C44  00A01021   ADDU V0, A1, ZERO
9D001C48  000210C0   SLL V0, V0, 3
9D001C4C  00022880   SLL A1, V0, 2
9D001C50  00A21023   SUBU V0, A1, V0
9D001C54  00821021   ADDU V0, A0, V0
9D001C58  AC430014   SW V1, 20(V0)
483:                                 territories[source].troops - 1;
9D001C18  8F8280EC   LW V0, -32532(GP)
9D001C1C  3C038000   LUI V1, -32768
9D001C20  246341B8   ADDIU V1, V1, 16824
9D001C24  000210C0   SLL V0, V0, 3
9D001C28  00022080   SLL A0, V0, 2
9D001C2C  00821023   SUBU V0, A0, V0
9D001C30  00621021   ADDU V0, V1, V0
9D001C34  8C420014   LW V0, 20(V0)
9D001C38  2443FFFF   ADDIU V1, V0, -1
484:                             territories[source].troops = 1;
9D001C5C  8F8280EC   LW V0, -32532(GP)
9D001C60  3C038000   LUI V1, -32768
9D001C64  246341B8   ADDIU V1, V1, 16824
9D001C68  000210C0   SLL V0, V0, 3
9D001C6C  00022080   SLL A0, V0, 2
9D001C70  00821023   SUBU V0, A0, V0
9D001C74  00621021   ADDU V0, V1, V0
9D001C78  24030001   ADDIU V1, ZERO, 1
9D001C7C  AC430014   SW V1, 20(V0)
485:                 
486:                             if(!playerLiving(defeatedPlayer))
9D001C80  8FC40010   LW A0, 16(S8)
9D001C84  0F400A9C   JAL playerLiving
9D001C88  00000000   NOP
9D001C8C  14400015   BNE V0, ZERO, 0x9D001CE4
9D001C90  00000000   NOP
487:                             {
488:                                 takeHand(currentPlayer, defeatedPlayer);
9D001C94  8F8280D4   LW V0, -32556(GP)
9D001C98  00402021   ADDU A0, V0, ZERO
9D001C9C  8FC50010   LW A1, 16(S8)
9D001CA0  0F401756   JAL takeHand
9D001CA4  00000000   NOP
489:                                 if(hands[currentPlayer].cards >= 5)
9D001CA8  8F8280D4   LW V0, -32556(GP)
9D001CAC  3C038000   LUI V1, -32768
9D001CB0  00021080   SLL V0, V0, 2
9D001CB4  00022080   SLL A0, V0, 2
9D001CB8  00441021   ADDU V0, V0, A0
9D001CBC  00022080   SLL A0, V0, 2
9D001CC0  00441021   ADDU V0, V0, A0
9D001CC4  24630124   ADDIU V1, V1, 292
9D001CC8  00431021   ADDU V0, V0, V1
9D001CCC  8C420060   LW V0, 96(V0)
9D001CD0  28420005   SLTI V0, V0, 5
9D001CD4  14400003   BNE V0, ZERO, 0x9D001CE4
9D001CD8  00000000   NOP
490:                                     mustTrade = 1;
9D001CDC  24020001   ADDIU V0, ZERO, 1
9D001CE0  AF828068   SW V0, -32664(GP)
491:                             }
492:                             changeState(CONQUER);
9D001CE4  24040007   ADDIU A0, ZERO, 7
9D001CE8  0F4009A8   JAL changeState
9D001CEC  00000000   NOP
9D001CF0  0B400745   J 0x9D001D14
9D001CF4  00000000   NOP
493:                         }
494:                     }
495:                     else if(input == CANCEL)
9D001CF8  8FC30020   LW V1, 32(S8)
9D001CFC  24020001   ADDIU V0, ZERO, 1
9D001D00  14620004   BNE V1, V0, 0x9D001D14
9D001D04  00000000   NOP
496:                         changeState(ATTACK1);
9D001D08  24040004   ADDIU A0, ZERO, 4
9D001D0C  0F4009A8   JAL changeState
9D001D10  00000000   NOP
497:                       
498:                 }
9D001D14  03C0E821   ADDU SP, S8, ZERO
9D001D18  8FBF001C   LW RA, 28(SP)
9D001D1C  8FBE0018   LW S8, 24(SP)
9D001D20  27BD0020   ADDIU SP, SP, 32
9D001D24  03E00008   JR RA
9D001D28  00000000   NOP
499:                 void conquerTerritory(Input input)
500:                 {
9D001D2C  27BDFFE0   ADDIU SP, SP, -32
9D001D30  AFBF001C   SW RA, 28(SP)
9D001D34  AFBE0018   SW S8, 24(SP)
9D001D38  03A0F021   ADDU S8, SP, ZERO
9D001D3C  AFC40020   SW A0, 32(S8)
501:                     if(input == NEXT)
9D001D40  8FC30020   LW V1, 32(S8)
9D001D44  24020002   ADDIU V0, ZERO, 2
9D001D48  14620032   BNE V1, V0, 0x9D001E14
9D001D4C  00000000   NOP
502:                     {
503:                         if(territories[source].troops > 1)
9D001D50  8F8280EC   LW V0, -32532(GP)
9D001D54  3C038000   LUI V1, -32768
9D001D58  246341B8   ADDIU V1, V1, 16824
9D001D5C  000210C0   SLL V0, V0, 3
9D001D60  00022080   SLL A0, V0, 2
9D001D64  00821023   SUBU V0, A0, V0
9D001D68  00621021   ADDU V0, V1, V0
9D001D6C  8C420014   LW V0, 20(V0)
9D001D70  28420002   SLTI V0, V0, 2
9D001D74  14400094   BNE V0, ZERO, 0x9D001FC8
9D001D78  00000000   NOP
504:                         {
505:                             territories[destination].troops += 1;
9D001D7C  8F8580E0   LW A1, -32544(GP)
9D001D80  8F8280E0   LW V0, -32544(GP)
9D001D84  3C038000   LUI V1, -32768
9D001D88  246341B8   ADDIU V1, V1, 16824
9D001D8C  000210C0   SLL V0, V0, 3
9D001D90  00022080   SLL A0, V0, 2
9D001D94  00821023   SUBU V0, A0, V0
9D001D98  00621021   ADDU V0, V1, V0
9D001D9C  8C420014   LW V0, 20(V0)
9D001DA0  24430001   ADDIU V1, V0, 1
9D001DA4  3C028000   LUI V0, -32768
9D001DA8  244441B8   ADDIU A0, V0, 16824
9D001DAC  00A01021   ADDU V0, A1, ZERO
9D001DB0  000210C0   SLL V0, V0, 3
9D001DB4  00022880   SLL A1, V0, 2
9D001DB8  00A21023   SUBU V0, A1, V0
9D001DBC  00821021   ADDU V0, A0, V0
9D001DC0  AC430014   SW V1, 20(V0)
506:                             territories[source].troops -= 1;
9D001DC4  8F8580EC   LW A1, -32532(GP)
9D001DC8  8F8280EC   LW V0, -32532(GP)
9D001DCC  3C038000   LUI V1, -32768
9D001DD0  246341B8   ADDIU V1, V1, 16824
9D001DD4  000210C0   SLL V0, V0, 3
9D001DD8  00022080   SLL A0, V0, 2
9D001DDC  00821023   SUBU V0, A0, V0
9D001DE0  00621021   ADDU V0, V1, V0
9D001DE4  8C420014   LW V0, 20(V0)
9D001DE8  2443FFFF   ADDIU V1, V0, -1
9D001DEC  3C028000   LUI V0, -32768
9D001DF0  244441B8   ADDIU A0, V0, 16824
9D001DF4  00A01021   ADDU V0, A1, ZERO
9D001DF8  000210C0   SLL V0, V0, 3
9D001DFC  00022880   SLL A1, V0, 2
9D001E00  00A21023   SUBU V0, A1, V0
9D001E04  00821021   ADDU V0, A0, V0
9D001E08  AC430014   SW V1, 20(V0)
9D001E0C  0B4007F2   J 0x9D001FC8
9D001E10  00000000   NOP
507:                         }
508:                     }
509:                     else if(input == PREVIOUS)
9D001E14  8FC30020   LW V1, 32(S8)
9D001E18  24020003   ADDIU V0, ZERO, 3
9D001E1C  14620033   BNE V1, V0, 0x9D001EEC
9D001E20  00000000   NOP
510:                     {
511:                         if(territories[destination].troops > numTroops)
9D001E24  8F8280E0   LW V0, -32544(GP)
9D001E28  3C038000   LUI V1, -32768
9D001E2C  246341B8   ADDIU V1, V1, 16824
9D001E30  000210C0   SLL V0, V0, 3
9D001E34  00022080   SLL A0, V0, 2
9D001E38  00821023   SUBU V0, A0, V0
9D001E3C  00621021   ADDU V0, V1, V0
9D001E40  8C430014   LW V1, 20(V0)
9D001E44  8F82805C   LW V0, -32676(GP)
9D001E48  0043102A   SLT V0, V0, V1
9D001E4C  1040005E   BEQ V0, ZERO, 0x9D001FC8
9D001E50  00000000   NOP
512:                         {
513:                             territories[destination].troops -= 1;
9D001E54  8F8580E0   LW A1, -32544(GP)
9D001E58  8F8280E0   LW V0, -32544(GP)
9D001E5C  3C038000   LUI V1, -32768
9D001E60  246341B8   ADDIU V1, V1, 16824
9D001E64  000210C0   SLL V0, V0, 3
9D001E68  00022080   SLL A0, V0, 2
9D001E6C  00821023   SUBU V0, A0, V0
9D001E70  00621021   ADDU V0, V1, V0
9D001E74  8C420014   LW V0, 20(V0)
9D001E78  2443FFFF   ADDIU V1, V0, -1
9D001E7C  3C028000   LUI V0, -32768
9D001E80  244441B8   ADDIU A0, V0, 16824
9D001E84  00A01021   ADDU V0, A1, ZERO
9D001E88  000210C0   SLL V0, V0, 3
9D001E8C  00022880   SLL A1, V0, 2
9D001E90  00A21023   SUBU V0, A1, V0
9D001E94  00821021   ADDU V0, A0, V0
9D001E98  AC430014   SW V1, 20(V0)
514:                             territories[source].troops += 1;
9D001E9C  8F8580EC   LW A1, -32532(GP)
9D001EA0  8F8280EC   LW V0, -32532(GP)
9D001EA4  3C038000   LUI V1, -32768
9D001EA8  246341B8   ADDIU V1, V1, 16824
9D001EAC  000210C0   SLL V0, V0, 3
9D001EB0  00022080   SLL A0, V0, 2
9D001EB4  00821023   SUBU V0, A0, V0
9D001EB8  00621021   ADDU V0, V1, V0
9D001EBC  8C420014   LW V0, 20(V0)
9D001EC0  24430001   ADDIU V1, V0, 1
9D001EC4  3C028000   LUI V0, -32768
9D001EC8  244441B8   ADDIU A0, V0, 16824
9D001ECC  00A01021   ADDU V0, A1, ZERO
9D001ED0  000210C0   SLL V0, V0, 3
9D001ED4  00022880   SLL A1, V0, 2
9D001ED8  00A21023   SUBU V0, A1, V0
9D001EDC  00821021   ADDU V0, A0, V0
9D001EE0  AC430014   SW V1, 20(V0)
9D001EE4  0B4007F2   J 0x9D001FC8
9D001EE8  00000000   NOP
515:                         }
516:                     }      
517:                     else if(input == ADVANCE)
9D001EEC  8FC20020   LW V0, 32(S8)
9D001EF0  14400035   BNE V0, ZERO, 0x9D001FC8
9D001EF4  00000000   NOP
518:                     {
519:                         needCard = 1;
9D001EF8  24020001   ADDIU V0, ZERO, 1
9D001EFC  AF82806C   SW V0, -32660(GP)
520:                         logConquer(currentPlayer, destination, territories[destination].troops);
9D001F00  8F8480D4   LW A0, -32556(GP)
9D001F04  8F8380E0   LW V1, -32544(GP)
9D001F08  8F8280E0   LW V0, -32544(GP)
9D001F0C  3C058000   LUI A1, -32768
9D001F10  24A541B8   ADDIU A1, A1, 16824
9D001F14  000210C0   SLL V0, V0, 3
9D001F18  00023080   SLL A2, V0, 2
9D001F1C  00C21023   SUBU V0, A2, V0
9D001F20  00A21021   ADDU V0, A1, V0
9D001F24  8C420014   LW V0, 20(V0)
9D001F28  00602821   ADDU A1, V1, ZERO
9D001F2C  00403021   ADDU A2, V0, ZERO
9D001F30  0F401D56   JAL logConquer
9D001F34  00000000   NOP
521:                         for(int i = 0; i < numPlayers; i++)
9D001F38  AFC00010   SW ZERO, 16(S8)
9D001F3C  0B4007EA   J 0x9D001FA8
9D001F40  00000000   NOP
9D001F9C  8FC20010   LW V0, 16(S8)
9D001FA0  24420001   ADDIU V0, V0, 1
9D001FA4  AFC20010   SW V0, 16(S8)
9D001FA8  8F8280DC   LW V0, -32548(GP)
9D001FAC  8FC30010   LW V1, 16(S8)
9D001FB0  0062102A   SLT V0, V1, V0
9D001FB4  1440FFE3   BNE V0, ZERO, 0x9D001F44
9D001FB8  00000000   NOP
522:                         {
523:                             // Game continues unless current player is the only one left.
524:                             if(i != currentPlayer && playerLiving(i))
9D001F44  8F8280D4   LW V0, -32556(GP)
9D001F48  8FC30010   LW V1, 16(S8)
9D001F4C  10620013   BEQ V1, V0, 0x9D001F9C
9D001F50  00000000   NOP
9D001F54  8FC40010   LW A0, 16(S8)
9D001F58  0F400A9C   JAL playerLiving
9D001F5C  00000000   NOP
9D001F60  1040000E   BEQ V0, ZERO, 0x9D001F9C
9D001F64  00000000   NOP
525:                             {
526:                                 if(mustTrade)
9D001F68  8F828068   LW V0, -32664(GP)
9D001F6C  10400006   BEQ V0, ZERO, 0x9D001F88
9D001F70  00000000   NOP
527:                                     changeState(REINFORCE);
9D001F74  24040003   ADDIU A0, ZERO, 3
9D001F78  0F4009A8   JAL changeState
9D001F7C  00000000   NOP
528:                                 else
529:                                     changeState(ATTACK1);
9D001F88  24040004   ADDIU A0, ZERO, 4
9D001F8C  0F4009A8   JAL changeState
9D001F90  00000000   NOP
530:                                 return;
9D001F80  0B4007F2   J 0x9D001FC8
9D001F84  00000000   NOP
9D001F94  0B4007F2   J 0x9D001FC8
9D001F98  00000000   NOP
531:                             }
532:                         }
533:                         changeState(GAMEOVER);
9D001FBC  2404000B   ADDIU A0, ZERO, 11
9D001FC0  0F4009A8   JAL changeState
9D001FC4  00000000   NOP
534:                     }
535:                 }
9D001FC8  03C0E821   ADDU SP, S8, ZERO
9D001FCC  8FBF001C   LW RA, 28(SP)
9D001FD0  8FBE0018   LW S8, 24(SP)
9D001FD4  27BD0020   ADDIU SP, SP, 32
9D001FD8  03E00008   JR RA
9D001FDC  00000000   NOP
536:                 
537:                 
538:                 void moveTroops(Input input)
539:                 {
9D001FE0  27BDFFE8   ADDIU SP, SP, -24
9D001FE4  AFBF0014   SW RA, 20(SP)
9D001FE8  AFBE0010   SW S8, 16(SP)
9D001FEC  03A0F021   ADDU S8, SP, ZERO
9D001FF0  AFC40018   SW A0, 24(S8)
540:                     if(input == NEXT && !confirm)
9D001FF4  8FC30018   LW V1, 24(S8)
9D001FF8  24020002   ADDIU V0, ZERO, 2
9D001FFC  1462000C   BNE V1, V0, 0x9D002030
9D002000  00000000   NOP
9D002004  8F828078   LW V0, -32648(GP)
9D002008  14400009   BNE V0, ZERO, 0x9D002030
9D00200C  00000000   NOP
541:                         moveSelection(1, 1, predMoveSource);
9D002010  24040001   ADDIU A0, ZERO, 1
9D002014  24050001   ADDIU A1, ZERO, 1
9D002018  3C029D00   LUI V0, -25344
9D00201C  244666F0   ADDIU A2, V0, 26352
9D002020  0F400965   JAL moveSelection
9D002024  00000000   NOP
9D002028  0B40084B   J 0x9D00212C
9D00202C  00000000   NOP
542:                     else if(input == PREVIOUS && !confirm)
9D002030  8FC30018   LW V1, 24(S8)
9D002034  24020003   ADDIU V0, ZERO, 3
9D002038  1462000C   BNE V1, V0, 0x9D00206C
9D00203C  00000000   NOP
9D002040  8F828078   LW V0, -32648(GP)
9D002044  14400009   BNE V0, ZERO, 0x9D00206C
9D002048  00000000   NOP
543:                         moveSelection(1, -1, predMoveSource);
9D00204C  24040001   ADDIU A0, ZERO, 1
9D002050  2405FFFF   ADDIU A1, ZERO, -1
9D002054  3C029D00   LUI V0, -25344
9D002058  244666F0   ADDIU A2, V0, 26352
9D00205C  0F400965   JAL moveSelection
9D002060  00000000   NOP
9D002064  0B40084B   J 0x9D00212C
9D002068  00000000   NOP
544:                     else if(input == ADVANCE)
9D00206C  8FC20018   LW V0, 24(S8)
9D002070  14400024   BNE V0, ZERO, 0x9D002104
9D002074  00000000   NOP
545:                     {
546:                         if(confirm)
9D002078  8F828078   LW V0, -32648(GP)
9D00207C  10400014   BEQ V0, ZERO, 0x9D0020D0
9D002080  00000000   NOP
547:                         {
548:                             do
549:                             {
550:                                 currentPlayer += 1;
9D002084  8F8280D4   LW V0, -32556(GP)
9D002088  24420001   ADDIU V0, V0, 1
9D00208C  AF8280D4   SW V0, -32556(GP)
551:                                 if(currentPlayer == numPlayers)
9D002090  8F8380D4   LW V1, -32556(GP)
9D002094  8F8280DC   LW V0, -32548(GP)
9D002098  14620002   BNE V1, V0, 0x9D0020A4
9D00209C  00000000   NOP
552:                                     currentPlayer = 0;
9D0020A0  AF8080D4   SW ZERO, -32556(GP)
553:                             } while(!playerLiving(currentPlayer));
9D0020A4  8F8280D4   LW V0, -32556(GP)
9D0020A8  00402021   ADDU A0, V0, ZERO
9D0020AC  0F400A9C   JAL playerLiving
9D0020B0  00000000   NOP
9D0020B4  1040FFF3   BEQ V0, ZERO, 0x9D002084
9D0020B8  00000000   NOP
554:                 
555:                             changeState(REINFORCE);
9D0020BC  24040003   ADDIU A0, ZERO, 3
9D0020C0  0F4009A8   JAL changeState
9D0020C4  00000000   NOP
556:                             return;
9D0020C8  0B40084B   J 0x9D00212C
9D0020CC  00000000   NOP
557:                         }
558:                 
559:                         if(source == -1)
9D0020D0  8F8380EC   LW V1, -32532(GP)
9D0020D4  2402FFFF   ADDIU V0, ZERO, -1
9D0020D8  10620013   BEQ V1, V0, 0x9D002128
9D0020DC  00000000   NOP
560:                             return;
9D002128  00000000   NOP
561:                 
562:                         computeConnected(source);
9D0020E0  8F8280EC   LW V0, -32532(GP)
9D0020E4  00402021   ADDU A0, V0, ZERO
9D0020E8  0F401A3C   JAL computeConnected
9D0020EC  00000000   NOP
563:                         changeState(MOVE2);
9D0020F0  24040009   ADDIU A0, ZERO, 9
9D0020F4  0F4009A8   JAL changeState
9D0020F8  00000000   NOP
9D0020FC  0B40084B   J 0x9D00212C
9D002100  00000000   NOP
564:                     }
565:                     else if(input == CANCEL)
9D002104  8FC30018   LW V1, 24(S8)
9D002108  24020001   ADDIU V0, ZERO, 1
9D00210C  14620007   BNE V1, V0, 0x9D00212C
9D002110  00000000   NOP
566:                     {
567:                         confirm = !confirm;
9D002114  8F828078   LW V0, -32648(GP)
9D002118  2C420001   SLTIU V0, V0, 1
9D00211C  AF828078   SW V0, -32648(GP)
9D002120  0B40084B   J 0x9D00212C
9D002124  00000000   NOP
568:                     }
569:                 }
9D00212C  03C0E821   ADDU SP, S8, ZERO
9D002130  8FBF0014   LW RA, 20(SP)
9D002134  8FBE0010   LW S8, 16(SP)
9D002138  27BD0018   ADDIU SP, SP, 24
9D00213C  03E00008   JR RA
9D002140  00000000   NOP
570:                 void moveTroopsTarget(Input input)
571:                 {
9D002144  27BDFFE8   ADDIU SP, SP, -24
9D002148  AFBF0014   SW RA, 20(SP)
9D00214C  AFBE0010   SW S8, 16(SP)
9D002150  03A0F021   ADDU S8, SP, ZERO
9D002154  AFC40018   SW A0, 24(S8)
572:                     if(input == NEXT)
9D002158  8FC30018   LW V1, 24(S8)
9D00215C  24020002   ADDIU V0, ZERO, 2
9D002160  14620009   BNE V1, V0, 0x9D002188
9D002164  00000000   NOP
573:                         moveSelection(0, 1, predMoveTarget);
9D002168  00002021   ADDU A0, ZERO, ZERO
9D00216C  24050001   ADDIU A1, ZERO, 1
9D002170  3C029D00   LUI V0, -25344
9D002174  24466848   ADDIU A2, V0, 26696
9D002178  0F400965   JAL moveSelection
9D00217C  00000000   NOP
9D002180  0B400884   J 0x9D002210
9D002184  00000000   NOP
574:                     else if(input == PREVIOUS)
9D002188  8FC30018   LW V1, 24(S8)
9D00218C  24020003   ADDIU V0, ZERO, 3
9D002190  14620009   BNE V1, V0, 0x9D0021B8
9D002194  00000000   NOP
575:                         moveSelection(0, -1, predMoveTarget);
9D002198  00002021   ADDU A0, ZERO, ZERO
9D00219C  2405FFFF   ADDIU A1, ZERO, -1
9D0021A0  3C029D00   LUI V0, -25344
9D0021A4  24466848   ADDIU A2, V0, 26696
9D0021A8  0F400965   JAL moveSelection
9D0021AC  00000000   NOP
9D0021B0  0B400884   J 0x9D002210
9D0021B4  00000000   NOP
576:                     else if(input == ADVANCE)
9D0021B8  8FC20018   LW V0, 24(S8)
9D0021BC  1440000A   BNE V0, ZERO, 0x9D0021E8
9D0021C0  00000000   NOP
577:                     {
578:                         if(destination == -1)
9D0021C4  8F8380E0   LW V1, -32544(GP)
9D0021C8  2402FFFF   ADDIU V0, ZERO, -1
9D0021CC  1062000F   BEQ V1, V0, 0x9D00220C
9D0021D0  00000000   NOP
579:                             return;
9D00220C  00000000   NOP
580:                         changeState(MOVE3);
9D0021D4  2404000A   ADDIU A0, ZERO, 10
9D0021D8  0F4009A8   JAL changeState
9D0021DC  00000000   NOP
9D0021E0  0B400884   J 0x9D002210
9D0021E4  00000000   NOP
581:                     }
582:                     else if(input == CANCEL)
9D0021E8  8FC30018   LW V1, 24(S8)
9D0021EC  24020001   ADDIU V0, ZERO, 1
9D0021F0  14620007   BNE V1, V0, 0x9D002210
9D0021F4  00000000   NOP
583:                         changeState(MOVE1);
9D0021F8  24040008   ADDIU A0, ZERO, 8
9D0021FC  0F4009A8   JAL changeState
9D002200  00000000   NOP
9D002204  0B400884   J 0x9D002210
9D002208  00000000   NOP
584:                 }
9D002210  03C0E821   ADDU SP, S8, ZERO
9D002214  8FBF0014   LW RA, 20(SP)
9D002218  8FBE0010   LW S8, 16(SP)
9D00221C  27BD0018   ADDIU SP, SP, 24
9D002220  03E00008   JR RA
9D002224  00000000   NOP
585:                 void moveTroopsNumber(Input input)
586:                 {
9D002228  27BDFFE8   ADDIU SP, SP, -24
9D00222C  AFBF0014   SW RA, 20(SP)
9D002230  AFBE0010   SW S8, 16(SP)
9D002234  03A0F021   ADDU S8, SP, ZERO
9D002238  AFC40018   SW A0, 24(S8)
587:                     if(input == NEXT)
9D00223C  8FC30018   LW V1, 24(S8)
9D002240  24020002   ADDIU V0, ZERO, 2
9D002244  14620032   BNE V1, V0, 0x9D002310
9D002248  00000000   NOP
588:                     {
589:                         if(territories[source].troops > 1)
9D00224C  8F8280EC   LW V0, -32532(GP)
9D002250  3C038000   LUI V1, -32768
9D002254  246341B8   ADDIU V1, V1, 16824
9D002258  000210C0   SLL V0, V0, 3
9D00225C  00022080   SLL A0, V0, 2
9D002260  00821023   SUBU V0, A0, V0
9D002264  00621021   ADDU V0, V1, V0
9D002268  8C420014   LW V0, 20(V0)
9D00226C  28420002   SLTI V0, V0, 2
9D002270  144000B0   BNE V0, ZERO, 0x9D002534
9D002274  00000000   NOP
590:                         {
591:                             territories[destination].troops += 1;
9D002278  8F8580E0   LW A1, -32544(GP)
9D00227C  8F8280E0   LW V0, -32544(GP)
9D002280  3C038000   LUI V1, -32768
9D002284  246341B8   ADDIU V1, V1, 16824
9D002288  000210C0   SLL V0, V0, 3
9D00228C  00022080   SLL A0, V0, 2
9D002290  00821023   SUBU V0, A0, V0
9D002294  00621021   ADDU V0, V1, V0
9D002298  8C420014   LW V0, 20(V0)
9D00229C  24430001   ADDIU V1, V0, 1
9D0022A0  3C028000   LUI V0, -32768
9D0022A4  244441B8   ADDIU A0, V0, 16824
9D0022A8  00A01021   ADDU V0, A1, ZERO
9D0022AC  000210C0   SLL V0, V0, 3
9D0022B0  00022880   SLL A1, V0, 2
9D0022B4  00A21023   SUBU V0, A1, V0
9D0022B8  00821021   ADDU V0, A0, V0
9D0022BC  AC430014   SW V1, 20(V0)
592:                             territories[source].troops -= 1;
9D0022C0  8F8580EC   LW A1, -32532(GP)
9D0022C4  8F8280EC   LW V0, -32532(GP)
9D0022C8  3C038000   LUI V1, -32768
9D0022CC  246341B8   ADDIU V1, V1, 16824
9D0022D0  000210C0   SLL V0, V0, 3
9D0022D4  00022080   SLL A0, V0, 2
9D0022D8  00821023   SUBU V0, A0, V0
9D0022DC  00621021   ADDU V0, V1, V0
9D0022E0  8C420014   LW V0, 20(V0)
9D0022E4  2443FFFF   ADDIU V1, V0, -1
9D0022E8  3C028000   LUI V0, -32768
9D0022EC  244441B8   ADDIU A0, V0, 16824
9D0022F0  00A01021   ADDU V0, A1, ZERO
9D0022F4  000210C0   SLL V0, V0, 3
9D0022F8  00022880   SLL A1, V0, 2
9D0022FC  00A21023   SUBU V0, A1, V0
9D002300  00821021   ADDU V0, A0, V0
9D002304  AC430014   SW V1, 20(V0)
9D002308  0B40094D   J 0x9D002534
9D00230C  00000000   NOP
593:                         }
594:                     }
595:                     else if(input == PREVIOUS)
9D002310  8FC30018   LW V1, 24(S8)
9D002314  24020003   ADDIU V0, ZERO, 3
9D002318  14620033   BNE V1, V0, 0x9D0023E8
9D00231C  00000000   NOP
596:                     {
597:                         if(territories[source].troops < numTroops)
9D002320  8F8280EC   LW V0, -32532(GP)
9D002324  3C038000   LUI V1, -32768
9D002328  246341B8   ADDIU V1, V1, 16824
9D00232C  000210C0   SLL V0, V0, 3
9D002330  00022080   SLL A0, V0, 2
9D002334  00821023   SUBU V0, A0, V0
9D002338  00621021   ADDU V0, V1, V0
9D00233C  8C430014   LW V1, 20(V0)
9D002340  8F82805C   LW V0, -32676(GP)
9D002344  0062102A   SLT V0, V1, V0
9D002348  1040007A   BEQ V0, ZERO, 0x9D002534
9D00234C  00000000   NOP
598:                         {
599:                             territories[destination].troops -= 1;
9D002350  8F8580E0   LW A1, -32544(GP)
9D002354  8F8280E0   LW V0, -32544(GP)
9D002358  3C038000   LUI V1, -32768
9D00235C  246341B8   ADDIU V1, V1, 16824
9D002360  000210C0   SLL V0, V0, 3
9D002364  00022080   SLL A0, V0, 2
9D002368  00821023   SUBU V0, A0, V0
9D00236C  00621021   ADDU V0, V1, V0
9D002370  8C420014   LW V0, 20(V0)
9D002374  2443FFFF   ADDIU V1, V0, -1
9D002378  3C028000   LUI V0, -32768
9D00237C  244441B8   ADDIU A0, V0, 16824
9D002380  00A01021   ADDU V0, A1, ZERO
9D002384  000210C0   SLL V0, V0, 3
9D002388  00022880   SLL A1, V0, 2
9D00238C  00A21023   SUBU V0, A1, V0
9D002390  00821021   ADDU V0, A0, V0
9D002394  AC430014   SW V1, 20(V0)
600:                             territories[source].troops += 1;
9D002398  8F8580EC   LW A1, -32532(GP)
9D00239C  8F8280EC   LW V0, -32532(GP)
9D0023A0  3C038000   LUI V1, -32768
9D0023A4  246341B8   ADDIU V1, V1, 16824
9D0023A8  000210C0   SLL V0, V0, 3
9D0023AC  00022080   SLL A0, V0, 2
9D0023B0  00821023   SUBU V0, A0, V0
9D0023B4  00621021   ADDU V0, V1, V0
9D0023B8  8C420014   LW V0, 20(V0)
9D0023BC  24430001   ADDIU V1, V0, 1
9D0023C0  3C028000   LUI V0, -32768
9D0023C4  244441B8   ADDIU A0, V0, 16824
9D0023C8  00A01021   ADDU V0, A1, ZERO
9D0023CC  000210C0   SLL V0, V0, 3
9D0023D0  00022880   SLL A1, V0, 2
9D0023D4  00A21023   SUBU V0, A1, V0
9D0023D8  00821021   ADDU V0, A0, V0
9D0023DC  AC430014   SW V1, 20(V0)
9D0023E0  0B40094D   J 0x9D002534
9D0023E4  00000000   NOP
601:                         }
602:                     }
603:                     else if(input == ADVANCE)
9D0023E8  8FC20018   LW V0, 24(S8)
9D0023EC  14400025   BNE V0, ZERO, 0x9D002484
9D0023F0  00000000   NOP
604:                     {
605:                         logMove(currentPlayer, source, destination, 
9D0023F4  8F8480D4   LW A0, -32556(GP)
9D0023F8  8F8580EC   LW A1, -32532(GP)
9D0023FC  8F8380E0   LW V1, -32544(GP)
9D002400  8F86805C   LW A2, -32676(GP)
9D002424  00C21023   SUBU V0, A2, V0
9D002428  00603021   ADDU A2, V1, ZERO
9D00242C  00403821   ADDU A3, V0, ZERO
9D002430  0F401D7E   JAL logMove
9D002434  00000000   NOP
606:                                 numTroops - territories[source].troops);
9D002404  8F8280EC   LW V0, -32532(GP)
9D002408  3C078000   LUI A3, -32768
9D00240C  24E741B8   ADDIU A3, A3, 16824
9D002410  000210C0   SLL V0, V0, 3
9D002414  00024080   SLL T0, V0, 2
9D002418  01021023   SUBU V0, T0, V0
9D00241C  00E21021   ADDU V0, A3, V0
9D002420  8C420014   LW V0, 20(V0)
607:                 
608:                         do
609:                         {
610:                             currentPlayer += 1;
9D002438  8F8280D4   LW V0, -32556(GP)
9D00243C  24420001   ADDIU V0, V0, 1
9D002440  AF8280D4   SW V0, -32556(GP)
611:                             if(currentPlayer == numPlayers)
9D002444  8F8380D4   LW V1, -32556(GP)
9D002448  8F8280DC   LW V0, -32548(GP)
9D00244C  14620002   BNE V1, V0, 0x9D002458
9D002450  00000000   NOP
612:                                 currentPlayer = 0;
9D002454  AF8080D4   SW ZERO, -32556(GP)
613:                         } while(!playerLiving(currentPlayer));
9D002458  8F8280D4   LW V0, -32556(GP)
9D00245C  00402021   ADDU A0, V0, ZERO
9D002460  0F400A9C   JAL playerLiving
9D002464  00000000   NOP
9D002468  1040FFF3   BEQ V0, ZERO, 0x9D002438
9D00246C  00000000   NOP
614:                         
615:                         changeState(REINFORCE);
9D002470  24040003   ADDIU A0, ZERO, 3
9D002474  0F4009A8   JAL changeState
9D002478  00000000   NOP
9D00247C  0B40094D   J 0x9D002534
9D002480  00000000   NOP
616:                     }
617:                     else if(input == CANCEL)
9D002484  8FC30018   LW V1, 24(S8)
9D002488  24020001   ADDIU V0, ZERO, 1
9D00248C  14620029   BNE V1, V0, 0x9D002534
9D002490  00000000   NOP
618:                     {
619:                         territories[destination].troops -= 
9D002494  8F8580E0   LW A1, -32544(GP)
9D002498  8F8280E0   LW V0, -32544(GP)
9D00249C  3C038000   LUI V1, -32768
9D0024A0  246341B8   ADDIU V1, V1, 16824
9D0024A4  000210C0   SLL V0, V0, 3
9D0024A8  00022080   SLL A0, V0, 2
9D0024AC  00821023   SUBU V0, A0, V0
9D0024B0  00621021   ADDU V0, V1, V0
9D0024B4  8C430014   LW V1, 20(V0)
9D0024E0  00621821   ADDU V1, V1, V0
9D0024E4  3C028000   LUI V0, -32768
9D0024E8  244441B8   ADDIU A0, V0, 16824
9D0024EC  00A01021   ADDU V0, A1, ZERO
9D0024F0  000210C0   SLL V0, V0, 3
9D0024F4  00022880   SLL A1, V0, 2
9D0024F8  00A21023   SUBU V0, A1, V0
9D0024FC  00821021   ADDU V0, A0, V0
9D002500  AC430014   SW V1, 20(V0)
620:                             numTroops - territories[source].troops;
9D0024B8  8F8280EC   LW V0, -32532(GP)
9D0024BC  3C048000   LUI A0, -32768
9D0024C0  248441B8   ADDIU A0, A0, 16824
9D0024C4  000210C0   SLL V0, V0, 3
9D0024C8  00023080   SLL A2, V0, 2
9D0024CC  00C21023   SUBU V0, A2, V0
9D0024D0  00821021   ADDU V0, A0, V0
9D0024D4  8C440014   LW A0, 20(V0)
9D0024D8  8F82805C   LW V0, -32676(GP)
9D0024DC  00821023   SUBU V0, A0, V0
621:                         territories[source].troops = numTroops;
9D002504  8F8280EC   LW V0, -32532(GP)
9D002508  8F83805C   LW V1, -32676(GP)
9D00250C  3C048000   LUI A0, -32768
9D002510  248441B8   ADDIU A0, A0, 16824
9D002514  000210C0   SLL V0, V0, 3
9D002518  00022880   SLL A1, V0, 2
9D00251C  00A21023   SUBU V0, A1, V0
9D002520  00821021   ADDU V0, A0, V0
9D002524  AC430014   SW V1, 20(V0)
622:                         changeState(MOVE2);
9D002528  24040009   ADDIU A0, ZERO, 9
9D00252C  0F4009A8   JAL changeState
9D002530  00000000   NOP
623:                     }
624:                 }
9D002534  03C0E821   ADDU SP, S8, ZERO
9D002538  8FBF0014   LW RA, 20(SP)
9D00253C  8FBE0010   LW S8, 16(SP)
9D002540  27BD0018   ADDIU SP, SP, 24
9D002544  03E00008   JR RA
9D002548  00000000   NOP
625:                 void gameOver(Input input)
626:                 {
9D00254C  27BDFFE8   ADDIU SP, SP, -24
9D002550  AFBF0014   SW RA, 20(SP)
9D002554  AFBE0010   SW S8, 16(SP)
9D002558  03A0F021   ADDU S8, SP, ZERO
9D00255C  AFC40018   SW A0, 24(S8)
627:                     if(input == CANCEL)
9D002560  8FC30018   LW V1, 24(S8)
9D002564  24020001   ADDIU V0, ZERO, 1
9D002568  14620004   BNE V1, V0, 0x9D00257C
9D00256C  00000000   NOP
628:                     {
629:                         changeState(INIT);
9D002570  00002021   ADDU A0, ZERO, ZERO
9D002574  0F4009A8   JAL changeState
9D002578  00000000   NOP
630:                     }
631:                 }
9D00257C  03C0E821   ADDU SP, S8, ZERO
9D002580  8FBF0014   LW RA, 20(SP)
9D002584  8FBE0010   LW S8, 16(SP)
9D002588  27BD0018   ADDIU SP, SP, 24
9D00258C  03E00008   JR RA
9D002590  00000000   NOP
632:                 
633:                 void moveSelection(int movesource, int direction, int (*predicate)(int))
634:                 {
9D002594  27BDFFE0   ADDIU SP, SP, -32
9D002598  AFBF001C   SW RA, 28(SP)
9D00259C  AFBE0018   SW S8, 24(SP)
9D0025A0  03A0F021   ADDU S8, SP, ZERO
9D0025A4  AFC40020   SW A0, 32(S8)
9D0025A8  AFC50024   SW A1, 36(S8)
9D0025AC  AFC60028   SW A2, 40(S8)
635:                     int * p = (movesource? &source : &destination);
9D0025B0  8FC20020   LW V0, 32(S8)
9D0025B4  10400004   BEQ V0, ZERO, 0x9D0025C8
9D0025B8  00000000   NOP
9D0025BC  278280EC   ADDIU V0, GP, -32532
9D0025C0  0B400973   J 0x9D0025CC
9D0025C4  00000000   NOP
9D0025C8  278280E0   ADDIU V0, GP, -32544
9D0025CC  AFC20014   SW V0, 20(S8)
636:                 
637:                     int tries = 0;
9D0025D0  AFC00010   SW ZERO, 16(S8)
638:                     while(tries < NUM_TERRITORIES)
9D0025D4  0B400998   J 0x9D002660
9D0025D8  00000000   NOP
9D002660  8FC20010   LW V0, 16(S8)
9D002664  28420002   SLTI V0, V0, 2
9D002668  1440FFDC   BNE V0, ZERO, 0x9D0025DC
9D00266C  00000000   NOP
639:                     {
640:                         *p += direction;
9D0025DC  8FC20014   LW V0, 20(S8)
9D0025E0  8C430000   LW V1, 0(V0)
9D0025E4  8FC20024   LW V0, 36(S8)
9D0025E8  00621821   ADDU V1, V1, V0
9D0025EC  8FC20014   LW V0, 20(S8)
9D0025F0  AC430000   SW V1, 0(V0)
641:                         if(*p < 0)
9D0025F4  8FC20014   LW V0, 20(S8)
9D0025F8  8C420000   LW V0, 0(V0)
9D0025FC  04410006   BGEZ V0, 0x9D002618
9D002600  00000000   NOP
642:                             *p = NUM_TERRITORIES - 1;
9D002604  8FC20014   LW V0, 20(S8)
9D002608  24030001   ADDIU V1, ZERO, 1
9D00260C  AC430000   SW V1, 0(V0)
9D002610  0B40098D   J 0x9D002634
9D002614  00000000   NOP
643:                         else if(*p >= NUM_TERRITORIES)
9D002618  8FC20014   LW V0, 20(S8)
9D00261C  8C420000   LW V0, 0(V0)
9D002620  28420002   SLTI V0, V0, 2
9D002624  14400003   BNE V0, ZERO, 0x9D002634
9D002628  00000000   NOP
644:                             *p = 0;
9D00262C  8FC20014   LW V0, 20(S8)
9D002630  AC400000   SW ZERO, 0(V0)
645:                 
646:                         tries++;
9D002634  8FC20010   LW V0, 16(S8)
9D002638  24420001   ADDIU V0, V0, 1
9D00263C  AFC20010   SW V0, 16(S8)
647:                         if(predicate(*p))
9D002640  8FC20014   LW V0, 20(S8)
9D002644  8C430000   LW V1, 0(V0)
9D002648  8FC20028   LW V0, 40(S8)
9D00264C  00602021   ADDU A0, V1, ZERO
9D002650  0040F809   JALR V0
9D002654  00000000   NOP
9D002658  1440000A   BNE V0, ZERO, 0x9D002684
9D00265C  00000000   NOP
648:                             return;
9D002684  00000000   NOP
649:                     }
650:                     // Couldn't find a valid territory, so make sure nothing is selected
651:                     *p = -1; 
9D002670  8FC20014   LW V0, 20(S8)
9D002674  2403FFFF   ADDIU V1, ZERO, -1
9D002678  AC430000   SW V1, 0(V0)
9D00267C  0B4009A2   J 0x9D002688
9D002680  00000000   NOP
652:                 }
9D002688  03C0E821   ADDU SP, S8, ZERO
9D00268C  8FBF001C   LW RA, 28(SP)
9D002690  8FBE0018   LW S8, 24(SP)
9D002694  27BD0020   ADDIU SP, SP, 32
9D002698  03E00008   JR RA
9D00269C  00000000   NOP
653:                 
654:                 void changeState(State newstate)
655:                 {
9D0026A0  27BDFFE0   ADDIU SP, SP, -32
9D0026A4  AFBF001C   SW RA, 28(SP)
9D0026A8  AFBE0018   SW S8, 24(SP)
9D0026AC  03A0F021   ADDU S8, SP, ZERO
9D0026B0  AFC40020   SW A0, 32(S8)
656:                     state = newstate;
9D0026B4  8FC20020   LW V0, 32(S8)
9D0026B8  AF828050   SW V0, -32688(GP)
657:                 
658:                     if(state == INIT)
9D0026BC  8F828050   LW V0, -32688(GP)
9D0026C0  1440000D   BNE V0, ZERO, 0x9D0026F8
9D0026C4  00000000   NOP
659:                     {
660:                         resetGame();
9D0026C8  0F400A75   JAL resetGame
9D0026CC  00000000   NOP
661:                         numPlayers = 2;
9D0026D0  24020002   ADDIU V0, ZERO, 2
9D0026D4  AF8280DC   SW V0, -32548(GP)
662:                         cardValueScheme = INCREASING;
9D0026D8  AF8080CC   SW ZERO, -32564(GP)
663:                         randomTerritories = 1;
9D0026DC  24020001   ADDIU V0, ZERO, 1
9D0026E0  AF8280D8   SW V0, -32552(GP)
664:                         multipleDeploy = 1;
9D0026E4  24020001   ADDIU V0, ZERO, 1
9D0026E8  AF8280F0   SW V0, -32528(GP)
665:                         currentOption = OPTION_NUM_PLAYERS; 
9D0026EC  AF808070   SW ZERO, -32656(GP)
666:                 
667:                         currentPlayer = -1;
9D0026F0  2402FFFF   ADDIU V0, ZERO, -1
9D0026F4  AF8280D4   SW V0, -32556(GP)
668:                     }
669:                 
670:                     if(state == SELECT)
9D0026F8  8F838050   LW V1, -32688(GP)
9D0026FC  24020001   ADDIU V0, ZERO, 1
9D002700  1462000C   BNE V1, V0, 0x9D002734
9D002704  00000000   NOP
671:                     {
672:                         territoriesRemaining = NUM_TERRITORIES;
9D002708  24020002   ADDIU V0, ZERO, 2
9D00270C  AF828058   SW V0, -32680(GP)
673:                         firstPlayer = randint(0, numPlayers - 1);
9D002710  8F8280DC   LW V0, -32548(GP)
9D002714  2442FFFF   ADDIU V0, V0, -1
9D002718  00002021   ADDU A0, ZERO, ZERO
9D00271C  00402821   ADDU A1, V0, ZERO
9D002720  0F401ACB   JAL randint
9D002724  00000000   NOP
9D002728  AF828054   SW V0, -32684(GP)
674:                         currentPlayer = firstPlayer;
9D00272C  8F828054   LW V0, -32684(GP)
9D002730  AF8280D4   SW V0, -32556(GP)
675:                     }
676:                 
677:                     if(state != BATTLE && state != CONQUER && state != MOVE3)
9D002734  8F838050   LW V1, -32688(GP)
9D002738  24020006   ADDIU V0, ZERO, 6
9D00273C  10620015   BEQ V1, V0, 0x9D002794
9D002740  00000000   NOP
9D002744  8F838050   LW V1, -32688(GP)
9D002748  24020007   ADDIU V0, ZERO, 7
9D00274C  10620011   BEQ V1, V0, 0x9D002794
9D002750  00000000   NOP
9D002754  8F838050   LW V1, -32688(GP)
9D002758  2402000A   ADDIU V0, ZERO, 10
9D00275C  1062000D   BEQ V1, V0, 0x9D002794
9D002760  00000000   NOP
678:                     {
679:                         destination = -1;
9D002764  2402FFFF   ADDIU V0, ZERO, -1
9D002768  AF8280E0   SW V0, -32544(GP)
680:                         if(state != ATTACK2 && state != MOVE2)
9D00276C  8F838050   LW V1, -32688(GP)
9D002770  24020005   ADDIU V0, ZERO, 5
9D002774  10620007   BEQ V1, V0, 0x9D002794
9D002778  00000000   NOP
9D00277C  8F838050   LW V1, -32688(GP)
9D002780  24020009   ADDIU V0, ZERO, 9
9D002784  10620003   BEQ V1, V0, 0x9D002794
9D002788  00000000   NOP
681:                             source = -1;
9D00278C  2402FFFF   ADDIU V0, ZERO, -1
9D002790  AF8280EC   SW V0, -32532(GP)
682:                     }
683:                 
684:                     if(state != ATTACK1 && state != BATTLE && state != CONQUER)
9D002794  8F838050   LW V1, -32688(GP)
9D002798  24020004   ADDIU V0, ZERO, 4
9D00279C  1062001A   BEQ V1, V0, 0x9D002808
9D0027A0  00000000   NOP
9D0027A4  8F838050   LW V1, -32688(GP)
9D0027A8  24020006   ADDIU V0, ZERO, 6
9D0027AC  10620016   BEQ V1, V0, 0x9D002808
9D0027B0  00000000   NOP
9D0027B4  8F838050   LW V1, -32688(GP)
9D0027B8  24020007   ADDIU V0, ZERO, 7
9D0027BC  10620012   BEQ V1, V0, 0x9D002808
9D0027C0  00000000   NOP
685:                     {
686:                         attackerDice[0] = attackerDice[1] = attackerDice[2] = 0;
9D0027C4  3C028000   LUI V0, -32768
9D0027C8  2442024C   ADDIU V0, V0, 588
9D0027CC  AC400008   SW ZERO, 8(V0)
9D0027D0  3C028000   LUI V0, -32768
9D0027D4  2442024C   ADDIU V0, V0, 588
9D0027D8  8C430008   LW V1, 8(V0)
9D0027DC  3C028000   LUI V0, -32768
9D0027E0  2442024C   ADDIU V0, V0, 588
9D0027E4  AC430004   SW V1, 4(V0)
9D0027E8  3C028000   LUI V0, -32768
9D0027EC  2442024C   ADDIU V0, V0, 588
9D0027F0  8C430004   LW V1, 4(V0)
9D0027F4  3C028000   LUI V0, -32768
9D0027F8  AC43024C   SW V1, 588(V0)
687:                         defenderDice[0] = defenderDice[1] = 0;
9D0027FC  AF8080E8   SW ZERO, -32536(GP)
9D002800  8F8280E8   LW V0, -32536(GP)
9D002804  AF8280E4   SW V0, -32540(GP)
688:                     }
689:                     
690:                     if(state == SELECT)
9D002808  8F838050   LW V1, -32688(GP)
9D00280C  24020001   ADDIU V0, ZERO, 1
9D002810  14620019   BNE V1, V0, 0x9D002878
9D002814  00000000   NOP
691:                     {
692:                         for(int i = 0; i < numPlayers; i++)
9D002818  AFC00010   SW ZERO, 16(S8)
9D00281C  0B400A17   J 0x9D00285C
9D002820  00000000   NOP
9D002850  8FC20010   LW V0, 16(S8)
9D002854  24420001   ADDIU V0, V0, 1
9D002858  AFC20010   SW V0, 16(S8)
9D00285C  8F8280DC   LW V0, -32548(GP)
9D002860  8FC30010   LW V1, 16(S8)
9D002864  0062102A   SLT V0, V1, V0
9D002868  1440FFEE   BNE V0, ZERO, 0x9D002824
9D00286C  00000000   NOP
9D002870  0B400A4B   J 0x9D00292C
9D002874  00000000   NOP
693:                             deployTroopsLeft[i] = initialTroops[numPlayers];
9D002824  8F8380DC   LW V1, -32548(GP)
9D002828  3C029D01   LUI V0, -25343
9D00282C  00031880   SLL V1, V1, 2
9D002830  2442B7D0   ADDIU V0, V0, -18480
9D002834  00621021   ADDU V0, V1, V0
9D002838  8C430000   LW V1, 0(V0)
9D00283C  8FC20010   LW V0, 16(S8)
9D002840  00022080   SLL A0, V0, 2
9D002844  27828060   ADDIU V0, GP, -32672
9D002848  00821021   ADDU V0, A0, V0
9D00284C  AC430000   SW V1, 0(V0)
694:                     }
695:                     else if(state == DEPLOY)
9D002878  8F838050   LW V1, -32688(GP)
9D00287C  24020002   ADDIU V0, ZERO, 2
9D002880  1462000C   BNE V1, V0, 0x9D0028B4
9D002884  00000000   NOP
696:                     {
697:                         numTroops = min(deployTroopsLeft[currentPlayer], multipleDeploy);
9D002888  8F8280D4   LW V0, -32556(GP)
9D00288C  00021880   SLL V1, V0, 2
9D002890  27828060   ADDIU V0, GP, -32672
9D002894  00621021   ADDU V0, V1, V0
9D002898  8C430000   LW V1, 0(V0)
9D00289C  8F8280F0   LW V0, -32528(GP)
9D0028A0  0043202A   SLT A0, V0, V1
9D0028A4  0064100A   MOVZ V0, V1, A0
9D0028A8  AF82805C   SW V0, -32676(GP)
9D0028AC  0B400A4B   J 0x9D00292C
9D0028B0  00000000   NOP
698:                     }
699:                     else if(state == REINFORCE)
9D0028B4  8F838050   LW V1, -32688(GP)
9D0028B8  24020003   ADDIU V0, ZERO, 3
9D0028BC  1462000E   BNE V1, V0, 0x9D0028F8
9D0028C0  00000000   NOP
700:                     {
701:                         if(mustTrade)
9D0028C4  8F828068   LW V0, -32664(GP)
9D0028C8  10400004   BEQ V0, ZERO, 0x9D0028DC
9D0028CC  00000000   NOP
702:                             numTroops = 0;
9D0028D0  AF80805C   SW ZERO, -32676(GP)
9D0028D4  0B400A4B   J 0x9D00292C
9D0028D8  00000000   NOP
703:                         else
704:                             numTroops = computeReinforcements(currentPlayer);
9D0028DC  8F8280D4   LW V0, -32556(GP)
9D0028E0  00402021   ADDU A0, V0, ZERO
9D0028E4  0F400ABE   JAL computeReinforcements
9D0028E8  00000000   NOP
9D0028EC  AF82805C   SW V0, -32676(GP)
9D0028F0  0B400A4B   J 0x9D00292C
9D0028F4  00000000   NOP
705:                     }
706:                     else if(state == MOVE3)
9D0028F8  8F838050   LW V1, -32688(GP)
9D0028FC  2402000A   ADDIU V0, ZERO, 10
9D002900  1462000A   BNE V1, V0, 0x9D00292C
9D002904  00000000   NOP
707:                         numTroops = territories[source].troops;
9D002908  8F8280EC   LW V0, -32532(GP)
9D00290C  3C038000   LUI V1, -32768
9D002910  246341B8   ADDIU V1, V1, 16824
9D002914  000210C0   SLL V0, V0, 3
9D002918  00022080   SLL A0, V0, 2
9D00291C  00821023   SUBU V0, A0, V0
9D002920  00621021   ADDU V0, V1, V0
9D002924  8C420014   LW V0, 20(V0)
9D002928  AF82805C   SW V0, -32676(GP)
708:                     // numTroops is also used by CONQUER, but it needs to be set earlier than
709:                     // this function is called
710:                 
711:                     if(state == REINFORCE)
9D00292C  8F838050   LW V1, -32688(GP)
9D002930  24020003   ADDIU V0, ZERO, 3
9D002934  14620013   BNE V1, V0, 0x9D002984
9D002938  00000000   NOP
712:                     {
713:                         reinforceMenu = 0;
9D00293C  AF808074   SW ZERO, -32652(GP)
714:                         if(hands[currentPlayer].cards >= 5)
9D002940  8F8280D4   LW V0, -32556(GP)
9D002944  3C038000   LUI V1, -32768
9D002948  00021080   SLL V0, V0, 2
9D00294C  00022080   SLL A0, V0, 2
9D002950  00441021   ADDU V0, V0, A0
9D002954  00022080   SLL A0, V0, 2
9D002958  00441021   ADDU V0, V0, A0
9D00295C  24630124   ADDIU V1, V1, 292
9D002960  00431021   ADDU V0, V0, V1
9D002964  8C420060   LW V0, 96(V0)
9D002968  28420005   SLTI V0, V0, 5
9D00296C  1440000A   BNE V0, ZERO, 0x9D002998
9D002970  00000000   NOP
715:                             mustTrade = 1;
9D002974  24020001   ADDIU V0, ZERO, 1
9D002978  AF828068   SW V0, -32664(GP)
9D00297C  0B400A66   J 0x9D002998
9D002980  00000000   NOP
716:                     }
717:                     else if(state != CONQUER)
9D002984  8F838050   LW V1, -32688(GP)
9D002988  24020007   ADDIU V0, ZERO, 7
9D00298C  10620002   BEQ V1, V0, 0x9D002998
9D002990  00000000   NOP
718:                         mustTrade = 0;
9D002994  AF808068   SW ZERO, -32664(GP)
719:                 
720:                     if(state == REINFORCE && !mustTrade)
9D002998  8F838050   LW V1, -32688(GP)
9D00299C  24020003   ADDIU V0, ZERO, 3
9D0029A0  14620005   BNE V1, V0, 0x9D0029B8
9D0029A4  00000000   NOP
9D0029A8  8F828068   LW V0, -32664(GP)
9D0029AC  14400002   BNE V0, ZERO, 0x9D0029B8
9D0029B0  00000000   NOP
721:                         needCard = 0;
9D0029B4  AF80806C   SW ZERO, -32660(GP)
722:                 
723:                     confirm = 0;
9D0029B8  AF808078   SW ZERO, -32648(GP)
724:                 }
9D0029BC  03C0E821   ADDU SP, S8, ZERO
9D0029C0  8FBF001C   LW RA, 28(SP)
9D0029C4  8FBE0018   LW S8, 24(SP)
9D0029C8  27BD0020   ADDIU SP, SP, 32
9D0029CC  03E00008   JR RA
9D0029D0  00000000   NOP
725:                 
726:                 void resetGame()
727:                 {
9D0029D4  27BDFFE0   ADDIU SP, SP, -32
9D0029D8  AFBF001C   SW RA, 28(SP)
9D0029DC  AFBE0018   SW S8, 24(SP)
9D0029E0  03A0F021   ADDU S8, SP, ZERO
728:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D0029E4  AFC00010   SW ZERO, 16(S8)
9D0029E8  0B400A90   J 0x9D002A40
9D0029EC  00000000   NOP
9D002A34  8FC20010   LW V0, 16(S8)
9D002A38  24420001   ADDIU V0, V0, 1
9D002A3C  AFC20010   SW V0, 16(S8)
9D002A40  8FC20010   LW V0, 16(S8)
9D002A44  28420002   SLTI V0, V0, 2
9D002A48  1440FFE9   BNE V0, ZERO, 0x9D0029F0
9D002A4C  00000000   NOP
729:                     {
730:                         territories[i].owner = -1;
9D0029F0  3C048000   LUI A0, -32768
9D0029F4  8FC20010   LW V0, 16(S8)
9D0029F8  000210C0   SLL V0, V0, 3
9D0029FC  00021880   SLL V1, V0, 2
9D002A00  00621823   SUBU V1, V1, V0
9D002A04  248241B8   ADDIU V0, A0, 16824
9D002A08  00621021   ADDU V0, V1, V0
9D002A0C  2403FFFF   ADDIU V1, ZERO, -1
9D002A10  AC430010   SW V1, 16(V0)
731:                         territories[i].troops = 0;
9D002A14  3C038000   LUI V1, -32768
9D002A18  8FC20010   LW V0, 16(S8)
9D002A1C  246341B8   ADDIU V1, V1, 16824
9D002A20  000210C0   SLL V0, V0, 3
9D002A24  00022080   SLL A0, V0, 2
9D002A28  00821023   SUBU V0, A0, V0
9D002A2C  00621021   ADDU V0, V1, V0
9D002A30  AC400014   SW ZERO, 20(V0)
732:                     }
733:                     initCards();
9D002A50  0F4012C4   JAL initCards
9D002A54  00000000   NOP
734:                 }
9D002A58  03C0E821   ADDU SP, S8, ZERO
9D002A5C  8FBF001C   LW RA, 28(SP)
9D002A60  8FBE0018   LW S8, 24(SP)
9D002A64  27BD0020   ADDIU SP, SP, 32
9D002A68  03E00008   JR RA
9D002A6C  00000000   NOP
735:                 
736:                 int playerLiving(int player)
737:                 {
9D002A70  27BDFFF0   ADDIU SP, SP, -16
9D002A74  AFBE000C   SW S8, 12(SP)
9D002A78  03A0F021   ADDU S8, SP, ZERO
9D002A7C  AFC40010   SW A0, 16(S8)
738:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D002A80  AFC00000   SW ZERO, 0(S8)
9D002A84  0B400AB4   J 0x9D002AD0
9D002A88  00000000   NOP
9D002AC4  8FC20000   LW V0, 0(S8)
9D002AC8  24420001   ADDIU V0, V0, 1
9D002ACC  AFC20000   SW V0, 0(S8)
9D002AD0  8FC20000   LW V0, 0(S8)
9D002AD4  28420002   SLTI V0, V0, 2
9D002AD8  1440FFEC   BNE V0, ZERO, 0x9D002A8C
9D002ADC  00000000   NOP
739:                         if(territories[i].owner == player)
9D002A8C  3C048000   LUI A0, -32768
9D002A90  8FC20000   LW V0, 0(S8)
9D002A94  000210C0   SLL V0, V0, 3
9D002A98  00021880   SLL V1, V0, 2
9D002A9C  00621823   SUBU V1, V1, V0
9D002AA0  248241B8   ADDIU V0, A0, 16824
9D002AA4  00621021   ADDU V0, V1, V0
9D002AA8  8C430010   LW V1, 16(V0)
9D002AAC  8FC20010   LW V0, 16(S8)
9D002AB0  14620004   BNE V1, V0, 0x9D002AC4
9D002AB4  00000000   NOP
740:                             return 1;
9D002AB8  24020001   ADDIU V0, ZERO, 1
9D002ABC  0B400AB9   J 0x9D002AE4
9D002AC0  00000000   NOP
741:                     return 0;
9D002AE0  00001021   ADDU V0, ZERO, ZERO
742:                 }
9D002AE4  03C0E821   ADDU SP, S8, ZERO
9D002AE8  8FBE000C   LW S8, 12(SP)
9D002AEC  27BD0010   ADDIU SP, SP, 16
9D002AF0  03E00008   JR RA
9D002AF4  00000000   NOP
743:                 
744:                 int computeReinforcements(int player)
745:                 {
9D002AF8  27BDFFE0   ADDIU SP, SP, -32
9D002AFC  AFBE001C   SW S8, 28(SP)
9D002B00  03A0F021   ADDU S8, SP, ZERO
9D002B04  AFC40020   SW A0, 32(S8)
746:                     int territoriesHeld = 0;
9D002B08  AFC00000   SW ZERO, 0(S8)
747:                     int bonus = 0;
9D002B0C  AFC00004   SW ZERO, 4(S8)
748:                 
749:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D002B10  AFC00008   SW ZERO, 8(S8)
9D002B14  0B400AD8   J 0x9D002B60
9D002B18  00000000   NOP
9D002B54  8FC20008   LW V0, 8(S8)
9D002B58  24420001   ADDIU V0, V0, 1
9D002B5C  AFC20008   SW V0, 8(S8)
9D002B60  8FC20008   LW V0, 8(S8)
9D002B64  28420002   SLTI V0, V0, 2
9D002B68  1440FFEC   BNE V0, ZERO, 0x9D002B1C
9D002B6C  00000000   NOP
750:                         if(territories[i].owner == player)
9D002B1C  3C048000   LUI A0, -32768
9D002B20  8FC20008   LW V0, 8(S8)
9D002B24  000210C0   SLL V0, V0, 3
9D002B28  00021880   SLL V1, V0, 2
9D002B2C  00621823   SUBU V1, V1, V0
9D002B30  248241B8   ADDIU V0, A0, 16824
9D002B34  00621021   ADDU V0, V1, V0
9D002B38  8C430010   LW V1, 16(V0)
9D002B3C  8FC20020   LW V0, 32(S8)
9D002B40  14620004   BNE V1, V0, 0x9D002B54
9D002B44  00000000   NOP
751:                             territoriesHeld += 1;
9D002B48  8FC20000   LW V0, 0(S8)
9D002B4C  24420001   ADDIU V0, V0, 1
9D002B50  AFC20000   SW V0, 0(S8)
752:                 
753:                     for(int i = 0; i < NUM_CONTINENTS; i++)
9D002B70  AFC0000C   SW ZERO, 12(S8)
9D002B74  0B400B19   J 0x9D002C64
9D002B78  00000000   NOP
9D002C58  8FC2000C   LW V0, 12(S8)
9D002C5C  24420001   ADDIU V0, V0, 1
9D002C60  AFC2000C   SW V0, 12(S8)
9D002C64  8FC2000C   LW V0, 12(S8)
9D002C68  0440FFC4   BLTZ V0, 0x9D002B7C
9D002C6C  00000000   NOP
754:                     {
755:                         int j;
756:                         for(j = 0; j < continents[i].members; j++)
9D002B7C  AFC00010   SW ZERO, 16(S8)
9D002B80  0B400AF7   J 0x9D002BDC
9D002B84  00000000   NOP
9D002BD0  8FC20010   LW V0, 16(S8)
9D002BD4  24420001   ADDIU V0, V0, 1
9D002BD8  AFC20010   SW V0, 16(S8)
9D002BDC  3C020000   LUI V0, 0
9D002BE0  8FC3000C   LW V1, 12(S8)
9D002BE4  00031900   SLL V1, V1, 4
9D002BE8  24420000   ADDIU V0, V0, 0
9D002BEC  00621021   ADDU V0, V1, V0
9D002BF0  8C430008   LW V1, 8(V0)
9D002BF4  8FC20010   LW V0, 16(S8)
9D002BF8  0043102A   SLT V0, V0, V1
9D002BFC  1440FFE2   BNE V0, ZERO, 0x9D002B88
9D002C00  00000000   NOP
9D002C04  0B400B04   J 0x9D002C10
9D002C08  00000000   NOP
757:                         {
758:                             if(territories[j+continents[i].firstmember].owner != player)
9D002B88  3C030000   LUI V1, 0
9D002B8C  8FC2000C   LW V0, 12(S8)
9D002B90  24630000   ADDIU V1, V1, 0
9D002B94  00021100   SLL V0, V0, 4
9D002B98  00621021   ADDU V0, V1, V0
9D002B9C  8C430004   LW V1, 4(V0)
9D002BA0  8FC20010   LW V0, 16(S8)
9D002BA4  00621021   ADDU V0, V1, V0
9D002BA8  3C048000   LUI A0, -32768
9D002BAC  000210C0   SLL V0, V0, 3
9D002BB0  00021880   SLL V1, V0, 2
9D002BB4  00621823   SUBU V1, V1, V0
9D002BB8  248241B8   ADDIU V0, A0, 16824
9D002BBC  00621021   ADDU V0, V1, V0
9D002BC0  8C430010   LW V1, 16(V0)
9D002BC4  8FC20020   LW V0, 32(S8)
9D002BC8  14620010   BNE V1, V0, 0x9D002C0C
9D002BCC  00000000   NOP
759:                                 break;
9D002C0C  00000000   NOP
760:                         }
761:                         if(j == continents[i].members)
9D002C10  3C020000   LUI V0, 0
9D002C14  8FC3000C   LW V1, 12(S8)
9D002C18  00031900   SLL V1, V1, 4
9D002C1C  24420000   ADDIU V0, V0, 0
9D002C20  00621021   ADDU V0, V1, V0
9D002C24  8C430008   LW V1, 8(V0)
9D002C28  8FC20010   LW V0, 16(S8)
9D002C2C  1462000A   BNE V1, V0, 0x9D002C58
9D002C30  00000000   NOP
762:                             bonus += continents[i].value;
9D002C34  3C030000   LUI V1, 0
9D002C38  8FC2000C   LW V0, 12(S8)
9D002C3C  24630000   ADDIU V1, V1, 0
9D002C40  00021100   SLL V0, V0, 4
9D002C44  00621021   ADDU V0, V1, V0
9D002C48  8C42000C   LW V0, 12(V0)
9D002C4C  8FC30004   LW V1, 4(S8)
9D002C50  00621021   ADDU V0, V1, V0
9D002C54  AFC20004   SW V0, 4(S8)
763:                     }
764:                 
765:                     return bonus + max(3, territoriesHeld / 3);
9D002C70  8FC20000   LW V0, 0(S8)
9D002C74  2842000C   SLTI V0, V0, 12
9D002C78  14400009   BNE V0, ZERO, 0x9D002CA0
9D002C7C  00000000   NOP
9D002C80  8FC30000   LW V1, 0(S8)
9D002C84  24020003   ADDIU V0, ZERO, 3
9D002C88  0062001A   DIV V1, V0
9D002C8C  004001F4   TEQ V0, ZERO
9D002C90  00001810   MFHI V1, 0
9D002C94  00001012   MFLO V0, 0
9D002C98  0B400B29   J 0x9D002CA4
9D002C9C  00000000   NOP
9D002CA0  24020003   ADDIU V0, ZERO, 3
9D002CA4  8FC30004   LW V1, 4(S8)
9D002CA8  00431021   ADDU V0, V0, V1
766:                 }
9D002CAC  03C0E821   ADDU SP, S8, ZERO
9D002CB0  8FBE001C   LW S8, 28(SP)
9D002CB4  27BD0020   ADDIU SP, SP, 32
9D002CB8  03E00008   JR RA
9D002CBC  00000000   NOP
767:                 
768:                 #define SWAP(a,b) do{int tmp = a; a = b; b = tmp;}while(0)
769:                 void allocateRandomTerritories()
770:                 {
9D002CC0  27BDFFC8   ADDIU SP, SP, -56
9D002CC4  AFBF0034   SW RA, 52(SP)
9D002CC8  AFBE0030   SW S8, 48(SP)
9D002CCC  03A0F021   ADDU S8, SP, ZERO
771:                     // create a list and randomize it
772:                     int list[NUM_TERRITORIES];
773:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D002CD0  AFC00010   SW ZERO, 16(S8)
9D002CD4  0B400B40   J 0x9D002D00
9D002CD8  00000000   NOP
9D002CF4  8FC20010   LW V0, 16(S8)
9D002CF8  24420001   ADDIU V0, V0, 1
9D002CFC  AFC20010   SW V0, 16(S8)
9D002D00  8FC20010   LW V0, 16(S8)
9D002D04  28420002   SLTI V0, V0, 2
9D002D08  1440FFF4   BNE V0, ZERO, 0x9D002CDC
9D002D0C  00000000   NOP
774:                         list[i] = i;
9D002CDC  8FC20010   LW V0, 16(S8)
9D002CE0  00021080   SLL V0, V0, 2
9D002CE4  27C30010   ADDIU V1, S8, 16
9D002CE8  00621021   ADDU V0, V1, V0
9D002CEC  8FC30010   LW V1, 16(S8)
9D002CF0  AC430014   SW V1, 20(V0)
775:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D002D10  AFC00014   SW ZERO, 20(S8)
9D002D14  0B400B65   J 0x9D002D94
9D002D18  00000000   NOP
9D002D88  8FC20014   LW V0, 20(S8)
9D002D8C  24420001   ADDIU V0, V0, 1
9D002D90  AFC20014   SW V0, 20(S8)
9D002D94  8FC20014   LW V0, 20(S8)
9D002D98  28420002   SLTI V0, V0, 2
9D002D9C  1440FFDF   BNE V0, ZERO, 0x9D002D1C
9D002DA0  00000000   NOP
776:                     {
777:                         int r = randint(i, NUM_TERRITORIES - 1);
9D002D1C  8FC40014   LW A0, 20(S8)
9D002D20  24050001   ADDIU A1, ZERO, 1
9D002D24  0F401ACB   JAL randint
9D002D28  00000000   NOP
9D002D2C  AFC2001C   SW V0, 28(S8)
778:                         SWAP(list[i], list[r]);
9D002D30  8FC20014   LW V0, 20(S8)
9D002D34  00021080   SLL V0, V0, 2
9D002D38  27C30010   ADDIU V1, S8, 16
9D002D3C  00621021   ADDU V0, V1, V0
9D002D40  8C420014   LW V0, 20(V0)
9D002D44  AFC20020   SW V0, 32(S8)
9D002D48  8FC2001C   LW V0, 28(S8)
9D002D4C  00021080   SLL V0, V0, 2
9D002D50  27C30010   ADDIU V1, S8, 16
9D002D54  00621021   ADDU V0, V1, V0
9D002D58  8C430014   LW V1, 20(V0)
9D002D5C  8FC20014   LW V0, 20(S8)
9D002D60  00021080   SLL V0, V0, 2
9D002D64  27C40010   ADDIU A0, S8, 16
9D002D68  00821021   ADDU V0, A0, V0
9D002D6C  AC430014   SW V1, 20(V0)
9D002D70  8FC2001C   LW V0, 28(S8)
9D002D74  00021080   SLL V0, V0, 2
9D002D78  27C30010   ADDIU V1, S8, 16
9D002D7C  00621021   ADDU V0, V1, V0
9D002D80  8FC30020   LW V1, 32(S8)
9D002D84  AC430014   SW V1, 20(V0)
779:                     }
780:                 
781:                     // deal territories by forcing inputs
782:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D002DA4  AFC00018   SW ZERO, 24(S8)
9D002DA8  0B400B78   J 0x9D002DE0
9D002DAC  00000000   NOP
9D002DD4  8FC20018   LW V0, 24(S8)
9D002DD8  24420001   ADDIU V0, V0, 1
9D002DDC  AFC20018   SW V0, 24(S8)
9D002DE0  8FC20018   LW V0, 24(S8)
9D002DE4  28420002   SLTI V0, V0, 2
9D002DE8  1440FFF1   BNE V0, ZERO, 0x9D002DB0
9D002DEC  00000000   NOP
783:                     {
784:                         destination = list[i];
9D002DB0  8FC20018   LW V0, 24(S8)
9D002DB4  00021080   SLL V0, V0, 2
9D002DB8  27C30010   ADDIU V1, S8, 16
9D002DBC  00621021   ADDU V0, V1, V0
9D002DC0  8C420014   LW V0, 20(V0)
9D002DC4  AF8280E0   SW V0, -32544(GP)
785:                         selectTerritories(ADVANCE);
9D002DC8  00002021   ADDU A0, ZERO, ZERO
9D002DCC  0F400483   JAL 0x9D00120C
9D002DD0  00000000   NOP
786:                     }
787:                 }
9D002DF0  03C0E821   ADDU SP, S8, ZERO
9D002DF4  8FBF0034   LW RA, 52(SP)
9D002DF8  8FBE0030   LW S8, 48(SP)
9D002DFC  27BD0038   ADDIU SP, SP, 56
9D002E00  03E00008   JR RA
9D002E04  00000000   NOP
---  /home/jacob/Documents/477/RISK/game/cards.c  -------------------------------------------------------
1:                   #include "cards.h"
2:                   #include "gamedata.h"
3:                   #include "territory.h"
4:                   #include "io.h"
5:                   #include "log.h"
6:                   
7:                   Hand hands[MAX_PLAYERS];
8:                   int cardExchangeValue;
9:                   CardValueScheme cardValueScheme;
10:                  
11:                  int cardValueIndex;
12:                  
13:                  Card deck[NUM_CARDS];
14:                  int deckSize;
15:                  Card discards[NUM_CARDS];
16:                  int discardsSize;
17:                  
18:                  #define SWAP(a,b) do{Card tmp = a; a = b; b = tmp;}while(0)
19:                  
20:                  void shuffleDeck()
21:                  {
9D0049E8  27BDFFD0   ADDIU SP, SP, -48
9D0049EC  AFBF002C   SW RA, 44(SP)
9D0049F0  AFBE0028   SW S8, 40(SP)
9D0049F4  03A0F021   ADDU S8, SP, ZERO
22:                      for(int i = 0; i < deckSize; i++)
9D0049F8  AFC00010   SW ZERO, 16(S8)
9D0049FC  0B4012B9   J 0x9D004AE4
9D004A00  00000000   NOP
9D004AD8  8FC20010   LW V0, 16(S8)
9D004ADC  24420001   ADDIU V0, V0, 1
9D004AE0  AFC20010   SW V0, 16(S8)
9D004AE4  8F8280C4   LW V0, -32572(GP)
9D004AE8  8FC30010   LW V1, 16(S8)
9D004AEC  0062102A   SLT V0, V1, V0
9D004AF0  1440FFC4   BNE V0, ZERO, 0x9D004A04
9D004AF4  00000000   NOP
23:                      {
24:                          int r = randint(i, deckSize - 1);
9D004A04  8F8280C4   LW V0, -32572(GP)
9D004A08  2442FFFF   ADDIU V0, V0, -1
9D004A0C  8FC40010   LW A0, 16(S8)
9D004A10  00402821   ADDU A1, V0, ZERO
9D004A14  0F401ACB   JAL randint
9D004A18  00000000   NOP
9D004A1C  AFC20014   SW V0, 20(S8)
25:                          SWAP(deck[i], deck[r]);
9D004A20  3C048000   LUI A0, -32768
9D004A24  8FC20010   LW V0, 16(S8)
9D004A28  00021080   SLL V0, V0, 2
9D004A2C  00021880   SLL V1, V0, 2
9D004A30  00621823   SUBU V1, V1, V0
9D004A34  2482021C   ADDIU V0, A0, 540
9D004A38  00621021   ADDU V0, V1, V0
9D004A3C  8C440000   LW A0, 0(V0)
9D004A40  8C430004   LW V1, 4(V0)
9D004A44  8C420008   LW V0, 8(V0)
9D004A48  AFC40018   SW A0, 24(S8)
9D004A4C  AFC3001C   SW V1, 28(S8)
9D004A50  AFC20020   SW V0, 32(S8)
9D004A54  3C048000   LUI A0, -32768
9D004A58  8FC20010   LW V0, 16(S8)
9D004A5C  00021080   SLL V0, V0, 2
9D004A60  00021880   SLL V1, V0, 2
9D004A64  00621823   SUBU V1, V1, V0
9D004A68  2482021C   ADDIU V0, A0, 540
9D004A6C  00621821   ADDU V1, V1, V0
9D004A70  3C058000   LUI A1, -32768
9D004A74  8FC20014   LW V0, 20(S8)
9D004A78  00021080   SLL V0, V0, 2
9D004A7C  00022080   SLL A0, V0, 2
9D004A80  00822023   SUBU A0, A0, V0
9D004A84  24A2021C   ADDIU V0, A1, 540
9D004A88  00821021   ADDU V0, A0, V0
9D004A8C  8C450000   LW A1, 0(V0)
9D004A90  8C440004   LW A0, 4(V0)
9D004A94  8C420008   LW V0, 8(V0)
9D004A98  AC650000   SW A1, 0(V1)
9D004A9C  AC640004   SW A0, 4(V1)
9D004AA0  AC620008   SW V0, 8(V1)
9D004AA4  3C048000   LUI A0, -32768
9D004AA8  8FC20014   LW V0, 20(S8)
9D004AAC  00021080   SLL V0, V0, 2
9D004AB0  00021880   SLL V1, V0, 2
9D004AB4  00621823   SUBU V1, V1, V0
9D004AB8  2482021C   ADDIU V0, A0, 540
9D004ABC  00621021   ADDU V0, V1, V0
9D004AC0  8FC50018   LW A1, 24(S8)
9D004AC4  8FC4001C   LW A0, 28(S8)
9D004AC8  8FC30020   LW V1, 32(S8)
9D004ACC  AC450000   SW A1, 0(V0)
9D004AD0  AC440004   SW A0, 4(V0)
9D004AD4  AC430008   SW V1, 8(V0)
26:                      }
27:                  }
9D004AF8  03C0E821   ADDU SP, S8, ZERO
9D004AFC  8FBF002C   LW RA, 44(SP)
9D004B00  8FBE0028   LW S8, 40(SP)
9D004B04  27BD0030   ADDIU SP, SP, 48
9D004B08  03E00008   JR RA
9D004B0C  00000000   NOP
28:                  
29:                  void initCards()
30:                  {
9D004B10  27BDFFE0   ADDIU SP, SP, -32
9D004B14  AFBF001C   SW RA, 28(SP)
9D004B18  AFBE0018   SW S8, 24(SP)
9D004B1C  03A0F021   ADDU S8, SP, ZERO
31:                      for(int i = 0; i < MAX_PLAYERS; i++)
9D004B20  AFC00010   SW ZERO, 16(S8)
9D004B24  0B4012D8   J 0x9D004B60
9D004B28  00000000   NOP
9D004B54  8FC20010   LW V0, 16(S8)
9D004B58  24420001   ADDIU V0, V0, 1
9D004B5C  AFC20010   SW V0, 16(S8)
9D004B60  8FC20010   LW V0, 16(S8)
9D004B64  28420002   SLTI V0, V0, 2
9D004B68  1440FFF0   BNE V0, ZERO, 0x9D004B2C
9D004B6C  00000000   NOP
32:                      {
33:                          hands[i].cards = 0;
9D004B2C  3C038000   LUI V1, -32768
9D004B30  8FC20010   LW V0, 16(S8)
9D004B34  00021080   SLL V0, V0, 2
9D004B38  00022080   SLL A0, V0, 2
9D004B3C  00441021   ADDU V0, V0, A0
9D004B40  00022080   SLL A0, V0, 2
9D004B44  00441021   ADDU V0, V0, A0
9D004B48  24630124   ADDIU V1, V1, 292
9D004B4C  00431021   ADDU V0, V0, V1
9D004B50  AC400060   SW ZERO, 96(V0)
34:                      }
35:                      discardsSize = 0;
9D004B70  AF8080C0   SW ZERO, -32576(GP)
36:                      
37:                      for(int i = 0; i < NUM_CARDS; i++)
9D004B74  AFC00014   SW ZERO, 20(S8)
9D004B78  0B401326   J 0x9D004C98
9D004B7C  00000000   NOP
9D004C8C  8FC20014   LW V0, 20(S8)
9D004C90  24420001   ADDIU V0, V0, 1
9D004C94  AFC20014   SW V0, 20(S8)
9D004C98  8FC20014   LW V0, 20(S8)
9D004C9C  28420004   SLTI V0, V0, 4
9D004CA0  1440FFB7   BNE V0, ZERO, 0x9D004B80
9D004CA4  00000000   NOP
38:                      {
39:                          if(i < NUM_TERRITORIES)
9D004B80  8FC20014   LW V0, 20(S8)
9D004B84  28420002   SLTI V0, V0, 2
9D004B88  10400025   BEQ V0, ZERO, 0x9D004C20
9D004B8C  00000000   NOP
40:                          {
41:                              deck[i].territory = i;
9D004B90  3C038000   LUI V1, -32768
9D004B94  8FC20014   LW V0, 20(S8)
9D004B98  2463021C   ADDIU V1, V1, 540
9D004B9C  00021080   SLL V0, V0, 2
9D004BA0  00022080   SLL A0, V0, 2
9D004BA4  00821023   SUBU V0, A0, V0
9D004BA8  00621021   ADDU V0, V1, V0
9D004BAC  8FC30014   LW V1, 20(S8)
9D004BB0  AC430004   SW V1, 4(V0)
42:                              deck[i].type = territories[i].cardtype;
9D004BB4  3C038000   LUI V1, -32768
9D004BB8  8FC20014   LW V0, 20(S8)
9D004BBC  246341B8   ADDIU V1, V1, 16824
9D004BC0  000210C0   SLL V0, V0, 3
9D004BC4  00022080   SLL A0, V0, 2
9D004BC8  00821023   SUBU V0, A0, V0
9D004BCC  00621021   ADDU V0, V1, V0
9D004BD0  8C44000C   LW A0, 12(V0)
9D004BD4  3C058000   LUI A1, -32768
9D004BD8  8FC20014   LW V0, 20(S8)
9D004BDC  00021080   SLL V0, V0, 2
9D004BE0  00021880   SLL V1, V0, 2
9D004BE4  00621823   SUBU V1, V1, V0
9D004BE8  24A2021C   ADDIU V0, A1, 540
9D004BEC  00621021   ADDU V0, V1, V0
9D004BF0  AC440000   SW A0, 0(V0)
43:                              deck[i].index = i;
9D004BF4  3C048000   LUI A0, -32768
9D004BF8  8FC20014   LW V0, 20(S8)
9D004BFC  00021080   SLL V0, V0, 2
9D004C00  00021880   SLL V1, V0, 2
9D004C04  00621823   SUBU V1, V1, V0
9D004C08  2482021C   ADDIU V0, A0, 540
9D004C0C  00621021   ADDU V0, V1, V0
9D004C10  8FC30014   LW V1, 20(S8)
9D004C14  AC430008   SW V1, 8(V0)
9D004C18  0B401323   J 0x9D004C8C
9D004C1C  00000000   NOP
44:                          }
45:                          else
46:                          {
47:                              deck[i].territory = -1;
9D004C20  3C038000   LUI V1, -32768
9D004C24  8FC20014   LW V0, 20(S8)
9D004C28  2463021C   ADDIU V1, V1, 540
9D004C2C  00021080   SLL V0, V0, 2
9D004C30  00022080   SLL A0, V0, 2
9D004C34  00821023   SUBU V0, A0, V0
9D004C38  00621021   ADDU V0, V1, V0
9D004C3C  2403FFFF   ADDIU V1, ZERO, -1
9D004C40  AC430004   SW V1, 4(V0)
48:                              deck[i].type = WILD;
9D004C44  3C048000   LUI A0, -32768
9D004C48  8FC20014   LW V0, 20(S8)
9D004C4C  00021080   SLL V0, V0, 2
9D004C50  00021880   SLL V1, V0, 2
9D004C54  00621823   SUBU V1, V1, V0
9D004C58  2482021C   ADDIU V0, A0, 540
9D004C5C  00621021   ADDU V0, V1, V0
9D004C60  24030003   ADDIU V1, ZERO, 3
9D004C64  AC430000   SW V1, 0(V0)
49:                              deck[i].index = i;
9D004C68  3C048000   LUI A0, -32768
9D004C6C  8FC20014   LW V0, 20(S8)
9D004C70  00021080   SLL V0, V0, 2
9D004C74  00021880   SLL V1, V0, 2
9D004C78  00621823   SUBU V1, V1, V0
9D004C7C  2482021C   ADDIU V0, A0, 540
9D004C80  00621021   ADDU V0, V1, V0
9D004C84  8FC30014   LW V1, 20(S8)
9D004C88  AC430008   SW V1, 8(V0)
50:                          }
51:                      }
52:                      deckSize = NUM_CARDS;
9D004CA8  24020004   ADDIU V0, ZERO, 4
9D004CAC  AF8280C4   SW V0, -32572(GP)
53:                      shuffleDeck();
9D004CB0  0F40127A   JAL shuffleDeck
9D004CB4  00000000   NOP
54:                  
55:                      cardValueIndex = 0;
9D004CB8  AF8080D0   SW ZERO, -32560(GP)
56:                      // Even if the values are increasing by 1, they start at the same first
57:                      // value. For set value sets, this number gets ignored completely.
58:                      cardExchangeValue = cardExchangeValues[0];
9D004CBC  3C029D01   LUI V0, -25343
9D004CC0  8C42B7B8   LW V0, -18504(V0)
9D004CC4  AF8280C8   SW V0, -32568(GP)
59:                  }
9D004CC8  03C0E821   ADDU SP, S8, ZERO
9D004CCC  8FBF001C   LW RA, 28(SP)
9D004CD0  8FBE0018   LW S8, 24(SP)
9D004CD4  27BD0020   ADDIU SP, SP, 32
9D004CD8  03E00008   JR RA
9D004CDC  00000000   NOP
60:                  
61:                  Card drawCard(int player)
62:                  {
9D004CE0  27BDFFD8   ADDIU SP, SP, -40
9D004CE4  AFBF0024   SW RA, 36(SP)
9D004CE8  AFBE0020   SW S8, 32(SP)
9D004CEC  AFB0001C   SW S0, 28(SP)
9D004CF0  03A0F021   ADDU S8, SP, ZERO
9D004CF4  00808021   ADDU S0, A0, ZERO
9D004CF8  AFC5002C   SW A1, 44(S8)
63:                      if(deckSize == 0)
9D004CFC  8F8280C4   LW V0, -32572(GP)
9D004D00  14400025   BNE V0, ZERO, 0x9D004D98
9D004D04  00000000   NOP
64:                      {
65:                          for(int i = 0; i < discardsSize; i++)
9D004D08  AFC00010   SW ZERO, 16(S8)
9D004D0C  0B40135C   J 0x9D004D70
9D004D10  00000000   NOP
9D004D64  8FC20010   LW V0, 16(S8)
9D004D68  24420001   ADDIU V0, V0, 1
9D004D6C  AFC20010   SW V0, 16(S8)
9D004D70  8F8280C0   LW V0, -32576(GP)
9D004D74  8FC30010   LW V1, 16(S8)
9D004D78  0062102A   SLT V0, V1, V0
9D004D7C  1440FFE5   BNE V0, ZERO, 0x9D004D14
9D004D80  00000000   NOP
66:                              deck[i] = discards[i];
9D004D14  3C048000   LUI A0, -32768
9D004D18  8FC20010   LW V0, 16(S8)
9D004D1C  00021080   SLL V0, V0, 2
9D004D20  00021880   SLL V1, V0, 2
9D004D24  00621823   SUBU V1, V1, V0
9D004D28  2482021C   ADDIU V0, A0, 540
9D004D2C  00621821   ADDU V1, V1, V0
9D004D30  3C058000   LUI A1, -32768
9D004D34  8FC20010   LW V0, 16(S8)
9D004D38  00021080   SLL V0, V0, 2
9D004D3C  00022080   SLL A0, V0, 2
9D004D40  00822023   SUBU A0, A0, V0
9D004D44  24A201EC   ADDIU V0, A1, 492
9D004D48  00821021   ADDU V0, A0, V0
9D004D4C  8C450000   LW A1, 0(V0)
9D004D50  8C440004   LW A0, 4(V0)
9D004D54  8C420008   LW V0, 8(V0)
9D004D58  AC650000   SW A1, 0(V1)
9D004D5C  AC640004   SW A0, 4(V1)
9D004D60  AC620008   SW V0, 8(V1)
67:                          deckSize = discardsSize;
9D004D84  8F8280C0   LW V0, -32576(GP)
9D004D88  AF8280C4   SW V0, -32572(GP)
68:                          discardsSize = 0;
9D004D8C  AF8080C0   SW ZERO, -32576(GP)
69:                          shuffleDeck();
9D004D90  0F40127A   JAL shuffleDeck
9D004D94  00000000   NOP
70:                      }
71:                  
72:                      logCard(player, deck[deckSize].type, deck[deckSize].territory);
9D004D98  8F8280C4   LW V0, -32572(GP)
9D004D9C  3C048000   LUI A0, -32768
9D004DA0  00021080   SLL V0, V0, 2
9D004DA4  00021880   SLL V1, V0, 2
9D004DA8  00621823   SUBU V1, V1, V0
9D004DAC  2482021C   ADDIU V0, A0, 540
9D004DB0  00621021   ADDU V0, V1, V0
9D004DB4  8C430000   LW V1, 0(V0)
9D004DB8  8F8280C4   LW V0, -32572(GP)
9D004DBC  3C048000   LUI A0, -32768
9D004DC0  2484021C   ADDIU A0, A0, 540
9D004DC4  00021080   SLL V0, V0, 2
9D004DC8  00022880   SLL A1, V0, 2
9D004DCC  00A21023   SUBU V0, A1, V0
9D004DD0  00821021   ADDU V0, A0, V0
9D004DD4  8C420004   LW V0, 4(V0)
9D004DD8  8FC4002C   LW A0, 44(S8)
9D004DDC  00602821   ADDU A1, V1, ZERO
9D004DE0  00403021   ADDU A2, V0, ZERO
9D004DE4  0F401DAE   JAL logCard
9D004DE8  00000000   NOP
73:                  
74:                      deckSize -= 1;
9D004DEC  8F8280C4   LW V0, -32572(GP)
9D004DF0  2442FFFF   ADDIU V0, V0, -1
9D004DF4  AF8280C4   SW V0, -32572(GP)
75:                      hands[player].hand[hands[player].cards] = deck[deckSize];
9D004DF8  3C038000   LUI V1, -32768
9D004DFC  8FC2002C   LW V0, 44(S8)
9D004E00  00021080   SLL V0, V0, 2
9D004E04  00022080   SLL A0, V0, 2
9D004E08  00441021   ADDU V0, V0, A0
9D004E0C  00022080   SLL A0, V0, 2
9D004E10  00441021   ADDU V0, V0, A0
9D004E14  24630124   ADDIU V1, V1, 292
9D004E18  00431021   ADDU V0, V0, V1
9D004E1C  8C420060   LW V0, 96(V0)
9D004E20  8F8480C4   LW A0, -32572(GP)
9D004E24  3C058000   LUI A1, -32768
9D004E28  8FC6002C   LW A2, 44(S8)
9D004E2C  00021080   SLL V0, V0, 2
9D004E30  00021880   SLL V1, V0, 2
9D004E34  00621823   SUBU V1, V1, V0
9D004E38  00C01021   ADDU V0, A2, ZERO
9D004E3C  00021080   SLL V0, V0, 2
9D004E40  00023080   SLL A2, V0, 2
9D004E44  00461021   ADDU V0, V0, A2
9D004E48  00023080   SLL A2, V0, 2
9D004E4C  00461021   ADDU V0, V0, A2
9D004E50  00621821   ADDU V1, V1, V0
9D004E54  24A20124   ADDIU V0, A1, 292
9D004E58  00621821   ADDU V1, V1, V0
9D004E5C  3C058000   LUI A1, -32768
9D004E60  00801021   ADDU V0, A0, ZERO
9D004E64  00021080   SLL V0, V0, 2
9D004E68  00022080   SLL A0, V0, 2
9D004E6C  00822023   SUBU A0, A0, V0
9D004E70  24A2021C   ADDIU V0, A1, 540
9D004E74  00821021   ADDU V0, A0, V0
9D004E78  8C450000   LW A1, 0(V0)
9D004E7C  8C440004   LW A0, 4(V0)
9D004E80  8C420008   LW V0, 8(V0)
9D004E84  AC650000   SW A1, 0(V1)
9D004E88  AC640004   SW A0, 4(V1)
9D004E8C  AC620008   SW V0, 8(V1)
76:                      hands[player].cards += 1;
9D004E90  3C038000   LUI V1, -32768
9D004E94  8FC2002C   LW V0, 44(S8)
9D004E98  00021080   SLL V0, V0, 2
9D004E9C  00022080   SLL A0, V0, 2
9D004EA0  00441021   ADDU V0, V0, A0
9D004EA4  00022080   SLL A0, V0, 2
9D004EA8  00441021   ADDU V0, V0, A0
9D004EAC  24630124   ADDIU V1, V1, 292
9D004EB0  00431021   ADDU V0, V0, V1
9D004EB4  8C420060   LW V0, 96(V0)
9D004EB8  24430001   ADDIU V1, V0, 1
9D004EBC  3C048000   LUI A0, -32768
9D004EC0  8FC2002C   LW V0, 44(S8)
9D004EC4  00021080   SLL V0, V0, 2
9D004EC8  00022880   SLL A1, V0, 2
9D004ECC  00451021   ADDU V0, V0, A1
9D004ED0  00022880   SLL A1, V0, 2
9D004ED4  00451021   ADDU V0, V0, A1
9D004ED8  24840124   ADDIU A0, A0, 292
9D004EDC  00441021   ADDU V0, V0, A0
9D004EE0  AC430060   SW V1, 96(V0)
77:                      return deck[deckSize];
9D004EE4  8F8280C4   LW V0, -32572(GP)
9D004EE8  3C048000   LUI A0, -32768
9D004EEC  00021080   SLL V0, V0, 2
9D004EF0  00021880   SLL V1, V0, 2
9D004EF4  00621823   SUBU V1, V1, V0
9D004EF8  2482021C   ADDIU V0, A0, 540
9D004EFC  00621021   ADDU V0, V1, V0
9D004F00  8C440000   LW A0, 0(V0)
9D004F04  8C430004   LW V1, 4(V0)
9D004F08  8C420008   LW V0, 8(V0)
9D004F0C  AE040000   SW A0, 0(S0)
9D004F10  AE030004   SW V1, 4(S0)
9D004F14  AE020008   SW V0, 8(S0)
78:                  }
9D004F18  02001021   ADDU V0, S0, ZERO
9D004F1C  03C0E821   ADDU SP, S8, ZERO
9D004F20  8FBF0024   LW RA, 36(SP)
9D004F24  8FBE0020   LW S8, 32(SP)
9D004F28  8FB0001C   LW S0, 28(SP)
9D004F2C  27BD0028   ADDIU SP, SP, 40
9D004F30  03E00008   JR RA
9D004F34  00000000   NOP
79:                  
80:                  int cardSetValue(Card c1, Card c2, Card c3)
81:                  {
9D004F38  27BDFFE8   ADDIU SP, SP, -24
9D004F3C  AFBE0014   SW S8, 20(SP)
9D004F40  03A0F021   ADDU S8, SP, ZERO
9D004F44  AFC40018   SW A0, 24(S8)
9D004F48  AFC5001C   SW A1, 28(S8)
9D004F4C  AFC60020   SW A2, 32(S8)
9D004F50  AFC70024   SW A3, 36(S8)
82:                      int amount[4] = {0,0,0,0};
9D004F54  AFC00000   SW ZERO, 0(S8)
9D004F58  AFC00004   SW ZERO, 4(S8)
9D004F5C  AFC00008   SW ZERO, 8(S8)
9D004F60  AFC0000C   SW ZERO, 12(S8)
83:                      amount[c1.type] += 1;
9D004F64  8FC20018   LW V0, 24(S8)
9D004F68  8FC30018   LW V1, 24(S8)
9D004F6C  00031880   SLL V1, V1, 2
9D004F70  03C31821   ADDU V1, S8, V1
9D004F74  8C630000   LW V1, 0(V1)
9D004F78  24630001   ADDIU V1, V1, 1
9D004F7C  00021080   SLL V0, V0, 2
9D004F80  03C21021   ADDU V0, S8, V0
9D004F84  AC430000   SW V1, 0(V0)
84:                      amount[c2.type] += 1;
9D004F88  8FC20024   LW V0, 36(S8)
9D004F8C  8FC30024   LW V1, 36(S8)
9D004F90  00031880   SLL V1, V1, 2
9D004F94  03C31821   ADDU V1, S8, V1
9D004F98  8C630000   LW V1, 0(V1)
9D004F9C  24630001   ADDIU V1, V1, 1
9D004FA0  00021080   SLL V0, V0, 2
9D004FA4  03C21021   ADDU V0, S8, V0
9D004FA8  AC430000   SW V1, 0(V0)
85:                      amount[c3.type] += 1;
9D004FAC  8FC20030   LW V0, 48(S8)
9D004FB0  8FC30030   LW V1, 48(S8)
9D004FB4  00031880   SLL V1, V1, 2
9D004FB8  03C31821   ADDU V1, S8, V1
9D004FBC  8C630000   LW V1, 0(V1)
9D004FC0  24630001   ADDIU V1, V1, 1
9D004FC4  00021080   SLL V0, V0, 2
9D004FC8  03C21021   ADDU V0, S8, V0
9D004FCC  AC430000   SW V1, 0(V0)
86:                  
87:                      if(amount[INFANTRY] == 3 || (amount[INFANTRY] == 2 && amount[WILD] == 1))
9D004FD0  8FC30000   LW V1, 0(S8)
9D004FD4  24020003   ADDIU V0, ZERO, 3
9D004FD8  10620009   BEQ V1, V0, 0x9D005000
9D004FDC  00000000   NOP
9D004FE0  8FC30000   LW V1, 0(S8)
9D004FE4  24020002   ADDIU V0, ZERO, 2
9D004FE8  14620008   BNE V1, V0, 0x9D00500C
9D004FEC  00000000   NOP
9D004FF0  8FC3000C   LW V1, 12(S8)
9D004FF4  24020001   ADDIU V0, ZERO, 1
9D004FF8  14620004   BNE V1, V0, 0x9D00500C
9D004FFC  00000000   NOP
88:                          return 4;
9D005000  24020004   ADDIU V0, ZERO, 4
9D005004  0B401455   J 0x9D005154
9D005008  00000000   NOP
89:                      if(amount[CAVALRY] == 3 || (amount[CAVALRY] == 2 && amount[WILD] == 1))
9D00500C  8FC30004   LW V1, 4(S8)
9D005010  24020003   ADDIU V0, ZERO, 3
9D005014  10620009   BEQ V1, V0, 0x9D00503C
9D005018  00000000   NOP
9D00501C  8FC30004   LW V1, 4(S8)
9D005020  24020002   ADDIU V0, ZERO, 2
9D005024  14620008   BNE V1, V0, 0x9D005048
9D005028  00000000   NOP
9D00502C  8FC3000C   LW V1, 12(S8)
9D005030  24020001   ADDIU V0, ZERO, 1
9D005034  14620004   BNE V1, V0, 0x9D005048
9D005038  00000000   NOP
90:                          return 6;
9D00503C  24020006   ADDIU V0, ZERO, 6
9D005040  0B401455   J 0x9D005154
9D005044  00000000   NOP
91:                      if(amount[ARTILLERY] == 3 || (amount[ARTILLERY] == 2 && amount[WILD] == 1))
9D005048  8FC30008   LW V1, 8(S8)
9D00504C  24020003   ADDIU V0, ZERO, 3
9D005050  10620009   BEQ V1, V0, 0x9D005078
9D005054  00000000   NOP
9D005058  8FC30008   LW V1, 8(S8)
9D00505C  24020002   ADDIU V0, ZERO, 2
9D005060  14620008   BNE V1, V0, 0x9D005084
9D005064  00000000   NOP
9D005068  8FC3000C   LW V1, 12(S8)
9D00506C  24020001   ADDIU V0, ZERO, 1
9D005070  14620004   BNE V1, V0, 0x9D005084
9D005074  00000000   NOP
92:                          return 8;
9D005078  24020008   ADDIU V0, ZERO, 8
9D00507C  0B401455   J 0x9D005154
9D005080  00000000   NOP
93:                      if((amount[INFANTRY] == 1 && amount[CAVALRY] == 1 
9D005084  8FC30000   LW V1, 0(S8)
9D005088  24020001   ADDIU V0, ZERO, 1
9D00508C  14620009   BNE V1, V0, 0x9D0050B4
9D005090  00000000   NOP
9D005094  8FC30004   LW V1, 4(S8)
9D005098  24020001   ADDIU V0, ZERO, 1
9D00509C  14620005   BNE V1, V0, 0x9D0050B4
9D0050A0  00000000   NOP
94:                                  && amount[ARTILLERY] == 1)
9D0050A4  8FC30008   LW V1, 8(S8)
9D0050A8  24020001   ADDIU V0, ZERO, 1
9D0050AC  10620025   BEQ V1, V0, 0x9D005144
9D0050B0  00000000   NOP
95:                              || (amount[WILD] == 1 && amount[CAVALRY] == 1 
9D0050B4  8FC3000C   LW V1, 12(S8)
9D0050B8  24020001   ADDIU V0, ZERO, 1
9D0050BC  14620009   BNE V1, V0, 0x9D0050E4
9D0050C0  00000000   NOP
9D0050C4  8FC30004   LW V1, 4(S8)
9D0050C8  24020001   ADDIU V0, ZERO, 1
9D0050CC  14620005   BNE V1, V0, 0x9D0050E4
9D0050D0  00000000   NOP
96:                                  && amount[ARTILLERY] == 1)
9D0050D4  8FC30008   LW V1, 8(S8)
9D0050D8  24020001   ADDIU V0, ZERO, 1
9D0050DC  10620019   BEQ V1, V0, 0x9D005144
9D0050E0  00000000   NOP
97:                              || (amount[INFANTRY] == 1 && amount[WILD] == 1 
9D0050E4  8FC30000   LW V1, 0(S8)
9D0050E8  24020001   ADDIU V0, ZERO, 1
9D0050EC  14620009   BNE V1, V0, 0x9D005114
9D0050F0  00000000   NOP
9D0050F4  8FC3000C   LW V1, 12(S8)
9D0050F8  24020001   ADDIU V0, ZERO, 1
9D0050FC  14620005   BNE V1, V0, 0x9D005114
9D005100  00000000   NOP
98:                                  && amount[ARTILLERY] == 1)
9D005104  8FC30008   LW V1, 8(S8)
9D005108  24020001   ADDIU V0, ZERO, 1
9D00510C  1062000D   BEQ V1, V0, 0x9D005144
9D005110  00000000   NOP
99:                              || (amount[INFANTRY] == 1 && amount[CAVALRY] == 1 
9D005114  8FC30000   LW V1, 0(S8)
9D005118  24020001   ADDIU V0, ZERO, 1
9D00511C  1462000C   BNE V1, V0, 0x9D005150
9D005120  00000000   NOP
9D005124  8FC30004   LW V1, 4(S8)
9D005128  24020001   ADDIU V0, ZERO, 1
9D00512C  14620008   BNE V1, V0, 0x9D005150
9D005130  00000000   NOP
100:                                 && amount[WILD] == 1))
9D005134  8FC3000C   LW V1, 12(S8)
9D005138  24020001   ADDIU V0, ZERO, 1
9D00513C  14620004   BNE V1, V0, 0x9D005150
9D005140  00000000   NOP
101:                     {
102:                         return 10;
9D005144  2402000A   ADDIU V0, ZERO, 10
9D005148  0B401455   J 0x9D005154
9D00514C  00000000   NOP
103:                     }
104:                 
105:                     return 0;
9D005150  00001021   ADDU V0, ZERO, ZERO
106:                 }
9D005154  03C0E821   ADDU SP, S8, ZERO
9D005158  8FBE0014   LW S8, 20(SP)
9D00515C  27BD0018   ADDIU SP, SP, 24
9D005160  03E00008   JR RA
9D005164  00000000   NOP
107:                 
108:                 int exchangeCardIndices(int player, int cardidx1, int cardidx2, int cardidx3)
109:                 {
9D005168  27BDFFD8   ADDIU SP, SP, -40
9D00516C  AFBF0024   SW RA, 36(SP)
9D005170  AFBE0020   SW S8, 32(SP)
9D005174  03A0F021   ADDU S8, SP, ZERO
9D005178  AFC40028   SW A0, 40(S8)
9D00517C  AFC5002C   SW A1, 44(S8)
9D005180  AFC60030   SW A2, 48(S8)
9D005184  AFC70034   SW A3, 52(S8)
110:                     int idx1 = -1, idx2 = -1, idx3 = -1;
9D005188  2402FFFF   ADDIU V0, ZERO, -1
9D00518C  AFC20010   SW V0, 16(S8)
9D005190  2402FFFF   ADDIU V0, ZERO, -1
9D005194  AFC20014   SW V0, 20(S8)
9D005198  2402FFFF   ADDIU V0, ZERO, -1
9D00519C  AFC20018   SW V0, 24(S8)
111:                     for(int i = 0; i < hands[player].cards; i++)
9D0051A0  AFC0001C   SW ZERO, 28(S8)
9D0051A4  0B4014AD   J 0x9D0052B4
9D0051A8  00000000   NOP
9D0052A8  8FC2001C   LW V0, 28(S8)
9D0052AC  24420001   ADDIU V0, V0, 1
9D0052B0  AFC2001C   SW V0, 28(S8)
9D0052B4  3C038000   LUI V1, -32768
9D0052B8  8FC20028   LW V0, 40(S8)
9D0052BC  00021080   SLL V0, V0, 2
9D0052C0  00022080   SLL A0, V0, 2
9D0052C4  00441021   ADDU V0, V0, A0
9D0052C8  00022080   SLL A0, V0, 2
9D0052CC  00441021   ADDU V0, V0, A0
9D0052D0  24630124   ADDIU V1, V1, 292
9D0052D4  00431021   ADDU V0, V0, V1
9D0052D8  8C430060   LW V1, 96(V0)
9D0052DC  8FC2001C   LW V0, 28(S8)
9D0052E0  0043102A   SLT V0, V0, V1
9D0052E4  1440FFB1   BNE V0, ZERO, 0x9D0051AC
9D0052E8  00000000   NOP
112:                     {
113:                         if(hands[player].hand[i].index == cardidx1)
9D0051AC  3C048000   LUI A0, -32768
9D0051B0  8FC2001C   LW V0, 28(S8)
9D0051B4  8FC50028   LW A1, 40(S8)
9D0051B8  00021080   SLL V0, V0, 2
9D0051BC  00021880   SLL V1, V0, 2
9D0051C0  00621823   SUBU V1, V1, V0
9D0051C4  00A01021   ADDU V0, A1, ZERO
9D0051C8  00021080   SLL V0, V0, 2
9D0051CC  00022880   SLL A1, V0, 2
9D0051D0  00451021   ADDU V0, V0, A1
9D0051D4  00022880   SLL A1, V0, 2
9D0051D8  00451021   ADDU V0, V0, A1
9D0051DC  00621821   ADDU V1, V1, V0
9D0051E0  24820124   ADDIU V0, A0, 292
9D0051E4  00621021   ADDU V0, V1, V0
9D0051E8  8C430008   LW V1, 8(V0)
9D0051EC  8FC2002C   LW V0, 44(S8)
9D0051F0  14620003   BNE V1, V0, 0x9D005200
9D0051F4  00000000   NOP
114:                             idx1 = i;
9D0051F8  8FC2001C   LW V0, 28(S8)
9D0051FC  AFC20010   SW V0, 16(S8)
115:                         if(hands[player].hand[i].index == cardidx2)
9D005200  3C048000   LUI A0, -32768
9D005204  8FC2001C   LW V0, 28(S8)
9D005208  8FC50028   LW A1, 40(S8)
9D00520C  00021080   SLL V0, V0, 2
9D005210  00021880   SLL V1, V0, 2
9D005214  00621823   SUBU V1, V1, V0
9D005218  00A01021   ADDU V0, A1, ZERO
9D00521C  00021080   SLL V0, V0, 2
9D005220  00022880   SLL A1, V0, 2
9D005224  00451021   ADDU V0, V0, A1
9D005228  00022880   SLL A1, V0, 2
9D00522C  00451021   ADDU V0, V0, A1
9D005230  00621821   ADDU V1, V1, V0
9D005234  24820124   ADDIU V0, A0, 292
9D005238  00621021   ADDU V0, V1, V0
9D00523C  8C430008   LW V1, 8(V0)
9D005240  8FC20030   LW V0, 48(S8)
9D005244  14620003   BNE V1, V0, 0x9D005254
9D005248  00000000   NOP
116:                             idx2 = i;
9D00524C  8FC2001C   LW V0, 28(S8)
9D005250  AFC20014   SW V0, 20(S8)
117:                         if(hands[player].hand[i].index == cardidx3)
9D005254  3C048000   LUI A0, -32768
9D005258  8FC2001C   LW V0, 28(S8)
9D00525C  8FC50028   LW A1, 40(S8)
9D005260  00021080   SLL V0, V0, 2
9D005264  00021880   SLL V1, V0, 2
9D005268  00621823   SUBU V1, V1, V0
9D00526C  00A01021   ADDU V0, A1, ZERO
9D005270  00021080   SLL V0, V0, 2
9D005274  00022880   SLL A1, V0, 2
9D005278  00451021   ADDU V0, V0, A1
9D00527C  00022880   SLL A1, V0, 2
9D005280  00451021   ADDU V0, V0, A1
9D005284  00621821   ADDU V1, V1, V0
9D005288  24820124   ADDIU V0, A0, 292
9D00528C  00621021   ADDU V0, V1, V0
9D005290  8C430008   LW V1, 8(V0)
9D005294  8FC20034   LW V0, 52(S8)
9D005298  14620003   BNE V1, V0, 0x9D0052A8
9D00529C  00000000   NOP
118:                             idx3 = i;
9D0052A0  8FC2001C   LW V0, 28(S8)
9D0052A4  AFC20018   SW V0, 24(S8)
119:                     }
120:                     if(idx1 == -1 || idx2 == -1 || idx3 == -1)
9D0052EC  8FC30010   LW V1, 16(S8)
9D0052F0  2402FFFF   ADDIU V0, ZERO, -1
9D0052F4  10620009   BEQ V1, V0, 0x9D00531C
9D0052F8  00000000   NOP
9D0052FC  8FC30014   LW V1, 20(S8)
9D005300  2402FFFF   ADDIU V0, ZERO, -1
9D005304  10620005   BEQ V1, V0, 0x9D00531C
9D005308  00000000   NOP
9D00530C  8FC30018   LW V1, 24(S8)
9D005310  2402FFFF   ADDIU V0, ZERO, -1
9D005314  14620004   BNE V1, V0, 0x9D005328
9D005318  00000000   NOP
121:                         return 0;
9D00531C  00001021   ADDU V0, ZERO, ZERO
9D005320  0B4014D0   J 0x9D005340
9D005324  00000000   NOP
122:                     return exchangeCards(player, idx1, idx2, idx3);
9D005328  8FC40028   LW A0, 40(S8)
9D00532C  8FC50010   LW A1, 16(S8)
9D005330  8FC60014   LW A2, 20(S8)
9D005334  8FC70018   LW A3, 24(S8)
9D005338  0F4014D6   JAL exchangeCards
9D00533C  00000000   NOP
123:                 }
9D005340  03C0E821   ADDU SP, S8, ZERO
9D005344  8FBF0024   LW RA, 36(SP)
9D005348  8FBE0020   LW S8, 32(SP)
9D00534C  27BD0028   ADDIU SP, SP, 40
9D005350  03E00008   JR RA
9D005354  00000000   NOP
124:                 
125:                 int exchangeCards(int player, int idx1, int idx2, int idx3)
126:                 {
9D005358  27BDFF80   ADDIU SP, SP, -128
9D00535C  AFBF007C   SW RA, 124(SP)
9D005360  AFBE0078   SW S8, 120(SP)
9D005364  03A0F021   ADDU S8, SP, ZERO
9D005368  AFC40080   SW A0, 128(S8)
9D00536C  AFC50084   SW A1, 132(S8)
9D005370  AFC60088   SW A2, 136(S8)
9D005374  AFC7008C   SW A3, 140(S8)
127:                     int handsize = hands[player].cards;
9D005378  3C038000   LUI V1, -32768
9D00537C  8FC20080   LW V0, 128(S8)
9D005380  00021080   SLL V0, V0, 2
9D005384  00022080   SLL A0, V0, 2
9D005388  00441021   ADDU V0, V0, A0
9D00538C  00022080   SLL A0, V0, 2
9D005390  00441021   ADDU V0, V0, A0
9D005394  24630124   ADDIU V1, V1, 292
9D005398  00431021   ADDU V0, V0, V1
9D00539C  8C420060   LW V0, 96(V0)
9D0053A0  AFC2002C   SW V0, 44(S8)
128:                     if(idx1 == idx2 || idx1 == idx3 || idx2 == idx3)
9D0053A4  8FC30084   LW V1, 132(S8)
9D0053A8  8FC20088   LW V0, 136(S8)
9D0053AC  10620009   BEQ V1, V0, 0x9D0053D4
9D0053B0  00000000   NOP
9D0053B4  8FC30084   LW V1, 132(S8)
9D0053B8  8FC2008C   LW V0, 140(S8)
9D0053BC  10620005   BEQ V1, V0, 0x9D0053D4
9D0053C0  00000000   NOP
9D0053C4  8FC30088   LW V1, 136(S8)
9D0053C8  8FC2008C   LW V0, 140(S8)
9D0053CC  14620004   BNE V1, V0, 0x9D0053E0
9D0053D0  00000000   NOP
129:                         return 0;
9D0053D4  00001021   ADDU V0, ZERO, ZERO
9D0053D8  0B401750   J 0x9D005D40
9D0053DC  00000000   NOP
130:                     if(idx1 >= handsize || idx2 >= handsize || idx3 >= handsize)
9D0053E0  8FC30084   LW V1, 132(S8)
9D0053E4  8FC2002C   LW V0, 44(S8)
9D0053E8  0062102A   SLT V0, V1, V0
9D0053EC  1040000B   BEQ V0, ZERO, 0x9D00541C
9D0053F0  00000000   NOP
9D0053F4  8FC30088   LW V1, 136(S8)
9D0053F8  8FC2002C   LW V0, 44(S8)
9D0053FC  0062102A   SLT V0, V1, V0
9D005400  10400006   BEQ V0, ZERO, 0x9D00541C
9D005404  00000000   NOP
9D005408  8FC3008C   LW V1, 140(S8)
9D00540C  8FC2002C   LW V0, 44(S8)
9D005410  0062102A   SLT V0, V1, V0
9D005414  14400004   BNE V0, ZERO, 0x9D005428
9D005418  00000000   NOP
131:                         return 0;
9D00541C  00001021   ADDU V0, ZERO, ZERO
9D005420  0B401750   J 0x9D005D40
9D005424  00000000   NOP
132:                 
133:                     Card c1 = hands[player].hand[idx1];
9D005428  3C048000   LUI A0, -32768
9D00542C  8FC20084   LW V0, 132(S8)
9D005430  8FC50080   LW A1, 128(S8)
9D005434  00021080   SLL V0, V0, 2
9D005438  00021880   SLL V1, V0, 2
9D00543C  00621823   SUBU V1, V1, V0
9D005440  00A01021   ADDU V0, A1, ZERO
9D005444  00021080   SLL V0, V0, 2
9D005448  00022880   SLL A1, V0, 2
9D00544C  00451021   ADDU V0, V0, A1
9D005450  00022880   SLL A1, V0, 2
9D005454  00451021   ADDU V0, V0, A1
9D005458  00621821   ADDU V1, V1, V0
9D00545C  24820124   ADDIU V0, A0, 292
9D005460  00621021   ADDU V0, V1, V0
9D005464  8C440000   LW A0, 0(V0)
9D005468  8C430004   LW V1, 4(V0)
9D00546C  8C420008   LW V0, 8(V0)
9D005470  AFC40030   SW A0, 48(S8)
9D005474  AFC30034   SW V1, 52(S8)
9D005478  AFC20038   SW V0, 56(S8)
134:                     Card c2 = hands[player].hand[idx2];
9D00547C  3C048000   LUI A0, -32768
9D005480  8FC20088   LW V0, 136(S8)
9D005484  8FC50080   LW A1, 128(S8)
9D005488  00021080   SLL V0, V0, 2
9D00548C  00021880   SLL V1, V0, 2
9D005490  00621823   SUBU V1, V1, V0
9D005494  00A01021   ADDU V0, A1, ZERO
9D005498  00021080   SLL V0, V0, 2
9D00549C  00022880   SLL A1, V0, 2
9D0054A0  00451021   ADDU V0, V0, A1
9D0054A4  00022880   SLL A1, V0, 2
9D0054A8  00451021   ADDU V0, V0, A1
9D0054AC  00621821   ADDU V1, V1, V0
9D0054B0  24820124   ADDIU V0, A0, 292
9D0054B4  00621021   ADDU V0, V1, V0
9D0054B8  8C440000   LW A0, 0(V0)
9D0054BC  8C430004   LW V1, 4(V0)
9D0054C0  8C420008   LW V0, 8(V0)
9D0054C4  AFC4003C   SW A0, 60(S8)
9D0054C8  AFC30040   SW V1, 64(S8)
9D0054CC  AFC20044   SW V0, 68(S8)
135:                     Card c3 = hands[player].hand[idx3];
9D0054D0  3C048000   LUI A0, -32768
9D0054D4  8FC2008C   LW V0, 140(S8)
9D0054D8  8FC50080   LW A1, 128(S8)
9D0054DC  00021080   SLL V0, V0, 2
9D0054E0  00021880   SLL V1, V0, 2
9D0054E4  00621823   SUBU V1, V1, V0
9D0054E8  00A01021   ADDU V0, A1, ZERO
9D0054EC  00021080   SLL V0, V0, 2
9D0054F0  00022880   SLL A1, V0, 2
9D0054F4  00451021   ADDU V0, V0, A1
9D0054F8  00022880   SLL A1, V0, 2
9D0054FC  00451021   ADDU V0, V0, A1
9D005500  00621821   ADDU V1, V1, V0
9D005504  24820124   ADDIU V0, A0, 292
9D005508  00621021   ADDU V0, V1, V0
9D00550C  8C440000   LW A0, 0(V0)
9D005510  8C430004   LW V1, 4(V0)
9D005514  8C420008   LW V0, 8(V0)
9D005518  AFC40048   SW A0, 72(S8)
9D00551C  AFC3004C   SW V1, 76(S8)
9D005520  AFC20050   SW V0, 80(S8)
136:                     int value = cardSetValue(c1, c2, c3);
9D005524  8FC40048   LW A0, 72(S8)
9D005528  8FC3004C   LW V1, 76(S8)
9D00552C  8FC20050   LW V0, 80(S8)
9D005530  AFA40018   SW A0, 24(SP)
9D005534  AFA3001C   SW V1, 28(SP)
9D005538  AFA20020   SW V0, 32(SP)
9D00553C  8FC30040   LW V1, 64(S8)
9D005540  8FC20044   LW V0, 68(S8)
9D005544  AFA30010   SW V1, 16(SP)
9D005548  AFA20014   SW V0, 20(SP)
9D00554C  8FC7003C   LW A3, 60(S8)
9D005550  8FC40030   LW A0, 48(S8)
9D005554  8FC50034   LW A1, 52(S8)
9D005558  8FC60038   LW A2, 56(S8)
9D00555C  0F4013CE   JAL cardSetValue
9D005560  00000000   NOP
9D005564  AFC20028   SW V0, 40(S8)
137:                     if(value == 0)
9D005568  8FC20028   LW V0, 40(S8)
9D00556C  14400004   BNE V0, ZERO, 0x9D005580
9D005570  00000000   NOP
138:                         return 0;
9D005574  00001021   ADDU V0, ZERO, ZERO
9D005578  0B401750   J 0x9D005D40
9D00557C  00000000   NOP
139:                 
140:                     
141:                     // Add the cards to the discard pile
142:                     discards[discardsSize++] = c1;
9D005580  8F8480C0   LW A0, -32576(GP)
9D005584  3C058000   LUI A1, -32768
9D005588  00801021   ADDU V0, A0, ZERO
9D00558C  00021080   SLL V0, V0, 2
9D005590  00021880   SLL V1, V0, 2
9D005594  00621823   SUBU V1, V1, V0
9D005598  24A201EC   ADDIU V0, A1, 492
9D00559C  00621021   ADDU V0, V1, V0
9D0055A0  8FC60030   LW A2, 48(S8)
9D0055A4  8FC50034   LW A1, 52(S8)
9D0055A8  8FC30038   LW V1, 56(S8)
9D0055AC  AC460000   SW A2, 0(V0)
9D0055B0  AC450004   SW A1, 4(V0)
9D0055B4  AC430008   SW V1, 8(V0)
9D0055B8  24820001   ADDIU V0, A0, 1
9D0055BC  AF8280C0   SW V0, -32576(GP)
143:                     discards[discardsSize++] = c2;
9D0055C0  8F8480C0   LW A0, -32576(GP)
9D0055C4  3C058000   LUI A1, -32768
9D0055C8  00801021   ADDU V0, A0, ZERO
9D0055CC  00021080   SLL V0, V0, 2
9D0055D0  00021880   SLL V1, V0, 2
9D0055D4  00621823   SUBU V1, V1, V0
9D0055D8  24A201EC   ADDIU V0, A1, 492
9D0055DC  00621021   ADDU V0, V1, V0
9D0055E0  8FC6003C   LW A2, 60(S8)
9D0055E4  8FC50040   LW A1, 64(S8)
9D0055E8  8FC30044   LW V1, 68(S8)
9D0055EC  AC460000   SW A2, 0(V0)
9D0055F0  AC450004   SW A1, 4(V0)
9D0055F4  AC430008   SW V1, 8(V0)
9D0055F8  24820001   ADDIU V0, A0, 1
9D0055FC  AF8280C0   SW V0, -32576(GP)
144:                     discards[discardsSize++] = c3;
9D005600  8F8480C0   LW A0, -32576(GP)
9D005604  3C058000   LUI A1, -32768
9D005608  00801021   ADDU V0, A0, ZERO
9D00560C  00021080   SLL V0, V0, 2
9D005610  00021880   SLL V1, V0, 2
9D005614  00621823   SUBU V1, V1, V0
9D005618  24A201EC   ADDIU V0, A1, 492
9D00561C  00621021   ADDU V0, V1, V0
9D005620  8FC60048   LW A2, 72(S8)
9D005624  8FC5004C   LW A1, 76(S8)
9D005628  8FC30050   LW V1, 80(S8)
9D00562C  AC460000   SW A2, 0(V0)
9D005630  AC450004   SW A1, 4(V0)
9D005634  AC430008   SW V1, 8(V0)
9D005638  24820001   ADDIU V0, A0, 1
9D00563C  AF8280C0   SW V0, -32576(GP)
145:                 
146:                     // Move selected cards to end of hand, then remove them
147:                     SWAP(hands[player].hand[idx1], hands[player].hand[handsize - 1]);
9D005640  3C048000   LUI A0, -32768
9D005644  8FC20084   LW V0, 132(S8)
9D005648  8FC50080   LW A1, 128(S8)
9D00564C  00021080   SLL V0, V0, 2
9D005650  00021880   SLL V1, V0, 2
9D005654  00621823   SUBU V1, V1, V0
9D005658  00A01021   ADDU V0, A1, ZERO
9D00565C  00021080   SLL V0, V0, 2
9D005660  00022880   SLL A1, V0, 2
9D005664  00451021   ADDU V0, V0, A1
9D005668  00022880   SLL A1, V0, 2
9D00566C  00451021   ADDU V0, V0, A1
9D005670  00621821   ADDU V1, V1, V0
9D005674  24820124   ADDIU V0, A0, 292
9D005678  00621021   ADDU V0, V1, V0
9D00567C  8C440000   LW A0, 0(V0)
9D005680  8C430004   LW V1, 4(V0)
9D005684  8C420008   LW V0, 8(V0)
9D005688  AFC40054   SW A0, 84(S8)
9D00568C  AFC30058   SW V1, 88(S8)
9D005690  AFC2005C   SW V0, 92(S8)
9D005694  8FC2002C   LW V0, 44(S8)
9D005698  2444FFFF   ADDIU A0, V0, -1
9D00569C  3C058000   LUI A1, -32768
9D0056A0  8FC20084   LW V0, 132(S8)
9D0056A4  8FC60080   LW A2, 128(S8)
9D0056A8  00021080   SLL V0, V0, 2
9D0056AC  00021880   SLL V1, V0, 2
9D0056B0  00621823   SUBU V1, V1, V0
9D0056B4  00C01021   ADDU V0, A2, ZERO
9D0056B8  00021080   SLL V0, V0, 2
9D0056BC  00023080   SLL A2, V0, 2
9D0056C0  00461021   ADDU V0, V0, A2
9D0056C4  00023080   SLL A2, V0, 2
9D0056C8  00461021   ADDU V0, V0, A2
9D0056CC  00621821   ADDU V1, V1, V0
9D0056D0  24A20124   ADDIU V0, A1, 292
9D0056D4  00621821   ADDU V1, V1, V0
9D0056D8  3C058000   LUI A1, -32768
9D0056DC  8FC60080   LW A2, 128(S8)
9D0056E0  00801021   ADDU V0, A0, ZERO
9D0056E4  00021080   SLL V0, V0, 2
9D0056E8  00022080   SLL A0, V0, 2
9D0056EC  00822023   SUBU A0, A0, V0
9D0056F0  00C01021   ADDU V0, A2, ZERO
9D0056F4  00021080   SLL V0, V0, 2
9D0056F8  00023080   SLL A2, V0, 2
9D0056FC  00461021   ADDU V0, V0, A2
9D005700  00023080   SLL A2, V0, 2
9D005704  00461021   ADDU V0, V0, A2
9D005708  00822021   ADDU A0, A0, V0
9D00570C  24A20124   ADDIU V0, A1, 292
9D005710  00821021   ADDU V0, A0, V0
9D005714  8C450000   LW A1, 0(V0)
9D005718  8C440004   LW A0, 4(V0)
9D00571C  8C420008   LW V0, 8(V0)
9D005720  AC650000   SW A1, 0(V1)
9D005724  AC640004   SW A0, 4(V1)
9D005728  AC620008   SW V0, 8(V1)
9D00572C  8FC2002C   LW V0, 44(S8)
9D005730  2442FFFF   ADDIU V0, V0, -1
9D005734  3C048000   LUI A0, -32768
9D005738  8FC50080   LW A1, 128(S8)
9D00573C  00021080   SLL V0, V0, 2
9D005740  00021880   SLL V1, V0, 2
9D005744  00621823   SUBU V1, V1, V0
9D005748  00A01021   ADDU V0, A1, ZERO
9D00574C  00021080   SLL V0, V0, 2
9D005750  00022880   SLL A1, V0, 2
9D005754  00451021   ADDU V0, V0, A1
9D005758  00022880   SLL A1, V0, 2
9D00575C  00451021   ADDU V0, V0, A1
9D005760  00621821   ADDU V1, V1, V0
9D005764  24820124   ADDIU V0, A0, 292
9D005768  00621021   ADDU V0, V1, V0
9D00576C  8FC50054   LW A1, 84(S8)
9D005770  8FC40058   LW A0, 88(S8)
9D005774  8FC3005C   LW V1, 92(S8)
9D005778  AC450000   SW A1, 0(V0)
9D00577C  AC440004   SW A0, 4(V0)
9D005780  AC430008   SW V1, 8(V0)
148:                     if(idx2 == handsize - 1)
9D005784  8FC2002C   LW V0, 44(S8)
9D005788  2443FFFF   ADDIU V1, V0, -1
9D00578C  8FC20088   LW V0, 136(S8)
9D005790  14620003   BNE V1, V0, 0x9D0057A0
9D005794  00000000   NOP
149:                         idx2 = idx1;
9D005798  8FC20084   LW V0, 132(S8)
9D00579C  AFC20088   SW V0, 136(S8)
150:                     if(idx3 == handsize - 1)
9D0057A0  8FC2002C   LW V0, 44(S8)
9D0057A4  2443FFFF   ADDIU V1, V0, -1
9D0057A8  8FC2008C   LW V0, 140(S8)
9D0057AC  14620003   BNE V1, V0, 0x9D0057BC
9D0057B0  00000000   NOP
151:                         idx3 = idx1;
9D0057B4  8FC20084   LW V0, 132(S8)
9D0057B8  AFC2008C   SW V0, 140(S8)
152:                     SWAP(hands[player].hand[idx2], hands[player].hand[handsize - 2]);
9D0057BC  3C048000   LUI A0, -32768
9D0057C0  8FC20088   LW V0, 136(S8)
9D0057C4  8FC50080   LW A1, 128(S8)
9D0057C8  00021080   SLL V0, V0, 2
9D0057CC  00021880   SLL V1, V0, 2
9D0057D0  00621823   SUBU V1, V1, V0
9D0057D4  00A01021   ADDU V0, A1, ZERO
9D0057D8  00021080   SLL V0, V0, 2
9D0057DC  00022880   SLL A1, V0, 2
9D0057E0  00451021   ADDU V0, V0, A1
9D0057E4  00022880   SLL A1, V0, 2
9D0057E8  00451021   ADDU V0, V0, A1
9D0057EC  00621821   ADDU V1, V1, V0
9D0057F0  24820124   ADDIU V0, A0, 292
9D0057F4  00621021   ADDU V0, V1, V0
9D0057F8  8C440000   LW A0, 0(V0)
9D0057FC  8C430004   LW V1, 4(V0)
9D005800  8C420008   LW V0, 8(V0)
9D005804  AFC40060   SW A0, 96(S8)
9D005808  AFC30064   SW V1, 100(S8)
9D00580C  AFC20068   SW V0, 104(S8)
9D005810  8FC2002C   LW V0, 44(S8)
9D005814  2444FFFE   ADDIU A0, V0, -2
9D005818  3C058000   LUI A1, -32768
9D00581C  8FC20088   LW V0, 136(S8)
9D005820  8FC60080   LW A2, 128(S8)
9D005824  00021080   SLL V0, V0, 2
9D005828  00021880   SLL V1, V0, 2
9D00582C  00621823   SUBU V1, V1, V0
9D005830  00C01021   ADDU V0, A2, ZERO
9D005834  00021080   SLL V0, V0, 2
9D005838  00023080   SLL A2, V0, 2
9D00583C  00461021   ADDU V0, V0, A2
9D005840  00023080   SLL A2, V0, 2
9D005844  00461021   ADDU V0, V0, A2
9D005848  00621821   ADDU V1, V1, V0
9D00584C  24A20124   ADDIU V0, A1, 292
9D005850  00621821   ADDU V1, V1, V0
9D005854  3C058000   LUI A1, -32768
9D005858  8FC60080   LW A2, 128(S8)
9D00585C  00801021   ADDU V0, A0, ZERO
9D005860  00021080   SLL V0, V0, 2
9D005864  00022080   SLL A0, V0, 2
9D005868  00822023   SUBU A0, A0, V0
9D00586C  00C01021   ADDU V0, A2, ZERO
9D005870  00021080   SLL V0, V0, 2
9D005874  00023080   SLL A2, V0, 2
9D005878  00461021   ADDU V0, V0, A2
9D00587C  00023080   SLL A2, V0, 2
9D005880  00461021   ADDU V0, V0, A2
9D005884  00822021   ADDU A0, A0, V0
9D005888  24A20124   ADDIU V0, A1, 292
9D00588C  00821021   ADDU V0, A0, V0
9D005890  8C450000   LW A1, 0(V0)
9D005894  8C440004   LW A0, 4(V0)
9D005898  8C420008   LW V0, 8(V0)
9D00589C  AC650000   SW A1, 0(V1)
9D0058A0  AC640004   SW A0, 4(V1)
9D0058A4  AC620008   SW V0, 8(V1)
9D0058A8  8FC2002C   LW V0, 44(S8)
9D0058AC  2442FFFE   ADDIU V0, V0, -2
9D0058B0  3C048000   LUI A0, -32768
9D0058B4  8FC50080   LW A1, 128(S8)
9D0058B8  00021080   SLL V0, V0, 2
9D0058BC  00021880   SLL V1, V0, 2
9D0058C0  00621823   SUBU V1, V1, V0
9D0058C4  00A01021   ADDU V0, A1, ZERO
9D0058C8  00021080   SLL V0, V0, 2
9D0058CC  00022880   SLL A1, V0, 2
9D0058D0  00451021   ADDU V0, V0, A1
9D0058D4  00022880   SLL A1, V0, 2
9D0058D8  00451021   ADDU V0, V0, A1
9D0058DC  00621821   ADDU V1, V1, V0
9D0058E0  24820124   ADDIU V0, A0, 292
9D0058E4  00621021   ADDU V0, V1, V0
9D0058E8  8FC50060   LW A1, 96(S8)
9D0058EC  8FC40064   LW A0, 100(S8)
9D0058F0  8FC30068   LW V1, 104(S8)
9D0058F4  AC450000   SW A1, 0(V0)
9D0058F8  AC440004   SW A0, 4(V0)
9D0058FC  AC430008   SW V1, 8(V0)
153:                     if(idx3 == handsize - 2)
9D005900  8FC2002C   LW V0, 44(S8)
9D005904  2443FFFE   ADDIU V1, V0, -2
9D005908  8FC2008C   LW V0, 140(S8)
9D00590C  14620003   BNE V1, V0, 0x9D00591C
9D005910  00000000   NOP
154:                         idx3 = idx2;
9D005914  8FC20088   LW V0, 136(S8)
9D005918  AFC2008C   SW V0, 140(S8)
155:                     SWAP(hands[player].hand[idx3], hands[player].hand[handsize - 3]);
9D00591C  3C048000   LUI A0, -32768
9D005920  8FC2008C   LW V0, 140(S8)
9D005924  8FC50080   LW A1, 128(S8)
9D005928  00021080   SLL V0, V0, 2
9D00592C  00021880   SLL V1, V0, 2
9D005930  00621823   SUBU V1, V1, V0
9D005934  00A01021   ADDU V0, A1, ZERO
9D005938  00021080   SLL V0, V0, 2
9D00593C  00022880   SLL A1, V0, 2
9D005940  00451021   ADDU V0, V0, A1
9D005944  00022880   SLL A1, V0, 2
9D005948  00451021   ADDU V0, V0, A1
9D00594C  00621821   ADDU V1, V1, V0
9D005950  24820124   ADDIU V0, A0, 292
9D005954  00621021   ADDU V0, V1, V0
9D005958  8C440000   LW A0, 0(V0)
9D00595C  8C430004   LW V1, 4(V0)
9D005960  8C420008   LW V0, 8(V0)
9D005964  AFC4006C   SW A0, 108(S8)
9D005968  AFC30070   SW V1, 112(S8)
9D00596C  AFC20074   SW V0, 116(S8)
9D005970  8FC2002C   LW V0, 44(S8)
9D005974  2444FFFD   ADDIU A0, V0, -3
9D005978  3C058000   LUI A1, -32768
9D00597C  8FC2008C   LW V0, 140(S8)
9D005980  8FC60080   LW A2, 128(S8)
9D005984  00021080   SLL V0, V0, 2
9D005988  00021880   SLL V1, V0, 2
9D00598C  00621823   SUBU V1, V1, V0
9D005990  00C01021   ADDU V0, A2, ZERO
9D005994  00021080   SLL V0, V0, 2
9D005998  00023080   SLL A2, V0, 2
9D00599C  00461021   ADDU V0, V0, A2
9D0059A0  00023080   SLL A2, V0, 2
9D0059A4  00461021   ADDU V0, V0, A2
9D0059A8  00621821   ADDU V1, V1, V0
9D0059AC  24A20124   ADDIU V0, A1, 292
9D0059B0  00621821   ADDU V1, V1, V0
9D0059B4  3C058000   LUI A1, -32768
9D0059B8  8FC60080   LW A2, 128(S8)
9D0059BC  00801021   ADDU V0, A0, ZERO
9D0059C0  00021080   SLL V0, V0, 2
9D0059C4  00022080   SLL A0, V0, 2
9D0059C8  00822023   SUBU A0, A0, V0
9D0059CC  00C01021   ADDU V0, A2, ZERO
9D0059D0  00021080   SLL V0, V0, 2
9D0059D4  00023080   SLL A2, V0, 2
9D0059D8  00461021   ADDU V0, V0, A2
9D0059DC  00023080   SLL A2, V0, 2
9D0059E0  00461021   ADDU V0, V0, A2
9D0059E4  00822021   ADDU A0, A0, V0
9D0059E8  24A20124   ADDIU V0, A1, 292
9D0059EC  00821021   ADDU V0, A0, V0
9D0059F0  8C450000   LW A1, 0(V0)
9D0059F4  8C440004   LW A0, 4(V0)
9D0059F8  8C420008   LW V0, 8(V0)
9D0059FC  AC650000   SW A1, 0(V1)
9D005A00  AC640004   SW A0, 4(V1)
9D005A04  AC620008   SW V0, 8(V1)
9D005A08  8FC2002C   LW V0, 44(S8)
9D005A0C  2442FFFD   ADDIU V0, V0, -3
9D005A10  3C048000   LUI A0, -32768
9D005A14  8FC50080   LW A1, 128(S8)
9D005A18  00021080   SLL V0, V0, 2
9D005A1C  00021880   SLL V1, V0, 2
9D005A20  00621823   SUBU V1, V1, V0
9D005A24  00A01021   ADDU V0, A1, ZERO
9D005A28  00021080   SLL V0, V0, 2
9D005A2C  00022880   SLL A1, V0, 2
9D005A30  00451021   ADDU V0, V0, A1
9D005A34  00022880   SLL A1, V0, 2
9D005A38  00451021   ADDU V0, V0, A1
9D005A3C  00621821   ADDU V1, V1, V0
9D005A40  24820124   ADDIU V0, A0, 292
9D005A44  00621021   ADDU V0, V1, V0
9D005A48  8FC5006C   LW A1, 108(S8)
9D005A4C  8FC40070   LW A0, 112(S8)
9D005A50  8FC30074   LW V1, 116(S8)
9D005A54  AC450000   SW A1, 0(V0)
9D005A58  AC440004   SW A0, 4(V0)
9D005A5C  AC430008   SW V1, 8(V0)
156:                 
157:                     hands[player].cards -= 3;
9D005A60  3C038000   LUI V1, -32768
9D005A64  8FC20080   LW V0, 128(S8)
9D005A68  00021080   SLL V0, V0, 2
9D005A6C  00022080   SLL A0, V0, 2
9D005A70  00441021   ADDU V0, V0, A0
9D005A74  00022080   SLL A0, V0, 2
9D005A78  00441021   ADDU V0, V0, A0
9D005A7C  24630124   ADDIU V1, V1, 292
9D005A80  00431021   ADDU V0, V0, V1
9D005A84  8C420060   LW V0, 96(V0)
9D005A88  2443FFFD   ADDIU V1, V0, -3
9D005A8C  3C048000   LUI A0, -32768
9D005A90  8FC20080   LW V0, 128(S8)
9D005A94  00021080   SLL V0, V0, 2
9D005A98  00022880   SLL A1, V0, 2
9D005A9C  00451021   ADDU V0, V0, A1
9D005AA0  00022880   SLL A1, V0, 2
9D005AA4  00451021   ADDU V0, V0, A1
9D005AA8  24840124   ADDIU A0, A0, 292
9D005AAC  00441021   ADDU V0, V0, A0
9D005AB0  AC430060   SW V1, 96(V0)
158:                 
159:                     // Bonuses for owning the territories being traded.
160:                     if(c1.type != WILD && territories[c1.territory].owner == player)
9D005AB4  8FC30030   LW V1, 48(S8)
9D005AB8  24020003   ADDIU V0, ZERO, 3
9D005ABC  10620024   BEQ V1, V0, 0x9D005B50
9D005AC0  00000000   NOP
9D005AC4  8FC20034   LW V0, 52(S8)
9D005AC8  3C048000   LUI A0, -32768
9D005ACC  000210C0   SLL V0, V0, 3
9D005AD0  00021880   SLL V1, V0, 2
9D005AD4  00621823   SUBU V1, V1, V0
9D005AD8  248241B8   ADDIU V0, A0, 16824
9D005ADC  00621021   ADDU V0, V1, V0
9D005AE0  8C430010   LW V1, 16(V0)
9D005AE4  8FC20080   LW V0, 128(S8)
9D005AE8  14620019   BNE V1, V0, 0x9D005B50
9D005AEC  00000000   NOP
161:                     {
162:                         territories[c1.territory].troops += 2;
9D005AF0  8FC50034   LW A1, 52(S8)
9D005AF4  8FC20034   LW V0, 52(S8)
9D005AF8  3C038000   LUI V1, -32768
9D005AFC  246341B8   ADDIU V1, V1, 16824
9D005B00  000210C0   SLL V0, V0, 3
9D005B04  00022080   SLL A0, V0, 2
9D005B08  00821023   SUBU V0, A0, V0
9D005B0C  00621021   ADDU V0, V1, V0
9D005B10  8C420014   LW V0, 20(V0)
9D005B14  24430002   ADDIU V1, V0, 2
9D005B18  3C028000   LUI V0, -32768
9D005B1C  244441B8   ADDIU A0, V0, 16824
9D005B20  00A01021   ADDU V0, A1, ZERO
9D005B24  000210C0   SLL V0, V0, 3
9D005B28  00022880   SLL A1, V0, 2
9D005B2C  00A21023   SUBU V0, A1, V0
9D005B30  00821021   ADDU V0, A0, V0
9D005B34  AC430014   SW V1, 20(V0)
163:                         logReinforce(player, c1.territory, 2);
9D005B38  8FC20034   LW V0, 52(S8)
9D005B3C  8FC40080   LW A0, 128(S8)
9D005B40  00402821   ADDU A1, V0, ZERO
9D005B44  24060002   ADDIU A2, ZERO, 2
9D005B48  0F401E4C   JAL logReinforce
9D005B4C  00000000   NOP
164:                     }
165:                     if(c2.type != WILD && territories[c2.territory].owner == player)
9D005B50  8FC3003C   LW V1, 60(S8)
9D005B54  24020003   ADDIU V0, ZERO, 3
9D005B58  10620024   BEQ V1, V0, 0x9D005BEC
9D005B5C  00000000   NOP
9D005B60  8FC20040   LW V0, 64(S8)
9D005B64  3C048000   LUI A0, -32768
9D005B68  000210C0   SLL V0, V0, 3
9D005B6C  00021880   SLL V1, V0, 2
9D005B70  00621823   SUBU V1, V1, V0
9D005B74  248241B8   ADDIU V0, A0, 16824
9D005B78  00621021   ADDU V0, V1, V0
9D005B7C  8C430010   LW V1, 16(V0)
9D005B80  8FC20080   LW V0, 128(S8)
9D005B84  14620019   BNE V1, V0, 0x9D005BEC
9D005B88  00000000   NOP
166:                     {
167:                         territories[c2.territory].troops += 2;
9D005B8C  8FC50040   LW A1, 64(S8)
9D005B90  8FC20040   LW V0, 64(S8)
9D005B94  3C038000   LUI V1, -32768
9D005B98  246341B8   ADDIU V1, V1, 16824
9D005B9C  000210C0   SLL V0, V0, 3
9D005BA0  00022080   SLL A0, V0, 2
9D005BA4  00821023   SUBU V0, A0, V0
9D005BA8  00621021   ADDU V0, V1, V0
9D005BAC  8C420014   LW V0, 20(V0)
9D005BB0  24430002   ADDIU V1, V0, 2
9D005BB4  3C028000   LUI V0, -32768
9D005BB8  244441B8   ADDIU A0, V0, 16824
9D005BBC  00A01021   ADDU V0, A1, ZERO
9D005BC0  000210C0   SLL V0, V0, 3
9D005BC4  00022880   SLL A1, V0, 2
9D005BC8  00A21023   SUBU V0, A1, V0
9D005BCC  00821021   ADDU V0, A0, V0
9D005BD0  AC430014   SW V1, 20(V0)
168:                         logReinforce(player, c1.territory, 2);
9D005BD4  8FC20034   LW V0, 52(S8)
9D005BD8  8FC40080   LW A0, 128(S8)
9D005BDC  00402821   ADDU A1, V0, ZERO
9D005BE0  24060002   ADDIU A2, ZERO, 2
9D005BE4  0F401E4C   JAL logReinforce
9D005BE8  00000000   NOP
169:                     }
170:                     if(c3.type != WILD && territories[c3.territory].owner == player)
9D005BEC  8FC30048   LW V1, 72(S8)
9D005BF0  24020003   ADDIU V0, ZERO, 3
9D005BF4  10620024   BEQ V1, V0, 0x9D005C88
9D005BF8  00000000   NOP
9D005BFC  8FC2004C   LW V0, 76(S8)
9D005C00  3C048000   LUI A0, -32768
9D005C04  000210C0   SLL V0, V0, 3
9D005C08  00021880   SLL V1, V0, 2
9D005C0C  00621823   SUBU V1, V1, V0
9D005C10  248241B8   ADDIU V0, A0, 16824
9D005C14  00621021   ADDU V0, V1, V0
9D005C18  8C430010   LW V1, 16(V0)
9D005C1C  8FC20080   LW V0, 128(S8)
9D005C20  14620019   BNE V1, V0, 0x9D005C88
9D005C24  00000000   NOP
171:                     {
172:                         logReinforce(player, c1.territory, 2);
9D005C28  8FC20034   LW V0, 52(S8)
9D005C2C  8FC40080   LW A0, 128(S8)
9D005C30  00402821   ADDU A1, V0, ZERO
9D005C34  24060002   ADDIU A2, ZERO, 2
9D005C38  0F401E4C   JAL logReinforce
9D005C3C  00000000   NOP
173:                         territories[c3.territory].troops += 2;
9D005C40  8FC5004C   LW A1, 76(S8)
9D005C44  8FC2004C   LW V0, 76(S8)
9D005C48  3C038000   LUI V1, -32768
9D005C4C  246341B8   ADDIU V1, V1, 16824
9D005C50  000210C0   SLL V0, V0, 3
9D005C54  00022080   SLL A0, V0, 2
9D005C58  00821023   SUBU V0, A0, V0
9D005C5C  00621021   ADDU V0, V1, V0
9D005C60  8C420014   LW V0, 20(V0)
9D005C64  24430002   ADDIU V1, V0, 2
9D005C68  3C028000   LUI V0, -32768
9D005C6C  244441B8   ADDIU A0, V0, 16824
9D005C70  00A01021   ADDU V0, A1, ZERO
9D005C74  000210C0   SLL V0, V0, 3
9D005C78  00022880   SLL A1, V0, 2
9D005C7C  00A21023   SUBU V0, A1, V0
9D005C80  00821021   ADDU V0, A0, V0
9D005C84  AC430014   SW V1, 20(V0)
174:                     }
175:                 
176:                     // If scheme is SET_VALUE, value is already set.
177:                     
178:                     if(cardValueScheme == INCREASING_ONE)
9D005C88  8F8380CC   LW V1, -32564(GP)
9D005C8C  24020001   ADDIU V0, ZERO, 1
9D005C90  14620008   BNE V1, V0, 0x9D005CB4
9D005C94  00000000   NOP
179:                     {
180:                         value = cardExchangeValue;
9D005C98  8F8280C8   LW V0, -32568(GP)
9D005C9C  AFC20028   SW V0, 40(S8)
181:                         cardExchangeValue += 1;
9D005CA0  8F8280C8   LW V0, -32568(GP)
9D005CA4  24420001   ADDIU V0, V0, 1
9D005CA8  AF8280C8   SW V0, -32568(GP)
9D005CAC  0B401745   J 0x9D005D14
9D005CB0  00000000   NOP
182:                     }
183:                     else if(cardValueScheme == INCREASING)
9D005CB4  8F8280CC   LW V0, -32564(GP)
9D005CB8  14400016   BNE V0, ZERO, 0x9D005D14
9D005CBC  00000000   NOP
184:                     {
185:                         value = cardExchangeValue;
9D005CC0  8F8280C8   LW V0, -32568(GP)
9D005CC4  AFC20028   SW V0, 40(S8)
186:                         if(cardValueIndex < NUM_EXCHANGE_VALUES - 1)
9D005CC8  8F8280D0   LW V0, -32560(GP)
9D005CCC  28420005   SLTI V0, V0, 5
9D005CD0  1040000D   BEQ V0, ZERO, 0x9D005D08
9D005CD4  00000000   NOP
187:                         {
188:                             cardValueIndex += 1;
9D005CD8  8F8280D0   LW V0, -32560(GP)
9D005CDC  24420001   ADDIU V0, V0, 1
9D005CE0  AF8280D0   SW V0, -32560(GP)
189:                             cardExchangeValue = cardExchangeValues[cardValueIndex];
9D005CE4  8F8380D0   LW V1, -32560(GP)
9D005CE8  3C029D01   LUI V0, -25343
9D005CEC  00031880   SLL V1, V1, 2
9D005CF0  2442B7B8   ADDIU V0, V0, -18504
9D005CF4  00621021   ADDU V0, V1, V0
9D005CF8  8C420000   LW V0, 0(V0)
9D005CFC  AF8280C8   SW V0, -32568(GP)
9D005D00  0B401745   J 0x9D005D14
9D005D04  00000000   NOP
190:                         }
191:                         else
192:                         {
193:                             cardExchangeValue += 5;
9D005D08  8F8280C8   LW V0, -32568(GP)
9D005D0C  24420005   ADDIU V0, V0, 5
9D005D10  AF8280C8   SW V0, -32568(GP)
194:                         }
195:                     }
196:                 
197:                     logExchange(player, c1.type, c2.type, c3.type, value);
9D005D14  8FC50030   LW A1, 48(S8)
9D005D18  8FC3003C   LW V1, 60(S8)
9D005D1C  8FC20048   LW V0, 72(S8)
9D005D20  8FC40028   LW A0, 40(S8)
9D005D24  AFA40010   SW A0, 16(SP)
9D005D28  8FC40080   LW A0, 128(S8)
9D005D2C  00603021   ADDU A2, V1, ZERO
9D005D30  00403821   ADDU A3, V0, ZERO
9D005D34  0F401DD8   JAL 0x9D007760
9D005D38  00000000   NOP
198:                 
199:                     return value;
9D005D3C  8FC20028   LW V0, 40(S8)
200:                 }
9D005D40  03C0E821   ADDU SP, S8, ZERO
9D005D44  8FBF007C   LW RA, 124(SP)
9D005D48  8FBE0078   LW S8, 120(SP)
9D005D4C  27BD0080   ADDIU SP, SP, 128
9D005D50  03E00008   JR RA
9D005D54  00000000   NOP
201:                 
202:                 void takeHand(int player, int eliminatedPlayer)
203:                 {
9D005D58  27BDFFF0   ADDIU SP, SP, -16
9D005D5C  AFBE000C   SW S8, 12(SP)
9D005D60  03A0F021   ADDU S8, SP, ZERO
9D005D64  AFC40010   SW A0, 16(S8)
9D005D68  AFC50014   SW A1, 20(S8)
204:                     for(int i = 0; i < hands[eliminatedPlayer].cards; i++)
9D005D6C  AFC00000   SW ZERO, 0(S8)
9D005D70  0B401790   J 0x9D005E40
9D005D74  00000000   NOP
9D005E34  8FC20000   LW V0, 0(S8)
9D005E38  24420001   ADDIU V0, V0, 1
9D005E3C  AFC20000   SW V0, 0(S8)
9D005E40  3C038000   LUI V1, -32768
9D005E44  8FC20014   LW V0, 20(S8)
9D005E48  00021080   SLL V0, V0, 2
9D005E4C  00022080   SLL A0, V0, 2
9D005E50  00441021   ADDU V0, V0, A0
9D005E54  00022080   SLL A0, V0, 2
9D005E58  00441021   ADDU V0, V0, A0
9D005E5C  24630124   ADDIU V1, V1, 292
9D005E60  00431021   ADDU V0, V0, V1
9D005E64  8C430060   LW V1, 96(V0)
9D005E68  8FC20000   LW V0, 0(S8)
9D005E6C  0043102A   SLT V0, V0, V1
9D005E70  1440FFC1   BNE V0, ZERO, 0x9D005D78
9D005E74  00000000   NOP
205:                     {
206:                         hands[player].hand[hands[player].cards + i] = 
9D005D78  3C038000   LUI V1, -32768
9D005D7C  8FC20010   LW V0, 16(S8)
9D005D80  00021080   SLL V0, V0, 2
9D005D84  00022080   SLL A0, V0, 2
9D005D88  00441021   ADDU V0, V0, A0
9D005D8C  00022080   SLL A0, V0, 2
9D005D90  00441021   ADDU V0, V0, A0
9D005D94  24630124   ADDIU V1, V1, 292
9D005D98  00431021   ADDU V0, V0, V1
9D005D9C  8C430060   LW V1, 96(V0)
9D005DA0  8FC20000   LW V0, 0(S8)
9D005DA4  00621021   ADDU V0, V1, V0
9D005DA8  3C048000   LUI A0, -32768
9D005DAC  8FC50010   LW A1, 16(S8)
9D005DB0  00021080   SLL V0, V0, 2
9D005DB4  00021880   SLL V1, V0, 2
9D005DB8  00621823   SUBU V1, V1, V0
9D005DBC  00A01021   ADDU V0, A1, ZERO
9D005DC0  00021080   SLL V0, V0, 2
9D005DC4  00022880   SLL A1, V0, 2
9D005DC8  00451021   ADDU V0, V0, A1
9D005DCC  00022880   SLL A1, V0, 2
9D005DD0  00451021   ADDU V0, V0, A1
9D005DD4  00621821   ADDU V1, V1, V0
9D005DD8  24820124   ADDIU V0, A0, 292
9D005DDC  00621821   ADDU V1, V1, V0
9D005DE0  3C058000   LUI A1, -32768
9D005DE4  8FC20000   LW V0, 0(S8)
9D005DE8  8FC60014   LW A2, 20(S8)
9D005DEC  00021080   SLL V0, V0, 2
9D005DF0  00022080   SLL A0, V0, 2
9D005DF4  00822023   SUBU A0, A0, V0
9D005DF8  00C01021   ADDU V0, A2, ZERO
9D005DFC  00021080   SLL V0, V0, 2
9D005E00  00023080   SLL A2, V0, 2
9D005E04  00461021   ADDU V0, V0, A2
9D005E08  00023080   SLL A2, V0, 2
9D005E0C  00461021   ADDU V0, V0, A2
9D005E10  00822021   ADDU A0, A0, V0
9D005E14  24A20124   ADDIU V0, A1, 292
9D005E18  00821021   ADDU V0, A0, V0
9D005E1C  8C450000   LW A1, 0(V0)
9D005E20  8C440004   LW A0, 4(V0)
9D005E24  8C420008   LW V0, 8(V0)
9D005E28  AC650000   SW A1, 0(V1)
9D005E2C  AC640004   SW A0, 4(V1)
9D005E30  AC620008   SW V0, 8(V1)
207:                             hands[eliminatedPlayer].hand[i];
208:                     }
209:                     hands[player].cards += hands[eliminatedPlayer].cards;
9D005E78  3C038000   LUI V1, -32768
9D005E7C  8FC20010   LW V0, 16(S8)
9D005E80  00021080   SLL V0, V0, 2
9D005E84  00022080   SLL A0, V0, 2
9D005E88  00441021   ADDU V0, V0, A0
9D005E8C  00022080   SLL A0, V0, 2
9D005E90  00441021   ADDU V0, V0, A0
9D005E94  24630124   ADDIU V1, V1, 292
9D005E98  00431021   ADDU V0, V0, V1
9D005E9C  8C430060   LW V1, 96(V0)
9D005EA0  3C048000   LUI A0, -32768
9D005EA4  8FC20014   LW V0, 20(S8)
9D005EA8  00021080   SLL V0, V0, 2
9D005EAC  00022880   SLL A1, V0, 2
9D005EB0  00451021   ADDU V0, V0, A1
9D005EB4  00022880   SLL A1, V0, 2
9D005EB8  00451021   ADDU V0, V0, A1
9D005EBC  24840124   ADDIU A0, A0, 292
9D005EC0  00441021   ADDU V0, V0, A0
9D005EC4  8C420060   LW V0, 96(V0)
9D005EC8  00621821   ADDU V1, V1, V0
9D005ECC  3C048000   LUI A0, -32768
9D005ED0  8FC20010   LW V0, 16(S8)
9D005ED4  00021080   SLL V0, V0, 2
9D005ED8  00022880   SLL A1, V0, 2
9D005EDC  00451021   ADDU V0, V0, A1
9D005EE0  00022880   SLL A1, V0, 2
9D005EE4  00451021   ADDU V0, V0, A1
9D005EE8  24840124   ADDIU A0, A0, 292
9D005EEC  00441021   ADDU V0, V0, A0
9D005EF0  AC430060   SW V1, 96(V0)
210:                     hands[eliminatedPlayer].cards = 0;
9D005EF4  3C038000   LUI V1, -32768
9D005EF8  8FC20014   LW V0, 20(S8)
9D005EFC  00021080   SLL V0, V0, 2
9D005F00  00022080   SLL A0, V0, 2
9D005F04  00441021   ADDU V0, V0, A0
9D005F08  00022080   SLL A0, V0, 2
9D005F0C  00441021   ADDU V0, V0, A0
9D005F10  24630124   ADDIU V1, V1, 292
9D005F14  00431021   ADDU V0, V0, V1
9D005F18  AC400060   SW ZERO, 96(V0)
211:                 }
9D005F1C  03C0E821   ADDU SP, S8, ZERO
9D005F20  8FBE000C   LW S8, 12(SP)
9D005F24  27BD0010   ADDIU SP, SP, 16
9D005F28  03E00008   JR RA
9D005F2C  00000000   NOP
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/pi.c  -------------------------------------------------
1:                   #include "pi.h"
2:                   #include <p32xxxx.h>
3:                   #include <sys/attribs.h>
4:                   #include "gamelogic.h"
5:                   
6:                   unsigned char piData[PI_DATA_LENGTH];
7:                   static unsigned char * terrPtr = piData;
8:                   static unsigned char * cardsPtr = piData + NUM_TERRITORIES;
9:                   
10:                  unsigned char piCommand[PI_COMMAND_LENGTH];
11:                  static unsigned char * cmdPtr = piCommand;
12:                  
13:                  void updatePiData()
14:                  {
9D00960C  27BDFFE8   ADDIU SP, SP, -24
9D009610  AFBE0014   SW S8, 20(SP)
9D009614  03A0F021   ADDU S8, SP, ZERO
15:                      for(int i = 0; i < NUM_TERRITORIES; i++)
9D009618  AFC00000   SW ZERO, 0(S8)
9D00961C  0B402599   J 0x9D009664
9D009620  00000000   NOP
9D009658  8FC20000   LW V0, 0(S8)
9D00965C  24420001   ADDIU V0, V0, 1
9D009660  AFC20000   SW V0, 0(S8)
9D009664  8FC20000   LW V0, 0(S8)
9D009668  28420002   SLTI V0, V0, 2
9D00966C  1440FFED   BNE V0, ZERO, 0x9D009624
9D009670  00000000   NOP
16:                      {
17:                          terrPtr[i] = territories[i].owner;
9D009624  8F838018   LW V1, -32744(GP)
9D009628  8FC20000   LW V0, 0(S8)
9D00962C  00622021   ADDU A0, V1, V0
9D009630  3C058000   LUI A1, -32768
9D009634  8FC20000   LW V0, 0(S8)
9D009638  000210C0   SLL V0, V0, 3
9D00963C  00021880   SLL V1, V0, 2
9D009640  00621823   SUBU V1, V1, V0
9D009644  24A241B8   ADDIU V0, A1, 16824
9D009648  00621021   ADDU V0, V1, V0
9D00964C  8C420010   LW V0, 16(V0)
9D009650  304200FF   ANDI V0, V0, 255
9D009654  A0820000   SB V0, 0(A0)
18:                      }
19:                  
20:                      for(int i = 0; i < NUM_CARDS; i++)
9D009674  AFC00004   SW ZERO, 4(S8)
9D009678  0B4025A8   J 0x9D0096A0
9D00967C  00000000   NOP
9D009694  8FC20004   LW V0, 4(S8)
9D009698  24420001   ADDIU V0, V0, 1
9D00969C  AFC20004   SW V0, 4(S8)
9D0096A0  8FC20004   LW V0, 4(S8)
9D0096A4  28420004   SLTI V0, V0, 4
9D0096A8  1440FFF5   BNE V0, ZERO, 0x9D009680
9D0096AC  00000000   NOP
21:                      {
22:                          cardsPtr[i] = 0xFF;
9D009680  8F83801C   LW V1, -32740(GP)
9D009684  8FC20004   LW V0, 4(S8)
9D009688  00621021   ADDU V0, V1, V0
9D00968C  2403FFFF   ADDIU V1, ZERO, -1
9D009690  A0430000   SB V1, 0(V0)
23:                      }
24:                      for(int i = 0; i < numPlayers; i++)
9D0096B0  AFC00008   SW ZERO, 8(S8)
9D0096B4  0B4025DB   J 0x9D00976C
9D0096B8  00000000   NOP
9D009760  8FC20008   LW V0, 8(S8)
9D009764  24420001   ADDIU V0, V0, 1
9D009768  AFC20008   SW V0, 8(S8)
9D00976C  8F8280DC   LW V0, -32548(GP)
9D009770  8FC30008   LW V1, 8(S8)
9D009774  0062102A   SLT V0, V1, V0
9D009778  1440FFD0   BNE V0, ZERO, 0x9D0096BC
9D00977C  00000000   NOP
25:                      {
26:                          for(int j = 0; j < hands[i].cards; j++)
9D0096BC  AFC0000C   SW ZERO, 12(S8)
9D0096C0  0B4025CA   J 0x9D009728
9D0096C4  00000000   NOP
9D00971C  8FC2000C   LW V0, 12(S8)
9D009720  24420001   ADDIU V0, V0, 1
9D009724  AFC2000C   SW V0, 12(S8)
9D009728  3C038000   LUI V1, -32768
9D00972C  8FC20008   LW V0, 8(S8)
9D009730  00021080   SLL V0, V0, 2
9D009734  00022080   SLL A0, V0, 2
9D009738  00441021   ADDU V0, V0, A0
9D00973C  00022080   SLL A0, V0, 2
9D009740  00441021   ADDU V0, V0, A0
9D009744  24630124   ADDIU V1, V1, 292
9D009748  00431021   ADDU V0, V0, V1
9D00974C  8C430060   LW V1, 96(V0)
9D009750  8FC2000C   LW V0, 12(S8)
9D009754  0043102A   SLT V0, V0, V1
9D009758  1440FFDB   BNE V0, ZERO, 0x9D0096C8
9D00975C  00000000   NOP
27:                          {
28:                              cardsPtr[hands[i].hand[j].index] = i;
9D0096C8  8F84801C   LW A0, -32740(GP)
9D0096CC  3C058000   LUI A1, -32768
9D0096D0  8FC2000C   LW V0, 12(S8)
9D0096D4  8FC60008   LW A2, 8(S8)
9D0096D8  00021080   SLL V0, V0, 2
9D0096DC  00021880   SLL V1, V0, 2
9D0096E0  00621823   SUBU V1, V1, V0
9D0096E4  00C01021   ADDU V0, A2, ZERO
9D0096E8  00021080   SLL V0, V0, 2
9D0096EC  00023080   SLL A2, V0, 2
9D0096F0  00461021   ADDU V0, V0, A2
9D0096F4  00023080   SLL A2, V0, 2
9D0096F8  00461021   ADDU V0, V0, A2
9D0096FC  00621821   ADDU V1, V1, V0
9D009700  24A20124   ADDIU V0, A1, 292
9D009704  00621021   ADDU V0, V1, V0
9D009708  8C420008   LW V0, 8(V0)
9D00970C  00821021   ADDU V0, A0, V0
9D009710  8FC30008   LW V1, 8(S8)
9D009714  306300FF   ANDI V1, V1, 255
9D009718  A0430000   SB V1, 0(V0)
29:                          }
30:                      }
31:                  }
9D009780  03C0E821   ADDU SP, S8, ZERO
9D009784  8FBE0014   LW S8, 20(SP)
9D009788  27BD0018   ADDIU SP, SP, 24
9D00978C  03E00008   JR RA
9D009790  00000000   NOP
32:                  
33:                  void __ISR(_SPI3_RX_VECTOR, IPL4SRS) SPI3RXisr()
34:                  {
9D009794  415DE800   RDPGPR SP, SP
9D009798  401A7000   MFC0 K0, EPC
9D00979C  401B6000   MFC0 K1, Status
9D0097A0  27BDFFE0   ADDIU SP, SP, -32
9D0097A4  AFBA001C   SW K0, 28(SP)
9D0097A8  401A6002   MFC0 K0, SRSCtl
9D0097AC  AFBB0018   SW K1, 24(SP)
9D0097B0  AFBA0014   SW K0, 20(SP)
9D0097B4  7C1B7844   INS K1, ZERO, 1, 15
9D0097B8  377B1000   ORI K1, K1, 4096
9D0097BC  409B6000   MTC0 K1, Status
9D0097C0  AFBE000C   SW S8, 12(SP)
9D0097C4  03A0F021   ADDU S8, SP, ZERO
35:                      static unsigned char * piDataPtr = NULL;
36:                  
37:                      unsigned char rx = SPI3BUF;
9D0097C8  3C02BF82   LUI V0, -16510
9D0097CC  8C421420   LW V0, 5152(V0)
9D0097D0  A3C20000   SB V0, 0(S8)
38:                  
39:                      if(rx == 0xFF)
9D0097D4  93C30000   LBU V1, 0(S8)
9D0097D8  240200FF   ADDIU V0, ZERO, 255
9D0097DC  14620018   BNE V1, V0, 0x9D009840
9D0097E0  00000000   NOP
40:                      {
41:                          if(piDataPtr == NULL)
9D0097E4  8F8280B4   LW V0, -32588(GP)
9D0097E8  14400003   BNE V0, ZERO, 0x9D0097F8
9D0097EC  00000000   NOP
42:                          {
43:                              // Pi is starting a data request
44:                              piDataPtr = piData;
9D0097F0  278280F8   ADDIU V0, GP, -32520
9D0097F4  AF8280B4   SW V0, -32588(GP)
45:                          }
46:                  
47:                          if(piDataPtr - piData == PI_DATA_LENGTH)
9D0097F8  8F8280B4   LW V0, -32588(GP)
9D0097FC  00401821   ADDU V1, V0, ZERO
9D009800  278280F8   ADDIU V0, GP, -32520
9D009804  00621823   SUBU V1, V1, V0
9D009808  24020006   ADDIU V0, ZERO, 6
9D00980C  14620007   BNE V1, V0, 0x9D00982C
9D009810  00000000   NOP
48:                          {
49:                              // End of data
50:                              piDataPtr = NULL;
9D009814  AF8080B4   SW ZERO, -32588(GP)
51:                              SPI3BUF = 0x01;
9D009818  3C02BF82   LUI V0, -16510
9D00981C  24030001   ADDIU V1, ZERO, 1
9D009820  AC431420   SW V1, 5152(V0)
9D009824  0B402621   J 0x9D009884
9D009828  00000000   NOP
52:                          }
53:                          else
54:                          {
55:                              // Prepare next byte
56:                              //SPI3BUF = *piDataPtr++;
57:                              SPI3BUF = 0x01;
9D00982C  3C02BF82   LUI V0, -16510
9D009830  24030001   ADDIU V1, ZERO, 1
9D009834  AC431420   SW V1, 5152(V0)
9D009838  0B402621   J 0x9D009884
9D00983C  00000000   NOP
58:                          }
59:                      }
60:                      else
61:                      {
62:                          if(cmdPtr - piCommand == 4)
9D009840  8F828020   LW V0, -32736(GP)
9D009844  00401821   ADDU V1, V0, ZERO
9D009848  27828100   ADDIU V0, GP, -32512
9D00984C  00621823   SUBU V1, V1, V0
9D009850  24020004   ADDIU V0, ZERO, 4
9D009854  14620003   BNE V1, V0, 0x9D009864
9D009858  00000000   NOP
63:                          {
64:                              cmdPtr = piCommand;
9D00985C  27828100   ADDIU V0, GP, -32512
9D009860  AF828020   SW V0, -32736(GP)
65:                          }
66:                          *cmdPtr++ = rx;
9D009864  8F828020   LW V0, -32736(GP)
9D009868  93C30000   LBU V1, 0(S8)
9D00986C  A0430000   SB V1, 0(V0)
9D009870  24420001   ADDIU V0, V0, 1
9D009874  AF828020   SW V0, -32736(GP)
67:                          SPI3BUF = 0xFF;
9D009878  3C02BF82   LUI V0, -16510
9D00987C  240300FF   ADDIU V1, ZERO, 255
9D009880  AC431420   SW V1, 5152(V0)
68:                      }
69:                  
70:                      IFS4bits.SPI3RXIF = 0; // clear interrupt flag
9D009884  3C03BF81   LUI V1, -16511
9D009888  8C620080   LW V0, 128(V1)
9D00988C  7C02DEC4   INS V0, ZERO, 27, 1
9D009890  AC620080   SW V0, 128(V1)
71:                  }
9D009894  03C0E821   ADDU SP, S8, ZERO
9D009898  8FBE000C   LW S8, 12(SP)
9D00989C  41606000   DI ZERO
9D0098A0  000000C0   EHB
9D0098A4  8FBB0014   LW K1, 20(SP)
9D0098A8  8FBA001C   LW K0, 28(SP)
9D0098AC  409B6002   MTC0 K1, SRSCtl
9D0098B0  8FBB0018   LW K1, 24(SP)
9D0098B4  409A7000   MTC0 K0, EPC
9D0098B8  27BD0020   ADDIU SP, SP, 32
9D0098BC  41DDE800   WRPGPR SP, SP
9D0098C0  409B6000   MTC0 K1, Status
9D0098C4  42000018   ERET
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/main.c  -----------------------------------------------
1:                   /*
2:                    * File:   main.c
3:                    * Author: jacob
4:                    *
5:                    * Created on February 19, 2015, 6:12 PM
6:                    */
7:                   
8:                   #include <p32xxxx.h>
9:                   #include <xc.h>
10:                  #include <sys/attribs.h> // __ISR macro here
11:                  
12:                  #include <string.h>
13:                  
14:                  #include "device_config.h"
15:                  #include "init.h"
16:                  #include "lcd.h"
17:                  #include "gamelogic.h"
18:                  #include "buttons.h"
19:                  #include "pi.h"
20:                  
21:                  // implement function required for game logic in io.h
22:                  #ifdef NO_RANDOM
23:                  int randint(int min, int max)
24:                  {
9D006B2C  27BDFFF8   ADDIU SP, SP, -8
9D006B30  AFBE0004   SW S8, 4(SP)
9D006B34  03A0F021   ADDU S8, SP, ZERO
9D006B38  AFC40008   SW A0, 8(S8)
9D006B3C  AFC5000C   SW A1, 12(S8)
25:                      return min;
9D006B40  8FC20008   LW V0, 8(S8)
26:                  }
9D006B44  03C0E821   ADDU SP, S8, ZERO
9D006B48  8FBE0004   LW S8, 4(SP)
9D006B4C  27BD0008   ADDIU SP, SP, 8
9D006B50  03E00008   JR RA
9D006B54  00000000   NOP
27:                  #else
28:                  int randint(int min, int max)
29:                  {
30:                      unsigned random = RNGNUMGEN1;
31:                      return min + (random % (max - min + 1));
32:                  }
33:                  #endif
34:                  void panic(int line, const char * file, const char * fun, const char * text)
35:                  {
9D006B58  27BDFFE8   ADDIU SP, SP, -24
9D006B5C  AFBF0014   SW RA, 20(SP)
9D006B60  AFBE0010   SW S8, 16(SP)
9D006B64  03A0F021   ADDU S8, SP, ZERO
9D006B68  AFC40018   SW A0, 24(S8)
9D006B6C  AFC5001C   SW A1, 28(S8)
9D006B70  AFC60020   SW A2, 32(S8)
9D006B74  AFC70024   SW A3, 36(S8)
36:                      static int panicking = 0;
37:                      if(panicking)
9D006B78  8F828098   LW V0, -32616(GP)
9D006B7C  10400003   BEQ V0, ZERO, 0x9D006B8C
9D006B80  00000000   NOP
38:                          abort(); // recursion is bad!
9D006B84  0F402E16   JAL abort
9D006B88  00000000   NOP
39:                      panicking = 1;
9D006B8C  24020001   ADDIU V0, ZERO, 1
9D006B90  AF828098   SW V0, -32616(GP)
40:                      
41:                      __builtin_disable_interrupts();
9D006B94  41626000   DI V0
9D006B98  000000C0   EHB
42:                      setTextDisplay(0, "Error %s", fun);
9D006B9C  00002021   ADDU A0, ZERO, ZERO
9D006BA0  3C029D01   LUI V0, -25343
9D006BA4  2445B5AC   ADDIU A1, V0, -19028
9D006BA8  8FC60020   LW A2, 32(S8)
9D006BAC  0F402521   JAL setTextDisplay
9D006BB0  00000000   NOP
43:                      setTextDisplay(1, "at %s:%d", file, line);
9D006BB4  24040001   ADDIU A0, ZERO, 1
9D006BB8  3C029D01   LUI V0, -25343
9D006BBC  2445B5B8   ADDIU A1, V0, -19016
9D006BC0  8FC6001C   LW A2, 28(S8)
9D006BC4  8FC70018   LW A3, 24(S8)
9D006BC8  0F402521   JAL setTextDisplay
9D006BCC  00000000   NOP
44:                      setTextDisplay(2, "%s", text);
9D006BD0  24040002   ADDIU A0, ZERO, 2
9D006BD4  3C029D01   LUI V0, -25343
9D006BD8  2445B5C4   ADDIU A1, V0, -19004
9D006BDC  8FC60024   LW A2, 36(S8)
9D006BE0  0F402521   JAL setTextDisplay
9D006BE4  00000000   NOP
45:                      if(strlen(text) > 16)
9D006BE8  8FC40024   LW A0, 36(S8)
9D006BEC  0F402A0C   JAL 0x9D00A830
9D006BF0  00000000   NOP
9D006BF4  2C420011   SLTIU V0, V0, 17
9D006BF8  1440000B   BNE V0, ZERO, 0x9D006C28
9D006BFC  00000000   NOP
46:                          setTextDisplay(3, "%s", text + 16);
9D006C00  8FC20024   LW V0, 36(S8)
9D006C04  24420010   ADDIU V0, V0, 16
9D006C08  24040003   ADDIU A0, ZERO, 3
9D006C0C  3C039D01   LUI V1, -25343
9D006C10  2465B5C4   ADDIU A1, V1, -19004
9D006C14  00403021   ADDU A2, V0, ZERO
9D006C18  0F402521   JAL setTextDisplay
9D006C1C  00000000   NOP
9D006C20  0B401B0F   J 0x9D006C3C
9D006C24  00000000   NOP
47:                      else
48:                          setTextDisplay(3, "");
9D006C28  24040003   ADDIU A0, ZERO, 3
9D006C2C  3C029D01   LUI V0, -25343
9D006C30  2445B5C8   ADDIU A1, V0, -19000
9D006C34  0F402521   JAL setTextDisplay
9D006C38  00000000   NOP
49:                      while(1)
50:                      {
51:                          // Go into an infinte loop until the micro is reset.
52:                      }
9D006C3C  0B401B0F   J 0x9D006C3C
9D006C40  00000000   NOP
53:                      abort();
54:                  }
55:                  
56:                  // Making two different writes to the same port in quick succession can cause
57:                  // problems, so call this macro to make sure both writes get through.
58:                  // eg: PORTAbits.RA0 = 1; SHORTWAIT(); PORTAbits.RA1 = 1;
59:                  #define SHORTWAIT() asm volatile ("nop\n nop\n nop\n nop\n nop\n nop")
60:                  
61:                  void msleep(int msecs);
62:                  void usleep(int usecs);
63:                  void SPIRiskTerritory(int terr);
64:                  void SPIblank();
65:                  void SPIbyte(unsigned char byte);
66:                  
67:                  unsigned char counter = 0;
68:                  int main(void)
69:                  {
9D006C44  27BDFFE0   ADDIU SP, SP, -32
9D006C48  AFBF001C   SW RA, 28(SP)
9D006C4C  AFBE0018   SW S8, 24(SP)
9D006C50  03A0F021   ADDU S8, SP, ZERO
70:                      // make sure that no stary interrupts happen until they are set up
71:                      // properly by initInterrupts()
72:                      __builtin_disable_interrupts();
9D006C54  41626000   DI V0
73:                      
74:                      initClocks();
9D006C58  0F401E9E   JAL initClocks
9D006C5C  000000C0   EHB
75:                      initPorts();
9D006C60  0F401F17   JAL initPorts
9D006C64  00000000   NOP
76:                      initTimers();
9D006C68  0F401F42   JAL initTimers
9D006C6C  00000000   NOP
77:                      initSPI();
9D006C70  0F401FAC   JAL initSPI
9D006C74  00000000   NOP
78:                      initRNG();
9D006C78  0F402007   JAL initRNG
9D006C7C  00000000   NOP
79:                  
80:                      startLCD();
9D006C80  0F4024C6   JAL startLCD
9D006C84  00000000   NOP
81:                  
82:                      initInterrupts();
9D006C88  0F401ECD   JAL initInterrupts
9D006C8C  00000000   NOP
83:                  
84:                      changeState(INIT);
9D006C90  0F4009A8   JAL changeState
9D006C94  00002021   ADDU A0, ZERO, ZERO
85:                      updateText();
9D006C98  0F40012E   JAL updateText
9D006C9C  00000000   NOP
86:                  
87:                      PORTFbits.RF2 = 0;
9D006CA0  3C03BF86   LUI V1, -16506
9D006CA4  8C620520   LW V0, 1312(V1)
9D006CA8  7C021084   INS V0, ZERO, 2, 1
9D006CAC  AC620520   SW V0, 1312(V1)
88:                  
89:                      while(1)
90:                      {
91:                          //SPIRiskTerritory(0);
92:                          //SPIRiskTerritory(1);
93:                          //usleep(1000);
94:                          //SPIblank();
95:                          //SPIblank();
96:                  
97:                          static const int digits[10] = {
98:                              //gfedcba
99:                              0b01111110, // 0
100:                             0b00001100, // 1
101:                             0b10110110, // 2
102:                             0b10011110, // 3
103:                             0b11001100, // 4
104:                             0b11011010, // 5
105:                             0b11111000, // 6
106:                             0b00001110, // 7
107:                             0b11111110, // 8
108:                             0b11001110, // 9
109:                 
110:                         };
111:                         static int x = 0;
112:                 
113:                         int ones = digits[x % 10];
9D006CB0  8F838094   LW V1, -32620(GP)
9D006CB4  2402000A   ADDIU V0, ZERO, 10
9D006CB8  0062001A   DIV V1, V0
9D006CBC  004001F4   TEQ V0, ZERO
9D006CC0  00001010   MFHI V0, 0
9D006CC4  00401821   ADDU V1, V0, ZERO
9D006CC8  3C029D01   LUI V0, -25343
9D006CCC  00031880   SLL V1, V1, 2
9D006CD0  2442B5CC   ADDIU V0, V0, -18996
9D006CD4  00621021   ADDU V0, V1, V0
9D006CD8  8C420000   LW V0, 0(V0)
9D006CDC  AFC20010   SW V0, 16(S8)
114:                         int tens = digits[(x / 10) % 10];
9D006CE0  8F838094   LW V1, -32620(GP)
9D006CE4  2402000A   ADDIU V0, ZERO, 10
9D006CE8  0062001A   DIV V1, V0
9D006CEC  004001F4   TEQ V0, ZERO
9D006CF0  00001810   MFHI V1, 0
9D006CF4  00001012   MFLO V0, 0
9D006CF8  00401821   ADDU V1, V0, ZERO
9D006CFC  2402000A   ADDIU V0, ZERO, 10
9D006D00  0062001A   DIV V1, V0
9D006D04  004001F4   TEQ V0, ZERO
9D006D08  00001010   MFHI V0, 0
9D006D0C  00401821   ADDU V1, V0, ZERO
9D006D10  3C029D01   LUI V0, -25343
9D006D14  00031880   SLL V1, V1, 2
9D006D18  2442B5CC   ADDIU V0, V0, -18996
9D006D1C  00621021   ADDU V0, V1, V0
9D006D20  8C420000   LW V0, 0(V0)
9D006D24  AFC20014   SW V0, 20(S8)
115:                 
116:                         SPIbyte(ones);
9D006D28  8FC20010   LW V0, 16(S8)
9D006D2C  304200FF   ANDI V0, V0, 255
9D006D30  0F401C7D   JAL SPIbyte
9D006D34  00402021   ADDU A0, V0, ZERO
117:                         SPIbyte(tens);
9D006D38  8FC20014   LW V0, 20(S8)
9D006D3C  304200FF   ANDI V0, V0, 255
9D006D40  0F401C7D   JAL SPIbyte
9D006D44  00402021   ADDU A0, V0, ZERO
118:                         SPIbyte((x % 8) << 2);
9D006D48  8F838094   LW V1, -32620(GP)
9D006D4C  000317C3   SRA V0, V1, 31
9D006D50  00021742   SRL V0, V0, 29
9D006D54  00621821   ADDU V1, V1, V0
9D006D58  30630007   ANDI V1, V1, 7
9D006D5C  00621023   SUBU V0, V1, V0
9D006D60  304200FF   ANDI V0, V0, 255
9D006D64  00021080   SLL V0, V0, 2
9D006D68  304200FF   ANDI V0, V0, 255
9D006D6C  0F401C7D   JAL SPIbyte
9D006D70  00402021   ADDU A0, V0, ZERO
119:                         usleep(1);
9D006D74  0F401B97   JAL 0x9D006E5C
9D006D78  24040001   ADDIU A0, ZERO, 1
120:                         PORTFbits.RF2 = 1;
9D006D7C  3C03BF86   LUI V1, -16506
9D006D80  8C620520   LW V0, 1312(V1)
9D006D84  24040001   ADDIU A0, ZERO, 1
9D006D88  7C821084   INS V0, A0, 2, 1
9D006D8C  AC620520   SW V0, 1312(V1)
121:                         SHORTWAIT();
9D006D90  00000000   NOP
9D006D94  00000000   NOP
9D006D98  00000000   NOP
9D006D9C  00000000   NOP
9D006DA0  00000000   NOP
9D006DA4  00000000   NOP
122:                         PORTFbits.RF2 = 0;
9D006DA8  3C03BF86   LUI V1, -16506
9D006DAC  8C620520   LW V0, 1312(V1)
9D006DB0  7C021084   INS V0, ZERO, 2, 1
9D006DB4  AC620520   SW V0, 1312(V1)
123:                         msleep(500);
9D006DB8  0F401B75   JAL msleep
9D006DBC  240401F4   ADDIU A0, ZERO, 500
124:                 
125:                         x += 1;
9D006DC0  8F828094   LW V0, -32620(GP)
9D006DC4  24420001   ADDIU V0, V0, 1
9D006DC8  AF828094   SW V0, -32620(GP)
126:                 #if 0
127:                         if(flagSet_advance())
128:                         {
129:                             static int RNGseeded = 0;
130:                             if(!RNGseeded)
131:                             {
132:                                 seedRNG();
133:                                 RNGseeded = 1;
134:                             }
135:                             gameInput(ADVANCE);
136:                 
137:                             clearFlag_advance();
138:                         }
139:                         if(flagSet_cancel())
140:                         {
141:                             gameInput(CANCEL);
142:                             clearFlag_cancel();
143:                         }
144:                         if(flagSet_next())
145:                         {
146:                             gameInput(NEXT);
147:                             clearFlag_next();
148:                         }
149:                         updatePiData();
150:                         //setTextDisplay(0, "%d %d %d %d %d %d", piData[0], piData[1], piData[2], piData[3], piData[4], piData[5]);
151:                         //msleep(4);
152:                 #endif
153:                     }
9D006DCC  0B401B2C   J 0x9D006CB0
9D006DD0  00000000   NOP
154:                 
155:                     return EXIT_SUCCESS;
156:                 }
157:                 
158:                 void msleep(int msecs)
159:                 {
9D006DD4  27BDFFE8   ADDIU SP, SP, -24
9D006DD8  AFBF0014   SW RA, 20(SP)
9D006DDC  AFBE0010   SW S8, 16(SP)
9D006DE0  03A0F021   ADDU S8, SP, ZERO
9D006DE4  AFC40018   SW A0, 24(S8)
160:                     // The timer has a maximum value of 0xFFFF * 0.64us ~= 41 ms
161:                     while(msecs > 40)
9D006DE8  0B401B82   J 0x9D006E08
9D006DEC  00000000   NOP
9D006E08  8FC20018   LW V0, 24(S8)
9D006E0C  28420029   SLTI V0, V0, 41
9D006E10  1040FFF7   BEQ V0, ZERO, 0x9D006DF0
9D006E14  00000000   NOP
162:                     {
163:                         usleep(40000);
9D006DF0  34049C40   ORI A0, ZERO, -25536
9D006DF4  0F401B97   JAL 0x9D006E5C
9D006DF8  00000000   NOP
164:                         msecs -= 40;
9D006DFC  8FC20018   LW V0, 24(S8)
9D006E00  2442FFD8   ADDIU V0, V0, -40
9D006E04  AFC20018   SW V0, 24(S8)
165:                     }
166:                 
167:                     usleep(msecs * 1000);
9D006E18  8FC40018   LW A0, 24(S8)
9D006E1C  00801821   ADDU V1, A0, ZERO
9D006E20  00031080   SLL V0, V1, 2
9D006E24  00401821   ADDU V1, V0, ZERO
9D006E28  00031140   SLL V0, V1, 5
9D006E2C  00431023   SUBU V0, V0, V1
9D006E30  00441021   ADDU V0, V0, A0
9D006E34  000210C0   SLL V0, V0, 3
9D006E38  00402021   ADDU A0, V0, ZERO
9D006E3C  0F401B97   JAL 0x9D006E5C
9D006E40  00000000   NOP
168:                 
169:                 }
9D006E44  03C0E821   ADDU SP, S8, ZERO
9D006E48  8FBF0014   LW RA, 20(SP)
9D006E4C  8FBE0010   LW S8, 16(SP)
9D006E50  27BD0018   ADDIU SP, SP, 24
9D006E54  03E00008   JR RA
9D006E58  00000000   NOP
170:                 void usleep(int usecs)
171:                 {
9D006E5C  27BDFFF8   ADDIU SP, SP, -8
9D006E60  AFBE0004   SW S8, 4(SP)
9D006E64  03A0F021   ADDU S8, SP, ZERO
9D006E68  AFC40008   SW A0, 8(S8)
172:                     TMR1 = 0;
9D006E6C  3C02BF84   LUI V0, -16508
9D006E70  AC400010   SW ZERO, 16(V0)
173:                     T1CONbits.ON = 1;
9D006E74  3C03BF84   LUI V1, -16508
9D006E78  8C620000   LW V0, 0(V1)
9D006E7C  24040001   ADDIU A0, ZERO, 1
9D006E80  7C827BC4   INS V0, A0, 15, 1
9D006E84  AC620000   SW V0, 0(V1)
174:                     while(TMR1 < usecs * 100 / 64) // timer counts in increments of 0.64 us
9D006E88  00000000   NOP
9D006E8C  8FC20008   LW V0, 8(S8)
9D006E90  00021080   SLL V0, V0, 2
9D006E94  00021880   SLL V1, V0, 2
9D006E98  00431021   ADDU V0, V0, V1
9D006E9C  00021880   SLL V1, V0, 2
9D006EA0  00431021   ADDU V0, V0, V1
9D006EA4  2443003F   ADDIU V1, V0, 63
9D006EA8  28440000   SLTI A0, V0, 0
9D006EAC  0064100B   MOVN V0, V1, A0
9D006EB0  00021183   SRA V0, V0, 6
9D006EB4  00401821   ADDU V1, V0, ZERO
9D006EB8  3C02BF84   LUI V0, -16508
9D006EBC  8C420010   LW V0, 16(V0)
9D006EC0  0043102B   SLTU V0, V0, V1
9D006EC4  1440FFF1   BNE V0, ZERO, 0x9D006E8C
9D006EC8  00000000   NOP
175:                     {}
176:                     T1CONbits.ON = 0;
9D006ECC  3C03BF84   LUI V1, -16508
9D006ED0  8C620000   LW V0, 0(V1)
9D006ED4  7C027BC4   INS V0, ZERO, 15, 1
9D006ED8  AC620000   SW V0, 0(V1)
177:                 }
9D006EDC  03C0E821   ADDU SP, S8, ZERO
9D006EE0  8FBE0004   LW S8, 4(SP)
9D006EE4  27BD0008   ADDIU SP, SP, 8
9D006EE8  03E00008   JR RA
9D006EEC  00000000   NOP
178:                 
179:                 void SPIRiskTerritory(int terr)
180:                 {
9D006EF0  27BDFFD8   ADDIU SP, SP, -40
9D006EF4  AFBF0024   SW RA, 36(SP)
9D006EF8  AFBE0020   SW S8, 32(SP)
9D006EFC  03A0F021   ADDU S8, SP, ZERO
9D006F00  AFC40028   SW A0, 40(S8)
181:                     static int digits[10] = {
182:                         //gfedcba
183:                         0b01111110, // 0
184:                         0b00001100, // 1
185:                         0b10110110, // 2
186:                         0b10011110, // 3
187:                         0b11001100, // 4
188:                         0b11011010, // 5
189:                         0b11111000, // 6
190:                         0b00001110, // 7
191:                         0b11111110, // 8
192:                         0b11001110, // 9
193:                     };
194:                 
195:                     int color = territories[terr].owner + 1;
9D006F04  3C048000   LUI A0, -32768
9D006F08  8FC20028   LW V0, 40(S8)
9D006F0C  000210C0   SLL V0, V0, 3
9D006F10  00021880   SLL V1, V0, 2
9D006F14  00621823   SUBU V1, V1, V0
9D006F18  248241B8   ADDIU V0, A0, 16824
9D006F1C  00621021   ADDU V0, V1, V0
9D006F20  8C420010   LW V0, 16(V0)
9D006F24  24420001   ADDIU V0, V0, 1
9D006F28  AFC20010   SW V0, 16(S8)
196:                     if((source == terr && TMR8 < T8_MSECS(125)) ||
9D006F2C  8F8380EC   LW V1, -32532(GP)
9D006F30  8FC20028   LW V0, 40(S8)
9D006F34  14620008   BNE V1, V0, 0x9D006F58
9D006F38  00000000   NOP
9D006F3C  3C02BF84   LUI V0, -16508
9D006F40  8C430E10   LW V1, 3600(V0)
9D006F44  3C020002   LUI V0, 2
9D006F48  3442FAB2   ORI V0, V0, -1358
9D006F4C  0062102B   SLTU V0, V1, V0
9D006F50  1440000C   BNE V0, ZERO, 0x9D006F84
9D006F54  00000000   NOP
9D006F5C  8FC20028   LW V0, 40(S8)
9D006F60  1462000A   BNE V1, V0, 0x9D006F8C
9D006F64  00000000   NOP
197:                             (destination == terr && TMR8 > T8_MSECS(125)))
9D006F58  8F8380E0   LW V1, -32544(GP)
9D006F68  3C02BF84   LUI V0, -16508
9D006F6C  8C430E10   LW V1, 3600(V0)
9D006F70  3C020002   LUI V0, 2
9D006F74  3442FAB3   ORI V0, V0, -1357
9D006F78  0062102B   SLTU V0, V1, V0
9D006F7C  14400003   BNE V0, ZERO, 0x9D006F8C
9D006F80  00000000   NOP
198:                     {
199:                         color = 7;
9D006F84  24020007   ADDIU V0, ZERO, 7
9D006F88  AFC20010   SW V0, 16(S8)
200:                     }
201:                     
202:                     int ones = territories[terr].troops % 10;
9D006F8C  3C038000   LUI V1, -32768
9D006F90  8FC20028   LW V0, 40(S8)
9D006F94  246341B8   ADDIU V1, V1, 16824
9D006F98  000210C0   SLL V0, V0, 3
9D006F9C  00022080   SLL A0, V0, 2
9D006FA0  00821023   SUBU V0, A0, V0
9D006FA4  00621021   ADDU V0, V1, V0
9D006FA8  8C430014   LW V1, 20(V0)
9D006FAC  2402000A   ADDIU V0, ZERO, 10
9D006FB0  0062001A   DIV V1, V0
9D006FB4  004001F4   TEQ V0, ZERO
9D006FB8  00001010   MFHI V0, 0
9D006FBC  AFC20014   SW V0, 20(S8)
203:                     int tens = (territories[terr].troops % 100) / 10;
9D006FC0  3C038000   LUI V1, -32768
9D006FC4  8FC20028   LW V0, 40(S8)
9D006FC8  246341B8   ADDIU V1, V1, 16824
9D006FCC  000210C0   SLL V0, V0, 3
9D006FD0  00022080   SLL A0, V0, 2
9D006FD4  00821023   SUBU V0, A0, V0
9D006FD8  00621021   ADDU V0, V1, V0
9D006FDC  8C430014   LW V1, 20(V0)
9D006FE0  24020064   ADDIU V0, ZERO, 100
9D006FE4  0062001A   DIV V1, V0
9D006FE8  004001F4   TEQ V0, ZERO
9D006FEC  00001010   MFHI V0, 0
9D006FF0  00401821   ADDU V1, V0, ZERO
9D006FF4  2402000A   ADDIU V0, ZERO, 10
9D006FF8  0062001A   DIV V1, V0
9D006FFC  004001F4   TEQ V0, ZERO
9D007000  00001810   MFHI V1, 0
9D007004  00001012   MFLO V0, 0
9D007008  AFC20018   SW V0, 24(S8)
204:                 
205:                  
206:                     while(SPI1STATbits.SPITBE != 1) {}
9D00700C  00000000   NOP
9D007010  3C02BF82   LUI V0, -16510
9D007014  8C421010   LW V0, 4112(V0)
9D007018  30420008   ANDI V0, V0, 8
9D00701C  1040FFFC   BEQ V0, ZERO, 0x9D007010
9D007020  00000000   NOP
207:                     SPI1BUF = digits[ones];
9D007024  3C028000   LUI V0, -32768
9D007028  8FC30014   LW V1, 20(S8)
9D00702C  00031880   SLL V1, V1, 2
9D007030  244241E8   ADDIU V0, V0, 16872
9D007034  00621021   ADDU V0, V1, V0
9D007038  8C420000   LW V0, 0(V0)
9D00703C  00401821   ADDU V1, V0, ZERO
9D007040  3C02BF82   LUI V0, -16510
9D007044  AC431020   SW V1, 4128(V0)
208:                     while(SPI1STATbits.SPITBE != 1) {}
9D007048  00000000   NOP
9D00704C  3C02BF82   LUI V0, -16510
9D007050  8C421010   LW V0, 4112(V0)
9D007054  30420008   ANDI V0, V0, 8
9D007058  1040FFFC   BEQ V0, ZERO, 0x9D00704C
9D00705C  00000000   NOP
209:                     SPI1BUF = (tens? digits[tens] : 0x00);
9D007060  8FC20018   LW V0, 24(S8)
9D007064  10400009   BEQ V0, ZERO, 0x9D00708C
9D007068  00000000   NOP
9D00706C  3C028000   LUI V0, -32768
9D007070  8FC30018   LW V1, 24(S8)
9D007074  00031880   SLL V1, V1, 2
9D007078  244241E8   ADDIU V0, V0, 16872
9D00707C  00621021   ADDU V0, V1, V0
9D007080  8C420000   LW V0, 0(V0)
9D007084  0B401C24   J 0x9D007090
9D007088  00000000   NOP
9D00708C  00001021   ADDU V0, ZERO, ZERO
9D007090  3C03BF82   LUI V1, -16510
9D007094  AC621020   SW V0, 4128(V1)
210:                     while(SPI1STATbits.SPITBE != 1) {}
9D007098  00000000   NOP
9D00709C  3C02BF82   LUI V0, -16510
9D0070A0  8C421010   LW V0, 4112(V0)
9D0070A4  30420008   ANDI V0, V0, 8
9D0070A8  1040FFFC   BEQ V0, ZERO, 0x9D00709C
9D0070AC  00000000   NOP
211:                     SPI1BUF = color << 2;
9D0070B0  8FC20010   LW V0, 16(S8)
9D0070B4  00021080   SLL V0, V0, 2
9D0070B8  00401821   ADDU V1, V0, ZERO
9D0070BC  3C02BF82   LUI V0, -16510
9D0070C0  AC431020   SW V1, 4128(V0)
212:                 
213:                     while(SPI1STATbits.SPITBE != 1) {}
9D0070C4  00000000   NOP
9D0070C8  3C02BF82   LUI V0, -16510
9D0070CC  8C421010   LW V0, 4112(V0)
9D0070D0  30420008   ANDI V0, V0, 8
9D0070D4  1040FFFC   BEQ V0, ZERO, 0x9D0070C8
9D0070D8  00000000   NOP
214:                 
215:                 
216:                 
217:                     usleep(1);
9D0070DC  24040001   ADDIU A0, ZERO, 1
9D0070E0  0F401B97   JAL 0x9D006E5C
9D0070E4  00000000   NOP
218:                 
219:                     PORTFbits.RF2 = 0;
9D0070E8  3C03BF86   LUI V1, -16506
9D0070EC  8C620520   LW V0, 1312(V1)
9D0070F0  7C021084   INS V0, ZERO, 2, 1
9D0070F4  AC620520   SW V0, 1312(V1)
220:                 
221:                     usleep(1);
9D0070F8  24040001   ADDIU A0, ZERO, 1
9D0070FC  0F401B97   JAL 0x9D006E5C
9D007100  00000000   NOP
222:                 
223:                     PORTFbits.RF2 = 1;
9D007104  3C03BF86   LUI V1, -16506
9D007108  8C620520   LW V0, 1312(V1)
9D00710C  24040001   ADDIU A0, ZERO, 1
9D007110  7C821084   INS V0, A0, 2, 1
9D007114  AC620520   SW V0, 1312(V1)
224:                 
225:                 }
9D007118  03C0E821   ADDU SP, S8, ZERO
9D00711C  8FBF0024   LW RA, 36(SP)
9D007120  8FBE0020   LW S8, 32(SP)
9D007124  27BD0028   ADDIU SP, SP, 40
9D007128  03E00008   JR RA
9D00712C  00000000   NOP
226:                 
227:                 void SPIblank()
228:                 {
9D007130  27BDFFE8   ADDIU SP, SP, -24
9D007134  AFBF0014   SW RA, 20(SP)
9D007138  AFBE0010   SW S8, 16(SP)
9D00713C  03A0F021   ADDU S8, SP, ZERO
229:                     SPI1BUF = 0;
9D007140  3C02BF82   LUI V0, -16510
9D007144  AC401020   SW ZERO, 4128(V0)
230:                     while(SPI1STATbits.SPITBE != 1) {}
9D007148  00000000   NOP
9D00714C  3C02BF82   LUI V0, -16510
9D007150  8C421010   LW V0, 4112(V0)
9D007154  30420008   ANDI V0, V0, 8
9D007158  1040FFFC   BEQ V0, ZERO, 0x9D00714C
9D00715C  00000000   NOP
231:                     SPI1BUF = 0;
9D007160  3C02BF82   LUI V0, -16510
9D007164  AC401020   SW ZERO, 4128(V0)
232:                     while(SPI1STATbits.SPITBE != 1) {}
9D007168  00000000   NOP
9D00716C  3C02BF82   LUI V0, -16510
9D007170  8C421010   LW V0, 4112(V0)
9D007174  30420008   ANDI V0, V0, 8
9D007178  1040FFFC   BEQ V0, ZERO, 0x9D00716C
9D00717C  00000000   NOP
233:                     SPI1BUF = 0;
9D007180  3C02BF82   LUI V0, -16510
9D007184  AC401020   SW ZERO, 4128(V0)
234:                     while(SPI1STATbits.SPITBE != 1) {}
9D007188  00000000   NOP
9D00718C  3C02BF82   LUI V0, -16510
9D007190  8C421010   LW V0, 4112(V0)
9D007194  30420008   ANDI V0, V0, 8
9D007198  1040FFFC   BEQ V0, ZERO, 0x9D00718C
9D00719C  00000000   NOP
235:                 
236:                     usleep(1);
9D0071A0  24040001   ADDIU A0, ZERO, 1
9D0071A4  0F401B97   JAL 0x9D006E5C
9D0071A8  00000000   NOP
237:                     PORTFbits.RF2 = 0;
9D0071AC  3C03BF86   LUI V1, -16506
9D0071B0  8C620520   LW V0, 1312(V1)
9D0071B4  7C021084   INS V0, ZERO, 2, 1
9D0071B8  AC620520   SW V0, 1312(V1)
238:                     usleep(1);
9D0071BC  24040001   ADDIU A0, ZERO, 1
9D0071C0  0F401B97   JAL 0x9D006E5C
9D0071C4  00000000   NOP
239:                     PORTFbits.RF2 = 1;
9D0071C8  3C03BF86   LUI V1, -16506
9D0071CC  8C620520   LW V0, 1312(V1)
9D0071D0  24040001   ADDIU A0, ZERO, 1
9D0071D4  7C821084   INS V0, A0, 2, 1
9D0071D8  AC620520   SW V0, 1312(V1)
240:                 }
9D0071DC  03C0E821   ADDU SP, S8, ZERO
9D0071E0  8FBF0014   LW RA, 20(SP)
9D0071E4  8FBE0010   LW S8, 16(SP)
9D0071E8  27BD0018   ADDIU SP, SP, 24
9D0071EC  03E00008   JR RA
9D0071F0  00000000   NOP
241:                 
242:                 void SPIbyte(unsigned char byte)
243:                 {
9D0071F4  27BDFFF8   ADDIU SP, SP, -8
9D0071F8  AFBE0004   SW S8, 4(SP)
9D0071FC  03A0F021   ADDU S8, SP, ZERO
9D007200  00801021   ADDU V0, A0, ZERO
9D007204  A3C20008   SB V0, 8(S8)
244:                     while(SPI1STATbits.SPITBE != 1) {}
9D007208  00000000   NOP
9D00720C  3C02BF82   LUI V0, -16510
9D007210  8C421010   LW V0, 4112(V0)
9D007214  30420008   ANDI V0, V0, 8
9D007218  1040FFFC   BEQ V0, ZERO, 0x9D00720C
9D00721C  00000000   NOP
245:                     SPI1BUF = byte;
9D007220  93C30008   LBU V1, 8(S8)
9D007224  3C02BF82   LUI V0, -16510
9D007228  AC431020   SW V1, 4128(V0)
246:                     while(SPI1STATbits.SPITBE != 1) {}
9D00722C  00000000   NOP
9D007230  3C02BF82   LUI V0, -16510
9D007234  8C421010   LW V0, 4112(V0)
9D007238  30420008   ANDI V0, V0, 8
9D00723C  1040FFFC   BEQ V0, ZERO, 0x9D007230
9D007240  00000000   NOP
247:                 
248:                 }
9D007244  03C0E821   ADDU SP, S8, ZERO
9D007248  8FBE0004   LW S8, 4(SP)
9D00724C  27BD0008   ADDIU SP, SP, 8
9D007250  03E00008   JR RA
9D007254  00000000   NOP
249:                 
250:                 void __ISR(_TIMER_3_VECTOR, IPL3SRS) timer3isr()
251:                 {
9D007258  415DE800   RDPGPR SP, SP
9D00725C  401A7000   MFC0 K0, EPC
9D007260  401B6000   MFC0 K1, Status
9D007264  27BDFFE8   ADDIU SP, SP, -24
9D007268  AFBA0014   SW K0, 20(SP)
9D00726C  401A6002   MFC0 K0, SRSCtl
9D007270  AFBB0010   SW K1, 16(SP)
9D007274  AFBA000C   SW K0, 12(SP)
9D007278  7C1B7844   INS K1, ZERO, 1, 15
9D00727C  377B0C00   ORI K1, K1, 3072
9D007280  409B6000   MTC0 K1, Status
9D007284  AFBE0004   SW S8, 4(SP)
9D007288  03A0F021   ADDU S8, SP, ZERO
252:                     IFS0bits.T3IF = 0; // clear interrupt flag
9D00728C  3C03BF81   LUI V1, -16511
9D007290  8C620040   LW V0, 64(V1)
9D007294  7C027384   INS V0, ZERO, 14, 1
9D007298  AC620040   SW V0, 64(V1)
253:                 }
9D00729C  03C0E821   ADDU SP, S8, ZERO
9D0072A0  8FBE0004   LW S8, 4(SP)
9D0072A4  41606000   DI ZERO
9D0072A8  000000C0   EHB
9D0072AC  8FBB000C   LW K1, 12(SP)
9D0072B0  8FBA0014   LW K0, 20(SP)
9D0072B4  409B6002   MTC0 K1, SRSCtl
9D0072B8  8FBB0010   LW K1, 16(SP)
9D0072BC  409A7000   MTC0 K0, EPC
9D0072C0  27BD0018   ADDIU SP, SP, 24
9D0072C4  41DDE800   WRPGPR SP, SP
9D0072C8  409B6000   MTC0 K1, Status
9D0072CC  42000018   ERET
254:                 
255:                 
256:                 //unsigned int counter = 0;
257:                 
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/lcd.c  ------------------------------------------------
1:                   #include <p32xxxx.h>
2:                   #include "lcd.h"
3:                   
4:                   #define SHORTWAIT() asm volatile ("nop\n nop\n nop\n nop\n nop\n nop")
5:                   void msleep(int msecs);
6:                   void usleep(int msecs);
7:                   
8:                   #include <stdio.h>
9:                   #include <stdarg.h>
10:                  
11:                  // LCD needs 37us between commands, according to its datasheet.
12:                  
13:                  
14:                  #define LCDCMD_ON      0x0C
15:                  #define LCDCMD_TWOLINE 0x38
16:                  #define LCDCMD_CLR     0x01
17:                  #define LCDCMD_LINE1   0x80
18:                  #define LCDCMD_LINE2   0xC0
19:                  
20:                  #define LCD_POWER_UP_WAIT_MSEC 500
21:                  #define LCD_LONG_WAIT_MSEC 20
22:                  #define LCD_SHORT_WAIT_USEC 40
23:                  
24:                  
25:                  void startLCD()
26:                  {
9D009318  27BDFFE8   ADDIU SP, SP, -24
9D00931C  AFBF0014   SW RA, 20(SP)
9D009320  AFBE0010   SW S8, 16(SP)
9D009324  03A0F021   ADDU S8, SP, ZERO
27:                      msleep(LCD_POWER_UP_WAIT_MSEC); // make sure LCD has a chance to power up
9D009328  0F401B75   JAL msleep
9D00932C  240401F4   ADDIU A0, ZERO, 500
28:                  
29:                      LCD_RW = 0;  // writing
9D009330  3C03BF86   LUI V1, -16506
9D009334  8C620220   LW V0, 544(V1)
9D009338  7C022104   INS V0, ZERO, 4, 1
9D00933C  AC620220   SW V0, 544(V1)
30:                      SHORTWAIT();
9D009340  00000000   NOP
9D009344  00000000   NOP
9D009348  00000000   NOP
9D00934C  00000000   NOP
9D009350  00000000   NOP
9D009354  00000000   NOP
31:                      LCD_CLK = 1; // hold clock high
9D009358  3C03BF86   LUI V1, -16506
9D00935C  8C620220   LW V0, 544(V1)
9D009360  24040001   ADDIU A0, ZERO, 1
9D009364  7C8218C4   INS V0, A0, 3, 1
9D009368  AC620220   SW V0, 544(V1)
32:                      
33:                      msleep(LCD_LONG_WAIT_MSEC);
9D00936C  0F401B75   JAL msleep
9D009370  24040014   ADDIU A0, ZERO, 20
34:                      sendLCDcmd(LCDCMD_ON);
9D009374  0F4024F7   JAL sendLCDcmd
9D009378  2404000C   ADDIU A0, ZERO, 12
35:                      sendLCDcmd(LCDCMD_TWOLINE);
9D00937C  0F4024F7   JAL sendLCDcmd
9D009380  24040038   ADDIU A0, ZERO, 56
36:                      sendLCDcmd(LCDCMD_CLR);
9D009384  0F4024F7   JAL sendLCDcmd
9D009388  24040001   ADDIU A0, ZERO, 1
37:                      usleep(LCD_SHORT_WAIT_USEC);
9D00938C  0F401B97   JAL 0x9D006E5C
9D009390  24040028   ADDIU A0, ZERO, 40
38:                  }
9D009394  03C0E821   ADDU SP, S8, ZERO
9D009398  8FBF0014   LW RA, 20(SP)
9D00939C  8FBE0010   LW S8, 16(SP)
9D0093A0  03E00008   JR RA
9D0093A4  27BD0018   ADDIU SP, SP, 24
39:                  
40:                  void clearLCD()
41:                  {
9D0093A8  27BDFFE8   ADDIU SP, SP, -24
9D0093AC  AFBF0014   SW RA, 20(SP)
9D0093B0  AFBE0010   SW S8, 16(SP)
9D0093B4  03A0F021   ADDU S8, SP, ZERO
42:                      sendLCDcmd(0x01);
9D0093B8  24040001   ADDIU A0, ZERO, 1
9D0093BC  0F4024F7   JAL sendLCDcmd
9D0093C0  00000000   NOP
43:                  }
9D0093C4  03C0E821   ADDU SP, S8, ZERO
9D0093C8  8FBF0014   LW RA, 20(SP)
9D0093CC  8FBE0010   LW S8, 16(SP)
9D0093D0  27BD0018   ADDIU SP, SP, 24
9D0093D4  03E00008   JR RA
9D0093D8  00000000   NOP
44:                  void sendLCDcmd(unsigned char cmd)
45:                  {
9D0093DC  27BDFFE8   ADDIU SP, SP, -24
9D0093E0  AFBF0014   SW RA, 20(SP)
9D0093E4  AFBE0010   SW S8, 16(SP)
9D0093E8  03A0F021   ADDU S8, SP, ZERO
9D0093EC  00801021   ADDU V0, A0, ZERO
9D0093F0  A3C20018   SB V0, 24(S8)
46:                      LCD_RS = 0;
9D0093F4  3C03BF86   LUI V1, -16506
9D0093F8  8C620120   LW V0, 288(V1)
9D0093FC  7C027BC4   INS V0, ZERO, 15, 1
9D009400  AC620120   SW V0, 288(V1)
47:                      usleep(LCD_SHORT_WAIT_USEC);
9D009404  24040028   ADDIU A0, ZERO, 40
9D009408  0F401B97   JAL 0x9D006E5C
9D00940C  00000000   NOP
48:                      LCD_DATA = cmd;
9D009410  93C30018   LBU V1, 24(S8)
9D009414  3C02BF86   LUI V0, -16506
9D009418  AC430420   SW V1, 1056(V0)
49:                      LCD_CLK = 0;
9D00941C  3C03BF86   LUI V1, -16506
9D009420  8C620220   LW V0, 544(V1)
9D009424  7C0218C4   INS V0, ZERO, 3, 1
9D009428  AC620220   SW V0, 544(V1)
50:                      usleep(LCD_SHORT_WAIT_USEC);
9D00942C  24040028   ADDIU A0, ZERO, 40
9D009430  0F401B97   JAL 0x9D006E5C
9D009434  00000000   NOP
51:                      LCD_RS = 1;
9D009438  3C03BF86   LUI V1, -16506
9D00943C  8C620120   LW V0, 288(V1)
9D009440  24040001   ADDIU A0, ZERO, 1
9D009444  7C827BC4   INS V0, A0, 15, 1
9D009448  AC620120   SW V0, 288(V1)
52:                      LCD_CLK = 1;
9D00944C  3C03BF86   LUI V1, -16506
9D009450  8C620220   LW V0, 544(V1)
9D009454  24040001   ADDIU A0, ZERO, 1
9D009458  7C8218C4   INS V0, A0, 3, 1
9D00945C  AC620220   SW V0, 544(V1)
53:                      usleep(LCD_SHORT_WAIT_USEC);
9D009460  24040028   ADDIU A0, ZERO, 40
9D009464  0F401B97   JAL 0x9D006E5C
9D009468  00000000   NOP
54:                  }
9D00946C  03C0E821   ADDU SP, S8, ZERO
9D009470  8FBF0014   LW RA, 20(SP)
9D009474  8FBE0010   LW S8, 16(SP)
9D009478  27BD0018   ADDIU SP, SP, 24
9D00947C  03E00008   JR RA
9D009480  00000000   NOP
55:                  
56:                  void setTextDisplay(int line, const char * format, ...)
57:                  {
9D009484  27BDFFC8   ADDIU SP, SP, -56
9D009488  AFBF0034   SW RA, 52(SP)
9D00948C  AFBE0030   SW S8, 48(SP)
9D009490  03A0F021   ADDU S8, SP, ZERO
9D009494  AFC40038   SW A0, 56(S8)
9D009498  AFC60040   SW A2, 64(S8)
9D00949C  AFC70044   SW A3, 68(S8)
9D0094A0  AFC5003C   SW A1, 60(S8)
58:                      if(line != 0 && line != 1)
9D0094A4  8FC20038   LW V0, 56(S8)
9D0094A8  10400005   BEQ V0, ZERO, 0x9D0094C0
9D0094AC  00000000   NOP
9D0094B0  8FC30038   LW V1, 56(S8)
9D0094B4  24020001   ADDIU V0, ZERO, 1
9D0094B8  1462004D   BNE V1, V0, 0x9D0095F0
9D0094BC  00000000   NOP
59:                          return;
9D0095F0  00000000   NOP
60:                      char text[17] = {0};
9D0094C0  AFC00014   SW ZERO, 20(S8)
9D0094C4  AFC00018   SW ZERO, 24(S8)
9D0094C8  AFC0001C   SW ZERO, 28(S8)
9D0094CC  AFC00020   SW ZERO, 32(S8)
9D0094D0  A3C00024   SB ZERO, 36(S8)
61:                      va_list args;
62:                      va_start(args, format);
9D0094D4  27C20040   ADDIU V0, S8, 64
9D0094D8  AFC20028   SW V0, 40(S8)
63:                      vsnprintf(text, 17, format, args);
9D0094DC  8FC20028   LW V0, 40(S8)
9D0094E0  27C30014   ADDIU V1, S8, 20
9D0094E4  00602021   ADDU A0, V1, ZERO
9D0094E8  24050011   ADDIU A1, ZERO, 17
9D0094EC  8FC6003C   LW A2, 60(S8)
9D0094F0  00403821   ADDU A3, V0, ZERO
9D0094F4  0F400064   JAL vsnprintf
9D0094F8  00000000   NOP
64:                      va_end(args);
65:                  
66:                      usleep(LCD_SHORT_WAIT_USEC);
9D0094FC  24040028   ADDIU A0, ZERO, 40
9D009500  0F401B97   JAL 0x9D006E5C
9D009504  00000000   NOP
67:                      if(line == 0)
9D009508  8FC20038   LW V0, 56(S8)
9D00950C  14400004   BNE V0, ZERO, 0x9D009520
9D009510  00000000   NOP
68:                          sendLCDcmd(LCDCMD_LINE1);
9D009514  24040080   ADDIU A0, ZERO, 128
9D009518  0F4024F7   JAL sendLCDcmd
9D00951C  00000000   NOP
69:                      if(line == 1)
9D009520  8FC30038   LW V1, 56(S8)
9D009524  24020001   ADDIU V0, ZERO, 1
9D009528  14620004   BNE V1, V0, 0x9D00953C
9D00952C  00000000   NOP
70:                          sendLCDcmd(LCDCMD_LINE2);
9D009530  240400C0   ADDIU A0, ZERO, 192
9D009534  0F4024F7   JAL sendLCDcmd
9D009538  00000000   NOP
71:                      usleep(LCD_SHORT_WAIT_USEC);
9D00953C  24040028   ADDIU A0, ZERO, 40
9D009540  0F401B97   JAL 0x9D006E5C
9D009544  00000000   NOP
72:                      for(int i = 0; i < 16; i++)
9D009548  AFC00010   SW ZERO, 16(S8)
9D00954C  0B402576   J 0x9D0095D8
9D009550  00000000   NOP
9D0095CC  8FC20010   LW V0, 16(S8)
9D0095D0  24420001   ADDIU V0, V0, 1
9D0095D4  AFC20010   SW V0, 16(S8)
9D0095D8  8FC20010   LW V0, 16(S8)
9D0095DC  28420010   SLTI V0, V0, 16
9D0095E0  1440FFDC   BNE V0, ZERO, 0x9D009554
9D0095E4  00000000   NOP
9D0095E8  0B40257D   J 0x9D0095F4
9D0095EC  00000000   NOP
73:                      {
74:                          LCD_DATA = text[i]? text[i] : ' ';
9D009554  8FC20010   LW V0, 16(S8)
9D009558  27C30010   ADDIU V1, S8, 16
9D00955C  00621021   ADDU V0, V1, V0
9D009560  80420004   LB V0, 4(V0)
9D009564  10400007   BEQ V0, ZERO, 0x9D009584
9D009568  00000000   NOP
9D00956C  8FC20010   LW V0, 16(S8)
9D009570  27C30010   ADDIU V1, S8, 16
9D009574  00621021   ADDU V0, V1, V0
9D009578  80420004   LB V0, 4(V0)
9D00957C  0B402562   J 0x9D009588
9D009580  00000000   NOP
9D009584  24020020   ADDIU V0, ZERO, 32
9D009588  3C03BF86   LUI V1, -16506
9D00958C  AC620420   SW V0, 1056(V1)
75:                          LCD_CLK = 0;
9D009590  3C03BF86   LUI V1, -16506
9D009594  8C620220   LW V0, 544(V1)
9D009598  7C0218C4   INS V0, ZERO, 3, 1
9D00959C  AC620220   SW V0, 544(V1)
76:                          usleep(LCD_SHORT_WAIT_USEC);
9D0095A0  24040028   ADDIU A0, ZERO, 40
9D0095A4  0F401B97   JAL 0x9D006E5C
9D0095A8  00000000   NOP
77:                          LCD_CLK = 1;
9D0095AC  3C03BF86   LUI V1, -16506
9D0095B0  8C620220   LW V0, 544(V1)
9D0095B4  24040001   ADDIU A0, ZERO, 1
9D0095B8  7C8218C4   INS V0, A0, 3, 1
9D0095BC  AC620220   SW V0, 544(V1)
78:                          usleep(LCD_SHORT_WAIT_USEC);
9D0095C0  24040028   ADDIU A0, ZERO, 40
9D0095C4  0F401B97   JAL 0x9D006E5C
9D0095C8  00000000   NOP
79:                      }
80:                  }
9D0095F4  03C0E821   ADDU SP, S8, ZERO
9D0095F8  8FBF0034   LW RA, 52(SP)
9D0095FC  8FBE0030   LW S8, 48(SP)
9D009600  27BD0038   ADDIU SP, SP, 56
9D009604  03E00008   JR RA
9D009608  00000000   NOP
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/init.c  -----------------------------------------------
1:                   #include <p32xxxx.h>
2:                   #include "init.h"
3:                   
4:                   static inline void systemUnlock()
5:                   {
9D0079FC  27BDFFF8   ADDIU SP, SP, -8
9D007A00  AFBE0004   SW S8, 4(SP)
9D007A04  03A0F021   ADDU S8, SP, ZERO
6:                       __builtin_disable_interrupts();
9D007A08  41626000   DI V0
9D007A0C  000000C0   EHB
7:                       // The datasheet emphasizes that these writes MUST be consecutive
8:                       // instructions, which is why we disable interrupts
9:                       SYSKEY = 0x0;
9D007A10  3C02BF80   LUI V0, -16512
9D007A14  AC400030   SW ZERO, 48(V0)
10:                      SYSKEY = 0xAA996655;
9D007A18  3C02BF80   LUI V0, -16512
9D007A1C  3C03AA99   LUI V1, -21863
9D007A20  34636655   ORI V1, V1, 26197
9D007A24  AC430030   SW V1, 48(V0)
11:                      SYSKEY = 0x556699AA;
9D007A28  3C02BF80   LUI V0, -16512
9D007A2C  3C035566   LUI V1, 21862
9D007A30  346399AA   ORI V1, V1, -26198
9D007A34  AC430030   SW V1, 48(V0)
12:                  }
9D007A38  03C0E821   ADDU SP, S8, ZERO
9D007A3C  8FBE0004   LW S8, 4(SP)
9D007A40  27BD0008   ADDIU SP, SP, 8
9D007A44  03E00008   JR RA
9D007A48  00000000   NOP
13:                  
14:                  static inline void systemLock()
15:                  {
9D007A4C  27BDFFF8   ADDIU SP, SP, -8
9D007A50  AFBE0004   SW S8, 4(SP)
9D007A54  03A0F021   ADDU S8, SP, ZERO
16:                      SYSKEY = 0x0;
9D007A58  3C02BF80   LUI V0, -16512
9D007A5C  AC400030   SW ZERO, 48(V0)
17:                     __builtin_enable_interrupts();
9D007A60  41626020   EI V0
18:                  }
9D007A64  03C0E821   ADDU SP, S8, ZERO
9D007A68  8FBE0004   LW S8, 4(SP)
9D007A6C  27BD0008   ADDIU SP, SP, 8
9D007A70  03E00008   JR RA
9D007A74  00000000   NOP
19:                  
20:                  // PB clocks are maximum 100 MHz, except PB7 at 200 MHz
21:                  void initClocks()
22:                  {
9D007A78  27BDFFE8   ADDIU SP, SP, -24
9D007A7C  AFBF0014   SW RA, 20(SP)
9D007A80  AFBE0010   SW S8, 16(SP)
9D007A84  03A0F021   ADDU S8, SP, ZERO
23:                      systemUnlock();
9D007A88  0F401E7F   JAL 0x9D0079FC
9D007A8C  00000000   NOP
24:                  
25:                      OSCCONbits.FRCDIV = 0;
9D007A90  3C03BF80   LUI V1, -16512
9D007A94  8C621200   LW V0, 4608(V1)
9D007A98  7C02D604   INS V0, ZERO, 24, 3
9D007A9C  AC621200   SW V0, 4608(V1)
26:                      PB1DIV = 0x8001; // system usage
9D007AA0  3C02BF80   LUI V0, -16512
9D007AA4  34038001   ORI V1, ZERO, -32767
9D007AA8  AC431300   SW V1, 4864(V0)
27:                      PB2DIV = 0x8001; // SPI
9D007AAC  3C02BF80   LUI V0, -16512
9D007AB0  34038001   ORI V1, ZERO, -32767
9D007AB4  AC431310   SW V1, 4880(V0)
28:                      PB3DIV = 0x8001; // timers
9D007AB8  3C02BF80   LUI V0, -16512
9D007ABC  34038001   ORI V1, ZERO, -32767
9D007AC0  AC431320   SW V1, 4896(V0)
29:                      PB4DIV = 0x8001; // I/O port access
9D007AC4  3C02BF80   LUI V0, -16512
9D007AC8  34038001   ORI V1, ZERO, -32767
9D007ACC  AC431330   SW V1, 4912(V0)
30:                      PB5DIV = 0x8001; // RNG
9D007AD0  3C02BF80   LUI V0, -16512
9D007AD4  34038001   ORI V1, ZERO, -32767
9D007AD8  AC431340   SW V1, 4928(V0)
31:                      PB7DIV = 0x8000; // CPU clock
9D007ADC  3C02BF80   LUI V0, -16512
9D007AE0  34038000   ORI V1, ZERO, -32768
9D007AE4  AC431360   SW V1, 4960(V0)
32:                      PB8DIV = 0x8001; // not used in this project
9D007AE8  3C02BF80   LUI V0, -16512
9D007AEC  34038001   ORI V1, ZERO, -32767
9D007AF0  AC431370   SW V1, 4976(V0)
33:                  
34:                      REFO1CON = 0;
9D007AF4  3C02BF80   LUI V0, -16512
9D007AF8  AC401280   SW ZERO, 4736(V0)
35:                      REFO2CON = 0;
9D007AFC  3C02BF80   LUI V0, -16512
9D007B00  AC4012A0   SW ZERO, 4768(V0)
36:                      REFO3CON = 0;
9D007B04  3C02BF80   LUI V0, -16512
9D007B08  AC4012C0   SW ZERO, 4800(V0)
37:                      REFO4CON = 0;
9D007B0C  3C02BF80   LUI V0, -16512
9D007B10  AC4012E0   SW ZERO, 4832(V0)
38:                  
39:                      systemLock();
9D007B14  0F401E93   JAL 0x9D007A4C
9D007B18  00000000   NOP
40:                  }
9D007B1C  03C0E821   ADDU SP, S8, ZERO
9D007B20  8FBF0014   LW RA, 20(SP)
9D007B24  8FBE0010   LW S8, 16(SP)
9D007B28  27BD0018   ADDIU SP, SP, 24
9D007B2C  03E00008   JR RA
9D007B30  00000000   NOP
41:                  
42:                  void initInterrupts()
43:                  {
9D007B34  27BDFFF8   ADDIU SP, SP, -8
9D007B38  AFBE0004   SW S8, 4(SP)
9D007B3C  03A0F021   ADDU S8, SP, ZERO
44:                      __builtin_disable_interrupts();
9D007B40  41626000   DI V0
9D007B44  000000C0   EHB
45:                  
46:                      // Shadow register sets for each interrupt level
47:                      // why this is configurable is beyond me
48:                      PRISS = 0x76543210;
9D007B48  3C02BF81   LUI V0, -16511
9D007B4C  3C037654   LUI V1, 30292
9D007B50  34633210   ORI V1, V1, 12816
9D007B54  AC430010   SW V1, 16(V0)
49:                  
50:                      // Timer 2 interrupts
51:                      // Interrupt every 2 ms, priority 2.0
52:                      // ISR in buttons.c
53:                      IFS0bits.T2IF = 0;
9D007B58  3C03BF81   LUI V1, -16511
9D007B5C  8C620040   LW V0, 64(V1)
9D007B60  7C024A44   INS V0, ZERO, 9, 1
9D007B64  AC620040   SW V0, 64(V1)
54:                      IEC0bits.T2IE = 1;
9D007B68  3C03BF81   LUI V1, -16511
9D007B6C  8C6200C0   LW V0, 192(V1)
9D007B70  24040001   ADDIU A0, ZERO, 1
9D007B74  7C824A44   INS V0, A0, 9, 1
9D007B78  AC6200C0   SW V0, 192(V1)
55:                      IPC2bits.T2IP = 2;
9D007B7C  3C03BF81   LUI V1, -16511
9D007B80  8C620160   LW V0, 352(V1)
9D007B84  24040002   ADDIU A0, ZERO, 2
9D007B88  7C826284   INS V0, A0, 10, 3
9D007B8C  AC620160   SW V0, 352(V1)
56:                      IPC2bits.T2IS = 0;
9D007B90  3C03BF81   LUI V1, -16511
9D007B94  8C620160   LW V0, 352(V1)
9D007B98  7C024A04   INS V0, ZERO, 8, 2
9D007B9C  AC620160   SW V0, 352(V1)
57:                  
58:                      // Timer 3 interrupts
59:                      // Interrupt every 1 ms, priority 3.0
60:                      // ISR in main.c
61:                      IFS0bits.T3IF = 0;
9D007BA0  3C03BF81   LUI V1, -16511
9D007BA4  8C620040   LW V0, 64(V1)
9D007BA8  7C027384   INS V0, ZERO, 14, 1
9D007BAC  AC620040   SW V0, 64(V1)
62:                      IEC0bits.T3IE = 1;
9D007BB0  3C03BF81   LUI V1, -16511
9D007BB4  8C6200C0   LW V0, 192(V1)
9D007BB8  24040001   ADDIU A0, ZERO, 1
9D007BBC  7C827384   INS V0, A0, 14, 1
9D007BC0  AC6200C0   SW V0, 192(V1)
63:                      IPC3bits.T3IP = 3;
9D007BC4  3C03BF81   LUI V1, -16511
9D007BC8  8C620170   LW V0, 368(V1)
9D007BCC  24040003   ADDIU A0, ZERO, 3
9D007BD0  7C82A484   INS V0, A0, 18, 3
9D007BD4  AC620170   SW V0, 368(V1)
64:                      IPC3bits.T3IS = 0;
9D007BD8  3C03BF81   LUI V1, -16511
9D007BDC  8C620170   LW V0, 368(V1)
9D007BE0  7C028C04   INS V0, ZERO, 16, 2
9D007BE4  AC620170   SW V0, 368(V1)
65:                  
66:                      // SPI 3 rx interrupt
67:                      // priority 4.0
68:                      // ISR in pi.c
69:                      IFS4bits.SPI3RXIF = 0;
9D007BE8  3C03BF81   LUI V1, -16511
9D007BEC  8C620080   LW V0, 128(V1)
9D007BF0  7C02DEC4   INS V0, ZERO, 27, 1
9D007BF4  AC620080   SW V0, 128(V1)
70:                      IEC4bits.SPI3RXIE = 1;
9D007BF8  3C03BF81   LUI V1, -16511
9D007BFC  8C620100   LW V0, 256(V1)
9D007C00  24040001   ADDIU A0, ZERO, 1
9D007C04  7C82DEC4   INS V0, A0, 27, 1
9D007C08  AC620100   SW V0, 256(V1)
71:                      IPC38bits.SPI3RXIP = 4;
9D007C0C  3C03BF81   LUI V1, -16511
9D007C10  8C6203A0   LW V0, 928(V1)
9D007C14  24040004   ADDIU A0, ZERO, 4
9D007C18  7C82E684   INS V0, A0, 26, 3
9D007C1C  AC6203A0   SW V0, 928(V1)
72:                      IPC38bits.SPI3RXIS = 0;
9D007C20  3C03BF81   LUI V1, -16511
9D007C24  8C6203A0   LW V0, 928(V1)
9D007C28  7C02CE04   INS V0, ZERO, 24, 2
9D007C2C  AC6203A0   SW V0, 928(V1)
73:                  
74:                      INTCONbits.MVEC = 1;
9D007C30  3C03BF81   LUI V1, -16511
9D007C34  8C620000   LW V0, 0(V1)
9D007C38  24040001   ADDIU A0, ZERO, 1
9D007C3C  7C826304   INS V0, A0, 12, 1
9D007C40  AC620000   SW V0, 0(V1)
75:                  
76:                      __builtin_enable_interrupts();
9D007C44  41626020   EI V0
77:                  }
9D007C48  03C0E821   ADDU SP, S8, ZERO
9D007C4C  8FBE0004   LW S8, 4(SP)
9D007C50  27BD0008   ADDIU SP, SP, 8
9D007C54  03E00008   JR RA
9D007C58  00000000   NOP
78:                  
79:                  void initPorts()
80:                  {
9D007C5C  27BDFFF8   ADDIU SP, SP, -8
9D007C60  AFBE0004   SW S8, 4(SP)
9D007C64  03A0F021   ADDU S8, SP, ZERO
81:                      // On the Explorer 16 board, the LEDs are (from left to right):
82:                      // A7  A6  F12 F13 A3  A2  A1  A0
83:                      // Buttons are:
84:                      // N/C D13 A7  F8                   (yes A7 again)
85:                      // LCD uses:
86:                      // B15 C3  C4  E0..E7
87:                      //
88:                      // F1 and D1 are used for SPI1
89:                      // G is used for ??? but it got set that way in harmony
90:                      //
91:                      //        111111
92:                      //        5432109876543210
93:                      TRISA = 0b1111111111111111;
9D007C68  3C02BF86   LUI V0, -16506
9D007C6C  3403FFFF   ORI V1, ZERO, -1
9D007C70  AC430010   SW V1, 16(V0)
94:                      TRISB = 0b0111111111111111;
9D007C74  3C02BF86   LUI V0, -16506
9D007C78  24037FFF   ADDIU V1, ZERO, 32767
9D007C7C  AC430110   SW V1, 272(V0)
95:                      TRISC = 0b1111111111100111;
9D007C80  3C02BF86   LUI V0, -16506
9D007C84  3403FFE7   ORI V1, ZERO, -25
9D007C88  AC430210   SW V1, 528(V0)
96:                      TRISD = 0b1111111111111101;
9D007C8C  3C02BF86   LUI V0, -16506
9D007C90  3403FFFD   ORI V1, ZERO, -3
9D007C94  AC430310   SW V1, 784(V0)
97:                      TRISE = 0b1111111100000000;
9D007C98  3C02BF86   LUI V0, -16506
9D007C9C  3403FF00   ORI V1, ZERO, -256
9D007CA0  AC430410   SW V1, 1040(V0)
98:                      TRISF = 0b1111111111111001;
9D007CA4  3C02BF86   LUI V0, -16506
9D007CA8  3403FFF9   ORI V1, ZERO, -7
9D007CAC  AC430510   SW V1, 1296(V0)
99:                      TRISG = 0b1111001111000011;
9D007CB0  3C02BF86   LUI V0, -16506
9D007CB4  3403F3C3   ORI V1, ZERO, -3133
9D007CB8  AC430610   SW V1, 1552(V0)
100:                 
101:                     ANSELA = 0x0000;
9D007CBC  3C02BF86   LUI V0, -16506
9D007CC0  AC400000   SW ZERO, 0(V0)
102:                     ANSELB = 0x0000;
9D007CC4  3C02BF86   LUI V0, -16506
9D007CC8  AC400100   SW ZERO, 256(V0)
103:                     ANSELC = 0x0000;
9D007CCC  3C02BF86   LUI V0, -16506
9D007CD0  AC400200   SW ZERO, 512(V0)
104:                     ANSELD = 0x0000;
9D007CD4  3C02BF86   LUI V0, -16506
9D007CD8  AC400300   SW ZERO, 768(V0)
105:                     ANSELE = 0x0000;
9D007CDC  3C02BF86   LUI V0, -16506
9D007CE0  AC400400   SW ZERO, 1024(V0)
106:                     ANSELF = 0x0000;
9D007CE4  3C02BF86   LUI V0, -16506
9D007CE8  AC400500   SW ZERO, 1280(V0)
107:                     ANSELG = 0x0000;
9D007CEC  3C02BF86   LUI V0, -16506
9D007CF0  AC400600   SW ZERO, 1536(V0)
108:                 
109:                     // Clear LEDs at start of program
110:                     //PORTACLR = 0b11001111;
111:                     //PORTFCLR = 0b0011000000000000;
112:                 
113:                 }
9D007CF4  03C0E821   ADDU SP, S8, ZERO
9D007CF8  8FBE0004   LW S8, 4(SP)
9D007CFC  27BD0008   ADDIU SP, SP, 8
9D007D00  03E00008   JR RA
9D007D04  00000000   NOP
114:                 
115:                 void initTimers()
116:                 {
9D007D08  27BDFFF8   ADDIU SP, SP, -8
9D007D0C  AFBE0004   SW S8, 4(SP)
9D007D10  03A0F021   ADDU S8, SP, ZERO
117:                     // ----- TIMER 1 -----
118:                     // Used to provide short, precise waits for the usleep and msleep functions
119:                     // which are used mostly in the LCD driver.
120:                     // Will be started when a wait is called for.
121:                     T1CON = 0;
9D007D14  3C02BF84   LUI V0, -16508
9D007D18  AC400000   SW ZERO, 0(V0)
122:                     T1CONbits.TCKPS = 0b10; // 1:64 prescale = 0.64us increments
9D007D1C  3C03BF84   LUI V1, -16508
9D007D20  8C620000   LW V0, 0(V1)
9D007D24  24040002   ADDIU A0, ZERO, 2
9D007D28  7C822904   INS V0, A0, 4, 2
9D007D2C  AC620000   SW V0, 0(V1)
123:                                             // 0.64us * 0xFFFF = 41.9ms maximum
124:                     PR1 = 0xFFFF; // maximum period
9D007D30  3C02BF84   LUI V0, -16508
9D007D34  3403FFFF   ORI V1, ZERO, -1
9D007D38  AC430020   SW V1, 32(V0)
125:                     TMR1 = 0;
9D007D3C  3C02BF84   LUI V0, -16508
9D007D40  AC400010   SW ZERO, 16(V0)
126:                 
127:                     // ----- TIMER 2 -----
128:                     // Generates interrupts to poll button state.
129:                     T2CON = 0;
9D007D44  3C02BF84   LUI V0, -16508
9D007D48  AC400200   SW ZERO, 512(V0)
130:                     T2CONbits.TCKPS = 0b010; // 1:4 prescale = 0.04us increments
9D007D4C  3C03BF84   LUI V1, -16508
9D007D50  8C620200   LW V0, 512(V1)
9D007D54  24040002   ADDIU A0, ZERO, 2
9D007D58  7C823104   INS V0, A0, 4, 3
9D007D5C  AC620200   SW V0, 512(V1)
131:                     PR2 = 50000; // 0.04us * 50 000 = 2 ms
9D007D60  3C02BF84   LUI V0, -16508
9D007D64  3403C350   ORI V1, ZERO, -15536
9D007D68  AC430220   SW V1, 544(V0)
132:                     TMR2 = 0;
9D007D6C  3C02BF84   LUI V0, -16508
9D007D70  AC400210   SW ZERO, 528(V0)
133:                     T2CONbits.ON = 1;
9D007D74  3C03BF84   LUI V1, -16508
9D007D78  8C620200   LW V0, 512(V1)
9D007D7C  24040001   ADDIU A0, ZERO, 1
9D007D80  7C827BC4   INS V0, A0, 15, 1
9D007D84  AC620200   SW V0, 512(V1)
134:                 
135:                     // ----- TIMER 3 -----
136:                     // Generates interrupts to start LED SPI shifting.
137:                     T3CON = 0;
9D007D88  3C02BF84   LUI V0, -16508
9D007D8C  AC400400   SW ZERO, 1024(V0)
138:                     T3CONbits.TCKPS = 0b010; // 1:4 prescale = 0.04us increments
9D007D90  3C03BF84   LUI V1, -16508
9D007D94  8C620400   LW V0, 1024(V1)
9D007D98  24040002   ADDIU A0, ZERO, 2
9D007D9C  7C823104   INS V0, A0, 4, 3
9D007DA0  AC620400   SW V0, 1024(V1)
139:                     PR3 = 25000; // 0.04us * 25 000 = 1 ms
9D007DA4  3C02BF84   LUI V0, -16508
9D007DA8  240361A8   ADDIU V1, ZERO, 25000
9D007DAC  AC430420   SW V1, 1056(V0)
140:                     TMR3 = 0;
9D007DB0  3C02BF84   LUI V0, -16508
9D007DB4  AC400410   SW ZERO, 1040(V0)
141:                     T3CONbits.ON = 1;
9D007DB8  3C03BF84   LUI V1, -16508
9D007DBC  8C620400   LW V0, 1024(V1)
9D007DC0  24040001   ADDIU A0, ZERO, 1
9D007DC4  7C827BC4   INS V0, A0, 15, 1
9D007DC8  AC620400   SW V0, 1024(V1)
142:                 
143:                     // ----- TIMER 4 -----
144:                     // Not used
145:                     T4CON = 0;
9D007DCC  3C02BF84   LUI V0, -16508
9D007DD0  AC400600   SW ZERO, 1536(V0)
146:                 
147:                     // ----- TIMER 5 -----
148:                     // Not used
149:                     T5CON = 0;
9D007DD4  3C02BF84   LUI V0, -16508
9D007DD8  AC400800   SW ZERO, 2048(V0)
150:                 
151:                     // ----- TIMER 6/7 -----
152:                     // Used to provide a random value to seed the RNG.
153:                     T6CON = 0;
9D007DDC  3C02BF84   LUI V0, -16508
9D007DE0  AC400A00   SW ZERO, 2560(V0)
154:                     T7CON = 0;
9D007DE4  3C02BF84   LUI V0, -16508
9D007DE8  AC400C00   SW ZERO, 3072(V0)
155:                     T6CONbits.T32 = 1;       // 32-bit timer
9D007DEC  3C03BF84   LUI V1, -16508
9D007DF0  8C620A00   LW V0, 2560(V1)
9D007DF4  24040001   ADDIU A0, ZERO, 1
9D007DF8  7C8218C4   INS V0, A0, 3, 1
9D007DFC  AC620A00   SW V0, 2560(V1)
156:                     T6CONbits.TCKPS = 0b000; // no prescale
9D007E00  3C03BF84   LUI V1, -16508
9D007E04  8C620A00   LW V0, 2560(V1)
9D007E08  7C023104   INS V0, ZERO, 4, 3
9D007E0C  AC620A00   SW V0, 2560(V1)
157:                     PR6 = 0xFFFFFFFF;        // maximum period
9D007E10  3C02BF84   LUI V0, -16508
9D007E14  2403FFFF   ADDIU V1, ZERO, -1
9D007E18  AC430A20   SW V1, 2592(V0)
158:                     TMR6 = 0;
9D007E1C  3C02BF84   LUI V0, -16508
9D007E20  AC400A10   SW ZERO, 2576(V0)
159:                     T6CONbits.ON = 1;
9D007E24  3C03BF84   LUI V1, -16508
9D007E28  8C620A00   LW V0, 2560(V1)
9D007E2C  24040001   ADDIU A0, ZERO, 1
9D007E30  7C827BC4   INS V0, A0, 15, 1
9D007E34  AC620A00   SW V0, 2560(V1)
160:                 
161:                     // ----- TIMER 8/9 -----
162:                     // Used to flash LEDs of selected territories.
163:                     T8CON = 0;
9D007E38  3C02BF84   LUI V0, -16508
9D007E3C  AC400E00   SW ZERO, 3584(V0)
164:                     T9CON = 0;
9D007E40  3C02BF84   LUI V0, -16508
9D007E44  AC401000   SW ZERO, 4096(V0)
165:                     T8CONbits.T32 = 1;       // 32-bit timer
9D007E48  3C03BF84   LUI V1, -16508
9D007E4C  8C620E00   LW V0, 3584(V1)
9D007E50  24040001   ADDIU A0, ZERO, 1
9D007E54  7C8218C4   INS V0, A0, 3, 1
9D007E58  AC620E00   SW V0, 3584(V1)
166:                     T8CONbits.TCKPS = 0b110; // 1:64 prescale
9D007E5C  3C03BF84   LUI V1, -16508
9D007E60  8C620E00   LW V0, 3584(V1)
9D007E64  24040006   ADDIU A0, ZERO, 6
9D007E68  7C823104   INS V0, A0, 4, 3
9D007E6C  AC620E00   SW V0, 3584(V1)
167:                     PR8 = 390625;            // 0.64us * 390625 = 250 ms
9D007E70  3C02BF84   LUI V0, -16508
9D007E74  3C030005   LUI V1, 5
9D007E78  3463F5E1   ORI V1, V1, -2591
9D007E7C  AC430E20   SW V1, 3616(V0)
168:                     TMR8 = 0;
9D007E80  3C02BF84   LUI V0, -16508
9D007E84  AC400E10   SW ZERO, 3600(V0)
169:                     T8CONbits.ON = 1;
9D007E88  3C03BF84   LUI V1, -16508
9D007E8C  8C620E00   LW V0, 3584(V1)
9D007E90  24040001   ADDIU A0, ZERO, 1
9D007E94  7C827BC4   INS V0, A0, 15, 1
9D007E98  AC620E00   SW V0, 3584(V1)
170:                 }
9D007E9C  03C0E821   ADDU SP, S8, ZERO
9D007EA0  8FBE0004   LW S8, 4(SP)
9D007EA4  27BD0008   ADDIU SP, SP, 8
9D007EA8  03E00008   JR RA
9D007EAC  00000000   NOP
171:                 
172:                 void initSPI()
173:                 {
9D007EB0  27BDFFF8   ADDIU SP, SP, -8
9D007EB4  AFBE0004   SW S8, 4(SP)
9D007EB8  03A0F021   ADDU S8, SP, ZERO
174:                     // Let's configure an SPI!
175:                     SPI1CON = 0;
9D007EBC  3C02BF82   LUI V0, -16510
9D007EC0  AC401000   SW ZERO, 4096(V0)
176:                     SPI1CON2 = 0;
9D007EC4  3C02BF82   LUI V0, -16510
9D007EC8  AC401040   SW ZERO, 4160(V0)
177:                     SPI1BRG = 1;                // baud rate = 12.5 MHz
9D007ECC  3C02BF82   LUI V0, -16510
9D007ED0  24030001   ADDIU V1, ZERO, 1
9D007ED4  AC431030   SW V1, 4144(V0)
178:                     SPI1STATbits.SPIROV = 0;    // clear status
9D007ED8  3C03BF82   LUI V1, -16510
9D007EDC  8C621010   LW V0, 4112(V1)
9D007EE0  7C023184   INS V0, ZERO, 6, 1
9D007EE4  AC621010   SW V0, 4112(V1)
179:                     RPF1R = 0b0101;             // SPI data out on F1
9D007EE8  3C02BF80   LUI V0, -16512
9D007EEC  24030005   ADDIU V1, ZERO, 5
9D007EF0  AC431644   SW V1, 5700(V0)
180:                     SPI1CONbits.MODE32 = 0;     // 8-bit mode
9D007EF4  3C03BF82   LUI V1, -16510
9D007EF8  8C621000   LW V0, 4096(V1)
9D007EFC  7C025AC4   INS V0, ZERO, 11, 1
9D007F00  AC621000   SW V0, 4096(V1)
181:                     SPI1CONbits.MODE16 = 0;
9D007F04  3C03BF82   LUI V1, -16510
9D007F08  8C621000   LW V0, 4096(V1)
9D007F0C  7C025284   INS V0, ZERO, 10, 1
9D007F10  AC621000   SW V0, 4096(V1)
182:                     SPI1CONbits.MSTEN = 1;      // master mode
9D007F14  3C03BF82   LUI V1, -16510
9D007F18  8C621000   LW V0, 4096(V1)
9D007F1C  24040001   ADDIU A0, ZERO, 1
9D007F20  7C822944   INS V0, A0, 5, 1
9D007F24  AC621000   SW V0, 4096(V1)
183:                     SPI1CONbits.ON = 1;         // SPI on
9D007F28  3C03BF82   LUI V1, -16510
9D007F2C  8C621000   LW V0, 4096(V1)
9D007F30  24040001   ADDIU A0, ZERO, 1
9D007F34  7C827BC4   INS V0, A0, 15, 1
9D007F38  AC621000   SW V0, 4096(V1)
184:                 
185:                     // Let's configure another SPI!
186:                     SPI3CON = 0;
9D007F3C  3C02BF82   LUI V0, -16510
9D007F40  AC401400   SW ZERO, 5120(V0)
187:                     SPI3CON2 = 0;
9D007F44  3C02BF82   LUI V0, -16510
9D007F48  AC401440   SW ZERO, 5184(V0)
188:                     (void) SPI3BUF;             // clear receive buffer
9D007F4C  3C02BF82   LUI V0, -16510
9D007F50  8C421420   LW V0, 5152(V0)
189:                     SPI3STATbits.SPIROV = 0;    // clear status
9D007F54  3C03BF82   LUI V1, -16510
9D007F58  8C621410   LW V0, 5136(V1)
9D007F5C  7C023184   INS V0, ZERO, 6, 1
9D007F60  AC621410   SW V0, 5136(V1)
190:                 
191:                     SDI3R = 0b0110;             // SDI on pin B10
9D007F64  3C02BF80   LUI V0, -16512
9D007F68  24030006   ADDIU V1, ZERO, 6
9D007F6C  AC4314B4   SW V1, 5300(V0)
192:                     RPB5R = 0b0111;             // SDO on pin B5
9D007F70  3C02BF80   LUI V0, -16512
9D007F74  24030007   ADDIU V1, ZERO, 7
9D007F78  AC431554   SW V1, 5460(V0)
193:                     SPI3CONbits.MODE32 = 0;     // 8-bit mode
9D007F7C  3C03BF82   LUI V1, -16510
9D007F80  8C621400   LW V0, 5120(V1)
9D007F84  7C025AC4   INS V0, ZERO, 11, 1
9D007F88  AC621400   SW V0, 5120(V1)
194:                     SPI3CONbits.MODE16 = 0;
9D007F8C  3C03BF82   LUI V1, -16510
9D007F90  8C621400   LW V0, 5120(V1)
9D007F94  7C025284   INS V0, ZERO, 10, 1
9D007F98  AC621400   SW V0, 5120(V1)
195:                     SPI3CONbits.MSTEN = 0;      // slave mode
9D007F9C  3C03BF82   LUI V1, -16510
9D007FA0  8C621400   LW V0, 5120(V1)
9D007FA4  7C022944   INS V0, ZERO, 5, 1
9D007FA8  AC621400   SW V0, 5120(V1)
196:                     SPI3CONbits.CKE = 1;        // output transition on falling clock edge
9D007FAC  3C03BF82   LUI V1, -16510
9D007FB0  8C621400   LW V0, 5120(V1)
9D007FB4  24040001   ADDIU A0, ZERO, 1
9D007FB8  7C824204   INS V0, A0, 8, 1
9D007FBC  AC621400   SW V0, 5120(V1)
197:                     SPI3CONbits.ENHBUF = 1;     // use 128-bit buffer
9D007FC0  3C03BF82   LUI V1, -16510
9D007FC4  8C621400   LW V0, 5120(V1)
9D007FC8  24040001   ADDIU A0, ZERO, 1
9D007FCC  7C828404   INS V0, A0, 16, 1
9D007FD0  AC621400   SW V0, 5120(V1)
198:                     SPI3CONbits.SRXISEL = 0b01; // interrupt when rbuf not empty
9D007FD4  3C03BF82   LUI V1, -16510
9D007FD8  8C621400   LW V0, 5120(V1)
9D007FDC  24040001   ADDIU A0, ZERO, 1
9D007FE0  7C820804   INS V0, A0, 0, 2
9D007FE4  AC621400   SW V0, 5120(V1)
199:                     SPI3CONbits.ON = 1;         // SPI on
9D007FE8  3C03BF82   LUI V1, -16510
9D007FEC  8C621400   LW V0, 5120(V1)
9D007FF0  24040001   ADDIU A0, ZERO, 1
9D007FF4  7C827BC4   INS V0, A0, 15, 1
9D007FF8  AC621400   SW V0, 5120(V1)
200:                 
201:                     SPI3BUF = 0xFF;             // Load buffer with non-command for pi
9D007FFC  3C02BF82   LUI V0, -16510
9D008000  240300FF   ADDIU V1, ZERO, 255
9D008004  AC431420   SW V1, 5152(V0)
202:                 
203:                 }
9D008008  03C0E821   ADDU SP, S8, ZERO
9D00800C  8FBE0004   LW S8, 4(SP)
9D008010  27BD0008   ADDIU SP, SP, 8
9D008014  03E00008   JR RA
9D008018  00000000   NOP
204:                 
205:                 void initRNG()
206:                 {
9D00801C  27BDFFF8   ADDIU SP, SP, -8
9D008020  AFBE0004   SW S8, 4(SP)
9D008024  03A0F021   ADDU S8, SP, ZERO
207:                     RNGPOLY1 = 0x00C00003;
9D008028  3C02BF8E   LUI V0, -16498
9D00802C  3C0300C0   LUI V1, 192
9D008030  34630003   ORI V1, V1, 3
9D008034  AC436008   SW V1, 24584(V0)
208:                     RNGPOLY2 = 0x00000000;
9D008038  3C02BF8E   LUI V0, -16498
9D00803C  AC40600C   SW ZERO, 24588(V0)
209:                     RNGCONbits.PLEN = 42;
9D008040  3C02BF8E   LUI V0, -16498
9D008044  2403002A   ADDIU V1, ZERO, 42
9D008048  A0436004   SB V1, 24580(V0)
210:                 
211:                     // RNG cannot be used until seedRNG() is called to start it running.
212:                 }
9D00804C  03C0E821   ADDU SP, S8, ZERO
9D008050  8FBE0004   LW S8, 4(SP)
9D008054  27BD0008   ADDIU SP, SP, 8
9D008058  03E00008   JR RA
9D00805C  00000000   NOP
213:                 
214:                 void seedRNG()
215:                 {
9D008060  27BDFFF8   ADDIU SP, SP, -8
9D008064  AFBE0004   SW S8, 4(SP)
9D008068  03A0F021   ADDU S8, SP, ZERO
216:                     RNGNUMGEN1 = RNGNUMGEN2 = TMR6;
9D00806C  3C02BF84   LUI V0, -16508
9D008070  8C430A10   LW V1, 2576(V0)
9D008074  3C02BF8E   LUI V0, -16498
9D008078  AC436014   SW V1, 24596(V0)
9D00807C  3C02BF8E   LUI V0, -16498
9D008080  8C436014   LW V1, 24596(V0)
9D008084  3C02BF8E   LUI V0, -16498
9D008088  AC436010   SW V1, 24592(V0)
217:                     RNGCONbits.PRNGEN = 1;
9D00808C  3C03BF8E   LUI V1, -16498
9D008090  8C626004   LW V0, 24580(V1)
9D008094  24040001   ADDIU A0, ZERO, 1
9D008098  7C824A44   INS V0, A0, 9, 1
9D00809C  AC626004   SW V0, 24580(V1)
218:                 
219:                     // Turn off the timer, we don't need it anymore
220:                     T6CONbits.ON = 0;
9D0080A0  3C03BF84   LUI V1, -16508
9D0080A4  8C620A00   LW V0, 2560(V1)
9D0080A8  7C027BC4   INS V0, ZERO, 15, 1
9D0080AC  AC620A00   SW V0, 2560(V1)
221:                 }
9D0080B0  03C0E821   ADDU SP, S8, ZERO
9D0080B4  8FBE0004   LW S8, 4(SP)
9D0080B8  27BD0008   ADDIU SP, SP, 8
9D0080BC  03E00008   JR RA
9D0080C0  00000000   NOP
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/buttons.c  --------------------------------------------
1:                   #include "buttons.h"
2:                   #include <p32xxxx.h>
3:                   #include <sys/attribs.h> // __ISR macro here
4:                   #include <stdint.h>
5:                   
6:                   #define READY 0
7:                   #define SET 1
8:                   #define CLEARED -1
9:                   
10:                  static int buttonAdvanceFlag = READY;
11:                  static int buttonCancelFlag = READY;
12:                  static int buttonNextFlag = READY;
13:                  
14:                  static unsigned buttonAdvanceState = 0;
15:                  static unsigned buttonCancelState = 0;
16:                  static unsigned buttonNextState = 0;
17:                  
18:                  // Timer 2 interrupt: poll the buttons
19:                  void __ISR(_TIMER_2_VECTOR, IPL2SRS) pollButtons()
20:                  {
9D0098C8  415DE800   RDPGPR SP, SP
9D0098CC  401A7000   MFC0 K0, EPC
9D0098D0  401B6000   MFC0 K1, Status
9D0098D4  27BDFFE8   ADDIU SP, SP, -24
9D0098D8  AFBA0014   SW K0, 20(SP)
9D0098DC  401A6002   MFC0 K0, SRSCtl
9D0098E0  AFBB0010   SW K1, 16(SP)
9D0098E4  AFBA000C   SW K0, 12(SP)
9D0098E8  7C1B7844   INS K1, ZERO, 1, 15
9D0098EC  377B0800   ORI K1, K1, 2048
9D0098F0  409B6000   MTC0 K1, Status
9D0098F4  AFBE0004   SW S8, 4(SP)
9D0098F8  03A0F021   ADDU S8, SP, ZERO
21:                      buttonAdvanceState = (buttonAdvanceState << 1) | BUTTON_ADVANCE_PIN;
9D0098FC  8F8280A8   LW V0, -32600(GP)
9D009900  00021840   SLL V1, V0, 1
9D009904  3C02BF86   LUI V0, -16506
9D009908  8C420520   LW V0, 1312(V0)
9D00990C  7C420200   EXT V0, V0, 8, 1
9D009910  304200FF   ANDI V0, V0, 255
9D009914  00621025   OR V0, V1, V0
9D009918  AF8280A8   SW V0, -32600(GP)
22:                      buttonCancelState = (buttonCancelState << 1) | BUTTON_CANCEL_PIN;
9D00991C  8F8280AC   LW V0, -32596(GP)
9D009920  00021840   SLL V1, V0, 1
9D009924  3C02BF86   LUI V0, -16506
9D009928  8C420320   LW V0, 800(V0)
9D00992C  7C420340   EXT V0, V0, 13, 1
9D009930  304200FF   ANDI V0, V0, 255
9D009934  00621025   OR V0, V1, V0
9D009938  AF8280AC   SW V0, -32596(GP)
23:                      buttonNextState = (buttonNextState << 1) | BUTTON_NEXT_PIN;
9D00993C  8F8280B0   LW V0, -32592(GP)
9D009940  00021840   SLL V1, V0, 1
9D009944  3C02BF86   LUI V0, -16506
9D009948  8C420020   LW V0, 32(V0)
9D00994C  7C4201C0   EXT V0, V0, 7, 1
9D009950  304200FF   ANDI V0, V0, 255
9D009954  00621025   OR V0, V1, V0
9D009958  AF8280B0   SW V0, -32592(GP)
24:                  
25:                      // Button has been pressed if the last six reads were false
26:                      // Button has been released if the last six reads were true
27:                      if(buttonAdvanceFlag == READY)
9D00995C  8F82809C   LW V0, -32612(GP)
9D009960  14400009   BNE V0, ZERO, 0x9D009988
9D009964  00000000   NOP
28:                      {
29:                          if((buttonAdvanceState & 0x3F) == 0)
9D009968  8F8280A8   LW V0, -32600(GP)
9D00996C  3042003F   ANDI V0, V0, 63
9D009970  1440000B   BNE V0, ZERO, 0x9D0099A0
9D009974  00000000   NOP
30:                              buttonAdvanceFlag = SET;
9D009978  24020001   ADDIU V0, ZERO, 1
9D00997C  AF82809C   SW V0, -32612(GP)
9D009980  0B402668   J 0x9D0099A0
9D009984  00000000   NOP
31:                      }
32:                      else
33:                      {
34:                          if((buttonAdvanceState & 0x3F) == 0x3F)
9D009988  8F8280A8   LW V0, -32600(GP)
9D00998C  3043003F   ANDI V1, V0, 63
9D009990  2402003F   ADDIU V0, ZERO, 63
9D009994  14620002   BNE V1, V0, 0x9D0099A0
9D009998  00000000   NOP
35:                              buttonAdvanceFlag = READY;
9D00999C  AF80809C   SW ZERO, -32612(GP)
36:                      }
37:                  
38:                      if(buttonCancelFlag == READY)
9D0099A0  8F8280A0   LW V0, -32608(GP)
9D0099A4  14400009   BNE V0, ZERO, 0x9D0099CC
9D0099A8  00000000   NOP
39:                      {
40:                          if((buttonCancelState & 0x3F) == 0)
9D0099AC  8F8280AC   LW V0, -32596(GP)
9D0099B0  3042003F   ANDI V0, V0, 63
9D0099B4  1440000B   BNE V0, ZERO, 0x9D0099E4
9D0099B8  00000000   NOP
41:                              buttonCancelFlag = SET;
9D0099BC  24020001   ADDIU V0, ZERO, 1
9D0099C0  AF8280A0   SW V0, -32608(GP)
9D0099C4  0B402679   J 0x9D0099E4
9D0099C8  00000000   NOP
42:                      }
43:                      else
44:                      {
45:                          if((buttonCancelState & 0x3F) == 0x3F)
9D0099CC  8F8280AC   LW V0, -32596(GP)
9D0099D0  3043003F   ANDI V1, V0, 63
9D0099D4  2402003F   ADDIU V0, ZERO, 63
9D0099D8  14620002   BNE V1, V0, 0x9D0099E4
9D0099DC  00000000   NOP
46:                              buttonCancelFlag = READY;
9D0099E0  AF8080A0   SW ZERO, -32608(GP)
47:                      }
48:                  
49:                      if(buttonNextFlag == READY)
9D0099E4  8F8280A4   LW V0, -32604(GP)
9D0099E8  14400009   BNE V0, ZERO, 0x9D009A10
9D0099EC  00000000   NOP
50:                      {
51:                          if((buttonNextState & 0x3F) == 0)
9D0099F0  8F8280B0   LW V0, -32592(GP)
9D0099F4  3042003F   ANDI V0, V0, 63
9D0099F8  1440000B   BNE V0, ZERO, 0x9D009A28
9D0099FC  00000000   NOP
52:                              buttonNextFlag = SET;
9D009A00  24020001   ADDIU V0, ZERO, 1
9D009A04  AF8280A4   SW V0, -32604(GP)
9D009A08  0B40268A   J 0x9D009A28
9D009A0C  00000000   NOP
53:                      }
54:                      else
55:                      {
56:                          if((buttonNextState & 0x3F) == 0x3F)
9D009A10  8F8280B0   LW V0, -32592(GP)
9D009A14  3043003F   ANDI V1, V0, 63
9D009A18  2402003F   ADDIU V0, ZERO, 63
9D009A1C  14620002   BNE V1, V0, 0x9D009A28
9D009A20  00000000   NOP
57:                              buttonNextFlag = READY;
9D009A24  AF8080A4   SW ZERO, -32604(GP)
58:                      }
59:                  
60:                      IFS0bits.T2IF = 0; // clear interrupt flag
9D009A28  3C03BF81   LUI V1, -16511
9D009A2C  8C620040   LW V0, 64(V1)
9D009A30  7C024A44   INS V0, ZERO, 9, 1
9D009A34  AC620040   SW V0, 64(V1)
61:                  }
9D009A38  03C0E821   ADDU SP, S8, ZERO
9D009A3C  8FBE0004   LW S8, 4(SP)
9D009A40  41606000   DI ZERO
9D009A44  000000C0   EHB
9D009A48  8FBB000C   LW K1, 12(SP)
9D009A4C  8FBA0014   LW K0, 20(SP)
9D009A50  409B6002   MTC0 K1, SRSCtl
9D009A54  8FBB0010   LW K1, 16(SP)
9D009A58  409A7000   MTC0 K0, EPC
9D009A5C  27BD0018   ADDIU SP, SP, 24
9D009A60  41DDE800   WRPGPR SP, SP
9D009A64  409B6000   MTC0 K1, Status
9D009A68  42000018   ERET
62:                  
63:                  int flagSet_advance() { return buttonAdvanceFlag == SET; }
9D009A6C  27BDFFF8   ADDIU SP, SP, -8
9D009A70  AFBE0004   SW S8, 4(SP)
9D009A74  03A0F021   ADDU S8, SP, ZERO
9D009A78  8F82809C   LW V0, -32612(GP)
9D009A7C  38420001   XORI V0, V0, 1
9D009A80  2C420001   SLTIU V0, V0, 1
9D009A84  03C0E821   ADDU SP, S8, ZERO
9D009A88  8FBE0004   LW S8, 4(SP)
9D009A8C  27BD0008   ADDIU SP, SP, 8
9D009A90  03E00008   JR RA
9D009A94  00000000   NOP
64:                  int flagSet_cancel() { return buttonCancelFlag == SET; }
9D009A98  27BDFFF8   ADDIU SP, SP, -8
9D009A9C  AFBE0004   SW S8, 4(SP)
9D009AA0  03A0F021   ADDU S8, SP, ZERO
9D009AA4  8F8280A0   LW V0, -32608(GP)
9D009AA8  38420001   XORI V0, V0, 1
9D009AAC  2C420001   SLTIU V0, V0, 1
9D009AB0  03C0E821   ADDU SP, S8, ZERO
9D009AB4  8FBE0004   LW S8, 4(SP)
9D009AB8  27BD0008   ADDIU SP, SP, 8
9D009ABC  03E00008   JR RA
9D009AC0  00000000   NOP
65:                  int flagSet_next() { return buttonNextFlag == SET; }
9D009AC4  27BDFFF8   ADDIU SP, SP, -8
9D009AC8  AFBE0004   SW S8, 4(SP)
9D009ACC  03A0F021   ADDU S8, SP, ZERO
9D009AD0  8F8280A4   LW V0, -32604(GP)
9D009AD4  38420001   XORI V0, V0, 1
9D009AD8  2C420001   SLTIU V0, V0, 1
9D009ADC  03C0E821   ADDU SP, S8, ZERO
9D009AE0  8FBE0004   LW S8, 4(SP)
9D009AE4  27BD0008   ADDIU SP, SP, 8
9D009AE8  03E00008   JR RA
9D009AEC  00000000   NOP
66:                  
67:                  void clearFlag_advance() { buttonAdvanceFlag = CLEARED; }
9D009AF0  27BDFFF8   ADDIU SP, SP, -8
9D009AF4  AFBE0004   SW S8, 4(SP)
9D009AF8  03A0F021   ADDU S8, SP, ZERO
9D009AFC  2402FFFF   ADDIU V0, ZERO, -1
9D009B00  AF82809C   SW V0, -32612(GP)
9D009B04  03C0E821   ADDU SP, S8, ZERO
9D009B08  8FBE0004   LW S8, 4(SP)
9D009B0C  27BD0008   ADDIU SP, SP, 8
9D009B10  03E00008   JR RA
9D009B14  00000000   NOP
68:                  void clearFlag_cancel() { buttonCancelFlag = CLEARED; }
9D009B18  27BDFFF8   ADDIU SP, SP, -8
9D009B1C  AFBE0004   SW S8, 4(SP)
9D009B20  03A0F021   ADDU S8, SP, ZERO
9D009B24  2402FFFF   ADDIU V0, ZERO, -1
9D009B28  AF8280A0   SW V0, -32608(GP)
9D009B2C  03C0E821   ADDU SP, S8, ZERO
9D009B30  8FBE0004   LW S8, 4(SP)
9D009B34  27BD0008   ADDIU SP, SP, 8
9D009B38  03E00008   JR RA
9D009B3C  00000000   NOP
69:                  void clearFlag_next() { buttonNextFlag = CLEARED; }
9D009B40  27BDFFF8   ADDIU SP, SP, -8
9D009B44  AFBE0004   SW S8, 4(SP)
9D009B48  03A0F021   ADDU S8, SP, ZERO
9D009B4C  2402FFFF   ADDIU V0, ZERO, -1
9D009B50  AF8280A4   SW V0, -32604(GP)
9D009B54  03C0E821   ADDU SP, S8, ZERO
9D009B58  8FBE0004   LW S8, 4(SP)
9D009B5C  27BD0008   ADDIU SP, SP, 8
9D009B60  03E00008   JR RA
9D009B64  00000000   NOP
---  /Volumes/home/c11067/xc32/build/xc32-XC32_v1_34_branch/src45x/gcc/gcc/libgcc2.c  -------------------
9D008664  00C01021   ADDU V0, A2, ZERO
9D008AC0  00C04821   ADDU T1, A2, ZERO
9D008668  00804021   ADDU T0, A0, ZERO
9D008AC4  00804021   ADDU T0, A0, ZERO
9D00866C  14E0003F   BNE A3, ZERO, 0x9D00876C
9D008670  00A01821   ADDU V1, A1, ZERO
9D008AC8  14E0003B   BNE A3, ZERO, 0x9D008BB8
9D008ACC  00A01821   ADDU V1, A1, ZERO
9D008674  00A6302B   SLTU A2, A1, A2
9D008678  10C0004C   BEQ A2, ZERO, 0x9D0087AC
9D00867C  00000000   NOP
9D008AD0  00A6102B   SLTU V0, A1, A2
9D008AD4  10400048   BEQ V0, ZERO, 0x9D008BF8
9D008AD8  70C21020   CLZ V0, A2
9D008680  70442020   CLZ A0, V0
9D008684  50800008   BEQL A0, ZERO, 0x9D0086A8
9D008688  00022402   SRL A0, V0, 16
9D008ADC  10400008   BEQ V0, ZERO, 0x9D008B00
9D008AE0  00093C02   SRL A3, T1, 16
9D008698  00821004   SLLV V0, V0, A0
9D008AF0  00464804   SLLV T1, A2, V0
9D00868C  00042823   SUBU A1, ZERO, A0
9D008690  00A82806   SRLV A1, T0, A1
9D008694  00831804   SLLV V1, V1, A0
9D00869C  00A31825   OR V1, A1, V1
9D008AE4  00022023   SUBU A0, ZERO, V0
9D008AE8  00882006   SRLV A0, T0, A0
9D008AEC  00451804   SLLV V1, A1, V0
9D008AF4  00831825   OR V1, A0, V1
9D0086A0  00884004   SLLV T0, T0, A0
9D008AF8  00484004   SLLV T0, T0, V0
9D0086A4  00022402   SRL A0, V0, 16
9D0086A8  0064001B   DIVU V1, A0
9D0086AC  008001F4   TEQ A0, ZERO
9D0086B0  3049FFFF   ANDI T1, V0, -1
9D0086B4  00085C02   SRL T3, T0, 16
9D0086B8  00003812   MFLO A3, 0
9D0086BC  00005010   MFHI T2, 0
9D0086C0  70E93002   MUL A2, A3, T1
9D0086C4  000A2C00   SLL A1, T2, 16
9D0086C8  00AB2825   OR A1, A1, T3
9D0086CC  00A6502B   SLTU T2, A1, A2
9D0086D0  0064001B   DIVU V1, A0
9D0086D4  008001F4   TEQ A0, ZERO
9D0086D8  1140000B   BEQ T2, ZERO, 0x9D008708
9D0086DC  00A61823   SUBU V1, A1, A2
9D0086E0  00A22821   ADDU A1, A1, V0
9D0086E4  00A2182B   SLTU V1, A1, V0
9D0086E8  14600006   BNE V1, ZERO, 0x9D008704
9D0086EC  24E7FFFF   ADDIU A3, A3, -1
9D0086F0  00A6182B   SLTU V1, A1, A2
9D0086F4  10600004   BEQ V1, ZERO, 0x9D008708
9D0086F8  00A61823   SUBU V1, A1, A2
9D0086FC  24E7FFFF   ADDIU A3, A3, -1
9D008700  00A22821   ADDU A1, A1, V0
9D008704  00A61823   SUBU V1, A1, A2
9D008708  0064001B   DIVU V1, A0
9D00870C  008001F4   TEQ A0, ZERO
9D008710  3108FFFF   ANDI T0, T0, -1
9D008714  00002812   MFLO A1, 0
9D008718  00003010   MFHI A2, 0
9D00871C  70A94802   MUL T1, A1, T1
9D008720  00063400   SLL A2, A2, 16
9D008724  00C84025   OR T0, A2, T0
9D008728  0109302B   SLTU A2, T0, T1
9D00872C  0064001B   DIVU V1, A0
9D008730  008001F4   TEQ A0, ZERO
9D008734  10C00007   BEQ A2, ZERO, 0x9D008754
9D008738  01024021   ADDU T0, T0, V0
9D00873C  0102102B   SLTU V0, T0, V0
9D008740  14400004   BNE V0, ZERO, 0x9D008754
9D008744  24A5FFFF   ADDIU A1, A1, -1
9D008748  0109482B   SLTU T1, T0, T1
9D00874C  55200001   BNEL T1, ZERO, 0x9D008754
9D008750  24A5FFFF   ADDIU A1, A1, -1
9D008754  00073C00   SLL A3, A3, 16
9D008758  00A72825   OR A1, A1, A3
9D00875C  00002021   ADDU A0, ZERO, ZERO
9D008AFC  00093C02   SRL A3, T1, 16
9D008B00  0067001B   DIVU V1, A3
9D008B04  00E001F4   TEQ A3, ZERO
9D008B08  312AFFFF   ANDI T2, T1, -1
9D008B0C  00082C02   SRL A1, T0, 16
9D008B10  00005812   MFLO T3, 0
9D008B14  00002010   MFHI A0, 0
9D008B18  716A5802   MUL T3, T3, T2
9D008B1C  00043400   SLL A2, A0, 16
9D008B20  00C53025   OR A2, A2, A1
9D008B24  00CB602B   SLTU T4, A2, T3
9D008B28  0067001B   DIVU V1, A3
9D008B2C  00E001F4   TEQ A3, ZERO
9D008B30  11800009   BEQ T4, ZERO, 0x9D008B58
9D008B34  00CB1823   SUBU V1, A2, T3
9D008B38  00C93021   ADDU A2, A2, T1
9D008B3C  00C9182B   SLTU V1, A2, T1
9D008B40  14600005   BNE V1, ZERO, 0x9D008B58
9D008B44  00CB1823   SUBU V1, A2, T3
9D008B48  00CB182B   SLTU V1, A2, T3
9D008B4C  54600001   BNEL V1, ZERO, 0x9D008B54
9D008B50  00C93021   ADDU A2, A2, T1
9D008B54  00CB1823   SUBU V1, A2, T3
9D008B58  0067001B   DIVU V1, A3
9D008B5C  00E001F4   TEQ A3, ZERO
9D008B60  3108FFFF   ANDI T0, T0, -1
9D008B64  00002012   MFLO A0, 0
9D008B68  00002810   MFHI A1, 0
9D008B6C  708A5002   MUL T2, A0, T2
9D008B70  00052C00   SLL A1, A1, 16
9D008B74  00A84025   OR T0, A1, T0
9D008B78  010A202B   SLTU A0, T0, T2
9D008B7C  0067001B   DIVU V1, A3
9D008B80  00E001F4   TEQ A3, ZERO
9D008B84  50800009   BEQL A0, ZERO, 0x9D008BAC
9D008B88  010A4023   SUBU T0, T0, T2
9D0087AC  14400006   BNE V0, ZERO, 0x9D0087C8
9D0087B0  70431820   CLZ V1, V0
9D008BF8  14C00006   BNE A2, ZERO, 0x9D008C14
9D008BFC  71221020   CLZ V0, T1
9D0087B4  24030001   ADDIU V1, ZERO, 1
9D0087B8  0062001B   DIVU V1, V0
9D0087BC  004001F4   TEQ V0, ZERO
9D0087C0  00001012   MFLO V0, 0
9D008C00  24020001   ADDIU V0, ZERO, 1
9D008C04  0046001B   DIVU V0, A2
9D008C08  00C001F4   TEQ A2, ZERO
9D008C0C  00004812   MFLO T1, 0
9D0087C4  70431820   CLZ V1, V0
9D008C10  71221020   CLZ V0, T1
9D0087C8  5460007B   BNEL V1, ZERO, 0x9D0089B8
9D0087CC  24080020   ADDIU T0, ZERO, 32
9D008C14  5440007D   BNEL V0, ZERO, 0x9D008E0C
9D008C18  24080020   ADDIU T0, ZERO, 32
9D0087D0  00A22823   SUBU A1, A1, V0
9D0087D4  00023402   SRL A2, V0, 16
9D0087D8  3049FFFF   ANDI T1, V0, -1
9D008C1C  00A93023   SUBU A2, A1, T1
9D008C20  00091C02   SRL V1, T1, 16
9D008C24  312AFFFF   ANDI T2, T1, -1
9D0087DC  24040001   ADDIU A0, ZERO, 1
9D0089BC  01034023   SUBU T0, T0, V1
9D008E0C  01024023   SUBU T0, T0, V0
9D0089B8  00621004   SLLV V0, V0, V1
9D008E10  00494804   SLLV T1, T1, V0
9D0089C0  01053806   SRLV A3, A1, T0
9D008E14  01053806   SRLV A3, A1, T0
9D0089D0  01044006   SRLV T0, A0, T0
9D0089D4  00652804   SLLV A1, A1, V1
9D0089DC  01052825   OR A1, T0, A1
9D008E28  01046006   SRLV T4, A0, T0
9D008E2C  00452804   SLLV A1, A1, V0
9D008E30  01856025   OR T4, T4, A1
9D0089E0  00644004   SLLV T0, A0, V1
9D008E38  00444004   SLLV T0, A0, V0
9D0089C4  00023402   SRL A2, V0, 16
9D0089C8  00E6001B   DIVU A3, A2
9D0089CC  00C001F4   TEQ A2, ZERO
9D0089D8  3049FFFF   ANDI T1, V0, -1
9D0089E4  00056402   SRL T4, A1, 16
9D0089E8  00005012   MFLO T2, 0
9D0089EC  00005810   MFHI T3, 0
9D0089F0  71492002   MUL A0, T2, T1
9D0089F4  000B5C00   SLL T3, T3, 16
9D0089F8  018B1825   OR V1, T4, T3
9D0089FC  0064582B   SLTU T3, V1, A0
9D008A00  00E6001B   DIVU A3, A2
9D008A04  00C001F4   TEQ A2, ZERO
9D008A08  5160000B   BEQL T3, ZERO, 0x9D008A38
9D008A0C  00641823   SUBU V1, V1, A0
9D008A10  00621821   ADDU V1, V1, V0
9D008A14  0062382B   SLTU A3, V1, V0
9D008A18  14E00006   BNE A3, ZERO, 0x9D008A34
9D008A1C  254AFFFF   ADDIU T2, T2, -1
9D008A20  0064382B   SLTU A3, V1, A0
9D008A24  50E00004   BEQL A3, ZERO, 0x9D008A38
9D008A28  00641823   SUBU V1, V1, A0
9D008A2C  254AFFFF   ADDIU T2, T2, -1
9D008A30  00621821   ADDU V1, V1, V0
9D008A34  00641823   SUBU V1, V1, A0
9D008A38  0066001B   DIVU V1, A2
9D008A3C  00C001F4   TEQ A2, ZERO
9D008A40  30A5FFFF   ANDI A1, A1, -1
9D008A44  00002012   MFLO A0, 0
9D008A48  00005810   MFHI T3, 0
9D008A4C  70893802   MUL A3, A0, T1
9D008A50  000B5C00   SLL T3, T3, 16
9D008A54  01652825   OR A1, T3, A1
9D008A58  00A7582B   SLTU T3, A1, A3
9D008A5C  0066001B   DIVU V1, A2
9D008A60  00C001F4   TEQ A2, ZERO
9D008A64  5160000B   BEQL T3, ZERO, 0x9D008A94
9D008A68  000A5400   SLL T2, T2, 16
9D008A6C  00A22821   ADDU A1, A1, V0
9D008A70  00A2182B   SLTU V1, A1, V0
9D008A74  14600006   BNE V1, ZERO, 0x9D008A90
9D008A78  2484FFFF   ADDIU A0, A0, -1
9D008A7C  00A7182B   SLTU V1, A1, A3
9D008A80  50600004   BEQL V1, ZERO, 0x9D008A94
9D008A84  000A5400   SLL T2, T2, 16
9D008A88  2484FFFF   ADDIU A0, A0, -1
9D008A8C  00A22821   ADDU A1, A1, V0
9D008A90  000A5400   SLL T2, T2, 16
9D008A94  00A72823   SUBU A1, A1, A3
9D008A98  0B4021F8   J 0x9D0087E0
9D008A9C  008A2025   OR A0, A0, T2
9D008E18  00091C02   SRL V1, T1, 16
9D008E1C  00E3001B   DIVU A3, V1
9D008E20  006001F4   TEQ V1, ZERO
9D008E24  312AFFFF   ANDI T2, T1, -1
9D008E34  000C2C02   SRL A1, T4, 16
9D008E3C  00005812   MFLO T3, 0
9D008E40  00006810   MFHI T5, 0
9D008E44  716A5802   MUL T3, T3, T2
9D008E48  000D6C00   SLL T5, T5, 16
9D008E4C  00AD2025   OR A0, A1, T5
9D008E50  008B282B   SLTU A1, A0, T3
9D008E54  00E3001B   DIVU A3, V1
9D008E58  006001F4   TEQ V1, ZERO
9D008E5C  50A00009   BEQL A1, ZERO, 0x9D008E84
9D008E60  008B2023   SUBU A0, A0, T3
9D008E64  00892021   ADDU A0, A0, T1
9D008E68  0089282B   SLTU A1, A0, T1
9D008E6C  54A00005   BNEL A1, ZERO, 0x9D008E84
9D008E70  008B2023   SUBU A0, A0, T3
9D008E74  008B282B   SLTU A1, A0, T3
9D008E78  54A00001   BNEL A1, ZERO, 0x9D008E80
9D008E7C  00892021   ADDU A0, A0, T1
9D008E80  008B2023   SUBU A0, A0, T3
9D008E84  0083001B   DIVU A0, V1
9D008E88  006001F4   TEQ V1, ZERO
9D008E8C  318CFFFF   ANDI T4, T4, -1
9D008E90  00002812   MFLO A1, 0
9D008E94  00003810   MFHI A3, 0
9D008E98  70AA2802   MUL A1, A1, T2
9D008E9C  00073400   SLL A2, A3, 16
9D008EA0  00CC3025   OR A2, A2, T4
9D008EA4  00C5382B   SLTU A3, A2, A1
9D008EA8  0083001B   DIVU A0, V1
9D008EAC  006001F4   TEQ V1, ZERO
9D008EB0  50E0FF5D   BEQL A3, ZERO, 0x9D008C28
9D008EB4  00C53023   SUBU A2, A2, A1
9D008EB8  00C93021   ADDU A2, A2, T1
9D008EBC  00C9202B   SLTU A0, A2, T1
9D008EC0  5480FF59   BNEL A0, ZERO, 0x9D008C28
9D008EC4  00C53023   SUBU A2, A2, A1
9D008EC8  00C5202B   SLTU A0, A2, A1
9D008ECC  54800001   BNEL A0, ZERO, 0x9D008ED4
9D008ED0  00C93021   ADDU A2, A2, T1
9D008ED4  0B40230A   J 0x9D008C28
9D008ED8  00C53023   SUBU A2, A2, A1
9D0087E0  00A6001B   DIVU A1, A2
9D0087E4  00C001F4   TEQ A2, ZERO
9D0087E8  00086402   SRL T4, T0, 16
9D0087EC  00003812   MFLO A3, 0
9D0087F0  00005810   MFHI T3, 0
9D0087F4  70E95002   MUL T2, A3, T1
9D0087F8  000B1C00   SLL V1, T3, 16
9D0087FC  006C1825   OR V1, V1, T4
9D008800  006A582B   SLTU T3, V1, T2
9D008804  00A6001B   DIVU A1, A2
9D008808  00C001F4   TEQ A2, ZERO
9D00880C  51600009   BEQL T3, ZERO, 0x9D008834
9D008810  006A1823   SUBU V1, V1, T2
9D008814  00621821   ADDU V1, V1, V0
9D008818  0062282B   SLTU A1, V1, V0
9D00881C  14A00004   BNE A1, ZERO, 0x9D008830
9D008820  24E7FFFF   ADDIU A3, A3, -1
9D008824  006A282B   SLTU A1, V1, T2
9D008828  54A000A3   BNEL A1, ZERO, 0x9D008AB8
9D00882C  24E7FFFF   ADDIU A3, A3, -1
9D008830  006A1823   SUBU V1, V1, T2
9D008834  0066001B   DIVU V1, A2
9D008838  00C001F4   TEQ A2, ZERO
9D00883C  3108FFFF   ANDI T0, T0, -1
9D008840  00002812   MFLO A1, 0
9D008844  00005010   MFHI T2, 0
9D008848  70A94802   MUL T1, A1, T1
9D00884C  000A5400   SLL T2, T2, 16
9D008850  01484025   OR T0, T2, T0
9D008854  0109502B   SLTU T2, T0, T1
9D008858  0066001B   DIVU V1, A2
9D00885C  00C001F4   TEQ A2, ZERO
9D008860  11400007   BEQ T2, ZERO, 0x9D008880
9D008864  01024021   ADDU T0, T0, V0
9D008868  0102102B   SLTU V0, T0, V0
9D00886C  14400004   BNE V0, ZERO, 0x9D008880
9D008870  24A5FFFF   ADDIU A1, A1, -1
9D008874  0109482B   SLTU T1, T0, T1
9D008878  55200001   BNEL T1, ZERO, 0x9D008880
9D00887C  24A5FFFF   ADDIU A1, A1, -1
9D008880  00073C00   SLL A3, A3, 16
9D008884  00A72825   OR A1, A1, A3
9D008AB8  0B40220C   J 0x9D008830
9D008ABC  00621821   ADDU V1, V1, V0
9D008B8C  01094021   ADDU T0, T0, T1
9D008B90  0109182B   SLTU V1, T0, T1
9D008B94  54600005   BNEL V1, ZERO, 0x9D008BAC
9D008B98  010A4023   SUBU T0, T0, T2
9D008B9C  010A182B   SLTU V1, T0, T2
9D008BA0  54600001   BNEL V1, ZERO, 0x9D008BA8
9D008BA4  01094021   ADDU T0, T0, T1
9D008BA8  010A4023   SUBU T0, T0, T2
9D008C28  00C3001B   DIVU A2, V1
9D008C2C  006001F4   TEQ V1, ZERO
9D008C30  00086402   SRL T4, T0, 16
9D008C34  00002012   MFLO A0, 0
9D008C38  00005810   MFHI T3, 0
9D008C3C  708A2002   MUL A0, A0, T2
9D008C40  000B3C00   SLL A3, T3, 16
9D008C44  00EC3825   OR A3, A3, T4
9D008C48  00E4582B   SLTU T3, A3, A0
9D008C4C  00C3001B   DIVU A2, V1
9D008C50  006001F4   TEQ V1, ZERO
9D008C54  11600009   BEQ T3, ZERO, 0x9D008C7C
9D008C58  00E42823   SUBU A1, A3, A0
9D008C5C  00E93821   ADDU A3, A3, T1
9D008C60  00E9282B   SLTU A1, A3, T1
9D008C64  14A00005   BNE A1, ZERO, 0x9D008C7C
9D008C68  00E42823   SUBU A1, A3, A0
9D008C6C  00E4282B   SLTU A1, A3, A0
9D008C70  54A00001   BNEL A1, ZERO, 0x9D008C78
9D008C74  00E93821   ADDU A3, A3, T1
9D008C78  00E42823   SUBU A1, A3, A0
9D008C7C  00A3001B   DIVU A1, V1
9D008C80  006001F4   TEQ V1, ZERO
9D008C84  3108FFFF   ANDI T0, T0, -1
9D008C88  00002012   MFLO A0, 0
9D008C8C  00003010   MFHI A2, 0
9D008C90  708A5002   MUL T2, A0, T2
9D008C94  00063400   SLL A2, A2, 16
9D008C98  00C84025   OR T0, A2, T0
9D008C9C  010A202B   SLTU A0, T0, T2
9D008CA0  00A3001B   DIVU A1, V1
9D008CA4  006001F4   TEQ V1, ZERO
9D008CA8  5080FFC0   BEQL A0, ZERO, 0x9D008BAC
9D008CAC  010A4023   SUBU T0, T0, T2
9D008CB0  01094021   ADDU T0, T0, T1
9D008CB4  0109182B   SLTU V1, T0, T1
9D008CB8  5460FFBC   BNEL V1, ZERO, 0x9D008BAC
9D008CBC  010A4023   SUBU T0, T0, T2
9D008CC0  0B4022E8   J 0x9D008BA0
9D008CC4  010A182B   SLTU V1, T0, T2
9D008BAC  00481006   SRLV V0, T0, V0
9D008BB0  03E00008   JR RA
9D008BB4  00001821   ADDU V1, ZERO, ZERO
9D00876C  00A7102B   SLTU V0, A1, A3
9D008770  54400048   BNEL V0, ZERO, 0x9D008894
9D008774  00002021   ADDU A0, ZERO, ZERO
9D008894  00002821   ADDU A1, ZERO, ZERO
9D008BB8  00A7102B   SLTU V0, A1, A3
9D008BBC  14400042   BNE V0, ZERO, 0x9D008CC8
9D008BC0  70EA5020   CLZ T2, A3
9D008CC8  00801021   ADDU V0, A0, ZERO
9D008CCC  03E00008   JR RA
9D008CD0  00A01821   ADDU V1, A1, ZERO
9D008778  70E31820   CLZ V1, A3
9D00877C  14600049   BNE V1, ZERO, 0x9D0088A4
9D008780  240C0020   ADDIU T4, ZERO, 32
9D008BC4  15400043   BNE T2, ZERO, 0x9D008CD4
9D008BC8  240C0020   ADDIU T4, ZERO, 32
9D008784  00E5282B   SLTU A1, A3, A1
9D008788  14A00003   BNE A1, ZERO, 0x9D008798
9D00878C  0086302B   SLTU A2, A0, A2
9D008790  14C00086   BNE A2, ZERO, 0x9D0089AC
9D008794  00002021   ADDU A0, ZERO, ZERO
9D008798  00002021   ADDU A0, ZERO, ZERO
9D00879C  24050001   ADDIU A1, ZERO, 1
9D008BCC  00E5102B   SLTU V0, A3, A1
9D008BD0  14400005   BNE V0, ZERO, 0x9D008BE8
9D008BD4  00861023   SUBU V0, A0, A2
9D008BD8  0086102B   SLTU V0, A0, A2
9D008BDC  544000C8   BNEL V0, ZERO, 0x9D008F00
9D008BE0  00801021   ADDU V0, A0, ZERO
9D008BE4  00861023   SUBU V0, A0, A2
9D008BE8  00A72823   SUBU A1, A1, A3
9D008BEC  0082202B   SLTU A0, A0, V0
9D008BF0  03E00008   JR RA
9D008BF4  00A41823   SUBU V1, A1, A0
9D0088A4  01836023   SUBU T4, T4, V1
9D008CD4  018A6023   SUBU T4, T4, T2
9D0088A8  01864006   SRLV T0, A2, T4
9D0088AC  00673804   SLLV A3, A3, V1
9D0088B0  01074025   OR T0, T0, A3
9D008CD8  01473804   SLLV A3, A3, T2
9D008CDC  01865806   SRLV T3, A2, T4
9D008CE0  01675825   OR T3, T3, A3
9D008D08  01463004   SLLV A2, A2, T2
9D0088B8  01853806   SRLV A3, A1, T4
9D008CE4  01856806   SRLV T5, A1, T4
9D0088C8  00652804   SLLV A1, A1, V1
9D0088CC  01846006   SRLV T4, A0, T4
9D0088D0  01856025   OR T4, T4, A1
9D008CF8  01841006   SRLV V0, A0, T4
9D008CFC  01452804   SLLV A1, A1, T2
9D008D00  00452825   OR A1, V0, A1
9D0088B4  00081402   SRL V0, T0, 16
9D0088BC  00E2001B   DIVU A3, V0
9D0088C0  004001F4   TEQ V0, ZERO
9D0088C4  310DFFFF   ANDI T5, T0, -1
9D0088D4  000C4C02   SRL T1, T4, 16
9D0088D8  00005812   MFLO T3, 0
9D0088DC  00007810   MFHI T7, 0
9D0088E0  716D7002   MUL T6, T3, T5
9D0088E4  000F5400   SLL T2, T7, 16
9D0088E8  01495025   OR T2, T2, T1
9D0088EC  014E282B   SLTU A1, T2, T6
9D0088F0  00E2001B   DIVU A3, V0
9D0088F4  004001F4   TEQ V0, ZERO
9D0088F8  10A0000A   BEQ A1, ZERO, 0x9D008924
9D0088FC  00663004   SLLV A2, A2, V1
9D008900  01485021   ADDU T2, T2, T0
9D008904  0148282B   SLTU A1, T2, T0
9D008908  14A00006   BNE A1, ZERO, 0x9D008924
9D00890C  256BFFFF   ADDIU T3, T3, -1
9D008910  014E282B   SLTU A1, T2, T6
9D008914  50A00004   BEQL A1, ZERO, 0x9D008928
9D008918  014E5023   SUBU T2, T2, T6
9D00891C  256BFFFF   ADDIU T3, T3, -1
9D008920  01485021   ADDU T2, T2, T0
9D008924  014E5023   SUBU T2, T2, T6
9D008928  0142001B   DIVU T2, V0
9D00892C  004001F4   TEQ V0, ZERO
9D008930  318CFFFF   ANDI T4, T4, -1
9D008934  00002812   MFLO A1, 0
9D008938  00007010   MFHI T6, 0
9D00893C  70AD6802   MUL T5, A1, T5
9D008940  000E4C00   SLL T1, T6, 16
9D008944  012C4825   OR T1, T1, T4
9D008948  012D382B   SLTU A3, T1, T5
9D00894C  0142001B   DIVU T2, V0
9D008950  004001F4   TEQ V0, ZERO
9D008954  50E0000B   BEQL A3, ZERO, 0x9D008984
9D008958  000B5C00   SLL T3, T3, 16
9D00895C  01284821   ADDU T1, T1, T0
9D008960  0128102B   SLTU V0, T1, T0
9D008964  14400006   BNE V0, ZERO, 0x9D008980
9D008968  24A5FFFF   ADDIU A1, A1, -1
9D00896C  012D102B   SLTU V0, T1, T5
9D008970  50400004   BEQL V0, ZERO, 0x9D008984
9D008974  000B5C00   SLL T3, T3, 16
9D008978  24A5FFFF   ADDIU A1, A1, -1
9D00897C  01284821   ADDU T1, T1, T0
9D008980  000B5C00   SLL T3, T3, 16
9D008984  00AB2825   OR A1, A1, T3
9D00898C  012D4823   SUBU T1, T1, T5
9D008CE8  000B3C02   SRL A3, T3, 16
9D008CEC  01A7001B   DIVU T5, A3
9D008CF0  00E001F4   TEQ A3, ZERO
9D008CF4  316FFFFF   ANDI T7, T3, -1
9D008D04  00051402   SRL V0, A1, 16
9D008D0C  00007012   MFLO T6, 0
9D008D10  00001810   MFHI V1, 0
9D008D14  71CFC002   MUL T8, T6, T7
9D008D18  00034C00   SLL T1, V1, 16
9D008D1C  01224825   OR T1, T1, V0
9D008D20  0138102B   SLTU V0, T1, T8
9D008D24  01A7001B   DIVU T5, A3
9D008D28  00E001F4   TEQ A3, ZERO
9D008D2C  1040000A   BEQ V0, ZERO, 0x9D008D58
9D008D30  01442004   SLLV A0, A0, T2
9D008D34  012B4821   ADDU T1, T1, T3
9D008D38  012B102B   SLTU V0, T1, T3
9D008D3C  14400006   BNE V0, ZERO, 0x9D008D58
9D008D40  25CEFFFF   ADDIU T6, T6, -1
9D008D44  0138102B   SLTU V0, T1, T8
9D008D48  50400004   BEQL V0, ZERO, 0x9D008D5C
9D008D4C  01384823   SUBU T1, T1, T8
9D008D50  25CEFFFF   ADDIU T6, T6, -1
9D008D54  012B4821   ADDU T1, T1, T3
9D008D58  01384823   SUBU T1, T1, T8
9D008D5C  0127001B   DIVU T1, A3
9D008D60  00E001F4   TEQ A3, ZERO
9D008D64  30A5FFFF   ANDI A1, A1, -1
9D008D68  00006812   MFLO T5, 0
9D008D6C  00001810   MFHI V1, 0
9D008D70  71AF7802   MUL T7, T5, T7
9D008D74  00031400   SLL V0, V1, 16
9D008D78  00451025   OR V0, V0, A1
9D008D7C  004F182B   SLTU V1, V0, T7
9D008D80  0127001B   DIVU T1, A3
9D008D84  00E001F4   TEQ A3, ZERO
9D008D88  1060000B   BEQ V1, ZERO, 0x9D008DB8
9D008D8C  000E4400   SLL T0, T6, 16
9D008D90  004B1021   ADDU V0, V0, T3
9D008D94  004B182B   SLTU V1, V0, T3
9D008D98  14600007   BNE V1, ZERO, 0x9D008DB8
9D008D9C  25ADFFFF   ADDIU T5, T5, -1
9D008DA0  004F182B   SLTU V1, V0, T7
9D008DA4  10600005   BEQ V1, ZERO, 0x9D008DBC
9D008DA8  01A84025   OR T0, T5, T0
9D008DAC  25ADFFFF   ADDIU T5, T5, -1
9D008DB0  004B1021   ADDU V0, V0, T3
9D008DB4  000E4400   SLL T0, T6, 16
9D008DB8  01A84025   OR T0, T5, T0
9D008DC0  004F7823   SUBU T7, V0, T7
9D008988  00A60019   MULTU 0, A1, A2
9D008990  00003810   MFHI A3, 0
9D008DBC  01060019   MULTU 0, T0, A2
9D008DC4  00004810   MFHI T1, 0
9D008DC8  00004012   MFLO T0, 0
9D008DD0  01201821   ADDU V1, T1, ZERO
9D008DD4  01203821   ADDU A3, T1, ZERO
9D008994  0127402B   SLTU T0, T1, A3
9D008998  15000044   BNE T0, ZERO, 0x9D008AAC
9D00899C  00003012   MFLO A2, 0
9D0089A0  1127003F   BEQ T1, A3, 0x9D008AA0
9D0089A4  00642004   SLLV A0, A0, V1
9D008AA0  0086302B   SLTU A2, A0, A2
9D008AA4  50C0FFC1   BEQL A2, ZERO, 0x9D0089AC
9D008AA8  00002021   ADDU A0, ZERO, ZERO
9D008DCC  01E9282B   SLTU A1, T7, T1
9D008DD8  14A00040   BNE A1, ZERO, 0x9D008EDC
9D008DDC  00001012   MFLO V0, 0
9D008DE0  51E90043   BEQL T7, T1, 0x9D008EF0
9D008DE4  0082182B   SLTU V1, A0, V0
9D008EF0  5460FFFB   BNEL V1, ZERO, 0x9D008EE0
9D008EF4  00464023   SUBU T0, V0, A2
9D008EF8  0B40237B   J 0x9D008DEC
9D008EFC  00001821   ADDU V1, ZERO, ZERO
9D008F00  03E00008   JR RA
9D008F04  00000000   NOP
9D0089A8  00002021   ADDU A0, ZERO, ZERO
9D008AAC  24A5FFFF   ADDIU A1, A1, -1
9D008AB0  0B40226B   J 0x9D0089AC
9D008AB4  00002021   ADDU A0, ZERO, ZERO
9D008DE8  01E31823   SUBU V1, T7, V1
9D008EDC  00464023   SUBU T0, V0, A2
9D008EE0  00EB1823   SUBU V1, A3, T3
9D008EE4  0048102B   SLTU V0, V0, T0
9D008EE8  0B40237A   J 0x9D008DE8
9D008EEC  00621823   SUBU V1, V1, V0
9D008DEC  00883023   SUBU A2, A0, T0
9D008DF0  0086202B   SLTU A0, A0, A2
9D008DF4  00641823   SUBU V1, V1, A0
9D008DF8  01836004   SLLV T4, V1, T4
9D008DFC  01461006   SRLV V0, A2, T2
9D008E00  004C1025   OR V0, V0, T4
9D008760  00A01021   ADDU V0, A1, ZERO
9D0087A0  00A01021   ADDU V0, A1, ZERO
9D008888  00A01021   ADDU V0, A1, ZERO
9D008898  00A01021   ADDU V0, A1, ZERO
9D0089AC  00A01021   ADDU V0, A1, ZERO
9D008E04  03E00008   JR RA
9D008E08  01431806   SRLV V1, V1, T2
9D008764  03E00008   JR RA
9D008768  00801821   ADDU V1, A0, ZERO
9D0087A4  03E00008   JR RA
9D0087A8  00801821   ADDU V1, A0, ZERO
9D00888C  03E00008   JR RA
9D008890  00801821   ADDU V1, A0, ZERO
9D00889C  03E00008   JR RA
9D0088A0  00801821   ADDU V1, A0, ZERO
9D0089B0  03E00008   JR RA
9D0089B4  00801821   ADDU V1, A0, ZERO
9D00AD24  27BDFFE0   ADDIU SP, SP, -32
9D00AD28  AFBF001C   SW RA, 28(SP)
9D00AD2C  AFB10018   SW S1, 24(SP)
9D00AD30  AFB00014   SW S0, 20(SP)
9D00AD34  10A0002D   BEQ A1, ZERO, 0x9D00ADEC
9D00AD38  00801021   ADDU V0, A0, ZERO
9D00ADEC  0F402D58   JAL __floatunsisf
9D00ADF0  00000000   NOP
9D00AD3C  70A63020   CLZ A2, A1
9D00AD40  24100020   ADDIU S0, ZERO, 32
9D00AD44  02068023   SUBU S0, S0, A2
9D00AD48  00101827   NOR V1, ZERO, S0
9D00AD4C  00052040   SLL A0, A1, 1
9D00AD50  00642004   SLLV A0, A0, V1
9D00AD54  02021806   SRLV V1, V0, S0
9D00AD58  00831825   OR V1, A0, V1
9D00AD5C  32070020   ANDI A3, S0, 32
9D00AD60  02052006   SRLV A0, A1, S0
9D00AD64  00C21004   SLLV V0, V0, A2
9D00AD68  14400014   BNE V0, ZERO, 0x9D00ADBC
9D00AD6C  0067200A   MOVZ A0, V1, A3
9D00AD70  0F402D58   JAL __floatunsisf
9D00AD74  00000000   NOP
9D00AD78  00408821   ADDU S1, V0, ZERO
9D00ADBC  0F402D58   JAL __floatunsisf
9D00ADC0  34840001   ORI A0, A0, 1
9D00ADC4  00408821   ADDU S1, V0, ZERO
9D00AD7C  24020020   ADDIU V0, ZERO, 32
9D00AD80  12020015   BEQ S0, V0, 0x9D00ADD8
9D00AD84  3C029D01   LUI V0, -25343
9D00ADC8  24020020   ADDIU V0, ZERO, 32
9D00ADCC  1602FFEF   BNE S0, V0, 0x9D00AD8C
9D00ADD0  2402001F   ADDIU V0, ZERO, 31
9D00ADD4  3C029D01   LUI V0, -25343
9D00ADD8  0B402B68   J 0x9D00ADA0
9D00ADDC  8C45B870   LW A1, -18320(V0)
9D00AD88  2402001F   ADDIU V0, ZERO, 31
9D00AD8C  12020014   BEQ S0, V0, 0x9D00ADE0
9D00AD90  24040001   ADDIU A0, ZERO, 1
9D00ADE0  3C029D01   LUI V0, -25343
9D00ADE4  0B402B68   J 0x9D00ADA0
9D00ADE8  8C45B874   LW A1, -18316(V0)
9D00AD94  0F402D2D   JAL __floatsisf
9D00AD98  02042004   SLLV A0, A0, S0
9D00AD9C  00402821   ADDU A1, V0, ZERO
9D00ADA0  0F402934   JAL fpmul
9D00ADA4  02202021   ADDU A0, S1, ZERO
9D00ADA8  8FBF001C   LW RA, 28(SP)
9D00ADAC  8FB10018   LW S1, 24(SP)
9D00ADB0  8FB00014   LW S0, 20(SP)
9D00ADB4  03E00008   JR RA
9D00ADB8  27BD0020   ADDIU SP, SP, 32
9D00ADF4  8FBF001C   LW RA, 28(SP)
9D00ADF8  8FB10018   LW S1, 24(SP)
9D00ADFC  8FB00014   LW S0, 20(SP)
9D00AE00  03E00008   JR RA
9D00AE04  27BD0020   ADDIU SP, SP, 32
---  /Volumes/home/c11067/xc32/build/xc32-XC32_v1_34_branch/src45x/gcc/gcc/config/floatunsisf.c  --------
9D00B560  27BDFFE8   ADDIU SP, SP, -24
9D00B564  AFBF0014   SW RA, 20(SP)
9D00B568  04800006   BLTZ A0, 0x9D00B584
9D00B56C  00801021   ADDU V0, A0, ZERO
9D00B584  30420001   ANDI V0, V0, 1
9D00B588  00042042   SRL A0, A0, 1
9D00B58C  0F402D2D   JAL __floatsisf
9D00B590  00822025   OR A0, A0, V0
9D00B594  00402021   ADDU A0, V0, ZERO
9D00B598  0F402784   JAL fpadd
9D00B59C  00402821   ADDU A1, V0, ZERO
9D00B570  0F402D2D   JAL __floatsisf
9D00B574  00000000   NOP
9D00B578  8FBF0014   LW RA, 20(SP)
9D00B57C  03E00008   JR RA
9D00B580  27BD0018   ADDIU SP, SP, 24
9D00B5A0  8FBF0014   LW RA, 20(SP)
9D00B5A4  03E00008   JR RA
9D00B5A8  27BD0018   ADDIU SP, SP, 24
