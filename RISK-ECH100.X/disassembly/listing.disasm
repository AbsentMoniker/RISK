Disassembly Listing for RISK-ECH100
Generated From:
/home/jacob/Documents/477/RISK/RISK-ECH100.X/dist/default/production/RISK-ECH100.X.production.elf
Mar 25, 2015 5:57:25 PM

---  /home/jacob/Documents/477/RISK/game/territory.c  ---------------------------------------------------
1:                   // territory.c:
2:                   // Individual territory functions.
3:                   //
4:                   // Part of R.I.S.K
5:                   // ECE 477 Group 2, Spring 2015
6:                   
7:                   #include "territory.h"
8:                   #include "game.h"
9:                   #include "types.h"
10:                  #include "util.h"
11:                  #include "io.h"
12:                  #include "gamedata.h"
13:                  #include "log.h"
14:                  
15:                  // Array of connected territories, used to check valid move targets.
16:                  static int connectedTerritories[NUM_TERRITORIES];
17:                  
18:                  int isNeighbor(int t1, int t2)
19:                  {
9D00599C  27BDFFF0   ADDIU SP, SP, -16
9D0059A0  AFBE000C   SW S8, 12(SP)
9D0059A4  03A0F021   ADDU S8, SP, ZERO
9D0059A8  AFC40010   SW A0, 16(S8)
9D0059AC  AFC50014   SW A1, 20(S8)
20:                      for(int i = 0; i < MAX_NEIGHBORS; i++)
9D0059B0  AFC00000   SW ZERO, 0(S8)
9D0059B4  0B401683   J 0x9D005A0C
9D0059B8  00000000   NOP
9D005A00  8FC20000   LW V0, 0(S8)
9D005A04  24420001   ADDIU V0, V0, 1
9D005A08  AFC20000   SW V0, 0(S8)
9D005A0C  8FC20000   LW V0, 0(S8)
9D005A10  28420002   SLTI V0, V0, 2
9D005A14  1440FFE9   BNE V0, ZERO, 0x9D0059BC
9D005A18  00000000   NOP
21:                      {
22:                          if(territories[t1].neighbors[i] == t2)
9D0059BC  3C048000   LUI A0, -32768
9D0059C0  8FC20010   LW V0, 16(S8)
9D0059C4  00021040   SLL V0, V0, 1
9D0059C8  00021880   SLL V1, V0, 2
9D0059CC  00621823   SUBU V1, V1, V0
9D0059D0  8FC20000   LW V0, 0(S8)
9D0059D4  00621021   ADDU V0, V1, V0
9D0059D8  248341B0   ADDIU V1, A0, 16816
9D0059DC  00021080   SLL V0, V0, 2
9D0059E0  00621021   ADDU V0, V1, V0
9D0059E4  8C430004   LW V1, 4(V0)
9D0059E8  8FC20014   LW V0, 20(S8)
9D0059EC  14620004   BNE V1, V0, 0x9D005A00
9D0059F0  00000000   NOP
23:                          {
24:                              return 1;
9D0059F4  24020001   ADDIU V0, ZERO, 1
9D0059F8  0B401688   J 0x9D005A20
9D0059FC  00000000   NOP
25:                          }
26:                      }
27:                      return 0;
9D005A1C  00001021   ADDU V0, ZERO, ZERO
28:                  }
9D005A20  03C0E821   ADDU SP, S8, ZERO
9D005A24  8FBE000C   LW S8, 12(SP)
9D005A28  27BD0010   ADDIU SP, SP, 16
9D005A2C  03E00008   JR RA
9D005A30  00000000   NOP
29:                  #define SORT(a,b) do{if(a < b) {int tmp = a; a = b; b = tmp; }}while(0)
30:                  void doBattle(int tA, int tD)
31:                  {
9D005A34  27BDFFC0   ADDIU SP, SP, -64
9D005A38  AFBF003C   SW RA, 60(SP)
9D005A3C  AFBE0038   SW S8, 56(SP)
9D005A40  03A0F021   ADDU S8, SP, ZERO
9D005A44  AFC40040   SW A0, 64(S8)
9D005A48  AFC50044   SW A1, 68(S8)
32:                      int attackers = min(3, territories[tA].troops - 1);
9D005A4C  3C038000   LUI V1, -32768
9D005A50  8FC20040   LW V0, 64(S8)
9D005A54  246341B0   ADDIU V1, V1, 16816
9D005A58  000210C0   SLL V0, V0, 3
9D005A5C  00022080   SLL A0, V0, 2
9D005A60  00821023   SUBU V0, A0, V0
9D005A64  00621021   ADDU V0, V1, V0
9D005A68  8C420014   LW V0, 20(V0)
9D005A6C  2442FFFF   ADDIU V0, V0, -1
9D005A70  24030003   ADDIU V1, ZERO, 3
9D005A74  28440004   SLTI A0, V0, 4
9D005A78  0064100A   MOVZ V0, V1, A0
9D005A7C  AFC20020   SW V0, 32(S8)
33:                      int defenders = min(2, territories[tD].troops);
9D005A80  3C038000   LUI V1, -32768
9D005A84  8FC20044   LW V0, 68(S8)
9D005A88  246341B0   ADDIU V1, V1, 16816
9D005A8C  000210C0   SLL V0, V0, 3
9D005A90  00022080   SLL A0, V0, 2
9D005A94  00821023   SUBU V0, A0, V0
9D005A98  00621021   ADDU V0, V1, V0
9D005A9C  8C420014   LW V0, 20(V0)
9D005AA0  24030002   ADDIU V1, ZERO, 2
9D005AA4  28440003   SLTI A0, V0, 3
9D005AA8  0064100A   MOVZ V0, V1, A0
9D005AAC  AFC20024   SW V0, 36(S8)
34:                      attackerDice[0] = randint(1,6);     
9D005AB0  24040001   ADDIU A0, ZERO, 1
9D005AB4  24050006   ADDIU A1, ZERO, 6
9D005AB8  0F401966   JAL randint
9D005ABC  00000000   NOP
9D005AC0  00401821   ADDU V1, V0, ZERO
9D005AC4  3C028000   LUI V0, -32768
9D005AC8  AC4301E0   SW V1, 480(V0)
35:                      attackerDice[1] = attackers > 1? randint(1,6) : 0;
9D005ACC  8FC20020   LW V0, 32(S8)
9D005AD0  28420002   SLTI V0, V0, 2
9D005AD4  14400007   BNE V0, ZERO, 0x9D005AF4
9D005AD8  00000000   NOP
9D005ADC  24040001   ADDIU A0, ZERO, 1
9D005AE0  24050006   ADDIU A1, ZERO, 6
9D005AE4  0F401966   JAL randint
9D005AE8  00000000   NOP
9D005AEC  0B4016BE   J 0x9D005AF8
9D005AF0  00000000   NOP
9D005AF4  00001021   ADDU V0, ZERO, ZERO
9D005AF8  3C038000   LUI V1, -32768
9D005AFC  246301E0   ADDIU V1, V1, 480
9D005B00  AC620004   SW V0, 4(V1)
36:                      attackerDice[2] = attackers > 2? randint(1,6) : 0;
9D005B04  8FC20020   LW V0, 32(S8)
9D005B08  28420003   SLTI V0, V0, 3
9D005B0C  14400007   BNE V0, ZERO, 0x9D005B2C
9D005B10  00000000   NOP
9D005B14  24040001   ADDIU A0, ZERO, 1
9D005B18  24050006   ADDIU A1, ZERO, 6
9D005B1C  0F401966   JAL randint
9D005B20  00000000   NOP
9D005B24  0B4016CC   J 0x9D005B30
9D005B28  00000000   NOP
9D005B2C  00001021   ADDU V0, ZERO, ZERO
9D005B30  3C038000   LUI V1, -32768
9D005B34  246301E0   ADDIU V1, V1, 480
9D005B38  AC620008   SW V0, 8(V1)
37:                      defenderDice[0] = randint(1,6);     
9D005B3C  24040001   ADDIU A0, ZERO, 1
9D005B40  24050006   ADDIU A1, ZERO, 6
9D005B44  0F401966   JAL randint
9D005B48  00000000   NOP
9D005B4C  AF8280D8   SW V0, -32552(GP)
38:                      defenderDice[1] = defenders > 1? randint(1,6) : 0;
9D005B50  8FC20024   LW V0, 36(S8)
9D005B54  28420002   SLTI V0, V0, 2
9D005B58  14400007   BNE V0, ZERO, 0x9D005B78
9D005B5C  00000000   NOP
9D005B60  24040001   ADDIU A0, ZERO, 1
9D005B64  24050006   ADDIU A1, ZERO, 6
9D005B68  0F401966   JAL randint
9D005B6C  00000000   NOP
9D005B70  0B4016DF   J 0x9D005B7C
9D005B74  00000000   NOP
9D005B78  00001021   ADDU V0, ZERO, ZERO
9D005B7C  AF8280DC   SW V0, -32548(GP)
39:                  
40:                      SORT(attackerDice[0], attackerDice[1]);
9D005B80  3C028000   LUI V0, -32768
9D005B84  8C4301E0   LW V1, 480(V0)
9D005B88  3C028000   LUI V0, -32768
9D005B8C  244201E0   ADDIU V0, V0, 480
9D005B90  8C420004   LW V0, 4(V0)
9D005B94  0062102A   SLT V0, V1, V0
9D005B98  1040000D   BEQ V0, ZERO, 0x9D005BD0
9D005B9C  00000000   NOP
9D005BA0  3C028000   LUI V0, -32768
9D005BA4  8C4201E0   LW V0, 480(V0)
9D005BA8  AFC20028   SW V0, 40(S8)
9D005BAC  3C028000   LUI V0, -32768
9D005BB0  244201E0   ADDIU V0, V0, 480
9D005BB4  8C430004   LW V1, 4(V0)
9D005BB8  3C028000   LUI V0, -32768
9D005BBC  AC4301E0   SW V1, 480(V0)
9D005BC0  3C028000   LUI V0, -32768
9D005BC4  244201E0   ADDIU V0, V0, 480
9D005BC8  8FC30028   LW V1, 40(S8)
9D005BCC  AC430004   SW V1, 4(V0)
41:                      SORT(attackerDice[0], attackerDice[2]);
9D005BD0  3C028000   LUI V0, -32768
9D005BD4  8C4301E0   LW V1, 480(V0)
9D005BD8  3C028000   LUI V0, -32768
9D005BDC  244201E0   ADDIU V0, V0, 480
9D005BE0  8C420008   LW V0, 8(V0)
9D005BE4  0062102A   SLT V0, V1, V0
9D005BE8  1040000D   BEQ V0, ZERO, 0x9D005C20
9D005BEC  00000000   NOP
9D005BF0  3C028000   LUI V0, -32768
9D005BF4  8C4201E0   LW V0, 480(V0)
9D005BF8  AFC2002C   SW V0, 44(S8)
9D005BFC  3C028000   LUI V0, -32768
9D005C00  244201E0   ADDIU V0, V0, 480
9D005C04  8C430008   LW V1, 8(V0)
9D005C08  3C028000   LUI V0, -32768
9D005C0C  AC4301E0   SW V1, 480(V0)
9D005C10  3C028000   LUI V0, -32768
9D005C14  244201E0   ADDIU V0, V0, 480
9D005C18  8FC3002C   LW V1, 44(S8)
9D005C1C  AC430008   SW V1, 8(V0)
42:                      SORT(attackerDice[1], attackerDice[2]);
9D005C20  3C028000   LUI V0, -32768
9D005C24  244201E0   ADDIU V0, V0, 480
9D005C28  8C430004   LW V1, 4(V0)
9D005C2C  3C028000   LUI V0, -32768
9D005C30  244201E0   ADDIU V0, V0, 480
9D005C34  8C420008   LW V0, 8(V0)
9D005C38  0062102A   SLT V0, V1, V0
9D005C3C  1040000F   BEQ V0, ZERO, 0x9D005C7C
9D005C40  00000000   NOP
9D005C44  3C028000   LUI V0, -32768
9D005C48  244201E0   ADDIU V0, V0, 480
9D005C4C  8C420004   LW V0, 4(V0)
9D005C50  AFC20030   SW V0, 48(S8)
9D005C54  3C028000   LUI V0, -32768
9D005C58  244201E0   ADDIU V0, V0, 480
9D005C5C  8C430008   LW V1, 8(V0)
9D005C60  3C028000   LUI V0, -32768
9D005C64  244201E0   ADDIU V0, V0, 480
9D005C68  AC430004   SW V1, 4(V0)
9D005C6C  3C028000   LUI V0, -32768
9D005C70  244201E0   ADDIU V0, V0, 480
9D005C74  8FC30030   LW V1, 48(S8)
9D005C78  AC430008   SW V1, 8(V0)
43:                      SORT(defenderDice[0], defenderDice[1]);
9D005C7C  8F8380D8   LW V1, -32552(GP)
9D005C80  8F8280DC   LW V0, -32548(GP)
9D005C84  0062102A   SLT V0, V1, V0
9D005C88  10400007   BEQ V0, ZERO, 0x9D005CA8
9D005C8C  00000000   NOP
9D005C90  8F8280D8   LW V0, -32552(GP)
9D005C94  AFC20034   SW V0, 52(S8)
9D005C98  8F8280DC   LW V0, -32548(GP)
9D005C9C  AF8280D8   SW V0, -32552(GP)
9D005CA0  8FC20034   LW V0, 52(S8)
9D005CA4  AF8280DC   SW V0, -32548(GP)
44:                  
45:                      // Kill some troops
46:                      if(attackerDice[0] > defenderDice[0])
9D005CA8  3C028000   LUI V0, -32768
9D005CAC  8C4301E0   LW V1, 480(V0)
9D005CB0  8F8280D8   LW V0, -32552(GP)
9D005CB4  0043102A   SLT V0, V0, V1
9D005CB8  10400014   BEQ V0, ZERO, 0x9D005D0C
9D005CBC  00000000   NOP
47:                          territories[tD].troops -= 1;
9D005CC0  3C038000   LUI V1, -32768
9D005CC4  8FC20044   LW V0, 68(S8)
9D005CC8  246341B0   ADDIU V1, V1, 16816
9D005CCC  000210C0   SLL V0, V0, 3
9D005CD0  00022080   SLL A0, V0, 2
9D005CD4  00821023   SUBU V0, A0, V0
9D005CD8  00621021   ADDU V0, V1, V0
9D005CDC  8C420014   LW V0, 20(V0)
9D005CE0  2443FFFF   ADDIU V1, V0, -1
9D005CE4  3C048000   LUI A0, -32768
9D005CE8  8FC20044   LW V0, 68(S8)
9D005CEC  248441B0   ADDIU A0, A0, 16816
9D005CF0  000210C0   SLL V0, V0, 3
9D005CF4  00022880   SLL A1, V0, 2
9D005CF8  00A21023   SUBU V0, A1, V0
9D005CFC  00821021   ADDU V0, A0, V0
9D005D00  AC430014   SW V1, 20(V0)
9D005D04  0B401754   J 0x9D005D50
9D005D08  00000000   NOP
48:                      else
49:                          territories[tA].troops -= 1;
9D005D0C  3C038000   LUI V1, -32768
9D005D10  8FC20040   LW V0, 64(S8)
9D005D14  246341B0   ADDIU V1, V1, 16816
9D005D18  000210C0   SLL V0, V0, 3
9D005D1C  00022080   SLL A0, V0, 2
9D005D20  00821023   SUBU V0, A0, V0
9D005D24  00621021   ADDU V0, V1, V0
9D005D28  8C420014   LW V0, 20(V0)
9D005D2C  2443FFFF   ADDIU V1, V0, -1
9D005D30  3C048000   LUI A0, -32768
9D005D34  8FC20040   LW V0, 64(S8)
9D005D38  248441B0   ADDIU A0, A0, 16816
9D005D3C  000210C0   SLL V0, V0, 3
9D005D40  00022880   SLL A1, V0, 2
9D005D44  00A21023   SUBU V0, A1, V0
9D005D48  00821021   ADDU V0, A0, V0
9D005D4C  AC430014   SW V1, 20(V0)
50:                      if(attackers > 1 && defenders > 1)
9D005D50  8FC20020   LW V0, 32(S8)
9D005D54  28420002   SLTI V0, V0, 2
9D005D58  14400030   BNE V0, ZERO, 0x9D005E1C
9D005D5C  00000000   NOP
9D005D60  8FC20024   LW V0, 36(S8)
9D005D64  28420002   SLTI V0, V0, 2
9D005D68  1440002C   BNE V0, ZERO, 0x9D005E1C
9D005D6C  00000000   NOP
51:                      {
52:                          if(attackerDice[1] > defenderDice[1])
9D005D70  3C028000   LUI V0, -32768
9D005D74  244201E0   ADDIU V0, V0, 480
9D005D78  8C430004   LW V1, 4(V0)
9D005D7C  8F8280DC   LW V0, -32548(GP)
9D005D80  0043102A   SLT V0, V0, V1
9D005D84  10400014   BEQ V0, ZERO, 0x9D005DD8
9D005D88  00000000   NOP
53:                              territories[tD].troops -= 1;
9D005D8C  3C038000   LUI V1, -32768
9D005D90  8FC20044   LW V0, 68(S8)
9D005D94  246341B0   ADDIU V1, V1, 16816
9D005D98  000210C0   SLL V0, V0, 3
9D005D9C  00022080   SLL A0, V0, 2
9D005DA0  00821023   SUBU V0, A0, V0
9D005DA4  00621021   ADDU V0, V1, V0
9D005DA8  8C420014   LW V0, 20(V0)
9D005DAC  2443FFFF   ADDIU V1, V0, -1
9D005DB0  3C048000   LUI A0, -32768
9D005DB4  8FC20044   LW V0, 68(S8)
9D005DB8  248441B0   ADDIU A0, A0, 16816
9D005DBC  000210C0   SLL V0, V0, 3
9D005DC0  00022880   SLL A1, V0, 2
9D005DC4  00A21023   SUBU V0, A1, V0
9D005DC8  00821021   ADDU V0, A0, V0
9D005DCC  AC430014   SW V1, 20(V0)
9D005DD0  0B401787   J 0x9D005E1C
9D005DD4  00000000   NOP
54:                          else
55:                              territories[tA].troops -= 1;
9D005DD8  3C038000   LUI V1, -32768
9D005DDC  8FC20040   LW V0, 64(S8)
9D005DE0  246341B0   ADDIU V1, V1, 16816
9D005DE4  000210C0   SLL V0, V0, 3
9D005DE8  00022080   SLL A0, V0, 2
9D005DEC  00821023   SUBU V0, A0, V0
9D005DF0  00621021   ADDU V0, V1, V0
9D005DF4  8C420014   LW V0, 20(V0)
9D005DF8  2443FFFF   ADDIU V1, V0, -1
9D005DFC  3C048000   LUI A0, -32768
9D005E00  8FC20040   LW V0, 64(S8)
9D005E04  248441B0   ADDIU A0, A0, 16816
9D005E08  000210C0   SLL V0, V0, 3
9D005E0C  00022880   SLL A1, V0, 2
9D005E10  00A21023   SUBU V0, A1, V0
9D005E14  00821021   ADDU V0, A0, V0
9D005E18  AC430014   SW V1, 20(V0)
56:                      }
57:                  
58:                      logBattle(currentPlayer, territories[tD].owner, attackerDice[0],
9D005E1C  8F8480C8   LW A0, -32568(GP)
9D005E20  3C058000   LUI A1, -32768
9D005E24  8FC20044   LW V0, 68(S8)
9D005E28  000210C0   SLL V0, V0, 3
9D005E2C  00021880   SLL V1, V0, 2
9D005E30  00621823   SUBU V1, V1, V0
9D005E34  24A241B0   ADDIU V0, A1, 16816
9D005E38  00621021   ADDU V0, V1, V0
9D005E3C  8C450010   LW A1, 16(V0)
9D005E40  3C028000   LUI V0, -32768
9D005E44  8C4301E0   LW V1, 480(V0)
9D005E48  3C028000   LUI V0, -32768
9D005E4C  244201E0   ADDIU V0, V0, 480
9D005E50  8C420004   LW V0, 4(V0)
9D005E54  3C068000   LUI A2, -32768
9D005E58  24C601E0   ADDIU A2, A2, 480
9D005E5C  8CC80008   LW T0, 8(A2)
9D005E60  8F8780D8   LW A3, -32552(GP)
9D005E64  8F8680DC   LW A2, -32548(GP)
9D005E68  AFA80010   SW T0, 16(SP)
9D005E6C  AFA70014   SW A3, 20(SP)
9D005E70  AFA60018   SW A2, 24(SP)
9D005E74  00603021   ADDU A2, V1, ZERO
9D005E78  00403821   ADDU A3, V0, ZERO
9D005E7C  0F401DA2   JAL logBattle
9D005E80  00000000   NOP
59:                              attackerDice[1], attackerDice[2], defenderDice[0],
60:                              defenderDice[1]);
61:                  }
9D005E84  03C0E821   ADDU SP, S8, ZERO
9D005E88  8FBF003C   LW RA, 60(SP)
9D005E8C  8FBE0038   LW S8, 56(SP)
9D005E90  27BD0040   ADDIU SP, SP, 64
9D005E94  03E00008   JR RA
9D005E98  00000000   NOP
62:                  
63:                  int predUnowned(int t)
64:                  {
9D005E9C  27BDFFF8   ADDIU SP, SP, -8
9D005EA0  AFBE0004   SW S8, 4(SP)
9D005EA4  03A0F021   ADDU S8, SP, ZERO
9D005EA8  AFC40008   SW A0, 8(S8)
65:                      return territories[t].owner == -1;
9D005EAC  3C048000   LUI A0, -32768
9D005EB0  8FC20008   LW V0, 8(S8)
9D005EB4  000210C0   SLL V0, V0, 3
9D005EB8  00021880   SLL V1, V0, 2
9D005EBC  00621823   SUBU V1, V1, V0
9D005EC0  248241B0   ADDIU V0, A0, 16816
9D005EC4  00621021   ADDU V0, V1, V0
9D005EC8  8C420010   LW V0, 16(V0)
9D005ECC  24420001   ADDIU V0, V0, 1
9D005ED0  2C420001   SLTIU V0, V0, 1
66:                  }
9D005ED4  03C0E821   ADDU SP, S8, ZERO
9D005ED8  8FBE0004   LW S8, 4(SP)
9D005EDC  27BD0008   ADDIU SP, SP, 8
9D005EE0  03E00008   JR RA
9D005EE4  00000000   NOP
67:                  int predOwnedCurrent(int t)
68:                  {
9D005EE8  27BDFFF8   ADDIU SP, SP, -8
9D005EEC  AFBE0004   SW S8, 4(SP)
9D005EF0  03A0F021   ADDU S8, SP, ZERO
9D005EF4  AFC40008   SW A0, 8(S8)
69:                      return territories[t].owner == currentPlayer;
9D005EF8  3C048000   LUI A0, -32768
9D005EFC  8FC20008   LW V0, 8(S8)
9D005F00  000210C0   SLL V0, V0, 3
9D005F04  00021880   SLL V1, V0, 2
9D005F08  00621823   SUBU V1, V1, V0
9D005F0C  248241B0   ADDIU V0, A0, 16816
9D005F10  00621021   ADDU V0, V1, V0
9D005F14  8C430010   LW V1, 16(V0)
9D005F18  8F8280C8   LW V0, -32568(GP)
9D005F1C  00621026   XOR V0, V1, V0
9D005F20  2C420001   SLTIU V0, V0, 1
70:                  }
9D005F24  03C0E821   ADDU SP, S8, ZERO
9D005F28  8FBE0004   LW S8, 4(SP)
9D005F2C  27BD0008   ADDIU SP, SP, 8
9D005F30  03E00008   JR RA
9D005F34  00000000   NOP
71:                  int predOwnerOther(int t)
72:                  {
9D005F38  27BDFFE8   ADDIU SP, SP, -24
9D005F3C  AFBF0014   SW RA, 20(SP)
9D005F40  AFBE0010   SW S8, 16(SP)
9D005F44  03A0F021   ADDU S8, SP, ZERO
9D005F48  AFC40018   SW A0, 24(S8)
73:                      return !predOwnedCurrent(t);
9D005F4C  8FC40018   LW A0, 24(S8)
9D005F50  0F4017BA   JAL predOwnedCurrent
9D005F54  00000000   NOP
9D005F58  2C420001   SLTIU V0, V0, 1
74:                  }
9D005F5C  03C0E821   ADDU SP, S8, ZERO
9D005F60  8FBF0014   LW RA, 20(SP)
9D005F64  8FBE0010   LW S8, 16(SP)
9D005F68  27BD0018   ADDIU SP, SP, 24
9D005F6C  03E00008   JR RA
9D005F70  00000000   NOP
75:                  int predAttackSource(int t)
76:                  {
9D005F74  27BDFFF0   ADDIU SP, SP, -16
9D005F78  AFBE000C   SW S8, 12(SP)
9D005F7C  03A0F021   ADDU S8, SP, ZERO
9D005F80  AFC40010   SW A0, 16(S8)
77:                      if(territories[t].owner != currentPlayer)
9D005F84  3C048000   LUI A0, -32768
9D005F88  8FC20010   LW V0, 16(S8)
9D005F8C  000210C0   SLL V0, V0, 3
9D005F90  00021880   SLL V1, V0, 2
9D005F94  00621823   SUBU V1, V1, V0
9D005F98  248241B0   ADDIU V0, A0, 16816
9D005F9C  00621021   ADDU V0, V1, V0
9D005FA0  8C430010   LW V1, 16(V0)
9D005FA4  8F8280C8   LW V0, -32568(GP)
9D005FA8  10620004   BEQ V1, V0, 0x9D005FBC
9D005FAC  00000000   NOP
78:                          return 0;
9D005FB0  00001021   ADDU V0, ZERO, ZERO
9D005FB4  0B40182E   J 0x9D0060B8
9D005FB8  00000000   NOP
79:                      if(territories[t].troops == 1)
9D005FBC  3C038000   LUI V1, -32768
9D005FC0  8FC20010   LW V0, 16(S8)
9D005FC4  246341B0   ADDIU V1, V1, 16816
9D005FC8  000210C0   SLL V0, V0, 3
9D005FCC  00022080   SLL A0, V0, 2
9D005FD0  00821023   SUBU V0, A0, V0
9D005FD4  00621021   ADDU V0, V1, V0
9D005FD8  8C430014   LW V1, 20(V0)
9D005FDC  24020001   ADDIU V0, ZERO, 1
9D005FE0  14620004   BNE V1, V0, 0x9D005FF4
9D005FE4  00000000   NOP
80:                          return 0;
9D005FE8  00001021   ADDU V0, ZERO, ZERO
9D005FEC  0B40182E   J 0x9D0060B8
9D005FF0  00000000   NOP
81:                      for(int i = 0; i < MAX_NEIGHBORS; i++)
9D005FF4  AFC00000   SW ZERO, 0(S8)
9D005FF8  0B401829   J 0x9D0060A4
9D005FFC  00000000   NOP
9D006098  8FC20000   LW V0, 0(S8)
9D00609C  24420001   ADDIU V0, V0, 1
9D0060A0  AFC20000   SW V0, 0(S8)
9D0060A4  8FC20000   LW V0, 0(S8)
9D0060A8  28420002   SLTI V0, V0, 2
9D0060AC  1440FFD4   BNE V0, ZERO, 0x9D006000
9D0060B0  00000000   NOP
82:                      {
83:                          if(territories[t].neighbors[i] != -1 &&
9D006000  3C048000   LUI A0, -32768
9D006004  8FC20010   LW V0, 16(S8)
9D006008  00021040   SLL V0, V0, 1
9D00600C  00021880   SLL V1, V0, 2
9D006010  00621823   SUBU V1, V1, V0
9D006014  8FC20000   LW V0, 0(S8)
9D006018  00621021   ADDU V0, V1, V0
9D00601C  248341B0   ADDIU V1, A0, 16816
9D006020  00021080   SLL V0, V0, 2
9D006024  00621021   ADDU V0, V1, V0
9D006028  8C430004   LW V1, 4(V0)
9D00602C  2402FFFF   ADDIU V0, ZERO, -1
9D006030  10620019   BEQ V1, V0, 0x9D006098
9D006034  00000000   NOP
9D006084  10620004   BEQ V1, V0, 0x9D006098
9D006088  00000000   NOP
84:                                  territories[territories[t].neighbors[i]].owner !=
9D006038  3C048000   LUI A0, -32768
9D00603C  8FC20010   LW V0, 16(S8)
9D006040  00021040   SLL V0, V0, 1
9D006044  00021880   SLL V1, V0, 2
9D006048  00621823   SUBU V1, V1, V0
9D00604C  8FC20000   LW V0, 0(S8)
9D006050  00621021   ADDU V0, V1, V0
9D006054  248341B0   ADDIU V1, A0, 16816
9D006058  00021080   SLL V0, V0, 2
9D00605C  00621021   ADDU V0, V1, V0
9D006060  8C420004   LW V0, 4(V0)
9D006064  3C048000   LUI A0, -32768
9D006068  000210C0   SLL V0, V0, 3
9D00606C  00021880   SLL V1, V0, 2
9D006070  00621823   SUBU V1, V1, V0
9D006074  248241B0   ADDIU V0, A0, 16816
9D006078  00621021   ADDU V0, V1, V0
9D00607C  8C430010   LW V1, 16(V0)
9D006080  8F8280C8   LW V0, -32568(GP)
85:                                  currentPlayer)
86:                          {
87:                              return 1;
9D00608C  24020001   ADDIU V0, ZERO, 1
9D006090  0B40182E   J 0x9D0060B8
9D006094  00000000   NOP
88:                          }
89:                      }
90:                      return 0;
9D0060B4  00001021   ADDU V0, ZERO, ZERO
91:                  }
9D0060B8  03C0E821   ADDU SP, S8, ZERO
9D0060BC  8FBE000C   LW S8, 12(SP)
9D0060C0  27BD0010   ADDIU SP, SP, 16
9D0060C4  03E00008   JR RA
9D0060C8  00000000   NOP
92:                  int predAttackTarget(int t)
93:                  {
9D0060CC  27BDFFE8   ADDIU SP, SP, -24
9D0060D0  AFBF0014   SW RA, 20(SP)
9D0060D4  AFBE0010   SW S8, 16(SP)
9D0060D8  03A0F021   ADDU S8, SP, ZERO
9D0060DC  AFC40018   SW A0, 24(S8)
94:                      if(territories[t].owner == currentPlayer)
9D0060E0  3C048000   LUI A0, -32768
9D0060E4  8FC20018   LW V0, 24(S8)
9D0060E8  000210C0   SLL V0, V0, 3
9D0060EC  00021880   SLL V1, V0, 2
9D0060F0  00621823   SUBU V1, V1, V0
9D0060F4  248241B0   ADDIU V0, A0, 16816
9D0060F8  00621021   ADDU V0, V1, V0
9D0060FC  8C430010   LW V1, 16(V0)
9D006100  8F8280C8   LW V0, -32568(GP)
9D006104  14620004   BNE V1, V0, 0x9D006118
9D006108  00000000   NOP
95:                          return 0;
9D00610C  00001021   ADDU V0, ZERO, ZERO
9D006110  0B401851   J 0x9D006144
9D006114  00000000   NOP
96:                      if(!isNeighbor(source, t))
9D006118  8F8280E0   LW V0, -32544(GP)
9D00611C  00402021   ADDU A0, V0, ZERO
9D006120  8FC50018   LW A1, 24(S8)
9D006124  0F401667   JAL isNeighbor
9D006128  00000000   NOP
9D00612C  14400004   BNE V0, ZERO, 0x9D006140
9D006130  00000000   NOP
97:                          return 0;
9D006134  00001021   ADDU V0, ZERO, ZERO
9D006138  0B401851   J 0x9D006144
9D00613C  00000000   NOP
98:                      return 1;
9D006140  24020001   ADDIU V0, ZERO, 1
99:                  }
9D006144  03C0E821   ADDU SP, S8, ZERO
9D006148  8FBF0014   LW RA, 20(SP)
9D00614C  8FBE0010   LW S8, 16(SP)
9D006150  27BD0018   ADDIU SP, SP, 24
9D006154  03E00008   JR RA
9D006158  00000000   NOP
100:                 int predMoveSource(int t)
101:                 {
9D00615C  27BDFFF0   ADDIU SP, SP, -16
9D006160  AFBE000C   SW S8, 12(SP)
9D006164  03A0F021   ADDU S8, SP, ZERO
9D006168  AFC40010   SW A0, 16(S8)
102:                     if(territories[t].owner != currentPlayer)
9D00616C  3C048000   LUI A0, -32768
9D006170  8FC20010   LW V0, 16(S8)
9D006174  000210C0   SLL V0, V0, 3
9D006178  00021880   SLL V1, V0, 2
9D00617C  00621823   SUBU V1, V1, V0
9D006180  248241B0   ADDIU V0, A0, 16816
9D006184  00621021   ADDU V0, V1, V0
9D006188  8C430010   LW V1, 16(V0)
9D00618C  8F8280C8   LW V0, -32568(GP)
9D006190  10620004   BEQ V1, V0, 0x9D0061A4
9D006194  00000000   NOP
103:                         return 0;
9D006198  00001021   ADDU V0, ZERO, ZERO
9D00619C  0B4018A8   J 0x9D0062A0
9D0061A0  00000000   NOP
104:                     if(territories[t].troops == 1)
9D0061A4  3C038000   LUI V1, -32768
9D0061A8  8FC20010   LW V0, 16(S8)
9D0061AC  246341B0   ADDIU V1, V1, 16816
9D0061B0  000210C0   SLL V0, V0, 3
9D0061B4  00022080   SLL A0, V0, 2
9D0061B8  00821023   SUBU V0, A0, V0
9D0061BC  00621021   ADDU V0, V1, V0
9D0061C0  8C430014   LW V1, 20(V0)
9D0061C4  24020001   ADDIU V0, ZERO, 1
9D0061C8  14620004   BNE V1, V0, 0x9D0061DC
9D0061CC  00000000   NOP
105:                         return 0;
9D0061D0  00001021   ADDU V0, ZERO, ZERO
9D0061D4  0B4018A8   J 0x9D0062A0
9D0061D8  00000000   NOP
106:                     for(int i = 0; i < MAX_NEIGHBORS; i++)
9D0061DC  AFC00000   SW ZERO, 0(S8)
9D0061E0  0B4018A3   J 0x9D00628C
9D0061E4  00000000   NOP
9D006280  8FC20000   LW V0, 0(S8)
9D006284  24420001   ADDIU V0, V0, 1
9D006288  AFC20000   SW V0, 0(S8)
9D00628C  8FC20000   LW V0, 0(S8)
9D006290  28420002   SLTI V0, V0, 2
9D006294  1440FFD4   BNE V0, ZERO, 0x9D0061E8
9D006298  00000000   NOP
107:                     {
108:                         if(territories[t].neighbors[i] != -1 &&
9D0061E8  3C048000   LUI A0, -32768
9D0061EC  8FC20010   LW V0, 16(S8)
9D0061F0  00021040   SLL V0, V0, 1
9D0061F4  00021880   SLL V1, V0, 2
9D0061F8  00621823   SUBU V1, V1, V0
9D0061FC  8FC20000   LW V0, 0(S8)
9D006200  00621021   ADDU V0, V1, V0
9D006204  248341B0   ADDIU V1, A0, 16816
9D006208  00021080   SLL V0, V0, 2
9D00620C  00621021   ADDU V0, V1, V0
9D006210  8C430004   LW V1, 4(V0)
9D006214  2402FFFF   ADDIU V0, ZERO, -1
9D006218  10620019   BEQ V1, V0, 0x9D006280
9D00621C  00000000   NOP
9D00626C  14620004   BNE V1, V0, 0x9D006280
9D006270  00000000   NOP
109:                                 territories[territories[t].neighbors[i]].owner == currentPlayer)
9D006220  3C048000   LUI A0, -32768
9D006224  8FC20010   LW V0, 16(S8)
9D006228  00021040   SLL V0, V0, 1
9D00622C  00021880   SLL V1, V0, 2
9D006230  00621823   SUBU V1, V1, V0
9D006234  8FC20000   LW V0, 0(S8)
9D006238  00621021   ADDU V0, V1, V0
9D00623C  248341B0   ADDIU V1, A0, 16816
9D006240  00021080   SLL V0, V0, 2
9D006244  00621021   ADDU V0, V1, V0
9D006248  8C420004   LW V0, 4(V0)
9D00624C  3C048000   LUI A0, -32768
9D006250  000210C0   SLL V0, V0, 3
9D006254  00021880   SLL V1, V0, 2
9D006258  00621823   SUBU V1, V1, V0
9D00625C  248241B0   ADDIU V0, A0, 16816
9D006260  00621021   ADDU V0, V1, V0
9D006264  8C430010   LW V1, 16(V0)
9D006268  8F8280C8   LW V0, -32568(GP)
110:                         {
111:                             return 1;
9D006274  24020001   ADDIU V0, ZERO, 1
9D006278  0B4018A8   J 0x9D0062A0
9D00627C  00000000   NOP
112:                         }
113:                     }
114:                     return 0;
9D00629C  00001021   ADDU V0, ZERO, ZERO
115:                 }
9D0062A0  03C0E821   ADDU SP, S8, ZERO
9D0062A4  8FBE000C   LW S8, 12(SP)
9D0062A8  27BD0010   ADDIU SP, SP, 16
9D0062AC  03E00008   JR RA
9D0062B0  00000000   NOP
116:                 int predMoveTarget(int t)
117:                 {
9D0062B4  27BDFFF8   ADDIU SP, SP, -8
9D0062B8  AFBE0004   SW S8, 4(SP)
9D0062BC  03A0F021   ADDU S8, SP, ZERO
9D0062C0  AFC40008   SW A0, 8(S8)
118:                     if(t == source)
9D0062C4  8F8280E0   LW V0, -32544(GP)
9D0062C8  8FC30008   LW V1, 8(S8)
9D0062CC  14620004   BNE V1, V0, 0x9D0062E0
9D0062D0  00000000   NOP
119:                         return 0;
9D0062D4  00001021   ADDU V0, ZERO, ZERO
9D0062D8  0B4018D2   J 0x9D006348
9D0062DC  00000000   NOP
120:                     if(territories[t].owner != currentPlayer)
9D0062E0  3C048000   LUI A0, -32768
9D0062E4  8FC20008   LW V0, 8(S8)
9D0062E8  000210C0   SLL V0, V0, 3
9D0062EC  00021880   SLL V1, V0, 2
9D0062F0  00621823   SUBU V1, V1, V0
9D0062F4  248241B0   ADDIU V0, A0, 16816
9D0062F8  00621021   ADDU V0, V1, V0
9D0062FC  8C430010   LW V1, 16(V0)
9D006300  8F8280C8   LW V0, -32568(GP)
9D006304  10620004   BEQ V1, V0, 0x9D006318
9D006308  00000000   NOP
121:                         return 0;
9D00630C  00001021   ADDU V0, ZERO, ZERO
9D006310  0B4018D2   J 0x9D006348
9D006314  00000000   NOP
122:                     if(connectedTerritories[t] != 1)
9D006318  8FC20008   LW V0, 8(S8)
9D00631C  00021880   SLL V1, V0, 2
9D006320  27828084   ADDIU V0, GP, -32636
9D006324  00621021   ADDU V0, V1, V0
9D006328  8C430000   LW V1, 0(V0)
9D00632C  24020001   ADDIU V0, ZERO, 1
9D006330  10620004   BEQ V1, V0, 0x9D006344
9D006334  00000000   NOP
123:                         return 0;
9D006338  00001021   ADDU V0, ZERO, ZERO
9D00633C  0B4018D2   J 0x9D006348
9D006340  00000000   NOP
124:                     return 1;
9D006344  24020001   ADDIU V0, ZERO, 1
125:                 }
9D006348  03C0E821   ADDU SP, S8, ZERO
9D00634C  8FBE0004   LW S8, 4(SP)
9D006350  27BD0008   ADDIU SP, SP, 8
9D006354  03E00008   JR RA
9D006358  00000000   NOP
126:                 
127:                 // Find all connected territories by doing a breadth-first search of the
128:                 // territory graph. XXX: This uses quite a bit of stack, make sure there's
129:                 // enough space on the micro!
130:                 // In connectedTerritories: 
131:                 // -1 => visited and not connected, 0 => not visited, 1 => connected
132:                 void computeConnected(int sourceTerritory)
133:                 {
9D00635C  27BDFFD8   ADDIU SP, SP, -40
9D006360  AFBE0024   SW S8, 36(SP)
9D006364  03A0F021   ADDU S8, SP, ZERO
9D006368  AFC40028   SW A0, 40(S8)
134:                     int stack[NUM_TERRITORIES];
135:                     int stackIdx = 0;
9D00636C  AFC00000   SW ZERO, 0(S8)
136:                     int sourceOwner = territories[sourceTerritory].owner;
9D006370  3C048000   LUI A0, -32768
9D006374  8FC20028   LW V0, 40(S8)
9D006378  000210C0   SLL V0, V0, 3
9D00637C  00021880   SLL V1, V0, 2
9D006380  00621823   SUBU V1, V1, V0
9D006384  248241B0   ADDIU V0, A0, 16816
9D006388  00621021   ADDU V0, V1, V0
9D00638C  8C420010   LW V0, 16(V0)
9D006390  AFC2000C   SW V0, 12(S8)
137:                     
138:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D006394  AFC00004   SW ZERO, 4(S8)
9D006398  0B4018F0   J 0x9D0063C0
9D00639C  00000000   NOP
9D0063B4  8FC20004   LW V0, 4(S8)
9D0063B8  24420001   ADDIU V0, V0, 1
9D0063BC  AFC20004   SW V0, 4(S8)
9D0063C0  8FC20004   LW V0, 4(S8)
9D0063C4  28420002   SLTI V0, V0, 2
9D0063C8  1440FFF5   BNE V0, ZERO, 0x9D0063A0
9D0063CC  00000000   NOP
139:                         connectedTerritories[i] = 0;
9D0063A0  8FC20004   LW V0, 4(S8)
9D0063A4  00021880   SLL V1, V0, 2
9D0063A8  27828084   ADDIU V0, GP, -32636
9D0063AC  00621021   ADDU V0, V1, V0
9D0063B0  AC400000   SW ZERO, 0(V0)
140:                 
141:                     stack[stackIdx++] = sourceTerritory;
9D0063D0  8FC20000   LW V0, 0(S8)
9D0063D4  00021080   SLL V0, V0, 2
9D0063D8  03C21021   ADDU V0, S8, V0
9D0063DC  8FC30028   LW V1, 40(S8)
9D0063E0  AC430018   SW V1, 24(V0)
9D0063E4  8FC20000   LW V0, 0(S8)
9D0063E8  24420001   ADDIU V0, V0, 1
9D0063EC  AFC20000   SW V0, 0(S8)
142:                     connectedTerritories[sourceTerritory] = 1;
9D0063F0  8FC20028   LW V0, 40(S8)
9D0063F4  00021880   SLL V1, V0, 2
9D0063F8  27828084   ADDIU V0, GP, -32636
9D0063FC  00621021   ADDU V0, V1, V0
9D006400  24030001   ADDIU V1, ZERO, 1
9D006404  AC430000   SW V1, 0(V0)
143:                     
144:                     while(stackIdx > 0)
9D006408  0B40195E   J 0x9D006578
9D00640C  00000000   NOP
9D006578  8FC20000   LW V0, 0(S8)
9D00657C  1C40FFA4   BGTZ V0, 0x9D006410
9D006580  00000000   NOP
145:                     {
146:                         int t = stack[--stackIdx];
9D006410  8FC20000   LW V0, 0(S8)
9D006414  2442FFFF   ADDIU V0, V0, -1
9D006418  AFC20000   SW V0, 0(S8)
9D00641C  8FC20000   LW V0, 0(S8)
9D006420  00021080   SLL V0, V0, 2
9D006424  03C21021   ADDU V0, S8, V0
9D006428  8C420018   LW V0, 24(V0)
9D00642C  AFC20010   SW V0, 16(S8)
147:                         for(int i = 0; i < MAX_NEIGHBORS; i++)
9D006430  AFC00008   SW ZERO, 8(S8)
9D006434  0B401957   J 0x9D00655C
9D006438  00000000   NOP
9D006550  8FC20008   LW V0, 8(S8)
9D006554  24420001   ADDIU V0, V0, 1
9D006558  AFC20008   SW V0, 8(S8)
9D00655C  8FC20008   LW V0, 8(S8)
9D006560  28420002   SLTI V0, V0, 2
9D006564  1440FFB5   BNE V0, ZERO, 0x9D00643C
9D006568  00000000   NOP
9D00656C  0B40195E   J 0x9D006578
9D006570  00000000   NOP
148:                         {
149:                             if(territories[t].neighbors[i] == -1)
9D00643C  3C048000   LUI A0, -32768
9D006440  8FC20010   LW V0, 16(S8)
9D006444  00021040   SLL V0, V0, 1
9D006448  00021880   SLL V1, V0, 2
9D00644C  00621823   SUBU V1, V1, V0
9D006450  8FC20008   LW V0, 8(S8)
9D006454  00621021   ADDU V0, V1, V0
9D006458  248341B0   ADDIU V1, A0, 16816
9D00645C  00021080   SLL V0, V0, 2
9D006460  00621021   ADDU V0, V1, V0
9D006464  8C430004   LW V1, 4(V0)
9D006468  2402FFFF   ADDIU V0, ZERO, -1
9D00646C  10620041   BEQ V1, V0, 0x9D006574
9D006470  00000000   NOP
150:                                 break;
9D006574  00000000   NOP
151:                             int neighbor = territories[t].neighbors[i];
9D006474  3C048000   LUI A0, -32768
9D006478  8FC20010   LW V0, 16(S8)
9D00647C  00021040   SLL V0, V0, 1
9D006480  00021880   SLL V1, V0, 2
9D006484  00621823   SUBU V1, V1, V0
9D006488  8FC20008   LW V0, 8(S8)
9D00648C  00621021   ADDU V0, V1, V0
9D006490  248341B0   ADDIU V1, A0, 16816
9D006494  00021080   SLL V0, V0, 2
9D006498  00621021   ADDU V0, V1, V0
9D00649C  8C420004   LW V0, 4(V0)
9D0064A0  AFC20014   SW V0, 20(S8)
152:                             if(connectedTerritories[neighbor])
9D0064A4  8FC20014   LW V0, 20(S8)
9D0064A8  00021880   SLL V1, V0, 2
9D0064AC  27828084   ADDIU V0, GP, -32636
9D0064B0  00621021   ADDU V0, V1, V0
9D0064B4  8C420000   LW V0, 0(V0)
9D0064B8  14400024   BNE V0, ZERO, 0x9D00654C
9D0064BC  00000000   NOP
153:                                 continue;
9D00654C  00000000   NOP
154:                             if(territories[neighbor].owner == sourceOwner)
9D0064C0  3C048000   LUI A0, -32768
9D0064C4  8FC20014   LW V0, 20(S8)
9D0064C8  000210C0   SLL V0, V0, 3
9D0064CC  00021880   SLL V1, V0, 2
9D0064D0  00621823   SUBU V1, V1, V0
9D0064D4  248241B0   ADDIU V0, A0, 16816
9D0064D8  00621021   ADDU V0, V1, V0
9D0064DC  8C430010   LW V1, 16(V0)
9D0064E0  8FC2000C   LW V0, 12(S8)
9D0064E4  14620011   BNE V1, V0, 0x9D00652C
9D0064E8  00000000   NOP
155:                             {
156:                                 stack[stackIdx++] = neighbor;
9D0064EC  8FC20000   LW V0, 0(S8)
9D0064F0  00021080   SLL V0, V0, 2
9D0064F4  03C21021   ADDU V0, S8, V0
9D0064F8  8FC30014   LW V1, 20(S8)
9D0064FC  AC430018   SW V1, 24(V0)
9D006500  8FC20000   LW V0, 0(S8)
9D006504  24420001   ADDIU V0, V0, 1
9D006508  AFC20000   SW V0, 0(S8)
157:                                 connectedTerritories[neighbor] = 1;
9D00650C  8FC20014   LW V0, 20(S8)
9D006510  00021880   SLL V1, V0, 2
9D006514  27828084   ADDIU V0, GP, -32636
9D006518  00621021   ADDU V0, V1, V0
9D00651C  24030001   ADDIU V1, ZERO, 1
9D006520  AC430000   SW V1, 0(V0)
9D006524  0B401954   J 0x9D006550
9D006528  00000000   NOP
158:                             }
159:                             else
160:                                 connectedTerritories[neighbor] = -1;
9D00652C  8FC20014   LW V0, 20(S8)
9D006530  00021880   SLL V1, V0, 2
9D006534  27828084   ADDIU V0, GP, -32636
9D006538  00621021   ADDU V0, V1, V0
9D00653C  2403FFFF   ADDIU V1, ZERO, -1
9D006540  AC430000   SW V1, 0(V0)
9D006544  0B401954   J 0x9D006550
9D006548  00000000   NOP
161:                         }
162:                     }
163:                 }
9D006584  03C0E821   ADDU SP, S8, ZERO
9D006588  8FBE0024   LW S8, 36(SP)
9D00658C  27BD0028   ADDIU SP, SP, 40
9D006590  03E00008   JR RA
9D006594  00000000   NOP
---  /home/jacob/Documents/477/RISK/game/log.c  ---------------------------------------------------------
1:                   // log.c:
2:                   // Game logs: creating and storing
3:                   //
4:                   // Part of R.I.S.K
5:                   // ECE 477 Group 2, Spring 2015
6:                   
7:                   #include "types.h"
8:                   #include "log.h"
9:                   #include "io.h"
10:                  
11:                  #include <stdlib.h>
12:                  
13:                  #ifdef HEAP
14:                  LogEntry * gamelog;
15:                  int gamelogCapacity;
16:                  int gamelogSize;
17:                  #else
18:                  LogEntry stLog[4000];
19:                  LogEntry * gamelog = stLog;
20:                  int gamelogCapacity = 4000;
21:                  int gamelogSize;
22:                  #endif
23:                  
24:                  void addLogEntry(LogEntry entry)
25:                  {
9D007514  27BDFFE8   ADDIU SP, SP, -24
9D007518  AFBF0014   SW RA, 20(SP)
9D00751C  AFBE0010   SW S8, 16(SP)
9D007520  03A0F021   ADDU S8, SP, ZERO
9D007524  AFC40018   SW A0, 24(S8)
26:                      if(gamelogSize < gamelogCapacity)
9D007528  8F8380E8   LW V1, -32536(GP)
9D00752C  8F828014   LW V0, -32748(GP)
9D007530  0062102A   SLT V0, V1, V0
9D007534  1040000C   BEQ V0, ZERO, 0x9D007568
9D007538  00000000   NOP
27:                      {
28:                          gamelog[gamelogSize++] = entry;
9D00753C  8F848010   LW A0, -32752(GP)
9D007540  8F8280E8   LW V0, -32536(GP)
9D007544  00401821   ADDU V1, V0, ZERO
9D007548  00031880   SLL V1, V1, 2
9D00754C  00831821   ADDU V1, A0, V1
9D007550  8FC40018   LW A0, 24(S8)
9D007554  AC640000   SW A0, 0(V1)
9D007558  24420001   ADDIU V0, V0, 1
9D00755C  AF8280E8   SW V0, -32536(GP)
29:                          return;
9D007560  0B401D63   J 0x9D00758C
9D007564  00000000   NOP
30:                      }
31:                  
32:                  #ifdef HEAP
33:                      gamelogCapacity += 2000;
34:                      gamelog = realloc(gamelog, gamelogCapacity);
35:                      if(!gamelog)
36:                      {
37:                          PANIC("failed to allocate memory for game log");
38:                      }
39:                      gamelog[gamelogSize++] = entry;
40:                  #else
41:                      PANIC("game log overflowed, no heap available");
9D007568  24040029   ADDIU A0, ZERO, 41
9D00756C  3C029D01   LUI V0, -25343
9D007570  2445AE54   ADDIU A1, V0, -20908
9D007574  3C029D01   LUI V0, -25343
9D007578  2446AE8C   ADDIU A2, V0, -20852
9D00757C  3C029D01   LUI V0, -25343
9D007580  2447AE64   ADDIU A3, V0, -20892
9D007584  0F401971   JAL panic
9D007588  00000000   NOP
42:                  #endif
43:                  }
9D00758C  03C0E821   ADDU SP, S8, ZERO
9D007590  8FBF0014   LW RA, 20(SP)
9D007594  8FBE0010   LW S8, 16(SP)
9D007598  27BD0018   ADDIU SP, SP, 24
9D00759C  03E00008   JR RA
9D0075A0  00000000   NOP
44:                  
45:                  void clearLog()
46:                  {
9D0075A4  27BDFFF8   ADDIU SP, SP, -8
9D0075A8  AFBE0004   SW S8, 4(SP)
9D0075AC  03A0F021   ADDU S8, SP, ZERO
47:                      gamelogSize = 0;
9D0075B0  AF8080E8   SW ZERO, -32536(GP)
48:                  }
9D0075B4  03C0E821   ADDU SP, S8, ZERO
9D0075B8  8FBE0004   LW S8, 4(SP)
9D0075BC  27BD0008   ADDIU SP, SP, 8
9D0075C0  03E00008   JR RA
9D0075C4  00000000   NOP
49:                  
50:                  void logAttack(int aPlayer, int dPlayer, int aTerritory, int dTerritory)
51:                  {
9D0075C8  27BDFFE0   ADDIU SP, SP, -32
9D0075CC  AFBF001C   SW RA, 28(SP)
9D0075D0  AFBE0018   SW S8, 24(SP)
9D0075D4  03A0F021   ADDU S8, SP, ZERO
9D0075D8  AFC40020   SW A0, 32(S8)
9D0075DC  AFC50024   SW A1, 36(S8)
9D0075E0  AFC60028   SW A2, 40(S8)
9D0075E4  AFC7002C   SW A3, 44(S8)
52:                      LogEntry le = {
9D0075E8  8FC20020   LW V0, 32(S8)
9D0075EC  304200FF   ANDI V0, V0, 255
9D0075F0  30420007   ANDI V0, V0, 7
9D0075F4  304600FF   ANDI A2, V0, 255
9D0075F8  8FC20024   LW V0, 36(S8)
9D0075FC  304200FF   ANDI V0, V0, 255
9D007600  30420007   ANDI V0, V0, 7
9D007604  304500FF   ANDI A1, V0, 255
9D007608  8FC20028   LW V0, 40(S8)
9D00760C  304200FF   ANDI V0, V0, 255
9D007610  3042003F   ANDI V0, V0, 63
9D007614  304400FF   ANDI A0, V0, 255
9D007618  8FC2002C   LW V0, 44(S8)
9D00761C  304200FF   ANDI V0, V0, 255
9D007620  3042003F   ANDI V0, V0, 63
9D007624  304300FF   ANDI V1, V0, 255
9D007628  AFC00010   SW ZERO, 16(S8)
9D00762C  24020001   ADDIU V0, ZERO, 1
9D007630  A3C20010   SB V0, 16(S8)
9D007634  8FC20010   LW V0, 16(S8)
9D007638  7CC25204   INS V0, A2, 8, 3
9D00763C  AFC20010   SW V0, 16(S8)
9D007640  8FC20010   LW V0, 16(S8)
9D007644  7CA26AC4   INS V0, A1, 11, 3
9D007648  AFC20010   SW V0, 16(S8)
9D00764C  8FC20010   LW V0, 16(S8)
9D007650  7C829B84   INS V0, A0, 14, 6
9D007654  AFC20010   SW V0, 16(S8)
9D007658  8FC20010   LW V0, 16(S8)
9D00765C  7C62CD04   INS V0, V1, 20, 6
9D007660  AFC20010   SW V0, 16(S8)
53:                          .attack = {LOG_ATTACK, aPlayer, dPlayer, aTerritory, dTerritory}
54:                      };
55:                      addLogEntry(le);
9D007664  8FC40010   LW A0, 16(S8)
9D007668  0F401D45   JAL addLogEntry
9D00766C  00000000   NOP
56:                  }
9D007670  03C0E821   ADDU SP, S8, ZERO
9D007674  8FBF001C   LW RA, 28(SP)
9D007678  8FBE0018   LW S8, 24(SP)
9D00767C  27BD0020   ADDIU SP, SP, 32
9D007680  03E00008   JR RA
9D007684  00000000   NOP
57:                  
58:                  void logBattle(int aPlayer, int dPlayer, int aD1, int aD2, int aD3, 
59:                          int dD1, int dD2)
60:                  {
9D007688  27BDFFE0   ADDIU SP, SP, -32
9D00768C  AFBF001C   SW RA, 28(SP)
9D007690  AFBE0018   SW S8, 24(SP)
9D007694  03A0F021   ADDU S8, SP, ZERO
9D007698  AFC40020   SW A0, 32(S8)
9D00769C  AFC50024   SW A1, 36(S8)
9D0076A0  AFC60028   SW A2, 40(S8)
9D0076A4  AFC7002C   SW A3, 44(S8)
61:                      LogEntry le = {
9D0076A8  8FC20020   LW V0, 32(S8)
9D0076AC  304200FF   ANDI V0, V0, 255
9D0076B0  30420007   ANDI V0, V0, 7
9D0076B4  304900FF   ANDI T1, V0, 255
9D0076B8  8FC20024   LW V0, 36(S8)
9D0076BC  304200FF   ANDI V0, V0, 255
9D0076C0  30420007   ANDI V0, V0, 7
9D0076C4  304800FF   ANDI T0, V0, 255
9D0076C8  8FC20028   LW V0, 40(S8)
9D0076CC  304200FF   ANDI V0, V0, 255
9D0076D0  30420007   ANDI V0, V0, 7
9D0076D4  304700FF   ANDI A3, V0, 255
9D0076D8  8FC2002C   LW V0, 44(S8)
9D0076DC  304200FF   ANDI V0, V0, 255
9D0076E0  30420007   ANDI V0, V0, 7
9D0076E4  304600FF   ANDI A2, V0, 255
9D0076E8  8FC20030   LW V0, 48(S8)
9D0076EC  304200FF   ANDI V0, V0, 255
9D0076F0  30420007   ANDI V0, V0, 7
9D0076F4  304500FF   ANDI A1, V0, 255
9D0076F8  8FC20034   LW V0, 52(S8)
9D0076FC  304200FF   ANDI V0, V0, 255
9D007700  30420007   ANDI V0, V0, 7
9D007704  304400FF   ANDI A0, V0, 255
9D007708  8FC20038   LW V0, 56(S8)
9D00770C  304200FF   ANDI V0, V0, 255
9D007710  30420007   ANDI V0, V0, 7
9D007714  304300FF   ANDI V1, V0, 255
9D007718  AFC00010   SW ZERO, 16(S8)
9D00771C  24020002   ADDIU V0, ZERO, 2
9D007720  A3C20010   SB V0, 16(S8)
9D007724  8FC20010   LW V0, 16(S8)
9D007728  7D225204   INS V0, T1, 8, 3
9D00772C  AFC20010   SW V0, 16(S8)
9D007730  8FC20010   LW V0, 16(S8)
9D007734  7D026AC4   INS V0, T0, 11, 3
9D007738  AFC20010   SW V0, 16(S8)
9D00773C  8FC20010   LW V0, 16(S8)
9D007740  7CE28384   INS V0, A3, 14, 3
9D007744  AFC20010   SW V0, 16(S8)
9D007748  8FC20010   LW V0, 16(S8)
9D00774C  7CC29C44   INS V0, A2, 17, 3
9D007750  AFC20010   SW V0, 16(S8)
9D007754  8FC20010   LW V0, 16(S8)
9D007758  7CA2B504   INS V0, A1, 20, 3
9D00775C  AFC20010   SW V0, 16(S8)
9D007760  8FC20010   LW V0, 16(S8)
9D007764  7C82CDC4   INS V0, A0, 23, 3
9D007768  AFC20010   SW V0, 16(S8)
9D00776C  8FC20010   LW V0, 16(S8)
9D007770  7C62E684   INS V0, V1, 26, 3
9D007774  AFC20010   SW V0, 16(S8)
62:                          .battle = {LOG_BATTLE, aPlayer, dPlayer, aD1, aD2, aD3, dD1, dD2}
63:                      };
64:                      addLogEntry(le);
9D007778  8FC40010   LW A0, 16(S8)
9D00777C  0F401D45   JAL addLogEntry
9D007780  00000000   NOP
65:                  }
9D007784  03C0E821   ADDU SP, S8, ZERO
9D007788  8FBF001C   LW RA, 28(SP)
9D00778C  8FBE0018   LW S8, 24(SP)
9D007790  27BD0020   ADDIU SP, SP, 32
9D007794  03E00008   JR RA
9D007798  00000000   NOP
66:                  
67:                  void logConquer(int aPlayer, int territory, int troops)
68:                  {
9D00779C  27BDFFE0   ADDIU SP, SP, -32
9D0077A0  AFBF001C   SW RA, 28(SP)
9D0077A4  AFBE0018   SW S8, 24(SP)
9D0077A8  03A0F021   ADDU S8, SP, ZERO
9D0077AC  AFC40020   SW A0, 32(S8)
9D0077B0  AFC50024   SW A1, 36(S8)
9D0077B4  AFC60028   SW A2, 40(S8)
69:                      LogEntry le = {
9D0077B8  8FC20020   LW V0, 32(S8)
9D0077BC  304200FF   ANDI V0, V0, 255
9D0077C0  30420007   ANDI V0, V0, 7
9D0077C4  304500FF   ANDI A1, V0, 255
9D0077C8  8FC20024   LW V0, 36(S8)
9D0077CC  304200FF   ANDI V0, V0, 255
9D0077D0  3042003F   ANDI V0, V0, 63
9D0077D4  304400FF   ANDI A0, V0, 255
9D0077D8  8FC20028   LW V0, 40(S8)
9D0077DC  3042FFFF   ANDI V0, V0, -1
9D0077E0  30420FFF   ANDI V0, V0, 4095
9D0077E4  3043FFFF   ANDI V1, V0, -1
9D0077E8  AFC00010   SW ZERO, 16(S8)
9D0077EC  24020003   ADDIU V0, ZERO, 3
9D0077F0  A3C20010   SB V0, 16(S8)
9D0077F4  8FC20010   LW V0, 16(S8)
9D0077F8  7CA25204   INS V0, A1, 8, 3
9D0077FC  AFC20010   SW V0, 16(S8)
9D007800  8FC20010   LW V0, 16(S8)
9D007804  7C8282C4   INS V0, A0, 11, 6
9D007808  AFC20010   SW V0, 16(S8)
9D00780C  8FC20010   LW V0, 16(S8)
9D007810  7C62E444   INS V0, V1, 17, 12
9D007814  AFC20010   SW V0, 16(S8)
70:                          .conquer = {LOG_CONQUER, aPlayer, territory, troops}
71:                      };
72:                      addLogEntry(le);
9D007818  8FC40010   LW A0, 16(S8)
9D00781C  0F401D45   JAL addLogEntry
9D007820  00000000   NOP
73:                  }
9D007824  03C0E821   ADDU SP, S8, ZERO
9D007828  8FBF001C   LW RA, 28(SP)
9D00782C  8FBE0018   LW S8, 24(SP)
9D007830  27BD0020   ADDIU SP, SP, 32
9D007834  03E00008   JR RA
9D007838  00000000   NOP
74:                  void logMove(int player, int sTerritory, int dTerritory, int troops)
75:                  {
9D00783C  27BDFFE0   ADDIU SP, SP, -32
9D007840  AFBF001C   SW RA, 28(SP)
9D007844  AFBE0018   SW S8, 24(SP)
9D007848  03A0F021   ADDU S8, SP, ZERO
9D00784C  AFC40020   SW A0, 32(S8)
9D007850  AFC50024   SW A1, 36(S8)
9D007854  AFC60028   SW A2, 40(S8)
9D007858  AFC7002C   SW A3, 44(S8)
76:                      LogEntry le = {
9D00785C  8FC20020   LW V0, 32(S8)
9D007860  304200FF   ANDI V0, V0, 255
9D007864  30420007   ANDI V0, V0, 7
9D007868  304600FF   ANDI A2, V0, 255
9D00786C  8FC20024   LW V0, 36(S8)
9D007870  304200FF   ANDI V0, V0, 255
9D007874  3042003F   ANDI V0, V0, 63
9D007878  304500FF   ANDI A1, V0, 255
9D00787C  8FC20028   LW V0, 40(S8)
9D007880  304200FF   ANDI V0, V0, 255
9D007884  3042003F   ANDI V0, V0, 63
9D007888  304400FF   ANDI A0, V0, 255
9D00788C  8FC2002C   LW V0, 44(S8)
9D007890  3042FFFF   ANDI V0, V0, -1
9D007894  304201FF   ANDI V0, V0, 511
9D007898  3043FFFF   ANDI V1, V0, -1
9D00789C  AFC00010   SW ZERO, 16(S8)
9D0078A0  24020004   ADDIU V0, ZERO, 4
9D0078A4  A3C20010   SB V0, 16(S8)
9D0078A8  8FC20010   LW V0, 16(S8)
9D0078AC  7CC25204   INS V0, A2, 8, 3
9D0078B0  AFC20010   SW V0, 16(S8)
9D0078B4  8FC20010   LW V0, 16(S8)
9D0078B8  7CA282C4   INS V0, A1, 11, 6
9D0078BC  AFC20010   SW V0, 16(S8)
9D0078C0  8FC20010   LW V0, 16(S8)
9D0078C4  7C82B444   INS V0, A0, 17, 6
9D0078C8  AFC20010   SW V0, 16(S8)
9D0078CC  8FC20010   LW V0, 16(S8)
9D0078D0  7C62FDC4   INS V0, V1, 23, 9
9D0078D4  AFC20010   SW V0, 16(S8)
77:                          .move = {LOG_MOVE, player, sTerritory, dTerritory, troops}
78:                      };
79:                      addLogEntry(le);
9D0078D8  8FC40010   LW A0, 16(S8)
9D0078DC  0F401D45   JAL addLogEntry
9D0078E0  00000000   NOP
80:                  }
9D0078E4  03C0E821   ADDU SP, S8, ZERO
9D0078E8  8FBF001C   LW RA, 28(SP)
9D0078EC  8FBE0018   LW S8, 24(SP)
9D0078F0  27BD0020   ADDIU SP, SP, 32
9D0078F4  03E00008   JR RA
9D0078F8  00000000   NOP
81:                  void logCard(int player, CardType cardtype, int territory)
82:                  {
9D0078FC  27BDFFE0   ADDIU SP, SP, -32
9D007900  AFBF001C   SW RA, 28(SP)
9D007904  AFBE0018   SW S8, 24(SP)
9D007908  03A0F021   ADDU S8, SP, ZERO
9D00790C  AFC40020   SW A0, 32(S8)
9D007910  AFC50024   SW A1, 36(S8)
9D007914  AFC60028   SW A2, 40(S8)
83:                      LogEntry le = {
9D007918  8FC20020   LW V0, 32(S8)
9D00791C  304200FF   ANDI V0, V0, 255
9D007920  30420007   ANDI V0, V0, 7
9D007924  304500FF   ANDI A1, V0, 255
9D007928  8FC20024   LW V0, 36(S8)
9D00792C  304200FF   ANDI V0, V0, 255
9D007930  30420003   ANDI V0, V0, 3
9D007934  304400FF   ANDI A0, V0, 255
9D007938  8FC20028   LW V0, 40(S8)
9D00793C  7C021420   SEB V0, V0
9D007940  00021040   SLL V0, V0, 1
9D007944  7C021420   SEB V0, V0
9D007948  00021043   SRA V0, V0, 1
9D00794C  7C021C20   SEB V1, V0
9D007950  AFC00010   SW ZERO, 16(S8)
9D007954  24020005   ADDIU V0, ZERO, 5
9D007958  A3C20010   SB V0, 16(S8)
9D00795C  8FC20010   LW V0, 16(S8)
9D007960  7CA25204   INS V0, A1, 8, 3
9D007964  AFC20010   SW V0, 16(S8)
9D007968  8FC20010   LW V0, 16(S8)
9D00796C  7C8262C4   INS V0, A0, 11, 2
9D007970  AFC20010   SW V0, 16(S8)
9D007974  8FC20010   LW V0, 16(S8)
9D007978  7C629B44   INS V0, V1, 13, 7
9D00797C  AFC20010   SW V0, 16(S8)
84:                          .cardgiven = {LOG_CARD_GIVEN, player, cardtype, territory}
85:                      };
86:                      addLogEntry(le);
9D007980  8FC40010   LW A0, 16(S8)
9D007984  0F401D45   JAL addLogEntry
9D007988  00000000   NOP
87:                  }
9D00798C  03C0E821   ADDU SP, S8, ZERO
9D007990  8FBF001C   LW RA, 28(SP)
9D007994  8FBE0018   LW S8, 24(SP)
9D007998  27BD0020   ADDIU SP, SP, 32
9D00799C  03E00008   JR RA
9D0079A0  00000000   NOP
88:                  void logExchange(int player, CardType type1, CardType type2, CardType type3, 
89:                          int troops)
90:                  {
9D0079A4  27BDFFE0   ADDIU SP, SP, -32
9D0079A8  AFBF001C   SW RA, 28(SP)
9D0079AC  AFBE0018   SW S8, 24(SP)
9D0079B0  03A0F021   ADDU S8, SP, ZERO
9D0079B4  AFC40020   SW A0, 32(S8)
9D0079B8  AFC50024   SW A1, 36(S8)
9D0079BC  AFC60028   SW A2, 40(S8)
9D0079C0  AFC7002C   SW A3, 44(S8)
91:                      LogEntry le = {
9D0079C4  8FC20020   LW V0, 32(S8)
9D0079C8  304200FF   ANDI V0, V0, 255
9D0079CC  30420007   ANDI V0, V0, 7
9D0079D0  304700FF   ANDI A3, V0, 255
9D0079D4  8FC20024   LW V0, 36(S8)
9D0079D8  304200FF   ANDI V0, V0, 255
9D0079DC  30420003   ANDI V0, V0, 3
9D0079E0  304600FF   ANDI A2, V0, 255
9D0079E4  8FC20028   LW V0, 40(S8)
9D0079E8  304200FF   ANDI V0, V0, 255
9D0079EC  30420003   ANDI V0, V0, 3
9D0079F0  304500FF   ANDI A1, V0, 255
9D0079F4  8FC2002C   LW V0, 44(S8)
9D0079F8  304200FF   ANDI V0, V0, 255
9D0079FC  30420003   ANDI V0, V0, 3
9D007A00  304400FF   ANDI A0, V0, 255
9D007A04  8FC20030   LW V0, 48(S8)
9D007A08  3042FFFF   ANDI V0, V0, -1
9D007A0C  30420FFF   ANDI V0, V0, 4095
9D007A10  3043FFFF   ANDI V1, V0, -1
9D007A14  AFC00010   SW ZERO, 16(S8)
9D007A18  24020006   ADDIU V0, ZERO, 6
9D007A1C  A3C20010   SB V0, 16(S8)
9D007A20  8FC20010   LW V0, 16(S8)
9D007A24  7CE25204   INS V0, A3, 8, 3
9D007A28  AFC20010   SW V0, 16(S8)
9D007A2C  8FC20010   LW V0, 16(S8)
9D007A30  7CC262C4   INS V0, A2, 11, 2
9D007A34  AFC20010   SW V0, 16(S8)
9D007A38  8FC20010   LW V0, 16(S8)
9D007A3C  7CA27344   INS V0, A1, 13, 2
9D007A40  AFC20010   SW V0, 16(S8)
9D007A44  8FC20010   LW V0, 16(S8)
9D007A48  7C8283C4   INS V0, A0, 15, 2
9D007A4C  AFC20010   SW V0, 16(S8)
9D007A50  8FC20010   LW V0, 16(S8)
9D007A54  7C62E444   INS V0, V1, 17, 12
9D007A58  AFC20010   SW V0, 16(S8)
92:                          .exchange = {LOG_CARD_EXCHANGE, player, type1, type2, type3, troops}
93:                      };
94:                      addLogEntry(le);
9D007A5C  8FC40010   LW A0, 16(S8)
9D007A60  0F401D45   JAL addLogEntry
9D007A64  00000000   NOP
95:                  }
9D007A68  03C0E821   ADDU SP, S8, ZERO
9D007A6C  8FBF001C   LW RA, 28(SP)
9D007A70  8FBE0018   LW S8, 24(SP)
9D007A74  27BD0020   ADDIU SP, SP, 32
9D007A78  03E00008   JR RA
9D007A7C  00000000   NOP
96:                  
97:                  
98:                  static int loggingPlayer = 0;
99:                  static int loggedTroops[NUM_TERRITORIES] = {0};
100:                 void writeReinforceLogs()
101:                 {
9D007A80  27BDFFE0   ADDIU SP, SP, -32
9D007A84  AFBF001C   SW RA, 28(SP)
9D007A88  AFBE0018   SW S8, 24(SP)
9D007A8C  03A0F021   ADDU S8, SP, ZERO
102:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D007A90  AFC00010   SW ZERO, 16(S8)
9D007A94  0B401ED3   J 0x9D007B4C
9D007A98  00000000   NOP
9D007B40  8FC20010   LW V0, 16(S8)
9D007B44  24420001   ADDIU V0, V0, 1
9D007B48  AFC20010   SW V0, 16(S8)
9D007B4C  8FC20010   LW V0, 16(S8)
9D007B50  28420002   SLTI V0, V0, 2
9D007B54  1440FFD1   BNE V0, ZERO, 0x9D007A9C
9D007B58  00000000   NOP
103:                     {
104:                         if(loggedTroops[i] != 0)
9D007A9C  8FC20010   LW V0, 16(S8)
9D007AA0  00021880   SLL V1, V0, 2
9D007AA4  2782807C   ADDIU V0, GP, -32644
9D007AA8  00621021   ADDU V0, V1, V0
9D007AAC  8C420000   LW V0, 0(V0)
9D007AB0  10400023   BEQ V0, ZERO, 0x9D007B40
9D007AB4  00000000   NOP
105:                         {
106:                             LogEntry le = {
9D007AB8  8F828078   LW V0, -32648(GP)
9D007ABC  304200FF   ANDI V0, V0, 255
9D007AC0  30420007   ANDI V0, V0, 7
9D007AC4  304500FF   ANDI A1, V0, 255
9D007AC8  8FC20010   LW V0, 16(S8)
9D007ACC  304200FF   ANDI V0, V0, 255
9D007AD0  3042003F   ANDI V0, V0, 63
9D007AD4  304400FF   ANDI A0, V0, 255
9D007AEC  3042FFFF   ANDI V0, V0, -1
9D007AF0  30420FFF   ANDI V0, V0, 4095
9D007AF4  3043FFFF   ANDI V1, V0, -1
9D007AF8  AFC00014   SW ZERO, 20(S8)
9D007AFC  8FC20014   LW V0, 20(S8)
9D007B00  7CA25204   INS V0, A1, 8, 3
9D007B04  AFC20014   SW V0, 20(S8)
9D007B08  8FC20014   LW V0, 20(S8)
9D007B0C  7C8282C4   INS V0, A0, 11, 6
9D007B10  AFC20014   SW V0, 20(S8)
9D007B14  8FC20014   LW V0, 20(S8)
9D007B18  7C62E444   INS V0, V1, 17, 12
9D007B1C  AFC20014   SW V0, 20(S8)
107:                                 .reinforce = {LOG_REINFORCE, loggingPlayer, i, loggedTroops[i]}
9D007AD8  8FC20010   LW V0, 16(S8)
9D007ADC  00021880   SLL V1, V0, 2
9D007AE0  2782807C   ADDIU V0, GP, -32644
9D007AE4  00621021   ADDU V0, V1, V0
9D007AE8  8C420000   LW V0, 0(V0)
108:                             };
109:                             addLogEntry(le);
9D007B20  8FC40014   LW A0, 20(S8)
9D007B24  0F401D45   JAL addLogEntry
9D007B28  00000000   NOP
110:                             loggedTroops[i] = 0;
9D007B2C  8FC20010   LW V0, 16(S8)
9D007B30  00021880   SLL V1, V0, 2
9D007B34  2782807C   ADDIU V0, GP, -32644
9D007B38  00621021   ADDU V0, V1, V0
9D007B3C  AC400000   SW ZERO, 0(V0)
111:                         }
112:                     }
113:                 }
9D007B5C  03C0E821   ADDU SP, S8, ZERO
9D007B60  8FBF001C   LW RA, 28(SP)
9D007B64  8FBE0018   LW S8, 24(SP)
9D007B68  27BD0020   ADDIU SP, SP, 32
9D007B6C  03E00008   JR RA
9D007B70  00000000   NOP
114:                 
115:                 void logReinforce(int player, int territory, int troops)
116:                 {
9D007B74  27BDFFE8   ADDIU SP, SP, -24
9D007B78  AFBF0014   SW RA, 20(SP)
9D007B7C  AFBE0010   SW S8, 16(SP)
9D007B80  03A0F021   ADDU S8, SP, ZERO
9D007B84  AFC40018   SW A0, 24(S8)
9D007B88  AFC5001C   SW A1, 28(S8)
9D007B8C  AFC60020   SW A2, 32(S8)
117:                     if(territory == -1)
9D007B90  8FC3001C   LW V1, 28(S8)
9D007B94  2402FFFF   ADDIU V0, ZERO, -1
9D007B98  14620005   BNE V1, V0, 0x9D007BB0
9D007B9C  00000000   NOP
118:                     {
119:                         writeReinforceLogs();
9D007BA0  0F401EA0   JAL writeReinforceLogs
9D007BA4  00000000   NOP
120:                         return;
9D007BA8  0B401F0A   J 0x9D007C28
9D007BAC  00000000   NOP
121:                     }
122:                 
123:                     // Each log has only 12 bits for troop number, so in the rare case where
124:                     // some player is placing more than that, we need to write out immediately.
125:                     if(player != loggingPlayer || loggedTroops[territory] + troops >= 0xFFF)
9D007BB0  8F828078   LW V0, -32648(GP)
9D007BB4  8FC30018   LW V1, 24(S8)
9D007BB8  1462000B   BNE V1, V0, 0x9D007BE8
9D007BBC  00000000   NOP
9D007BC0  8FC2001C   LW V0, 28(S8)
9D007BC4  00021880   SLL V1, V0, 2
9D007BC8  2782807C   ADDIU V0, GP, -32644
9D007BCC  00621021   ADDU V0, V1, V0
9D007BD0  8C430000   LW V1, 0(V0)
9D007BD4  8FC20020   LW V0, 32(S8)
9D007BD8  00621021   ADDU V0, V1, V0
9D007BDC  28420FFF   SLTI V0, V0, 4095
9D007BE0  14400003   BNE V0, ZERO, 0x9D007BF0
9D007BE4  00000000   NOP
126:                         writeReinforceLogs();
9D007BE8  0F401EA0   JAL writeReinforceLogs
9D007BEC  00000000   NOP
127:                 
128:                     loggingPlayer = player;
9D007BF0  8FC20018   LW V0, 24(S8)
9D007BF4  AF828078   SW V0, -32648(GP)
129:                     loggedTroops[territory] += troops;
9D007BF8  8FC2001C   LW V0, 28(S8)
9D007BFC  00021880   SLL V1, V0, 2
9D007C00  2782807C   ADDIU V0, GP, -32644
9D007C04  00621021   ADDU V0, V1, V0
9D007C08  8C430000   LW V1, 0(V0)
9D007C0C  8FC20020   LW V0, 32(S8)
9D007C10  00621821   ADDU V1, V1, V0
9D007C14  8FC2001C   LW V0, 28(S8)
9D007C18  00022080   SLL A0, V0, 2
9D007C1C  2782807C   ADDIU V0, GP, -32644
9D007C20  00821021   ADDU V0, A0, V0
9D007C24  AC430000   SW V1, 0(V0)
130:                 }
9D007C28  03C0E821   ADDU SP, S8, ZERO
9D007C2C  8FBF0014   LW RA, 20(SP)
9D007C30  8FBE0010   LW S8, 16(SP)
9D007C34  27BD0018   ADDIU SP, SP, 24
9D007C38  03E00008   JR RA
9D007C3C  00000000   NOP
---  /home/jacob/Documents/477/RISK/game/game.c  --------------------------------------------------------
1:                   // game.c:
2:                   // Main game loop, game initialization, and game flow.
3:                   //
4:                   // Part of R.I.S.K
5:                   // ECE 477 Group 2, Spring 2015
6:                   
7:                   #include "game.h"
8:                   #include "types.h"
9:                   #include "territory.h"
10:                  #include "gamedata.h"
11:                  #include "io.h"
12:                  #include "util.h"
13:                  #include "cards.h"
14:                  #include "log.h"
15:                  // Global variables
16:                  int numPlayers;
17:                  int randomTerritories;
18:                  int multipleDeploy;
19:                  // cardValueScheme is handled by cards.c
20:                  
21:                  int currentPlayer;
22:                  int source;
23:                  int destination;
24:                  int attackerDice[3];
25:                  int defenderDice[2];
26:                  
27:                  // Game variables that don't need to be exposed to the IO systems
28:                  static State state;
29:                  static int firstPlayer;
30:                  static int territoriesRemaining;
31:                  static int numTroops;
32:                  static int deployTroopsLeft[MAX_PLAYERS];
33:                  static int mustTrade;
34:                  static int needCard;
35:                  static int currentOption;
36:                  static int reinforceMenu;
37:                  static int confirm;
38:                  
39:                  void gameInput(Input input)
40:                  {
9D000250  27BDFFE8   ADDIU SP, SP, -24
9D000254  AFBF0014   SW RA, 20(SP)
9D000258  AFBE0010   SW S8, 16(SP)
9D00025C  03A0F021   ADDU S8, SP, ZERO
9D000260  AFC40018   SW A0, 24(S8)
41:                      switch(state)
9D000264  8F82804C   LW V0, -32692(GP)
9D000268  2C43000C   SLTIU V1, V0, 12
9D00026C  10600050   BEQ V1, ZERO, 0x9D0003B0
9D000270  00000000   NOP
9D000274  00021880   SLL V1, V0, 2
9D000278  3C029D00   LUI V0, -25344
9D00027C  24420290   ADDIU V0, V0, 656
9D000280  00621021   ADDU V0, V1, V0
9D000284  8C420000   LW V0, 0(V0)
9D000288  00400008   JR V0
9D00028C  00000000   NOP
42:                      {
43:                          case INIT:
44:                              chooseOptions(input); break;
9D0002C0  8FC40018   LW A0, 24(S8)
9D0002C4  0F4003C9   JAL chooseOptions
9D0002C8  00000000   NOP
9D0002CC  0B4000F5   J 0x9D0003D4
9D0002D0  00000000   NOP
45:                          case SELECT:
46:                              selectTerritories(input); break;
9D0002D4  8FC40018   LW A0, 24(S8)
9D0002D8  0F40047F   JAL 0x9D0011FC
9D0002DC  00000000   NOP
9D0002E0  0B4000F5   J 0x9D0003D4
9D0002E4  00000000   NOP
47:                          case DEPLOY:
48:                              deployTroops(input); break;
9D0002E8  8FC40018   LW A0, 24(S8)
9D0002EC  0F4004DF   JAL deployTroops
9D0002F0  00000000   NOP
9D0002F4  0B4000F5   J 0x9D0003D4
9D0002F8  00000000   NOP
49:                          case REINFORCE:
50:                              reinforce(input); break;
9D0002FC  8FC40018   LW A0, 24(S8)
9D000300  0F40059B   JAL reinforce
9D000304  00000000   NOP
9D000308  0B4000F5   J 0x9D0003D4
9D00030C  00000000   NOP
51:                          case ATTACK1:
52:                              declareAttack(input); break;
9D000310  8FC40018   LW A0, 24(S8)
9D000314  0F400622   JAL declareAttack
9D000318  00000000   NOP
9D00031C  0B4000F5   J 0x9D0003D4
9D000320  00000000   NOP
53:                          case ATTACK2:
54:                              declareAttackTarget(input); break;
9D000324  8FC40018   LW A0, 24(S8)
9D000328  0F400672   JAL declareAttackTarget
9D00032C  00000000   NOP
9D000330  0B4000F5   J 0x9D0003D4
9D000334  00000000   NOP
55:                          case BATTLE:
56:                              resolveBattle(input); break;
9D000338  8FC40018   LW A0, 24(S8)
9D00033C  0F4006BA   JAL resolveBattle
9D000340  00000000   NOP
9D000344  0B4000F5   J 0x9D0003D4
9D000348  00000000   NOP
57:                          case CONQUER:
58:                              conquerTerritory(input); break;
9D00034C  8FC40018   LW A0, 24(S8)
9D000350  0F400745   JAL conquerTerritory
9D000354  00000000   NOP
9D000358  0B4000F5   J 0x9D0003D4
9D00035C  00000000   NOP
59:                          case MOVE1:
60:                              moveTroops(input); break;
9D000360  8FC40018   LW A0, 24(S8)
9D000364  0F4007F2   JAL moveTroops
9D000368  00000000   NOP
9D00036C  0B4000F5   J 0x9D0003D4
9D000370  00000000   NOP
61:                          case MOVE2:
62:                              moveTroopsTarget(input); break;
9D000374  8FC40018   LW A0, 24(S8)
9D000378  0F40084B   JAL moveTroopsTarget
9D00037C  00000000   NOP
9D000380  0B4000F5   J 0x9D0003D4
9D000384  00000000   NOP
63:                          case MOVE3:
64:                              moveTroopsNumber(input); break;
9D000388  8FC40018   LW A0, 24(S8)
9D00038C  0F400884   JAL moveTroopsNumber
9D000390  00000000   NOP
9D000394  0B4000F5   J 0x9D0003D4
9D000398  00000000   NOP
65:                          case GAMEOVER:
66:                              gameOver(input); break;
9D00039C  8FC40018   LW A0, 24(S8)
9D0003A0  0F40094D   JAL gameOver
9D0003A4  00000000   NOP
9D0003A8  0B4000F5   J 0x9D0003D4
9D0003AC  00000000   NOP
67:                          default:
68:                              PANIC("game in invalid state");
9D0003B0  24040044   ADDIU A0, ZERO, 68
9D0003B4  3C029D01   LUI V0, -25343
9D0003B8  24458AB4   ADDIU A1, V0, -30028
9D0003BC  3C029D01   LUI V0, -25343
9D0003C0  24468EB8   ADDIU A2, V0, -29000
9D0003C4  3C029D01   LUI V0, -25343
9D0003C8  24478AC4   ADDIU A3, V0, -30012
9D0003CC  0F401971   JAL panic
9D0003D0  00000000   NOP
69:                      }
70:                      updateText();
9D0003D4  0F40012C   JAL updateText
9D0003D8  00000000   NOP
71:                  }
9D0003DC  03C0E821   ADDU SP, S8, ZERO
9D0003E0  8FBF0014   LW RA, 20(SP)
9D0003E4  8FBE0010   LW S8, 16(SP)
9D0003E8  27BD0018   ADDIU SP, SP, 24
9D0003EC  03E00008   JR RA
9D0003F0  00000000   NOP
72:                  
73:                  int cardInput(int card1, int card2, int card3)
74:                  {
9D0003F4  27BDFFE0   ADDIU SP, SP, -32
9D0003F8  AFBF001C   SW RA, 28(SP)
9D0003FC  AFBE0018   SW S8, 24(SP)
9D000400  03A0F021   ADDU S8, SP, ZERO
9D000404  AFC40020   SW A0, 32(S8)
9D000408  AFC50024   SW A1, 36(S8)
9D00040C  AFC60028   SW A2, 40(S8)
75:                      if(state != REINFORCE)
9D000410  8F83804C   LW V1, -32692(GP)
9D000414  24020003   ADDIU V0, ZERO, 3
9D000418  10620004   BEQ V1, V0, 0x9D00042C
9D00041C  00000000   NOP
76:                          return 0;
9D000420  00001021   ADDU V0, ZERO, ZERO
9D000424  0B400126   J 0x9D000498
9D000428  00000000   NOP
77:                      int troops = exchangeCards(currentPlayer, card1, card2, card3);
9D00042C  8F8280C8   LW V0, -32568(GP)
9D000430  00402021   ADDU A0, V0, ZERO
9D000434  8FC50020   LW A1, 32(S8)
9D000438  8FC60024   LW A2, 36(S8)
9D00043C  8FC70028   LW A3, 40(S8)
9D000440  0F40140A   JAL exchangeCards
9D000444  00000000   NOP
9D000448  AFC20010   SW V0, 16(S8)
78:                      numTroops += troops;
9D00044C  8F838058   LW V1, -32680(GP)
9D000450  8FC20010   LW V0, 16(S8)
9D000454  00621021   ADDU V0, V1, V0
9D000458  AF828058   SW V0, -32680(GP)
79:                      if(hands[currentPlayer].cards < 5)
9D00045C  8F8280C8   LW V0, -32568(GP)
9D000460  3C038000   LUI V1, -32768
9D000464  00021080   SLL V0, V0, 2
9D000468  00022100   SLL A0, V0, 4
9D00046C  00441021   ADDU V0, V0, A0
9D000470  24630118   ADDIU V1, V1, 280
9D000474  00431021   ADDU V0, V0, V1
9D000478  8C420040   LW V0, 64(V0)
9D00047C  28420005   SLTI V0, V0, 5
9D000480  10400002   BEQ V0, ZERO, 0x9D00048C
9D000484  00000000   NOP
80:                          mustTrade = 0;
9D000488  AF808064   SW ZERO, -32668(GP)
81:                      updateText();
9D00048C  0F40012C   JAL updateText
9D000490  00000000   NOP
82:                      return troops;
9D000494  8FC20010   LW V0, 16(S8)
83:                  }
9D000498  03C0E821   ADDU SP, S8, ZERO
9D00049C  8FBF001C   LW RA, 28(SP)
9D0004A0  8FBE0018   LW S8, 24(SP)
9D0004A4  27BD0020   ADDIU SP, SP, 32
9D0004A8  03E00008   JR RA
9D0004AC  00000000   NOP
84:                  
85:                  void updateText()
86:                  {
9D0004B0  27BDFFE8   ADDIU SP, SP, -24
9D0004B4  AFBF0014   SW RA, 20(SP)
9D0004B8  AFBE0010   SW S8, 16(SP)
9D0004BC  03A0F021   ADDU S8, SP, ZERO
87:                      switch(state)
9D0004C0  8F82804C   LW V0, -32692(GP)
9D0004C4  2C43000C   SLTIU V1, V0, 12
9D0004C8  10600287   BEQ V1, ZERO, 0x9D000EE8
9D0004CC  00000000   NOP
9D0004D0  00021880   SLL V1, V0, 2
9D0004D4  3C029D00   LUI V0, -25344
9D0004D8  244204EC   ADDIU V0, V0, 1260
9D0004DC  00621021   ADDU V0, V1, V0
9D0004E0  8C420000   LW V0, 0(V0)
9D0004E4  00400008   JR V0
9D0004E8  00000000   NOP
88:                      {
89:                          case INIT:
90:                              if(currentOption == OPTION_NUM_PLAYERS)
9D00051C  8F82806C   LW V0, -32660(GP)
9D000520  1440000F   BNE V0, ZERO, 0x9D000560
9D000524  00000000   NOP
91:                              {
92:                                  setTextDisplay(0, "Number of players");
9D000528  00002021   ADDU A0, ZERO, ZERO
9D00052C  3C029D01   LUI V0, -25343
9D000530  24458ADC   ADDIU A1, V0, -29988
9D000534  0F40240C   JAL setTextDisplay
9D000538  00000000   NOP
93:                                  setTextDisplay(1, "%d", numPlayers);
9D00053C  8F8280D0   LW V0, -32560(GP)
9D000540  24040001   ADDIU A0, ZERO, 1
9D000544  3C039D01   LUI V1, -25343
9D000548  24658AF0   ADDIU A1, V1, -29968
9D00054C  00403021   ADDU A2, V0, ZERO
9D000550  0F40240C   JAL setTextDisplay
9D000554  00000000   NOP
9D000558  0B4001AB   J 0x9D0006AC
9D00055C  00000000   NOP
94:                              }
95:                              else if(currentOption == OPTION_CARD_SCHEME)
9D000560  8F83806C   LW V1, -32660(GP)
9D000564  24020001   ADDIU V0, ZERO, 1
9D000568  14620026   BNE V1, V0, 0x9D000604
9D00056C  00000000   NOP
96:                              {
97:                                  setTextDisplay(0, "Card exchange values");
9D000570  00002021   ADDU A0, ZERO, ZERO
9D000574  3C029D01   LUI V0, -25343
9D000578  24458AF4   ADDIU A1, V0, -29964
9D00057C  0F40240C   JAL setTextDisplay
9D000580  00000000   NOP
98:                                  if(cardValueScheme == INCREASING)
9D000584  8F8280C0   LW V0, -32576(GP)
9D000588  14400008   BNE V0, ZERO, 0x9D0005AC
9D00058C  00000000   NOP
99:                                      setTextDisplay(1, "Increasing");
9D000590  24040001   ADDIU A0, ZERO, 1
9D000594  3C029D01   LUI V0, -25343
9D000598  24458B0C   ADDIU A1, V0, -29940
9D00059C  0F40240C   JAL setTextDisplay
9D0005A0  00000000   NOP
9D0005A4  0B4001AB   J 0x9D0006AC
9D0005A8  00000000   NOP
100:                                 else if(cardValueScheme == INCREASING_ONE)
9D0005AC  8F8380C0   LW V1, -32576(GP)
9D0005B0  24020001   ADDIU V0, ZERO, 1
9D0005B4  14620008   BNE V1, V0, 0x9D0005D8
9D0005B8  00000000   NOP
101:                                     setTextDisplay(1, "Increasing by 1");
9D0005BC  24040001   ADDIU A0, ZERO, 1
9D0005C0  3C029D01   LUI V0, -25343
9D0005C4  24458B18   ADDIU A1, V0, -29928
9D0005C8  0F40240C   JAL setTextDisplay
9D0005CC  00000000   NOP
9D0005D0  0B4001AB   J 0x9D0006AC
9D0005D4  00000000   NOP
102:                                 else if(cardValueScheme == SET_VALUE)
9D0005D8  8F8380C0   LW V1, -32576(GP)
9D0005DC  24020002   ADDIU V0, ZERO, 2
9D0005E0  14620032   BNE V1, V0, 0x9D0006AC
9D0005E4  00000000   NOP
103:                                     setTextDisplay(1, "Set Value");
9D0005E8  24040001   ADDIU A0, ZERO, 1
9D0005EC  3C029D01   LUI V0, -25343
9D0005F0  24458B28   ADDIU A1, V0, -29912
9D0005F4  0F40240C   JAL setTextDisplay
9D0005F8  00000000   NOP
9D0005FC  0B4001AB   J 0x9D0006AC
9D000600  00000000   NOP
104:                             }
105:                             else if(currentOption == OPTION_RANDOM_TERRITORIES)
9D000604  8F83806C   LW V1, -32660(GP)
9D000608  24020002   ADDIU V0, ZERO, 2
9D00060C  14620017   BNE V1, V0, 0x9D00066C
9D000610  00000000   NOP
106:                             {
107:                                 setTextDisplay(0, "Territory allocation");
9D000614  00002021   ADDU A0, ZERO, ZERO
9D000618  3C029D01   LUI V0, -25343
9D00061C  24458B34   ADDIU A1, V0, -29900
9D000620  0F40240C   JAL setTextDisplay
9D000624  00000000   NOP
108:                                 if(randomTerritories)
9D000628  8F8280CC   LW V0, -32564(GP)
9D00062C  10400008   BEQ V0, ZERO, 0x9D000650
9D000630  00000000   NOP
109:                                     setTextDisplay(1, "Random");
9D000634  24040001   ADDIU A0, ZERO, 1
9D000638  3C029D01   LUI V0, -25343
9D00063C  24458B4C   ADDIU A1, V0, -29876
9D000640  0F40240C   JAL setTextDisplay
9D000644  00000000   NOP
9D000648  0B4001AB   J 0x9D0006AC
9D00064C  00000000   NOP
110:                                 else
111:                                     setTextDisplay(1, "Select");
9D000650  24040001   ADDIU A0, ZERO, 1
9D000654  3C029D01   LUI V0, -25343
9D000658  24458B54   ADDIU A1, V0, -29868
9D00065C  0F40240C   JAL setTextDisplay
9D000660  00000000   NOP
9D000664  0B4001AB   J 0x9D0006AC
9D000668  00000000   NOP
112:                             }
113:                             else if(currentOption == OPTION_MULTIPLE_DEPLOY)
9D00066C  8F83806C   LW V1, -32660(GP)
9D000670  24020003   ADDIU V0, ZERO, 3
9D000674  1462000D   BNE V1, V0, 0x9D0006AC
9D000678  00000000   NOP
114:                             {
115:                                 setTextDisplay(0, "Troop deployment");
9D00067C  00002021   ADDU A0, ZERO, ZERO
9D000680  3C029D01   LUI V0, -25343
9D000684  24458B5C   ADDIU A1, V0, -29860
9D000688  0F40240C   JAL setTextDisplay
9D00068C  00000000   NOP
116:                                 setTextDisplay(1, "%d at a time", multipleDeploy);
9D000690  8F8280E4   LW V0, -32540(GP)
9D000694  24040001   ADDIU A0, ZERO, 1
9D000698  3C039D01   LUI V1, -25343
9D00069C  24658B70   ADDIU A1, V1, -29840
9D0006A0  00403021   ADDU A2, V0, ZERO
9D0006A4  0F40240C   JAL setTextDisplay
9D0006A8  00000000   NOP
117:                             }
118:                             setTextDisplay(2, "A: Start game");
9D0006AC  24040002   ADDIU A0, ZERO, 2
9D0006B0  3C029D01   LUI V0, -25343
9D0006B4  24458B80   ADDIU A1, V0, -29824
9D0006B8  0F40240C   JAL setTextDisplay
9D0006BC  00000000   NOP
119:                             setTextDisplay(3, "B: Next option");
9D0006C0  24040003   ADDIU A0, ZERO, 3
9D0006C4  3C029D01   LUI V0, -25343
9D0006C8  24458B90   ADDIU A1, V0, -29808
9D0006CC  0F40240C   JAL setTextDisplay
9D0006D0  00000000   NOP
120:                             break;
9D0006D4  0B4003C3   J 0x9D000F0C
9D0006D8  00000000   NOP
121:                         case SELECT:
122:                             setTextDisplay(0, "Player %d:", currentPlayer);
9D0006DC  8F8280C8   LW V0, -32568(GP)
9D0006E0  00002021   ADDU A0, ZERO, ZERO
9D0006E4  3C039D01   LUI V1, -25343
9D0006E8  24658BA0   ADDIU A1, V1, -29792
9D0006EC  00403021   ADDU A2, V0, ZERO
9D0006F0  0F40240C   JAL setTextDisplay
9D0006F4  00000000   NOP
123:                             setTextDisplay(1, "Pick territory");
9D0006F8  24040001   ADDIU A0, ZERO, 1
9D0006FC  3C029D01   LUI V0, -25343
9D000700  24458BAC   ADDIU A1, V0, -29780
9D000704  0F40240C   JAL setTextDisplay
9D000708  00000000   NOP
124:                             setTextDisplay(2, "A: Select");
9D00070C  24040002   ADDIU A0, ZERO, 2
9D000710  3C029D01   LUI V0, -25343
9D000714  24458BBC   ADDIU A1, V0, -29764
9D000718  0F40240C   JAL setTextDisplay
9D00071C  00000000   NOP
125:                             setTextDisplay(3, "%d available", territoriesRemaining);
9D000720  8F828054   LW V0, -32684(GP)
9D000724  24040003   ADDIU A0, ZERO, 3
9D000728  3C039D01   LUI V1, -25343
9D00072C  24658BC8   ADDIU A1, V1, -29752
9D000730  00403021   ADDU A2, V0, ZERO
9D000734  0F40240C   JAL setTextDisplay
9D000738  00000000   NOP
126:                             break;
9D00073C  0B4003C3   J 0x9D000F0C
9D000740  00000000   NOP
127:                         case DEPLOY:
128:                             if(!confirm)
9D000744  8F828074   LW V0, -32652(GP)
9D000748  14400037   BNE V0, ZERO, 0x9D000828
9D00074C  00000000   NOP
129:                             {
130:                                 setTextDisplay(0, "Player %d:", currentPlayer);
9D000750  8F8280C8   LW V0, -32568(GP)
9D000754  00002021   ADDU A0, ZERO, ZERO
9D000758  3C039D01   LUI V1, -25343
9D00075C  24658BA0   ADDIU A1, V1, -29792
9D000760  00403021   ADDU A2, V0, ZERO
9D000764  0F40240C   JAL setTextDisplay
9D000768  00000000   NOP
131:                                 if(multipleDeploy > 1)
9D00076C  8F8280E4   LW V0, -32540(GP)
9D000770  28420002   SLTI V0, V0, 2
9D000774  14400015   BNE V0, ZERO, 0x9D0007CC
9D000778  00000000   NOP
132:                                 {
133:                                     setTextDisplay(1, "Deploy %d troop%s",
9D00077C  8F838058   LW V1, -32680(GP)
9D000784  24020001   ADDIU V0, ZERO, 1
9D000788  14820005   BNE A0, V0, 0x9D0007A0
9D00078C  00000000   NOP
9D000790  3C029D01   LUI V0, -25343
9D000794  24428BD8   ADDIU V0, V0, -29736
9D000798  0B4001EA   J 0x9D0007A8
9D00079C  00000000   NOP
9D0007A0  3C029D01   LUI V0, -25343
9D0007A4  24428BDC   ADDIU V0, V0, -29732
9D0007A8  24040001   ADDIU A0, ZERO, 1
9D0007AC  3C059D01   LUI A1, -25343
9D0007B0  24A58BE0   ADDIU A1, A1, -29728
9D0007B4  00603021   ADDU A2, V1, ZERO
9D0007B8  00403821   ADDU A3, V0, ZERO
9D0007BC  0F40240C   JAL setTextDisplay
9D0007C0  00000000   NOP
9D0007C4  0B4001F8   J 0x9D0007E0
9D0007C8  00000000   NOP
134:                                             numTroops, numTroops == 1? "" : "s");
9D000780  8F848058   LW A0, -32680(GP)
135:                                 }
136:                                 else
137:                                 {
138:                                     setTextDisplay(1, "Deploy troop");
9D0007CC  24040001   ADDIU A0, ZERO, 1
9D0007D0  3C029D01   LUI V0, -25343
9D0007D4  24458BF4   ADDIU A1, V0, -29708
9D0007D8  0F40240C   JAL setTextDisplay
9D0007DC  00000000   NOP
139:                                 }
140:                                 setTextDisplay(2, "A: Place troop");
9D0007E0  24040002   ADDIU A0, ZERO, 2
9D0007E4  3C029D01   LUI V0, -25343
9D0007E8  24458C04   ADDIU A1, V0, -29692
9D0007EC  0F40240C   JAL setTextDisplay
9D0007F0  00000000   NOP
141:                                 setTextDisplay(3, "%d troops left", deployTroopsLeft[currentPlayer]);
9D0007F4  8F8280C8   LW V0, -32568(GP)
9D0007F8  00021880   SLL V1, V0, 2
9D0007FC  2782805C   ADDIU V0, GP, -32676
9D000800  00621021   ADDU V0, V1, V0
9D000804  8C420000   LW V0, 0(V0)
9D000808  24040003   ADDIU A0, ZERO, 3
9D00080C  3C039D01   LUI V1, -25343
9D000810  24658C14   ADDIU A1, V1, -29676
9D000814  00403021   ADDU A2, V0, ZERO
9D000818  0F40240C   JAL setTextDisplay
9D00081C  00000000   NOP
142:                             }
143:                             else
144:                             {
145:                                 setTextDisplay(0, "All troops have been");
9D000828  00002021   ADDU A0, ZERO, ZERO
9D00082C  3C029D01   LUI V0, -25343
9D000830  24458C24   ADDIU A1, V0, -29660
9D000834  0F40240C   JAL setTextDisplay
9D000838  00000000   NOP
146:                                 setTextDisplay(1, "deployed.");
9D00083C  24040001   ADDIU A0, ZERO, 1
9D000840  3C029D01   LUI V0, -25343
9D000844  24458C3C   ADDIU A1, V0, -29636
9D000848  0F40240C   JAL setTextDisplay
9D00084C  00000000   NOP
147:                                 setTextDisplay(2, "");
9D000850  24040002   ADDIU A0, ZERO, 2
9D000854  3C029D01   LUI V0, -25343
9D000858  24458BD8   ADDIU A1, V0, -29736
9D00085C  0F40240C   JAL setTextDisplay
9D000860  00000000   NOP
148:                                 setTextDisplay(3, "B: Begin play");
9D000864  24040003   ADDIU A0, ZERO, 3
9D000868  3C029D01   LUI V0, -25343
9D00086C  24458C48   ADDIU A1, V0, -29624
9D000870  0F40240C   JAL setTextDisplay
9D000874  00000000   NOP
149:                             }
150:                             break;
9D000820  0B4003C3   J 0x9D000F0C
9D000824  00000000   NOP
9D000878  0B4003C3   J 0x9D000F0C
9D00087C  00000000   NOP
151:                         case REINFORCE:
152:                             if(reinforceMenu && !confirm)
9D000880  8F828070   LW V0, -32656(GP)
9D000884  1040001A   BEQ V0, ZERO, 0x9D0008F0
9D000888  00000000   NOP
9D00088C  8F828074   LW V0, -32652(GP)
9D000890  14400017   BNE V0, ZERO, 0x9D0008F0
9D000894  00000000   NOP
153:                             {
154:                                 setTextDisplay(0, "Options:");
9D000898  00002021   ADDU A0, ZERO, ZERO
9D00089C  3C029D01   LUI V0, -25343
9D0008A0  24458C58   ADDIU A1, V0, -29608
9D0008A4  0F40240C   JAL setTextDisplay
9D0008A8  00000000   NOP
155:                                 setTextDisplay(1, "End game?");
9D0008AC  24040001   ADDIU A0, ZERO, 1
9D0008B0  3C029D01   LUI V0, -25343
9D0008B4  24458C64   ADDIU A1, V0, -29596
9D0008B8  0F40240C   JAL setTextDisplay
9D0008BC  00000000   NOP
156:                                 setTextDisplay(2, "A: End game");
9D0008C0  24040002   ADDIU A0, ZERO, 2
9D0008C4  3C029D01   LUI V0, -25343
9D0008C8  24458C70   ADDIU A1, V0, -29584
9D0008CC  0F40240C   JAL setTextDisplay
9D0008D0  00000000   NOP
157:                                 setTextDisplay(3, "B: Cancel");
9D0008D4  24040003   ADDIU A0, ZERO, 3
9D0008D8  3C029D01   LUI V0, -25343
9D0008DC  24458C7C   ADDIU A1, V0, -29572
9D0008E0  0F40240C   JAL setTextDisplay
9D0008E4  00000000   NOP
9D0008E8  0B400295   J 0x9D000A54
9D0008EC  00000000   NOP
158:                             }
159:                             else if(reinforceMenu && confirm)
9D0008F0  8F828070   LW V0, -32656(GP)
9D0008F4  1040001A   BEQ V0, ZERO, 0x9D000960
9D0008F8  00000000   NOP
9D0008FC  8F828074   LW V0, -32652(GP)
9D000900  10400017   BEQ V0, ZERO, 0x9D000960
9D000904  00000000   NOP
160:                             {
161:                                 setTextDisplay(0, "Really end game?");
9D000908  00002021   ADDU A0, ZERO, ZERO
9D00090C  3C029D01   LUI V0, -25343
9D000910  24458C88   ADDIU A1, V0, -29560
9D000914  0F40240C   JAL setTextDisplay
9D000918  00000000   NOP
162:                                 setTextDisplay(1, "");
9D00091C  24040001   ADDIU A0, ZERO, 1
9D000920  3C029D01   LUI V0, -25343
9D000924  24458BD8   ADDIU A1, V0, -29736
9D000928  0F40240C   JAL setTextDisplay
9D00092C  00000000   NOP
163:                                 setTextDisplay(2, "A: Yes");
9D000930  24040002   ADDIU A0, ZERO, 2
9D000934  3C029D01   LUI V0, -25343
9D000938  24458C9C   ADDIU A1, V0, -29540
9D00093C  0F40240C   JAL setTextDisplay
9D000940  00000000   NOP
164:                                 setTextDisplay(3, "B: No");
9D000944  24040003   ADDIU A0, ZERO, 3
9D000948  3C029D01   LUI V0, -25343
9D00094C  24458CA4   ADDIU A1, V0, -29532
9D000950  0F40240C   JAL setTextDisplay
9D000954  00000000   NOP
9D000958  0B400295   J 0x9D000A54
9D00095C  00000000   NOP
165:                             }
166:                             else if(numTroops == 0 && mustTrade)
9D000960  8F828058   LW V0, -32680(GP)
9D000964  14400023   BNE V0, ZERO, 0x9D0009F4
9D000968  00000000   NOP
9D00096C  8F828064   LW V0, -32668(GP)
9D000970  10400020   BEQ V0, ZERO, 0x9D0009F4
9D000974  00000000   NOP
167:                             {
168:                                 setTextDisplay(0, "%d cards in hand", 
9D000978  8F8280C8   LW V0, -32568(GP)
9D00097C  3C038000   LUI V1, -32768
9D000980  00021080   SLL V0, V0, 2
9D000984  00022100   SLL A0, V0, 4
9D000988  00441021   ADDU V0, V0, A0
9D00098C  24630118   ADDIU V1, V1, 280
9D000990  00431021   ADDU V0, V0, V1
9D000994  8C420040   LW V0, 64(V0)
9D000998  00002021   ADDU A0, ZERO, ZERO
9D00099C  3C039D01   LUI V1, -25343
9D0009A0  24658CAC   ADDIU A1, V1, -29524
9D0009A4  00403021   ADDU A2, V0, ZERO
9D0009A8  0F40240C   JAL setTextDisplay
9D0009AC  00000000   NOP
169:                                         hands[currentPlayer].cards);
170:                                 setTextDisplay(1, "You must exchange");
9D0009B0  24040001   ADDIU A0, ZERO, 1
9D0009B4  3C029D01   LUI V0, -25343
9D0009B8  24458CC0   ADDIU A1, V0, -29504
9D0009BC  0F40240C   JAL setTextDisplay
9D0009C0  00000000   NOP
171:                                 setTextDisplay(2, "cards to continue");
9D0009C4  24040002   ADDIU A0, ZERO, 2
9D0009C8  3C029D01   LUI V0, -25343
9D0009CC  24458CD4   ADDIU A1, V0, -29484
9D0009D0  0F40240C   JAL setTextDisplay
9D0009D4  00000000   NOP
172:                                 setTextDisplay(3, "B: Other options");            
9D0009D8  24040003   ADDIU A0, ZERO, 3
9D0009DC  3C029D01   LUI V0, -25343
9D0009E0  24458CE8   ADDIU A1, V0, -29464
9D0009E4  0F40240C   JAL setTextDisplay
9D0009E8  00000000   NOP
9D0009EC  0B400295   J 0x9D000A54
9D0009F0  00000000   NOP
173:                             }
174:                             else
175:                             {
176:                                 setTextDisplay(0, "Reinforcements");
9D0009F4  00002021   ADDU A0, ZERO, ZERO
9D0009F8  3C029D01   LUI V0, -25343
9D0009FC  24458CFC   ADDIU A1, V0, -29444
9D000A00  0F40240C   JAL setTextDisplay
9D000A04  00000000   NOP
177:                                 setTextDisplay(1, "%d troops left", numTroops);
9D000A08  8F828058   LW V0, -32680(GP)
9D000A0C  24040001   ADDIU A0, ZERO, 1
9D000A10  3C039D01   LUI V1, -25343
9D000A14  24658C14   ADDIU A1, V1, -29676
9D000A18  00403021   ADDU A2, V0, ZERO
9D000A1C  0F40240C   JAL setTextDisplay
9D000A20  00000000   NOP
178:                                 setTextDisplay(2, "A: Place troop");
9D000A24  24040002   ADDIU A0, ZERO, 2
9D000A28  3C029D01   LUI V0, -25343
9D000A2C  24458C04   ADDIU A1, V0, -29692
9D000A30  0F40240C   JAL setTextDisplay
9D000A34  00000000   NOP
179:                                 setTextDisplay(3, "B: Other options");
9D000A38  24040003   ADDIU A0, ZERO, 3
9D000A3C  3C029D01   LUI V0, -25343
9D000A40  24458CE8   ADDIU A1, V0, -29464
9D000A44  0F40240C   JAL setTextDisplay
9D000A48  00000000   NOP
180:                             }
181:                             break;
9D000A4C  0B4003C3   J 0x9D000F0C
9D000A50  00000000   NOP
9D000A54  0B4003C3   J 0x9D000F0C
9D000A58  00000000   NOP
182:                         case ATTACK1:
183:                             if(!confirm)
9D000A5C  8F828074   LW V0, -32652(GP)
9D000A60  14400017   BNE V0, ZERO, 0x9D000AC0
9D000A64  00000000   NOP
184:                             {
185:                                 setTextDisplay(0, "Declare attacks");
9D000A68  00002021   ADDU A0, ZERO, ZERO
9D000A6C  3C029D01   LUI V0, -25343
9D000A70  24458D0C   ADDIU A1, V0, -29428
9D000A74  0F40240C   JAL setTextDisplay
9D000A78  00000000   NOP
186:                                 setTextDisplay(1, "");
9D000A7C  24040001   ADDIU A0, ZERO, 1
9D000A80  3C029D01   LUI V0, -25343
9D000A84  24458BD8   ADDIU A1, V0, -29736
9D000A88  0F40240C   JAL setTextDisplay
9D000A8C  00000000   NOP
187:                                 setTextDisplay(2, "A: Choose attacker");
9D000A90  24040002   ADDIU A0, ZERO, 2
9D000A94  3C029D01   LUI V0, -25343
9D000A98  24458D1C   ADDIU A1, V0, -29412
9D000A9C  0F40240C   JAL setTextDisplay
9D000AA0  00000000   NOP
188:                                 setTextDisplay(3, "B: Stop attacking");
9D000AA4  24040003   ADDIU A0, ZERO, 3
9D000AA8  3C029D01   LUI V0, -25343
9D000AAC  24458D30   ADDIU A1, V0, -29392
9D000AB0  0F40240C   JAL setTextDisplay
9D000AB4  00000000   NOP
189:                             }
190:                             else
191:                             {
192:                                 setTextDisplay(0, "Really stop");
9D000AC0  00002021   ADDU A0, ZERO, ZERO
9D000AC4  3C029D01   LUI V0, -25343
9D000AC8  24458D44   ADDIU A1, V0, -29372
9D000ACC  0F40240C   JAL setTextDisplay
9D000AD0  00000000   NOP
193:                                 setTextDisplay(1, "attacking?");
9D000AD4  24040001   ADDIU A0, ZERO, 1
9D000AD8  3C029D01   LUI V0, -25343
9D000ADC  24458D50   ADDIU A1, V0, -29360
9D000AE0  0F40240C   JAL setTextDisplay
9D000AE4  00000000   NOP
194:                                 setTextDisplay(2, "A: Yes");
9D000AE8  24040002   ADDIU A0, ZERO, 2
9D000AEC  3C029D01   LUI V0, -25343
9D000AF0  24458C9C   ADDIU A1, V0, -29540
9D000AF4  0F40240C   JAL setTextDisplay
9D000AF8  00000000   NOP
195:                                 setTextDisplay(3, "B: No");
9D000AFC  24040003   ADDIU A0, ZERO, 3
9D000B00  3C029D01   LUI V0, -25343
9D000B04  24458CA4   ADDIU A1, V0, -29532
9D000B08  0F40240C   JAL setTextDisplay
9D000B0C  00000000   NOP
196:                             }
197:                             break;
9D000AB8  0B4003C3   J 0x9D000F0C
9D000ABC  00000000   NOP
9D000B10  0B4003C3   J 0x9D000F0C
9D000B14  00000000   NOP
198:                         case ATTACK2:
199:                             setTextDisplay(0, "Declare attacks");
9D000B18  00002021   ADDU A0, ZERO, ZERO
9D000B1C  3C029D01   LUI V0, -25343
9D000B20  24458D0C   ADDIU A1, V0, -29428
9D000B24  0F40240C   JAL setTextDisplay
9D000B28  00000000   NOP
200:                             setTextDisplay(1, "(%s)", territories[source].name);
9D000B2C  8F8280E0   LW V0, -32544(GP)
9D000B30  3C048000   LUI A0, -32768
9D000B34  000210C0   SLL V0, V0, 3
9D000B38  00021880   SLL V1, V0, 2
9D000B3C  00621823   SUBU V1, V1, V0
9D000B40  248241B0   ADDIU V0, A0, 16816
9D000B44  00621021   ADDU V0, V1, V0
9D000B48  8C420000   LW V0, 0(V0)
9D000B4C  24040001   ADDIU A0, ZERO, 1
9D000B50  3C039D01   LUI V1, -25343
9D000B54  24658D5C   ADDIU A1, V1, -29348
9D000B58  00403021   ADDU A2, V0, ZERO
9D000B5C  0F40240C   JAL setTextDisplay
9D000B60  00000000   NOP
201:                             setTextDisplay(2, "A: Choose target");
9D000B64  24040002   ADDIU A0, ZERO, 2
9D000B68  3C029D01   LUI V0, -25343
9D000B6C  24458D64   ADDIU A1, V0, -29340
9D000B70  0F40240C   JAL setTextDisplay
9D000B74  00000000   NOP
202:                             setTextDisplay(3, "B: Back");
9D000B78  24040003   ADDIU A0, ZERO, 3
9D000B7C  3C029D01   LUI V0, -25343
9D000B80  24458D78   ADDIU A1, V0, -29320
9D000B84  0F40240C   JAL setTextDisplay
9D000B88  00000000   NOP
203:                             break;
9D000B8C  0B4003C3   J 0x9D000F0C
9D000B90  00000000   NOP
204:                         case BATTLE:
205:                             setTextDisplay(0, "%s vs", territories[source].name);
9D000B94  8F8280E0   LW V0, -32544(GP)
9D000B98  3C048000   LUI A0, -32768
9D000B9C  000210C0   SLL V0, V0, 3
9D000BA0  00021880   SLL V1, V0, 2
9D000BA4  00621823   SUBU V1, V1, V0
9D000BA8  248241B0   ADDIU V0, A0, 16816
9D000BAC  00621021   ADDU V0, V1, V0
9D000BB0  8C420000   LW V0, 0(V0)
9D000BB4  00002021   ADDU A0, ZERO, ZERO
9D000BB8  3C039D01   LUI V1, -25343
9D000BBC  24658D80   ADDIU A1, V1, -29312
9D000BC0  00403021   ADDU A2, V0, ZERO
9D000BC4  0F40240C   JAL setTextDisplay
9D000BC8  00000000   NOP
206:                             setTextDisplay(1, "%s!", territories[destination].name);
9D000BCC  8F8280D4   LW V0, -32556(GP)
9D000BD0  3C048000   LUI A0, -32768
9D000BD4  000210C0   SLL V0, V0, 3
9D000BD8  00021880   SLL V1, V0, 2
9D000BDC  00621823   SUBU V1, V1, V0
9D000BE0  248241B0   ADDIU V0, A0, 16816
9D000BE4  00621021   ADDU V0, V1, V0
9D000BE8  8C420000   LW V0, 0(V0)
9D000BEC  24040001   ADDIU A0, ZERO, 1
9D000BF0  3C039D01   LUI V1, -25343
9D000BF4  24658D88   ADDIU A1, V1, -29304
9D000BF8  00403021   ADDU A2, V0, ZERO
9D000BFC  0F40240C   JAL setTextDisplay
9D000C00  00000000   NOP
207:                             setTextDisplay(2, "A: Roll dice");
9D000C04  24040002   ADDIU A0, ZERO, 2
9D000C08  3C029D01   LUI V0, -25343
9D000C0C  24458D8C   ADDIU A1, V0, -29300
9D000C10  0F40240C   JAL setTextDisplay
9D000C14  00000000   NOP
208:                             setTextDisplay(3, "B: Retreat");
9D000C18  24040003   ADDIU A0, ZERO, 3
9D000C1C  3C029D01   LUI V0, -25343
9D000C20  24458D9C   ADDIU A1, V0, -29284
9D000C24  0F40240C   JAL setTextDisplay
9D000C28  00000000   NOP
209:                             break;
9D000C2C  0B4003C3   J 0x9D000F0C
9D000C30  00000000   NOP
210:                         case CONQUER:
211:                             setTextDisplay(0, "Move troops into");
9D000C34  00002021   ADDU A0, ZERO, ZERO
9D000C38  3C029D01   LUI V0, -25343
9D000C3C  24458DA8   ADDIU A1, V0, -29272
9D000C40  0F40240C   JAL setTextDisplay
9D000C44  00000000   NOP
212:                             setTextDisplay(1, "%s", territories[destination].name);
9D000C48  8F8280D4   LW V0, -32556(GP)
9D000C4C  3C048000   LUI A0, -32768
9D000C50  000210C0   SLL V0, V0, 3
9D000C54  00021880   SLL V1, V0, 2
9D000C58  00621823   SUBU V1, V1, V0
9D000C5C  248241B0   ADDIU V0, A0, 16816
9D000C60  00621021   ADDU V0, V1, V0
9D000C64  8C420000   LW V0, 0(V0)
9D000C68  24040001   ADDIU A0, ZERO, 1
9D000C6C  3C039D01   LUI V1, -25343
9D000C70  24658DBC   ADDIU A1, V1, -29252
9D000C74  00403021   ADDU A2, V0, ZERO
9D000C78  0F40240C   JAL setTextDisplay
9D000C7C  00000000   NOP
213:                             setTextDisplay(2, "A: Confirm troops");
9D000C80  24040002   ADDIU A0, ZERO, 2
9D000C84  3C029D01   LUI V0, -25343
9D000C88  24458DC0   ADDIU A1, V0, -29248
9D000C8C  0F40240C   JAL setTextDisplay
9D000C90  00000000   NOP
214:                             setTextDisplay(3, "");
9D000C94  24040003   ADDIU A0, ZERO, 3
9D000C98  3C029D01   LUI V0, -25343
9D000C9C  24458BD8   ADDIU A1, V0, -29736
9D000CA0  0F40240C   JAL setTextDisplay
9D000CA4  00000000   NOP
215:                             break;
9D000CA8  0B4003C3   J 0x9D000F0C
9D000CAC  00000000   NOP
216:                         case MOVE1:
217:                             if(!confirm)
9D000CB0  8F828074   LW V0, -32652(GP)
9D000CB4  14400017   BNE V0, ZERO, 0x9D000D14
9D000CB8  00000000   NOP
218:                             {
219:                                 setTextDisplay(0, "Make free move");
9D000CBC  00002021   ADDU A0, ZERO, ZERO
9D000CC0  3C029D01   LUI V0, -25343
9D000CC4  24458DD4   ADDIU A1, V0, -29228
9D000CC8  0F40240C   JAL setTextDisplay
9D000CCC  00000000   NOP
220:                                 setTextDisplay(1, "");
9D000CD0  24040001   ADDIU A0, ZERO, 1
9D000CD4  3C029D01   LUI V0, -25343
9D000CD8  24458BD8   ADDIU A1, V0, -29736
9D000CDC  0F40240C   JAL setTextDisplay
9D000CE0  00000000   NOP
221:                                 setTextDisplay(2, "A: Choose source");
9D000CE4  24040002   ADDIU A0, ZERO, 2
9D000CE8  3C029D01   LUI V0, -25343
9D000CEC  24458DE4   ADDIU A1, V0, -29212
9D000CF0  0F40240C   JAL setTextDisplay
9D000CF4  00000000   NOP
222:                                 setTextDisplay(3, "B: End turn");
9D000CF8  24040003   ADDIU A0, ZERO, 3
9D000CFC  3C029D01   LUI V0, -25343
9D000D00  24458DF8   ADDIU A1, V0, -29192
9D000D04  0F40240C   JAL setTextDisplay
9D000D08  00000000   NOP
223:                             }
224:                             else
225:                             {
226:                                 setTextDisplay(0, "Really end turn");
9D000D14  00002021   ADDU A0, ZERO, ZERO
9D000D18  3C029D01   LUI V0, -25343
9D000D1C  24458E04   ADDIU A1, V0, -29180
9D000D20  0F40240C   JAL setTextDisplay
9D000D24  00000000   NOP
227:                                 setTextDisplay(1, "without a move?");
9D000D28  24040001   ADDIU A0, ZERO, 1
9D000D2C  3C029D01   LUI V0, -25343
9D000D30  24458E14   ADDIU A1, V0, -29164
9D000D34  0F40240C   JAL setTextDisplay
9D000D38  00000000   NOP
228:                                 setTextDisplay(2, "A: Yes");
9D000D3C  24040002   ADDIU A0, ZERO, 2
9D000D40  3C029D01   LUI V0, -25343
9D000D44  24458C9C   ADDIU A1, V0, -29540
9D000D48  0F40240C   JAL setTextDisplay
9D000D4C  00000000   NOP
229:                                 setTextDisplay(3, "B: No");
9D000D50  24040003   ADDIU A0, ZERO, 3
9D000D54  3C029D01   LUI V0, -25343
9D000D58  24458CA4   ADDIU A1, V0, -29532
9D000D5C  0F40240C   JAL setTextDisplay
9D000D60  00000000   NOP
230:                             }
231:                             break;
9D000D0C  0B4003C3   J 0x9D000F0C
9D000D10  00000000   NOP
9D000D64  0B4003C3   J 0x9D000F0C
9D000D68  00000000   NOP
232:                         case MOVE2:
233:                             setTextDisplay(0, "Make free move");
9D000D6C  00002021   ADDU A0, ZERO, ZERO
9D000D70  3C029D01   LUI V0, -25343
9D000D74  24458DD4   ADDIU A1, V0, -29228
9D000D78  0F40240C   JAL setTextDisplay
9D000D7C  00000000   NOP
234:                             setTextDisplay(1, "(%s)", territories[source].name);
9D000D80  8F8280E0   LW V0, -32544(GP)
9D000D84  3C048000   LUI A0, -32768
9D000D88  000210C0   SLL V0, V0, 3
9D000D8C  00021880   SLL V1, V0, 2
9D000D90  00621823   SUBU V1, V1, V0
9D000D94  248241B0   ADDIU V0, A0, 16816
9D000D98  00621021   ADDU V0, V1, V0
9D000D9C  8C420000   LW V0, 0(V0)
9D000DA0  24040001   ADDIU A0, ZERO, 1
9D000DA4  3C039D01   LUI V1, -25343
9D000DA8  24658D5C   ADDIU A1, V1, -29348
9D000DAC  00403021   ADDU A2, V0, ZERO
9D000DB0  0F40240C   JAL setTextDisplay
9D000DB4  00000000   NOP
235:                             setTextDisplay(2, "A: Choose detination");
9D000DB8  24040002   ADDIU A0, ZERO, 2
9D000DBC  3C029D01   LUI V0, -25343
9D000DC0  24458E24   ADDIU A1, V0, -29148
9D000DC4  0F40240C   JAL setTextDisplay
9D000DC8  00000000   NOP
236:                             setTextDisplay(3, "B: Back");
9D000DCC  24040003   ADDIU A0, ZERO, 3
9D000DD0  3C029D01   LUI V0, -25343
9D000DD4  24458D78   ADDIU A1, V0, -29320
9D000DD8  0F40240C   JAL setTextDisplay
9D000DDC  00000000   NOP
237:                             break;
9D000DE0  0B4003C3   J 0x9D000F0C
9D000DE4  00000000   NOP
238:                         case MOVE3:
239:                             setTextDisplay(0, "%s -->", territories[source].name);
9D000DE8  8F8280E0   LW V0, -32544(GP)
9D000DEC  3C048000   LUI A0, -32768
9D000DF0  000210C0   SLL V0, V0, 3
9D000DF4  00021880   SLL V1, V0, 2
9D000DF8  00621823   SUBU V1, V1, V0
9D000DFC  248241B0   ADDIU V0, A0, 16816
9D000E00  00621021   ADDU V0, V1, V0
9D000E04  8C420000   LW V0, 0(V0)
9D000E08  00002021   ADDU A0, ZERO, ZERO
9D000E0C  3C039D01   LUI V1, -25343
9D000E10  24658E3C   ADDIU A1, V1, -29124
9D000E14  00403021   ADDU A2, V0, ZERO
9D000E18  0F40240C   JAL setTextDisplay
9D000E1C  00000000   NOP
240:                             setTextDisplay(1, "%s", territories[destination].name);
9D000E20  8F8280D4   LW V0, -32556(GP)
9D000E24  3C048000   LUI A0, -32768
9D000E28  000210C0   SLL V0, V0, 3
9D000E2C  00021880   SLL V1, V0, 2
9D000E30  00621823   SUBU V1, V1, V0
9D000E34  248241B0   ADDIU V0, A0, 16816
9D000E38  00621021   ADDU V0, V1, V0
9D000E3C  8C420000   LW V0, 0(V0)
9D000E40  24040001   ADDIU A0, ZERO, 1
9D000E44  3C039D01   LUI V1, -25343
9D000E48  24658DBC   ADDIU A1, V1, -29252
9D000E4C  00403021   ADDU A2, V0, ZERO
9D000E50  0F40240C   JAL setTextDisplay
9D000E54  00000000   NOP
241:                             setTextDisplay(2, "A: Confirm number");
9D000E58  24040002   ADDIU A0, ZERO, 2
9D000E5C  3C029D01   LUI V0, -25343
9D000E60  24458E44   ADDIU A1, V0, -29116
9D000E64  0F40240C   JAL setTextDisplay
9D000E68  00000000   NOP
242:                             setTextDisplay(3, "B: Back");
9D000E6C  24040003   ADDIU A0, ZERO, 3
9D000E70  3C029D01   LUI V0, -25343
9D000E74  24458D78   ADDIU A1, V0, -29320
9D000E78  0F40240C   JAL setTextDisplay
9D000E7C  00000000   NOP
243:                             break;
9D000E80  0B4003C3   J 0x9D000F0C
9D000E84  00000000   NOP
244:                         case GAMEOVER:
245:                             setTextDisplay(0, "Player %d wins!", currentPlayer);
9D000E88  8F8280C8   LW V0, -32568(GP)
9D000E8C  00002021   ADDU A0, ZERO, ZERO
9D000E90  3C039D01   LUI V1, -25343
9D000E94  24658E58   ADDIU A1, V1, -29096
9D000E98  00403021   ADDU A2, V0, ZERO
9D000E9C  0F40240C   JAL setTextDisplay
9D000EA0  00000000   NOP
246:                             setTextDisplay(1, "   R   I   S   K    ");
9D000EA4  24040001   ADDIU A0, ZERO, 1
9D000EA8  3C029D01   LUI V0, -25343
9D000EAC  24458E68   ADDIU A1, V0, -29080
9D000EB0  0F40240C   JAL setTextDisplay
9D000EB4  00000000   NOP
247:                             setTextDisplay(2, "  C H A M P I O N   ");
9D000EB8  24040002   ADDIU A0, ZERO, 2
9D000EBC  3C029D01   LUI V0, -25343
9D000EC0  24458E80   ADDIU A1, V0, -29056
9D000EC4  0F40240C   JAL setTextDisplay
9D000EC8  00000000   NOP
248:                             setTextDisplay(3, "B: Start new game");
9D000ECC  24040003   ADDIU A0, ZERO, 3
9D000ED0  3C029D01   LUI V0, -25343
9D000ED4  24458E98   ADDIU A1, V0, -29032
9D000ED8  0F40240C   JAL setTextDisplay
9D000EDC  00000000   NOP
249:                             break;
9D000EE0  0B4003C3   J 0x9D000F0C
9D000EE4  00000000   NOP
250:                         default:
251:                             PANIC("game in invalid state");
9D000EE8  240400FB   ADDIU A0, ZERO, 251
9D000EEC  3C029D01   LUI V0, -25343
9D000EF0  24458AB4   ADDIU A1, V0, -30028
9D000EF4  3C029D01   LUI V0, -25343
9D000EF8  24468EAC   ADDIU A2, V0, -29012
9D000EFC  3C029D01   LUI V0, -25343
9D000F00  24478AC4   ADDIU A3, V0, -30012
9D000F04  0F401971   JAL panic
9D000F08  00000000   NOP
252:                     }
253:                 }
9D000F0C  03C0E821   ADDU SP, S8, ZERO
9D000F10  8FBF0014   LW RA, 20(SP)
9D000F14  8FBE0010   LW S8, 16(SP)
9D000F18  27BD0018   ADDIU SP, SP, 24
9D000F1C  03E00008   JR RA
9D000F20  00000000   NOP
254:                 
255:                 void chooseOptions(Input input)
256:                 {
9D000F24  27BDFFE8   ADDIU SP, SP, -24
9D000F28  AFBF0014   SW RA, 20(SP)
9D000F2C  AFBE0010   SW S8, 16(SP)
9D000F30  03A0F021   ADDU S8, SP, ZERO
9D000F34  AFC40018   SW A0, 24(S8)
257:                     if(input == ADVANCE)
9D000F38  8FC20018   LW V0, 24(S8)
9D000F3C  1440000E   BNE V0, ZERO, 0x9D000F78
9D000F40  00000000   NOP
258:                     {
259:                         changeState(SELECT);
9D000F44  24040001   ADDIU A0, ZERO, 1
9D000F48  0F4009A2   JAL changeState
9D000F4C  00000000   NOP
260:                         if(randomTerritories)
9D000F50  8F8280CC   LW V0, -32564(GP)
9D000F54  1040009C   BEQ V0, ZERO, 0x9D0011C8
9D000F58  00000000   NOP
261:                         {
262:                             allocateRandomTerritories();
9D000F5C  0F400B28   JAL allocateRandomTerritories
9D000F60  00000000   NOP
263:                             changeState(DEPLOY);
9D000F64  24040002   ADDIU A0, ZERO, 2
9D000F68  0F4009A2   JAL changeState
9D000F6C  00000000   NOP
264:                         }
265:                         return;
9D000F70  0B400479   J 0x9D0011E4
9D000F74  00000000   NOP
9D0011C8  00000000   NOP
9D0011CC  0B400479   J 0x9D0011E4
9D0011D0  00000000   NOP
266:                     }
267:                     if(currentOption == OPTION_NUM_PLAYERS)
9D000F78  8F82806C   LW V0, -32660(GP)
9D000F7C  14400023   BNE V0, ZERO, 0x9D00100C
9D000F80  00000000   NOP
268:                     {
269:                         if(input == NEXT && numPlayers < MAX_PLAYERS)
9D000F84  8FC30018   LW V1, 24(S8)
9D000F88  24020002   ADDIU V0, ZERO, 2
9D000F8C  1462000A   BNE V1, V0, 0x9D000FB8
9D000F90  00000000   NOP
9D000F94  8F8280D0   LW V0, -32560(GP)
9D000F98  28420002   SLTI V0, V0, 2
9D000F9C  10400006   BEQ V0, ZERO, 0x9D000FB8
9D000FA0  00000000   NOP
270:                             numPlayers += 1;
9D000FA4  8F8280D0   LW V0, -32560(GP)
9D000FA8  24420001   ADDIU V0, V0, 1
9D000FAC  AF8280D0   SW V0, -32560(GP)
9D000FB0  0B400479   J 0x9D0011E4
9D000FB4  00000000   NOP
271:                         else if(input == PREVIOUS && numPlayers > 2)
9D000FB8  8FC30018   LW V1, 24(S8)
9D000FBC  24020003   ADDIU V0, ZERO, 3
9D000FC0  1462000A   BNE V1, V0, 0x9D000FEC
9D000FC4  00000000   NOP
9D000FC8  8F8280D0   LW V0, -32560(GP)
9D000FCC  28420003   SLTI V0, V0, 3
9D000FD0  14400006   BNE V0, ZERO, 0x9D000FEC
9D000FD4  00000000   NOP
272:                             numPlayers -= 1;
9D000FD8  8F8280D0   LW V0, -32560(GP)
9D000FDC  2442FFFF   ADDIU V0, V0, -1
9D000FE0  AF8280D0   SW V0, -32560(GP)
9D000FE4  0B400479   J 0x9D0011E4
9D000FE8  00000000   NOP
273:                         else if(input == CANCEL)
9D000FEC  8FC30018   LW V1, 24(S8)
9D000FF0  24020001   ADDIU V0, ZERO, 1
9D000FF4  14620077   BNE V1, V0, 0x9D0011D4
9D000FF8  00000000   NOP
274:                             currentOption = OPTION_RANDOM_TERRITORIES;
9D000FFC  24020002   ADDIU V0, ZERO, 2
9D001000  AF82806C   SW V0, -32660(GP)
9D001004  0B400479   J 0x9D0011E4
9D001008  00000000   NOP
9D0011D4  00000000   NOP
9D0011D8  0B400479   J 0x9D0011E4
9D0011DC  00000000   NOP
275:                     }
276:                     else if(currentOption == OPTION_RANDOM_TERRITORIES)
9D00100C  8F83806C   LW V1, -32660(GP)
9D001010  24020002   ADDIU V0, ZERO, 2
9D001014  14620016   BNE V1, V0, 0x9D001070
9D001018  00000000   NOP
277:                     {
278:                         if(input == NEXT || input == PREVIOUS)
9D00101C  8FC30018   LW V1, 24(S8)
9D001020  24020002   ADDIU V0, ZERO, 2
9D001024  10620005   BEQ V1, V0, 0x9D00103C
9D001028  00000000   NOP
9D00102C  8FC30018   LW V1, 24(S8)
9D001030  24020003   ADDIU V0, ZERO, 3
9D001034  14620006   BNE V1, V0, 0x9D001050
9D001038  00000000   NOP
279:                             randomTerritories = !randomTerritories;
9D00103C  8F8280CC   LW V0, -32564(GP)
9D001040  2C420001   SLTIU V0, V0, 1
9D001044  AF8280CC   SW V0, -32564(GP)
9D001048  0B400479   J 0x9D0011E4
9D00104C  00000000   NOP
280:                         else if(input == CANCEL)
9D001050  8FC30018   LW V1, 24(S8)
9D001054  24020001   ADDIU V0, ZERO, 1
9D001058  14620061   BNE V1, V0, 0x9D0011E0
9D00105C  00000000   NOP
281:                             currentOption = OPTION_MULTIPLE_DEPLOY;
9D001060  24020003   ADDIU V0, ZERO, 3
9D001064  AF82806C   SW V0, -32660(GP)
9D001068  0B400479   J 0x9D0011E4
9D00106C  00000000   NOP
9D0011E0  00000000   NOP
282:                     }
283:                     else if(currentOption == OPTION_MULTIPLE_DEPLOY)
9D001070  8F83806C   LW V1, -32660(GP)
9D001074  24020003   ADDIU V0, ZERO, 3
9D001078  14620029   BNE V1, V0, 0x9D001120
9D00107C  00000000   NOP
284:                     {
285:                         if(input == NEXT)
9D001080  8FC30018   LW V1, 24(S8)
9D001084  24020002   ADDIU V0, ZERO, 2
9D001088  1462000D   BNE V1, V0, 0x9D0010C0
9D00108C  00000000   NOP
286:                             multipleDeploy = (multipleDeploy == 5? 1 : multipleDeploy + 2);
9D001090  8F8380E4   LW V1, -32540(GP)
9D001094  24020005   ADDIU V0, ZERO, 5
9D001098  10620005   BEQ V1, V0, 0x9D0010B0
9D00109C  00000000   NOP
9D0010A0  8F8280E4   LW V0, -32540(GP)
9D0010A4  24420002   ADDIU V0, V0, 2
9D0010A8  0B40042D   J 0x9D0010B4
9D0010AC  00000000   NOP
9D0010B0  24020001   ADDIU V0, ZERO, 1
9D0010B4  AF8280E4   SW V0, -32540(GP)
9D0010B8  0B400479   J 0x9D0011E4
9D0010BC  00000000   NOP
287:                         else if(input == PREVIOUS)
9D0010C0  8FC30018   LW V1, 24(S8)
9D0010C4  24020003   ADDIU V0, ZERO, 3
9D0010C8  1462000D   BNE V1, V0, 0x9D001100
9D0010CC  00000000   NOP
288:                             multipleDeploy = (multipleDeploy == 1? 5 : multipleDeploy - 2);
9D0010D0  8F8380E4   LW V1, -32540(GP)
9D0010D4  24020001   ADDIU V0, ZERO, 1
9D0010D8  10620005   BEQ V1, V0, 0x9D0010F0
9D0010DC  00000000   NOP
9D0010E0  8F8280E4   LW V0, -32540(GP)
9D0010E4  2442FFFE   ADDIU V0, V0, -2
9D0010E8  0B40043D   J 0x9D0010F4
9D0010EC  00000000   NOP
9D0010F0  24020005   ADDIU V0, ZERO, 5
9D0010F4  AF8280E4   SW V0, -32540(GP)
9D0010F8  0B400479   J 0x9D0011E4
9D0010FC  00000000   NOP
289:                         else if(input == CANCEL)
9D001100  8FC30018   LW V1, 24(S8)
9D001104  24020001   ADDIU V0, ZERO, 1
9D001108  14620036   BNE V1, V0, 0x9D0011E4
9D00110C  00000000   NOP
290:                             currentOption = OPTION_CARD_SCHEME;
9D001110  24020001   ADDIU V0, ZERO, 1
9D001114  AF82806C   SW V0, -32660(GP)
9D001118  0B400479   J 0x9D0011E4
9D00111C  00000000   NOP
291:                     }
292:                     else if(currentOption == OPTION_CARD_SCHEME)
9D001120  8F83806C   LW V1, -32660(GP)
9D001124  24020001   ADDIU V0, ZERO, 1
9D001128  1462002E   BNE V1, V0, 0x9D0011E4
9D00112C  00000000   NOP
293:                     {
294:                         if(input == NEXT)
9D001130  8FC30018   LW V1, 24(S8)
9D001134  24020002   ADDIU V0, ZERO, 2
9D001138  1462000D   BNE V1, V0, 0x9D001170
9D00113C  00000000   NOP
295:                             cardValueScheme = (cardValueScheme == 2? 0 : cardValueScheme + 1);
9D001140  8F8380C0   LW V1, -32576(GP)
9D001144  24020002   ADDIU V0, ZERO, 2
9D001148  10620005   BEQ V1, V0, 0x9D001160
9D00114C  00000000   NOP
9D001150  8F8280C0   LW V0, -32576(GP)
9D001154  24420001   ADDIU V0, V0, 1
9D001158  0B400459   J 0x9D001164
9D00115C  00000000   NOP
9D001160  00001021   ADDU V0, ZERO, ZERO
9D001164  AF8280C0   SW V0, -32576(GP)
9D001168  0B400479   J 0x9D0011E4
9D00116C  00000000   NOP
296:                         else if(input == PREVIOUS)
9D001170  8FC30018   LW V1, 24(S8)
9D001174  24020003   ADDIU V0, ZERO, 3
9D001178  1462000C   BNE V1, V0, 0x9D0011AC
9D00117C  00000000   NOP
297:                             cardValueScheme = (cardValueScheme == 0? 2 : cardValueScheme - 1);
9D001180  8F8280C0   LW V0, -32576(GP)
9D001184  10400005   BEQ V0, ZERO, 0x9D00119C
9D001188  00000000   NOP
9D00118C  8F8280C0   LW V0, -32576(GP)
9D001190  2442FFFF   ADDIU V0, V0, -1
9D001194  0B400468   J 0x9D0011A0
9D001198  00000000   NOP
9D00119C  24020002   ADDIU V0, ZERO, 2
9D0011A0  AF8280C0   SW V0, -32576(GP)
9D0011A4  0B400479   J 0x9D0011E4
9D0011A8  00000000   NOP
298:                         else if(input == CANCEL)
9D0011AC  8FC30018   LW V1, 24(S8)
9D0011B0  24020001   ADDIU V0, ZERO, 1
9D0011B4  1462000B   BNE V1, V0, 0x9D0011E4
9D0011B8  00000000   NOP
299:                             currentOption = OPTION_NUM_PLAYERS;
9D0011BC  AF80806C   SW ZERO, -32660(GP)
9D0011C0  0B400479   J 0x9D0011E4
9D0011C4  00000000   NOP
300:                     }
301:                 }
9D0011E4  03C0E821   ADDU SP, S8, ZERO
9D0011E8  8FBF0014   LW RA, 20(SP)
9D0011EC  8FBE0010   LW S8, 16(SP)
9D0011F0  27BD0018   ADDIU SP, SP, 24
9D0011F4  03E00008   JR RA
9D0011F8  00000000   NOP
302:                 
303:                 void selectTerritories(Input input)
304:                 {
9D0011FC  27BDFFE8   ADDIU SP, SP, -24
9D001200  AFBF0014   SW RA, 20(SP)
9D001204  AFBE0010   SW S8, 16(SP)
9D001208  03A0F021   ADDU S8, SP, ZERO
9D00120C  AFC40018   SW A0, 24(S8)
305:                     if(input == NEXT)
9D001210  8FC30018   LW V1, 24(S8)
9D001214  24020002   ADDIU V0, ZERO, 2
9D001218  14620009   BNE V1, V0, 0x9D001240
9D00121C  00000000   NOP
306:                         moveSelection(0, 1, predUnowned);
9D001220  00002021   ADDU A0, ZERO, ZERO
9D001224  24050001   ADDIU A1, ZERO, 1
9D001228  3C029D00   LUI V0, -25344
9D00122C  24465E9C   ADDIU A2, V0, 24220
9D001230  0F40095F   JAL moveSelection
9D001234  00000000   NOP
9D001238  0B4004D9   J 0x9D001364
9D00123C  00000000   NOP
307:                     else if(input == PREVIOUS)
9D001240  8FC30018   LW V1, 24(S8)
9D001244  24020003   ADDIU V0, ZERO, 3
9D001248  14620009   BNE V1, V0, 0x9D001270
9D00124C  00000000   NOP
308:                         moveSelection(0, -1, predUnowned);
9D001250  00002021   ADDU A0, ZERO, ZERO
9D001254  2405FFFF   ADDIU A1, ZERO, -1
9D001258  3C029D00   LUI V0, -25344
9D00125C  24465E9C   ADDIU A2, V0, 24220
9D001260  0F40095F   JAL moveSelection
9D001264  00000000   NOP
9D001268  0B4004D9   J 0x9D001364
9D00126C  00000000   NOP
309:                     else if(input == ADVANCE)
9D001270  8FC20018   LW V0, 24(S8)
9D001274  1440003B   BNE V0, ZERO, 0x9D001364
9D001278  00000000   NOP
310:                     {
311:                         if(destination == -1)
9D00127C  8F8380D4   LW V1, -32556(GP)
9D001280  2402FFFF   ADDIU V0, ZERO, -1
9D001284  10620036   BEQ V1, V0, 0x9D001360
9D001288  00000000   NOP
312:                             return;
9D001360  00000000   NOP
313:                 
314:                         territories[destination].owner = currentPlayer;
9D00128C  8F8280D4   LW V0, -32556(GP)
9D001290  8F8480C8   LW A0, -32568(GP)
9D001294  3C058000   LUI A1, -32768
9D001298  000210C0   SLL V0, V0, 3
9D00129C  00021880   SLL V1, V0, 2
9D0012A0  00621823   SUBU V1, V1, V0
9D0012A4  24A241B0   ADDIU V0, A1, 16816
9D0012A8  00621021   ADDU V0, V1, V0
9D0012AC  AC440010   SW A0, 16(V0)
315:                         territories[destination].troops = 1;
9D0012B0  8F8280D4   LW V0, -32556(GP)
9D0012B4  3C038000   LUI V1, -32768
9D0012B8  246341B0   ADDIU V1, V1, 16816
9D0012BC  000210C0   SLL V0, V0, 3
9D0012C0  00022080   SLL A0, V0, 2
9D0012C4  00821023   SUBU V0, A0, V0
9D0012C8  00621021   ADDU V0, V1, V0
9D0012CC  24030001   ADDIU V1, ZERO, 1
9D0012D0  AC430014   SW V1, 20(V0)
316:                         destination = -1;
9D0012D4  2402FFFF   ADDIU V0, ZERO, -1
9D0012D8  AF8280D4   SW V0, -32556(GP)
317:                         deployTroopsLeft[currentPlayer] -= 1;
9D0012DC  8F8280C8   LW V0, -32568(GP)
9D0012E0  8F8380C8   LW V1, -32568(GP)
9D0012E4  00032080   SLL A0, V1, 2
9D0012E8  2783805C   ADDIU V1, GP, -32676
9D0012EC  00831821   ADDU V1, A0, V1
9D0012F0  8C630000   LW V1, 0(V1)
9D0012F4  2463FFFF   ADDIU V1, V1, -1
9D0012F8  00022080   SLL A0, V0, 2
9D0012FC  2782805C   ADDIU V0, GP, -32676
9D001300  00821021   ADDU V0, A0, V0
9D001304  AC430000   SW V1, 0(V0)
318:                 
319:                         currentPlayer += 1;
9D001308  8F8280C8   LW V0, -32568(GP)
9D00130C  24420001   ADDIU V0, V0, 1
9D001310  AF8280C8   SW V0, -32568(GP)
320:                         if(currentPlayer == numPlayers)
9D001314  8F8380C8   LW V1, -32568(GP)
9D001318  8F8280D0   LW V0, -32560(GP)
9D00131C  14620002   BNE V1, V0, 0x9D001328
9D001320  00000000   NOP
321:                             currentPlayer = 0;
9D001324  AF8080C8   SW ZERO, -32568(GP)
322:                 
323:                         territoriesRemaining -= 1;
9D001328  8F828054   LW V0, -32684(GP)
9D00132C  2442FFFF   ADDIU V0, V0, -1
9D001330  AF828054   SW V0, -32684(GP)
324:                 
325:                         // Changing the state here after random allocation would cause
326:                         // recursion, so the function for the INIT state handles the state
327:                         // change instead right after the random deployment. 
328:                         if(territoriesRemaining == 0 && !randomTerritories)
9D001334  8F828054   LW V0, -32684(GP)
9D001338  1440000A   BNE V0, ZERO, 0x9D001364
9D00133C  00000000   NOP
9D001340  8F8280CC   LW V0, -32564(GP)
9D001344  14400007   BNE V0, ZERO, 0x9D001364
9D001348  00000000   NOP
329:                             changeState(DEPLOY);
9D00134C  24040002   ADDIU A0, ZERO, 2
9D001350  0F4009A2   JAL changeState
9D001354  00000000   NOP
9D001358  0B4004D9   J 0x9D001364
9D00135C  00000000   NOP
330:                     }
331:                 }
9D001364  03C0E821   ADDU SP, S8, ZERO
9D001368  8FBF0014   LW RA, 20(SP)
9D00136C  8FBE0010   LW S8, 16(SP)
9D001370  27BD0018   ADDIU SP, SP, 24
9D001374  03E00008   JR RA
9D001378  00000000   NOP
332:                 
333:                 void deployTroops(Input input)
334:                 {
9D00137C  27BDFFE0   ADDIU SP, SP, -32
9D001380  AFBF001C   SW RA, 28(SP)
9D001384  AFBE0018   SW S8, 24(SP)
9D001388  03A0F021   ADDU S8, SP, ZERO
9D00138C  AFC40020   SW A0, 32(S8)
335:                     if(input == NEXT && !confirm)
9D001390  8FC30020   LW V1, 32(S8)
9D001394  24020002   ADDIU V0, ZERO, 2
9D001398  1462000C   BNE V1, V0, 0x9D0013CC
9D00139C  00000000   NOP
9D0013A0  8F828074   LW V0, -32652(GP)
9D0013A4  14400009   BNE V0, ZERO, 0x9D0013CC
9D0013A8  00000000   NOP
336:                         moveSelection(0, 1, predOwnedCurrent);
9D0013AC  00002021   ADDU A0, ZERO, ZERO
9D0013B0  24050001   ADDIU A1, ZERO, 1
9D0013B4  3C029D00   LUI V0, -25344
9D0013B8  24465EE8   ADDIU A2, V0, 24296
9D0013BC  0F40095F   JAL moveSelection
9D0013C0  00000000   NOP
9D0013C4  0B400595   J 0x9D001654
9D0013C8  00000000   NOP
337:                     else if(input == PREVIOUS && !confirm)
9D0013CC  8FC30020   LW V1, 32(S8)
9D0013D0  24020003   ADDIU V0, ZERO, 3
9D0013D4  1462000C   BNE V1, V0, 0x9D001408
9D0013D8  00000000   NOP
9D0013DC  8F828074   LW V0, -32652(GP)
9D0013E0  14400009   BNE V0, ZERO, 0x9D001408
9D0013E4  00000000   NOP
338:                         moveSelection(0, -1, predOwnedCurrent);
9D0013E8  00002021   ADDU A0, ZERO, ZERO
9D0013EC  2405FFFF   ADDIU A1, ZERO, -1
9D0013F0  3C029D00   LUI V0, -25344
9D0013F4  24465EE8   ADDIU A2, V0, 24296
9D0013F8  0F40095F   JAL moveSelection
9D0013FC  00000000   NOP
9D001400  0B400595   J 0x9D001654
9D001404  00000000   NOP
339:                     else if(input == ADVANCE)
9D001408  8FC20020   LW V0, 32(S8)
9D00140C  14400060   BNE V0, ZERO, 0x9D001590
9D001410  00000000   NOP
340:                     {
341:                         if(confirm)
9D001414  8F828074   LW V0, -32652(GP)
9D001418  1440008A   BNE V0, ZERO, 0x9D001644
9D00141C  00000000   NOP
342:                             return;
9D001644  00000000   NOP
9D001648  0B400595   J 0x9D001654
9D00164C  00000000   NOP
343:                         if(destination == -1)
9D001420  8F8380D4   LW V1, -32556(GP)
9D001424  2402FFFF   ADDIU V0, ZERO, -1
9D001428  10620089   BEQ V1, V0, 0x9D001650
9D00142C  00000000   NOP
344:                             return;
9D001650  00000000   NOP
345:                 
346:                         territories[destination].troops += 1;
9D001430  8F8580D4   LW A1, -32556(GP)
9D001434  8F8280D4   LW V0, -32556(GP)
9D001438  3C038000   LUI V1, -32768
9D00143C  246341B0   ADDIU V1, V1, 16816
9D001440  000210C0   SLL V0, V0, 3
9D001444  00022080   SLL A0, V0, 2
9D001448  00821023   SUBU V0, A0, V0
9D00144C  00621021   ADDU V0, V1, V0
9D001450  8C420014   LW V0, 20(V0)
9D001454  24430001   ADDIU V1, V0, 1
9D001458  3C028000   LUI V0, -32768
9D00145C  244441B0   ADDIU A0, V0, 16816
9D001460  00A01021   ADDU V0, A1, ZERO
9D001464  000210C0   SLL V0, V0, 3
9D001468  00022880   SLL A1, V0, 2
9D00146C  00A21023   SUBU V0, A1, V0
9D001470  00821021   ADDU V0, A0, V0
9D001474  AC430014   SW V1, 20(V0)
347:                         deployTroopsLeft[currentPlayer] -= 1;
9D001478  8F8280C8   LW V0, -32568(GP)
9D00147C  8F8380C8   LW V1, -32568(GP)
9D001480  00032080   SLL A0, V1, 2
9D001484  2783805C   ADDIU V1, GP, -32676
9D001488  00831821   ADDU V1, A0, V1
9D00148C  8C630000   LW V1, 0(V1)
9D001490  2463FFFF   ADDIU V1, V1, -1
9D001494  00022080   SLL A0, V0, 2
9D001498  2782805C   ADDIU V0, GP, -32676
9D00149C  00821021   ADDU V0, A0, V0
9D0014A0  AC430000   SW V1, 0(V0)
348:                         numTroops -= 1;
9D0014A4  8F828058   LW V0, -32680(GP)
9D0014A8  2442FFFF   ADDIU V0, V0, -1
9D0014AC  AF828058   SW V0, -32680(GP)
349:                 
350:                         if(numTroops == 0)
9D0014B0  8F828058   LW V0, -32680(GP)
9D0014B4  14400067   BNE V0, ZERO, 0x9D001654
9D0014B8  00000000   NOP
351:                         {
352:                             destination = -1;
9D0014BC  2402FFFF   ADDIU V0, ZERO, -1
9D0014C0  AF8280D4   SW V0, -32556(GP)
353:                 
354:                             for(int i = 0; i < numPlayers; i++)
9D0014C4  AFC00010   SW ZERO, 16(S8)
9D0014C8  0B400546   J 0x9D001518
9D0014CC  00000000   NOP
9D00150C  8FC20010   LW V0, 16(S8)
9D001510  24420001   ADDIU V0, V0, 1
9D001514  AFC20010   SW V0, 16(S8)
9D001518  8F8280D0   LW V0, -32560(GP)
9D00151C  8FC30010   LW V1, 16(S8)
9D001520  0062102A   SLT V0, V1, V0
9D001524  1440FFEA   BNE V0, ZERO, 0x9D0014D0
9D001528  00000000   NOP
9D00152C  0B40054E   J 0x9D001538
9D001530  00000000   NOP
355:                             {
356:                                 currentPlayer += 1;
9D0014D0  8F8280C8   LW V0, -32568(GP)
9D0014D4  24420001   ADDIU V0, V0, 1
9D0014D8  AF8280C8   SW V0, -32568(GP)
357:                                 if(currentPlayer == numPlayers)
9D0014DC  8F8380C8   LW V1, -32568(GP)
9D0014E0  8F8280D0   LW V0, -32560(GP)
9D0014E4  14620002   BNE V1, V0, 0x9D0014F0
9D0014E8  00000000   NOP
358:                                     currentPlayer = 0;
9D0014EC  AF8080C8   SW ZERO, -32568(GP)
359:                                 if(deployTroopsLeft[currentPlayer] != 0)
9D0014F0  8F8280C8   LW V0, -32568(GP)
9D0014F4  00021880   SLL V1, V0, 2
9D0014F8  2782805C   ADDIU V0, GP, -32676
9D0014FC  00621021   ADDU V0, V1, V0
9D001500  8C420000   LW V0, 0(V0)
9D001504  1440000B   BNE V0, ZERO, 0x9D001534
9D001508  00000000   NOP
360:                                     break;
9D001534  00000000   NOP
361:                             }
362:                 
363:                             if(deployTroopsLeft[currentPlayer] == 0)
9D001538  8F8280C8   LW V0, -32568(GP)
9D00153C  00021880   SLL V1, V0, 2
9D001540  2782805C   ADDIU V0, GP, -32676
9D001544  00621021   ADDU V0, V1, V0
9D001548  8C420000   LW V0, 0(V0)
9D00154C  14400005   BNE V0, ZERO, 0x9D001564
9D001550  00000000   NOP
364:                                 confirm = 1;
9D001554  24020001   ADDIU V0, ZERO, 1
9D001558  AF828074   SW V0, -32652(GP)
9D00155C  0B400595   J 0x9D001654
9D001560  00000000   NOP
365:                             else
366:                                 numTroops = min(deployTroopsLeft[currentPlayer], multipleDeploy);
9D001564  8F8280C8   LW V0, -32568(GP)
9D001568  00021880   SLL V1, V0, 2
9D00156C  2782805C   ADDIU V0, GP, -32676
9D001570  00621021   ADDU V0, V1, V0
9D001574  8C430000   LW V1, 0(V0)
9D001578  8F8280E4   LW V0, -32540(GP)
9D00157C  0043202A   SLT A0, V0, V1
9D001580  0064100A   MOVZ V0, V1, A0
9D001584  AF828058   SW V0, -32680(GP)
9D001588  0B400595   J 0x9D001654
9D00158C  00000000   NOP
367:                         }
368:                     }
369:                     else if(input == CANCEL)
9D001590  8FC30020   LW V1, 32(S8)
9D001594  24020001   ADDIU V0, ZERO, 1
9D001598  1462002E   BNE V1, V0, 0x9D001654
9D00159C  00000000   NOP
370:                     {
371:                         if(confirm)
9D0015A0  8F828074   LW V0, -32652(GP)
9D0015A4  1040002B   BEQ V0, ZERO, 0x9D001654
9D0015A8  00000000   NOP
372:                         {
373:                             currentPlayer = firstPlayer;
9D0015AC  8F828050   LW V0, -32688(GP)
9D0015B0  AF8280C8   SW V0, -32568(GP)
374:                             for(int i = 0; i < NUM_TERRITORIES; i++)
9D0015B4  AFC00014   SW ZERO, 20(S8)
9D0015B8  0B400588   J 0x9D001620
9D0015BC  00000000   NOP
9D001614  8FC20014   LW V0, 20(S8)
9D001618  24420001   ADDIU V0, V0, 1
9D00161C  AFC20014   SW V0, 20(S8)
9D001620  8FC20014   LW V0, 20(S8)
9D001624  28420002   SLTI V0, V0, 2
9D001628  1440FFE5   BNE V0, ZERO, 0x9D0015C0
9D00162C  00000000   NOP
375:                                 logReinforce(territories[i].owner, i, territories[i].troops);
9D0015C0  3C048000   LUI A0, -32768
9D0015C4  8FC20014   LW V0, 20(S8)
9D0015C8  000210C0   SLL V0, V0, 3
9D0015CC  00021880   SLL V1, V0, 2
9D0015D0  00621823   SUBU V1, V1, V0
9D0015D4  248241B0   ADDIU V0, A0, 16816
9D0015D8  00621021   ADDU V0, V1, V0
9D0015DC  8C430010   LW V1, 16(V0)
9D0015E0  3C048000   LUI A0, -32768
9D0015E4  8FC20014   LW V0, 20(S8)
9D0015E8  248441B0   ADDIU A0, A0, 16816
9D0015EC  000210C0   SLL V0, V0, 3
9D0015F0  00022880   SLL A1, V0, 2
9D0015F4  00A21023   SUBU V0, A1, V0
9D0015F8  00821021   ADDU V0, A0, V0
9D0015FC  8C420014   LW V0, 20(V0)
9D001600  00602021   ADDU A0, V1, ZERO
9D001604  8FC50014   LW A1, 20(S8)
9D001608  00403021   ADDU A2, V0, ZERO
9D00160C  0F401EDD   JAL logReinforce
9D001610  00000000   NOP
376:                             changeState(REINFORCE);
9D001630  24040003   ADDIU A0, ZERO, 3
9D001634  0F4009A2   JAL changeState
9D001638  00000000   NOP
9D00163C  0B400595   J 0x9D001654
9D001640  00000000   NOP
377:                         }
378:                     }
379:                 }
9D001654  03C0E821   ADDU SP, S8, ZERO
9D001658  8FBF001C   LW RA, 28(SP)
9D00165C  8FBE0018   LW S8, 24(SP)
9D001660  27BD0020   ADDIU SP, SP, 32
9D001664  03E00008   JR RA
9D001668  00000000   NOP
380:                 
381:                 void reinforce(Input input)
382:                 {
9D00166C  27BDFFE8   ADDIU SP, SP, -24
9D001670  AFBF0014   SW RA, 20(SP)
9D001674  AFBE0010   SW S8, 16(SP)
9D001678  03A0F021   ADDU S8, SP, ZERO
9D00167C  AFC40018   SW A0, 24(S8)
383:                     if(input == NEXT && !reinforceMenu)
9D001680  8FC30018   LW V1, 24(S8)
9D001684  24020002   ADDIU V0, ZERO, 2
9D001688  1462000C   BNE V1, V0, 0x9D0016BC
9D00168C  00000000   NOP
9D001690  8F828070   LW V0, -32656(GP)
9D001694  14400009   BNE V0, ZERO, 0x9D0016BC
9D001698  00000000   NOP
384:                         moveSelection(0, 1, predOwnedCurrent);
9D00169C  00002021   ADDU A0, ZERO, ZERO
9D0016A0  24050001   ADDIU A1, ZERO, 1
9D0016A4  3C029D00   LUI V0, -25344
9D0016A8  24465EE8   ADDIU A2, V0, 24296
9D0016AC  0F40095F   JAL moveSelection
9D0016B0  00000000   NOP
9D0016B4  0B40061C   J 0x9D001870
9D0016B8  00000000   NOP
385:                     else if(input == PREVIOUS && !reinforceMenu)
9D0016BC  8FC30018   LW V1, 24(S8)
9D0016C0  24020003   ADDIU V0, ZERO, 3
9D0016C4  1462000C   BNE V1, V0, 0x9D0016F8
9D0016C8  00000000   NOP
9D0016CC  8F828070   LW V0, -32656(GP)
9D0016D0  14400009   BNE V0, ZERO, 0x9D0016F8
9D0016D4  00000000   NOP
386:                         moveSelection(0, -1, predOwnedCurrent);
9D0016D8  00002021   ADDU A0, ZERO, ZERO
9D0016DC  2405FFFF   ADDIU A1, ZERO, -1
9D0016E0  3C029D00   LUI V0, -25344
9D0016E4  24465EE8   ADDIU A2, V0, 24296
9D0016E8  0F40095F   JAL moveSelection
9D0016EC  00000000   NOP
9D0016F0  0B40061C   J 0x9D001870
9D0016F4  00000000   NOP
387:                     else if(input == ADVANCE)
9D0016F8  8FC20018   LW V0, 24(S8)
9D0016FC  14400044   BNE V0, ZERO, 0x9D001810
9D001700  00000000   NOP
388:                     {
389:                         if(reinforceMenu)
9D001704  8F828070   LW V0, -32656(GP)
9D001708  1040000D   BEQ V0, ZERO, 0x9D001740
9D00170C  00000000   NOP
390:                         {
391:                             if(!confirm)
9D001710  8F828074   LW V0, -32652(GP)
9D001714  14400005   BNE V0, ZERO, 0x9D00172C
9D001718  00000000   NOP
392:                                 confirm = 1;
9D00171C  24020001   ADDIU V0, ZERO, 1
9D001720  AF828074   SW V0, -32652(GP)
393:                             else
394:                                 changeState(INIT);
9D00172C  00002021   ADDU A0, ZERO, ZERO
9D001730  0F4009A2   JAL changeState
9D001734  00000000   NOP
395:                             return;
9D001724  0B40061C   J 0x9D001870
9D001728  00000000   NOP
9D001738  0B40061C   J 0x9D001870
9D00173C  00000000   NOP
396:                         }
397:                 
398:                         if(destination == -1)
9D001740  8F8380D4   LW V1, -32556(GP)
9D001744  2402FFFF   ADDIU V0, ZERO, -1
9D001748  10620048   BEQ V1, V0, 0x9D00186C
9D00174C  00000000   NOP
399:                             return;
9D00186C  00000000   NOP
400:                 
401:                         if(numTroops > 0)
9D001750  8F828058   LW V0, -32680(GP)
9D001754  1840001D   BLEZ V0, 0x9D0017CC
9D001758  00000000   NOP
402:                         {
403:                             logReinforce(currentPlayer, destination, 1);
9D00175C  8F8380C8   LW V1, -32568(GP)
9D001760  8F8280D4   LW V0, -32556(GP)
9D001764  00602021   ADDU A0, V1, ZERO
9D001768  00402821   ADDU A1, V0, ZERO
9D00176C  24060001   ADDIU A2, ZERO, 1
9D001770  0F401EDD   JAL logReinforce
9D001774  00000000   NOP
404:                             territories[destination].troops += 1;
9D001778  8F8580D4   LW A1, -32556(GP)
9D00177C  8F8280D4   LW V0, -32556(GP)
9D001780  3C038000   LUI V1, -32768
9D001784  246341B0   ADDIU V1, V1, 16816
9D001788  000210C0   SLL V0, V0, 3
9D00178C  00022080   SLL A0, V0, 2
9D001790  00821023   SUBU V0, A0, V0
9D001794  00621021   ADDU V0, V1, V0
9D001798  8C420014   LW V0, 20(V0)
9D00179C  24430001   ADDIU V1, V0, 1
9D0017A0  3C028000   LUI V0, -32768
9D0017A4  244441B0   ADDIU A0, V0, 16816
9D0017A8  00A01021   ADDU V0, A1, ZERO
9D0017AC  000210C0   SLL V0, V0, 3
9D0017B0  00022880   SLL A1, V0, 2
9D0017B4  00A21023   SUBU V0, A1, V0
9D0017B8  00821021   ADDU V0, A0, V0
9D0017BC  AC430014   SW V1, 20(V0)
405:                             numTroops -= 1;
9D0017C0  8F828058   LW V0, -32680(GP)
9D0017C4  2442FFFF   ADDIU V0, V0, -1
9D0017C8  AF828058   SW V0, -32680(GP)
406:                         }
407:                 
408:                         if(numTroops == 0 && !mustTrade)
9D0017CC  8F828058   LW V0, -32680(GP)
9D0017D0  14400027   BNE V0, ZERO, 0x9D001870
9D0017D4  00000000   NOP
9D0017D8  8F828064   LW V0, -32668(GP)
9D0017DC  14400024   BNE V0, ZERO, 0x9D001870
9D0017E0  00000000   NOP
409:                         {
410:                             logReinforce(currentPlayer, -1, 0);
9D0017E4  8F8280C8   LW V0, -32568(GP)
9D0017E8  00402021   ADDU A0, V0, ZERO
9D0017EC  2405FFFF   ADDIU A1, ZERO, -1
9D0017F0  00003021   ADDU A2, ZERO, ZERO
9D0017F4  0F401EDD   JAL logReinforce
9D0017F8  00000000   NOP
411:                             changeState(ATTACK1);
9D0017FC  24040004   ADDIU A0, ZERO, 4
9D001800  0F4009A2   JAL changeState
9D001804  00000000   NOP
9D001808  0B40061C   J 0x9D001870
9D00180C  00000000   NOP
412:                         }
413:                     }
414:                     else if(input == CANCEL)
9D001810  8FC30018   LW V1, 24(S8)
9D001814  24020001   ADDIU V0, ZERO, 1
9D001818  14620015   BNE V1, V0, 0x9D001870
9D00181C  00000000   NOP
415:                     {
416:                         if(reinforceMenu && confirm)
9D001820  8F828070   LW V0, -32656(GP)
9D001824  10400007   BEQ V0, ZERO, 0x9D001844
9D001828  00000000   NOP
9D00182C  8F828074   LW V0, -32652(GP)
9D001830  10400004   BEQ V0, ZERO, 0x9D001844
9D001834  00000000   NOP
417:                             confirm = 0;
9D001838  AF808074   SW ZERO, -32652(GP)
9D00183C  0B40061C   J 0x9D001870
9D001840  00000000   NOP
418:                         else if(reinforceMenu)
9D001844  8F828070   LW V0, -32656(GP)
9D001848  10400004   BEQ V0, ZERO, 0x9D00185C
9D00184C  00000000   NOP
419:                             reinforceMenu = 0;
9D001850  AF808070   SW ZERO, -32656(GP)
9D001854  0B40061C   J 0x9D001870
9D001858  00000000   NOP
420:                         else
421:                             reinforceMenu = 1;
9D00185C  24020001   ADDIU V0, ZERO, 1
9D001860  AF828070   SW V0, -32656(GP)
9D001864  0B40061C   J 0x9D001870
9D001868  00000000   NOP
422:                     }
423:                 }
9D001870  03C0E821   ADDU SP, S8, ZERO
9D001874  8FBF0014   LW RA, 20(SP)
9D001878  8FBE0010   LW S8, 16(SP)
9D00187C  27BD0018   ADDIU SP, SP, 24
9D001880  03E00008   JR RA
9D001884  00000000   NOP
424:                 
425:                 void declareAttack(Input input)
426:                 {
9D001888  27BDFFE0   ADDIU SP, SP, -32
9D00188C  AFBF001C   SW RA, 28(SP)
9D001890  AFBE0018   SW S8, 24(SP)
9D001894  03A0F021   ADDU S8, SP, ZERO
9D001898  AFC40020   SW A0, 32(S8)
427:                     if(input == NEXT && !confirm)
9D00189C  8FC30020   LW V1, 32(S8)
9D0018A0  24020002   ADDIU V0, ZERO, 2
9D0018A4  1462000C   BNE V1, V0, 0x9D0018D8
9D0018A8  00000000   NOP
9D0018AC  8F828074   LW V0, -32652(GP)
9D0018B0  14400009   BNE V0, ZERO, 0x9D0018D8
9D0018B4  00000000   NOP
428:                         moveSelection(1, 1, predAttackSource);
9D0018B8  24040001   ADDIU A0, ZERO, 1
9D0018BC  24050001   ADDIU A1, ZERO, 1
9D0018C0  3C029D00   LUI V0, -25344
9D0018C4  24465F74   ADDIU A2, V0, 24436
9D0018C8  0F40095F   JAL moveSelection
9D0018CC  00000000   NOP
9D0018D0  0B40066C   J 0x9D0019B0
9D0018D4  00000000   NOP
429:                     else if(input == PREVIOUS && !confirm)
9D0018D8  8FC30020   LW V1, 32(S8)
9D0018DC  24020003   ADDIU V0, ZERO, 3
9D0018E0  1462000C   BNE V1, V0, 0x9D001914
9D0018E4  00000000   NOP
9D0018E8  8F828074   LW V0, -32652(GP)
9D0018EC  14400009   BNE V0, ZERO, 0x9D001914
9D0018F0  00000000   NOP
430:                         moveSelection(1, -1, predAttackSource);
9D0018F4  24040001   ADDIU A0, ZERO, 1
9D0018F8  2405FFFF   ADDIU A1, ZERO, -1
9D0018FC  3C029D00   LUI V0, -25344
9D001900  24465F74   ADDIU A2, V0, 24436
9D001904  0F40095F   JAL moveSelection
9D001908  00000000   NOP
9D00190C  0B40066C   J 0x9D0019B0
9D001910  00000000   NOP
431:                     else if(input == ADVANCE)
9D001914  8FC20020   LW V0, 32(S8)
9D001918  1440001B   BNE V0, ZERO, 0x9D001988
9D00191C  00000000   NOP
432:                     {
433:                         if(confirm)
9D001920  8F828074   LW V0, -32652(GP)
9D001924  1040000F   BEQ V0, ZERO, 0x9D001964
9D001928  00000000   NOP
434:                         {
435:                             if(needCard)
9D00192C  8F828068   LW V0, -32664(GP)
9D001930  10400007   BEQ V0, ZERO, 0x9D001950
9D001934  00000000   NOP
436:                                 drawCard(currentPlayer);
9D001938  8F8280C8   LW V0, -32568(GP)
9D00193C  27C30010   ADDIU V1, S8, 16
9D001940  00602021   ADDU A0, V1, ZERO
9D001944  00402821   ADDU A1, V0, ZERO
9D001948  0F401306   JAL drawCard
9D00194C  00000000   NOP
437:                             changeState(MOVE1);
9D001950  24040008   ADDIU A0, ZERO, 8
9D001954  0F4009A2   JAL changeState
9D001958  00000000   NOP
438:                             return;
9D00195C  0B40066C   J 0x9D0019B0
9D001960  00000000   NOP
439:                         }
440:                 
441:                         if(source == -1)
9D001964  8F8380E0   LW V1, -32544(GP)
9D001968  2402FFFF   ADDIU V0, ZERO, -1
9D00196C  1062000F   BEQ V1, V0, 0x9D0019AC
9D001970  00000000   NOP
442:                             return;
9D0019AC  00000000   NOP
443:                         changeState(ATTACK2);
9D001974  24040005   ADDIU A0, ZERO, 5
9D001978  0F4009A2   JAL changeState
9D00197C  00000000   NOP
9D001980  0B40066C   J 0x9D0019B0
9D001984  00000000   NOP
444:                     }
445:                     else if(input == CANCEL)
9D001988  8FC30020   LW V1, 32(S8)
9D00198C  24020001   ADDIU V0, ZERO, 1
9D001990  14620007   BNE V1, V0, 0x9D0019B0
9D001994  00000000   NOP
446:                     {
447:                         confirm = !confirm;
9D001998  8F828074   LW V0, -32652(GP)
9D00199C  2C420001   SLTIU V0, V0, 1
9D0019A0  AF828074   SW V0, -32652(GP)
9D0019A4  0B40066C   J 0x9D0019B0
9D0019A8  00000000   NOP
448:                     }
449:                 }
9D0019B0  03C0E821   ADDU SP, S8, ZERO
9D0019B4  8FBF001C   LW RA, 28(SP)
9D0019B8  8FBE0018   LW S8, 24(SP)
9D0019BC  27BD0020   ADDIU SP, SP, 32
9D0019C0  03E00008   JR RA
9D0019C4  00000000   NOP
450:                 void declareAttackTarget(Input input)
451:                 {
9D0019C8  27BDFFE8   ADDIU SP, SP, -24
9D0019CC  AFBF0014   SW RA, 20(SP)
9D0019D0  AFBE0010   SW S8, 16(SP)
9D0019D4  03A0F021   ADDU S8, SP, ZERO
9D0019D8  AFC40018   SW A0, 24(S8)
452:                     if(input == NEXT)
9D0019DC  8FC30018   LW V1, 24(S8)
9D0019E0  24020002   ADDIU V0, ZERO, 2
9D0019E4  14620009   BNE V1, V0, 0x9D001A0C
9D0019E8  00000000   NOP
453:                         moveSelection(0, 1, predAttackTarget);
9D0019EC  00002021   ADDU A0, ZERO, ZERO
9D0019F0  24050001   ADDIU A1, ZERO, 1
9D0019F4  3C029D00   LUI V0, -25344
9D0019F8  244660CC   ADDIU A2, V0, 24780
9D0019FC  0F40095F   JAL moveSelection
9D001A00  00000000   NOP
9D001A04  0B4006B4   J 0x9D001AD0
9D001A08  00000000   NOP
454:                     else if(input == PREVIOUS)
9D001A0C  8FC30018   LW V1, 24(S8)
9D001A10  24020003   ADDIU V0, ZERO, 3
9D001A14  14620009   BNE V1, V0, 0x9D001A3C
9D001A18  00000000   NOP
455:                         moveSelection(0, -1, predAttackTarget);
9D001A1C  00002021   ADDU A0, ZERO, ZERO
9D001A20  2405FFFF   ADDIU A1, ZERO, -1
9D001A24  3C029D00   LUI V0, -25344
9D001A28  244660CC   ADDIU A2, V0, 24780
9D001A2C  0F40095F   JAL moveSelection
9D001A30  00000000   NOP
9D001A34  0B4006B4   J 0x9D001AD0
9D001A38  00000000   NOP
456:                     else if(input == ADVANCE)
9D001A3C  8FC20018   LW V0, 24(S8)
9D001A40  14400019   BNE V0, ZERO, 0x9D001AA8
9D001A44  00000000   NOP
457:                     {
458:                         if(destination == -1)
9D001A48  8F8380D4   LW V1, -32556(GP)
9D001A4C  2402FFFF   ADDIU V0, ZERO, -1
9D001A50  1062001E   BEQ V1, V0, 0x9D001ACC
9D001A54  00000000   NOP
459:                             return;
9D001ACC  00000000   NOP
460:                         logAttack(currentPlayer, territories[destination].owner, source,
9D001A58  8F8480C8   LW A0, -32568(GP)
9D001A5C  8F8280D4   LW V0, -32556(GP)
9D001A60  3C058000   LUI A1, -32768
9D001A64  000210C0   SLL V0, V0, 3
9D001A68  00021880   SLL V1, V0, 2
9D001A6C  00621823   SUBU V1, V1, V0
9D001A70  24A241B0   ADDIU V0, A1, 16816
9D001A74  00621021   ADDU V0, V1, V0
9D001A78  8C450010   LW A1, 16(V0)
9D001A7C  8F8380E0   LW V1, -32544(GP)
9D001A80  8F8280D4   LW V0, -32556(GP)
9D001A84  00603021   ADDU A2, V1, ZERO
9D001A88  00403821   ADDU A3, V0, ZERO
9D001A8C  0F401D72   JAL logAttack
9D001A90  00000000   NOP
461:                                 destination);
462:                         changeState(BATTLE);
9D001A94  24040006   ADDIU A0, ZERO, 6
9D001A98  0F4009A2   JAL changeState
9D001A9C  00000000   NOP
9D001AA0  0B4006B4   J 0x9D001AD0
9D001AA4  00000000   NOP
463:                     }
464:                     else if(input == CANCEL)
9D001AA8  8FC30018   LW V1, 24(S8)
9D001AAC  24020001   ADDIU V0, ZERO, 1
9D001AB0  14620007   BNE V1, V0, 0x9D001AD0
9D001AB4  00000000   NOP
465:                         changeState(ATTACK1);
9D001AB8  24040004   ADDIU A0, ZERO, 4
9D001ABC  0F4009A2   JAL changeState
9D001AC0  00000000   NOP
9D001AC4  0B4006B4   J 0x9D001AD0
9D001AC8  00000000   NOP
466:                 }
9D001AD0  03C0E821   ADDU SP, S8, ZERO
9D001AD4  8FBF0014   LW RA, 20(SP)
9D001AD8  8FBE0010   LW S8, 16(SP)
9D001ADC  27BD0018   ADDIU SP, SP, 24
9D001AE0  03E00008   JR RA
9D001AE4  00000000   NOP
467:                 
468:                 void resolveBattle(Input input)
469:                 {
9D001AE8  27BDFFE0   ADDIU SP, SP, -32
9D001AEC  AFBF001C   SW RA, 28(SP)
9D001AF0  AFBE0018   SW S8, 24(SP)
9D001AF4  03A0F021   ADDU S8, SP, ZERO
9D001AF8  AFC40020   SW A0, 32(S8)
470:                     if(input == ADVANCE)
9D001AFC  8FC20020   LW V0, 32(S8)
9D001B00  14400077   BNE V0, ZERO, 0x9D001CE0
9D001B04  00000000   NOP
471:                     {
472:                         doBattle(source, destination);
9D001B08  8F8380E0   LW V1, -32544(GP)
9D001B0C  8F8280D4   LW V0, -32556(GP)
9D001B10  00602021   ADDU A0, V1, ZERO
9D001B14  00402821   ADDU A1, V0, ZERO
9D001B18  0F40168D   JAL doBattle
9D001B1C  00000000   NOP
473:                 
474:                         if(territories[source].troops == 1)
9D001B20  8F8280E0   LW V0, -32544(GP)
9D001B24  3C038000   LUI V1, -32768
9D001B28  246341B0   ADDIU V1, V1, 16816
9D001B2C  000210C0   SLL V0, V0, 3
9D001B30  00022080   SLL A0, V0, 2
9D001B34  00821023   SUBU V0, A0, V0
9D001B38  00621021   ADDU V0, V1, V0
9D001B3C  8C430014   LW V1, 20(V0)
9D001B40  24020001   ADDIU V0, ZERO, 1
9D001B44  14620006   BNE V1, V0, 0x9D001B60
9D001B48  00000000   NOP
475:                             changeState(ATTACK1);
9D001B4C  24040004   ADDIU A0, ZERO, 4
9D001B50  0F4009A2   JAL changeState
9D001B54  00000000   NOP
9D001B58  0B40073F   J 0x9D001CFC
9D001B5C  00000000   NOP
476:                         else if(territories[destination].troops == 0)
9D001B60  8F8280D4   LW V0, -32556(GP)
9D001B64  3C038000   LUI V1, -32768
9D001B68  246341B0   ADDIU V1, V1, 16816
9D001B6C  000210C0   SLL V0, V0, 3
9D001B70  00022080   SLL A0, V0, 2
9D001B74  00821023   SUBU V0, A0, V0
9D001B78  00621021   ADDU V0, V1, V0
9D001B7C  8C420014   LW V0, 20(V0)
9D001B80  1440005E   BNE V0, ZERO, 0x9D001CFC
9D001B84  00000000   NOP
477:                         {
478:                             int defeatedPlayer = territories[destination].owner;
9D001B88  8F8280D4   LW V0, -32556(GP)
9D001B8C  3C048000   LUI A0, -32768
9D001B90  000210C0   SLL V0, V0, 3
9D001B94  00021880   SLL V1, V0, 2
9D001B98  00621823   SUBU V1, V1, V0
9D001B9C  248241B0   ADDIU V0, A0, 16816
9D001BA0  00621021   ADDU V0, V1, V0
9D001BA4  8C420010   LW V0, 16(V0)
9D001BA8  AFC20010   SW V0, 16(S8)
479:                             territories[destination].owner = currentPlayer;
9D001BAC  8F8280D4   LW V0, -32556(GP)
9D001BB0  8F8480C8   LW A0, -32568(GP)
9D001BB4  3C058000   LUI A1, -32768
9D001BB8  000210C0   SLL V0, V0, 3
9D001BBC  00021880   SLL V1, V0, 2
9D001BC0  00621823   SUBU V1, V1, V0
9D001BC4  24A241B0   ADDIU V0, A1, 16816
9D001BC8  00621021   ADDU V0, V1, V0
9D001BCC  AC440010   SW A0, 16(V0)
480:                 
481:                             numTroops = min(3, territories[source].troops - 1);
9D001BD0  8F8280E0   LW V0, -32544(GP)
9D001BD4  3C038000   LUI V1, -32768
9D001BD8  246341B0   ADDIU V1, V1, 16816
9D001BDC  000210C0   SLL V0, V0, 3
9D001BE0  00022080   SLL A0, V0, 2
9D001BE4  00821023   SUBU V0, A0, V0
9D001BE8  00621021   ADDU V0, V1, V0
9D001BEC  8C420014   LW V0, 20(V0)
9D001BF0  2442FFFF   ADDIU V0, V0, -1
9D001BF4  24030003   ADDIU V1, ZERO, 3
9D001BF8  28440004   SLTI A0, V0, 4
9D001BFC  0064100A   MOVZ V0, V1, A0
9D001C00  AF828058   SW V0, -32680(GP)
482:                             territories[destination].troops = 
9D001C04  8F8580D4   LW A1, -32556(GP)
9D001C2C  3C028000   LUI V0, -32768
9D001C30  244441B0   ADDIU A0, V0, 16816
9D001C34  00A01021   ADDU V0, A1, ZERO
9D001C38  000210C0   SLL V0, V0, 3
9D001C3C  00022880   SLL A1, V0, 2
9D001C40  00A21023   SUBU V0, A1, V0
9D001C44  00821021   ADDU V0, A0, V0
9D001C48  AC430014   SW V1, 20(V0)
483:                                 territories[source].troops - 1;
9D001C08  8F8280E0   LW V0, -32544(GP)
9D001C0C  3C038000   LUI V1, -32768
9D001C10  246341B0   ADDIU V1, V1, 16816
9D001C14  000210C0   SLL V0, V0, 3
9D001C18  00022080   SLL A0, V0, 2
9D001C1C  00821023   SUBU V0, A0, V0
9D001C20  00621021   ADDU V0, V1, V0
9D001C24  8C420014   LW V0, 20(V0)
9D001C28  2443FFFF   ADDIU V1, V0, -1
484:                             territories[source].troops = 1;
9D001C4C  8F8280E0   LW V0, -32544(GP)
9D001C50  3C038000   LUI V1, -32768
9D001C54  246341B0   ADDIU V1, V1, 16816
9D001C58  000210C0   SLL V0, V0, 3
9D001C5C  00022080   SLL A0, V0, 2
9D001C60  00821023   SUBU V0, A0, V0
9D001C64  00621021   ADDU V0, V1, V0
9D001C68  24030001   ADDIU V1, ZERO, 1
9D001C6C  AC430014   SW V1, 20(V0)
485:                 
486:                             if(!playerLiving(defeatedPlayer))
9D001C70  8FC40010   LW A0, 16(S8)
9D001C74  0F400A94   JAL playerLiving
9D001C78  00000000   NOP
9D001C7C  14400013   BNE V0, ZERO, 0x9D001CCC
9D001C80  00000000   NOP
487:                             {
488:                                 takeHand(currentPlayer, defeatedPlayer);
9D001C84  8F8280C8   LW V0, -32568(GP)
9D001C88  00402021   ADDU A0, V0, ZERO
9D001C8C  8FC50010   LW A1, 16(S8)
9D001C90  0F401609   JAL takeHand
9D001C94  00000000   NOP
489:                                 if(hands[currentPlayer].cards >= 5)
9D001C98  8F8280C8   LW V0, -32568(GP)
9D001C9C  3C038000   LUI V1, -32768
9D001CA0  00021080   SLL V0, V0, 2
9D001CA4  00022100   SLL A0, V0, 4
9D001CA8  00441021   ADDU V0, V0, A0
9D001CAC  24630118   ADDIU V1, V1, 280
9D001CB0  00431021   ADDU V0, V0, V1
9D001CB4  8C420040   LW V0, 64(V0)
9D001CB8  28420005   SLTI V0, V0, 5
9D001CBC  14400003   BNE V0, ZERO, 0x9D001CCC
9D001CC0  00000000   NOP
490:                                     mustTrade = 1;
9D001CC4  24020001   ADDIU V0, ZERO, 1
9D001CC8  AF828064   SW V0, -32668(GP)
491:                             }
492:                             changeState(CONQUER);
9D001CCC  24040007   ADDIU A0, ZERO, 7
9D001CD0  0F4009A2   JAL changeState
9D001CD4  00000000   NOP
9D001CD8  0B40073F   J 0x9D001CFC
9D001CDC  00000000   NOP
493:                         }
494:                     }
495:                     else if(input == CANCEL)
9D001CE0  8FC30020   LW V1, 32(S8)
9D001CE4  24020001   ADDIU V0, ZERO, 1
9D001CE8  14620004   BNE V1, V0, 0x9D001CFC
9D001CEC  00000000   NOP
496:                         changeState(ATTACK1);
9D001CF0  24040004   ADDIU A0, ZERO, 4
9D001CF4  0F4009A2   JAL changeState
9D001CF8  00000000   NOP
497:                       
498:                 }
9D001CFC  03C0E821   ADDU SP, S8, ZERO
9D001D00  8FBF001C   LW RA, 28(SP)
9D001D04  8FBE0018   LW S8, 24(SP)
9D001D08  27BD0020   ADDIU SP, SP, 32
9D001D0C  03E00008   JR RA
9D001D10  00000000   NOP
499:                 void conquerTerritory(Input input)
500:                 {
9D001D14  27BDFFE0   ADDIU SP, SP, -32
9D001D18  AFBF001C   SW RA, 28(SP)
9D001D1C  AFBE0018   SW S8, 24(SP)
9D001D20  03A0F021   ADDU S8, SP, ZERO
9D001D24  AFC40020   SW A0, 32(S8)
501:                     if(input == NEXT)
9D001D28  8FC30020   LW V1, 32(S8)
9D001D2C  24020002   ADDIU V0, ZERO, 2
9D001D30  14620032   BNE V1, V0, 0x9D001DFC
9D001D34  00000000   NOP
502:                     {
503:                         if(territories[source].troops > 1)
9D001D38  8F8280E0   LW V0, -32544(GP)
9D001D3C  3C038000   LUI V1, -32768
9D001D40  246341B0   ADDIU V1, V1, 16816
9D001D44  000210C0   SLL V0, V0, 3
9D001D48  00022080   SLL A0, V0, 2
9D001D4C  00821023   SUBU V0, A0, V0
9D001D50  00621021   ADDU V0, V1, V0
9D001D54  8C420014   LW V0, 20(V0)
9D001D58  28420002   SLTI V0, V0, 2
9D001D5C  14400094   BNE V0, ZERO, 0x9D001FB0
9D001D60  00000000   NOP
504:                         {
505:                             territories[destination].troops += 1;
9D001D64  8F8580D4   LW A1, -32556(GP)
9D001D68  8F8280D4   LW V0, -32556(GP)
9D001D6C  3C038000   LUI V1, -32768
9D001D70  246341B0   ADDIU V1, V1, 16816
9D001D74  000210C0   SLL V0, V0, 3
9D001D78  00022080   SLL A0, V0, 2
9D001D7C  00821023   SUBU V0, A0, V0
9D001D80  00621021   ADDU V0, V1, V0
9D001D84  8C420014   LW V0, 20(V0)
9D001D88  24430001   ADDIU V1, V0, 1
9D001D8C  3C028000   LUI V0, -32768
9D001D90  244441B0   ADDIU A0, V0, 16816
9D001D94  00A01021   ADDU V0, A1, ZERO
9D001D98  000210C0   SLL V0, V0, 3
9D001D9C  00022880   SLL A1, V0, 2
9D001DA0  00A21023   SUBU V0, A1, V0
9D001DA4  00821021   ADDU V0, A0, V0
9D001DA8  AC430014   SW V1, 20(V0)
506:                             territories[source].troops -= 1;
9D001DAC  8F8580E0   LW A1, -32544(GP)
9D001DB0  8F8280E0   LW V0, -32544(GP)
9D001DB4  3C038000   LUI V1, -32768
9D001DB8  246341B0   ADDIU V1, V1, 16816
9D001DBC  000210C0   SLL V0, V0, 3
9D001DC0  00022080   SLL A0, V0, 2
9D001DC4  00821023   SUBU V0, A0, V0
9D001DC8  00621021   ADDU V0, V1, V0
9D001DCC  8C420014   LW V0, 20(V0)
9D001DD0  2443FFFF   ADDIU V1, V0, -1
9D001DD4  3C028000   LUI V0, -32768
9D001DD8  244441B0   ADDIU A0, V0, 16816
9D001DDC  00A01021   ADDU V0, A1, ZERO
9D001DE0  000210C0   SLL V0, V0, 3
9D001DE4  00022880   SLL A1, V0, 2
9D001DE8  00A21023   SUBU V0, A1, V0
9D001DEC  00821021   ADDU V0, A0, V0
9D001DF0  AC430014   SW V1, 20(V0)
9D001DF4  0B4007EC   J 0x9D001FB0
9D001DF8  00000000   NOP
507:                         }
508:                     }
509:                     else if(input == PREVIOUS)
9D001DFC  8FC30020   LW V1, 32(S8)
9D001E00  24020003   ADDIU V0, ZERO, 3
9D001E04  14620033   BNE V1, V0, 0x9D001ED4
9D001E08  00000000   NOP
510:                     {
511:                         if(territories[destination].troops > numTroops)
9D001E0C  8F8280D4   LW V0, -32556(GP)
9D001E10  3C038000   LUI V1, -32768
9D001E14  246341B0   ADDIU V1, V1, 16816
9D001E18  000210C0   SLL V0, V0, 3
9D001E1C  00022080   SLL A0, V0, 2
9D001E20  00821023   SUBU V0, A0, V0
9D001E24  00621021   ADDU V0, V1, V0
9D001E28  8C430014   LW V1, 20(V0)
9D001E2C  8F828058   LW V0, -32680(GP)
9D001E30  0043102A   SLT V0, V0, V1
9D001E34  1040005E   BEQ V0, ZERO, 0x9D001FB0
9D001E38  00000000   NOP
512:                         {
513:                             territories[destination].troops -= 1;
9D001E3C  8F8580D4   LW A1, -32556(GP)
9D001E40  8F8280D4   LW V0, -32556(GP)
9D001E44  3C038000   LUI V1, -32768
9D001E48  246341B0   ADDIU V1, V1, 16816
9D001E4C  000210C0   SLL V0, V0, 3
9D001E50  00022080   SLL A0, V0, 2
9D001E54  00821023   SUBU V0, A0, V0
9D001E58  00621021   ADDU V0, V1, V0
9D001E5C  8C420014   LW V0, 20(V0)
9D001E60  2443FFFF   ADDIU V1, V0, -1
9D001E64  3C028000   LUI V0, -32768
9D001E68  244441B0   ADDIU A0, V0, 16816
9D001E6C  00A01021   ADDU V0, A1, ZERO
9D001E70  000210C0   SLL V0, V0, 3
9D001E74  00022880   SLL A1, V0, 2
9D001E78  00A21023   SUBU V0, A1, V0
9D001E7C  00821021   ADDU V0, A0, V0
9D001E80  AC430014   SW V1, 20(V0)
514:                             territories[source].troops += 1;
9D001E84  8F8580E0   LW A1, -32544(GP)
9D001E88  8F8280E0   LW V0, -32544(GP)
9D001E8C  3C038000   LUI V1, -32768
9D001E90  246341B0   ADDIU V1, V1, 16816
9D001E94  000210C0   SLL V0, V0, 3
9D001E98  00022080   SLL A0, V0, 2
9D001E9C  00821023   SUBU V0, A0, V0
9D001EA0  00621021   ADDU V0, V1, V0
9D001EA4  8C420014   LW V0, 20(V0)
9D001EA8  24430001   ADDIU V1, V0, 1
9D001EAC  3C028000   LUI V0, -32768
9D001EB0  244441B0   ADDIU A0, V0, 16816
9D001EB4  00A01021   ADDU V0, A1, ZERO
9D001EB8  000210C0   SLL V0, V0, 3
9D001EBC  00022880   SLL A1, V0, 2
9D001EC0  00A21023   SUBU V0, A1, V0
9D001EC4  00821021   ADDU V0, A0, V0
9D001EC8  AC430014   SW V1, 20(V0)
9D001ECC  0B4007EC   J 0x9D001FB0
9D001ED0  00000000   NOP
515:                         }
516:                     }      
517:                     else if(input == ADVANCE)
9D001ED4  8FC20020   LW V0, 32(S8)
9D001ED8  14400035   BNE V0, ZERO, 0x9D001FB0
9D001EDC  00000000   NOP
518:                     {
519:                         needCard = 1;
9D001EE0  24020001   ADDIU V0, ZERO, 1
9D001EE4  AF828068   SW V0, -32664(GP)
520:                         logConquer(currentPlayer, destination, territories[destination].troops);
9D001EE8  8F8480C8   LW A0, -32568(GP)
9D001EEC  8F8380D4   LW V1, -32556(GP)
9D001EF0  8F8280D4   LW V0, -32556(GP)
9D001EF4  3C058000   LUI A1, -32768
9D001EF8  24A541B0   ADDIU A1, A1, 16816
9D001EFC  000210C0   SLL V0, V0, 3
9D001F00  00023080   SLL A2, V0, 2
9D001F04  00C21023   SUBU V0, A2, V0
9D001F08  00A21021   ADDU V0, A1, V0
9D001F0C  8C420014   LW V0, 20(V0)
9D001F10  00602821   ADDU A1, V1, ZERO
9D001F14  00403021   ADDU A2, V0, ZERO
9D001F18  0F401DE7   JAL logConquer
9D001F1C  00000000   NOP
521:                         for(int i = 0; i < numPlayers; i++)
9D001F20  AFC00010   SW ZERO, 16(S8)
9D001F24  0B4007E4   J 0x9D001F90
9D001F28  00000000   NOP
9D001F84  8FC20010   LW V0, 16(S8)
9D001F88  24420001   ADDIU V0, V0, 1
9D001F8C  AFC20010   SW V0, 16(S8)
9D001F90  8F8280D0   LW V0, -32560(GP)
9D001F94  8FC30010   LW V1, 16(S8)
9D001F98  0062102A   SLT V0, V1, V0
9D001F9C  1440FFE3   BNE V0, ZERO, 0x9D001F2C
9D001FA0  00000000   NOP
522:                         {
523:                             // Game continues unless current player is the only one left.
524:                             if(i != currentPlayer && playerLiving(i))
9D001F2C  8F8280C8   LW V0, -32568(GP)
9D001F30  8FC30010   LW V1, 16(S8)
9D001F34  10620013   BEQ V1, V0, 0x9D001F84
9D001F38  00000000   NOP
9D001F3C  8FC40010   LW A0, 16(S8)
9D001F40  0F400A94   JAL playerLiving
9D001F44  00000000   NOP
9D001F48  1040000E   BEQ V0, ZERO, 0x9D001F84
9D001F4C  00000000   NOP
525:                             {
526:                                 if(mustTrade)
9D001F50  8F828064   LW V0, -32668(GP)
9D001F54  10400006   BEQ V0, ZERO, 0x9D001F70
9D001F58  00000000   NOP
527:                                     changeState(REINFORCE);
9D001F5C  24040003   ADDIU A0, ZERO, 3
9D001F60  0F4009A2   JAL changeState
9D001F64  00000000   NOP
528:                                 else
529:                                     changeState(ATTACK1);
9D001F70  24040004   ADDIU A0, ZERO, 4
9D001F74  0F4009A2   JAL changeState
9D001F78  00000000   NOP
530:                                 return;
9D001F68  0B4007EC   J 0x9D001FB0
9D001F6C  00000000   NOP
9D001F7C  0B4007EC   J 0x9D001FB0
9D001F80  00000000   NOP
531:                             }
532:                         }
533:                         changeState(GAMEOVER);
9D001FA4  2404000B   ADDIU A0, ZERO, 11
9D001FA8  0F4009A2   JAL changeState
9D001FAC  00000000   NOP
534:                     }
535:                 }
9D001FB0  03C0E821   ADDU SP, S8, ZERO
9D001FB4  8FBF001C   LW RA, 28(SP)
9D001FB8  8FBE0018   LW S8, 24(SP)
9D001FBC  27BD0020   ADDIU SP, SP, 32
9D001FC0  03E00008   JR RA
9D001FC4  00000000   NOP
536:                 
537:                 
538:                 void moveTroops(Input input)
539:                 {
9D001FC8  27BDFFE8   ADDIU SP, SP, -24
9D001FCC  AFBF0014   SW RA, 20(SP)
9D001FD0  AFBE0010   SW S8, 16(SP)
9D001FD4  03A0F021   ADDU S8, SP, ZERO
9D001FD8  AFC40018   SW A0, 24(S8)
540:                     if(input == NEXT && !confirm)
9D001FDC  8FC30018   LW V1, 24(S8)
9D001FE0  24020002   ADDIU V0, ZERO, 2
9D001FE4  1462000C   BNE V1, V0, 0x9D002018
9D001FE8  00000000   NOP
9D001FEC  8F828074   LW V0, -32652(GP)
9D001FF0  14400009   BNE V0, ZERO, 0x9D002018
9D001FF4  00000000   NOP
541:                         moveSelection(1, 1, predMoveSource);
9D001FF8  24040001   ADDIU A0, ZERO, 1
9D001FFC  24050001   ADDIU A1, ZERO, 1
9D002000  3C029D00   LUI V0, -25344
9D002004  2446615C   ADDIU A2, V0, 24924
9D002008  0F40095F   JAL moveSelection
9D00200C  00000000   NOP
9D002010  0B400845   J 0x9D002114
9D002014  00000000   NOP
542:                     else if(input == PREVIOUS && !confirm)
9D002018  8FC30018   LW V1, 24(S8)
9D00201C  24020003   ADDIU V0, ZERO, 3
9D002020  1462000C   BNE V1, V0, 0x9D002054
9D002024  00000000   NOP
9D002028  8F828074   LW V0, -32652(GP)
9D00202C  14400009   BNE V0, ZERO, 0x9D002054
9D002030  00000000   NOP
543:                         moveSelection(1, -1, predMoveSource);
9D002034  24040001   ADDIU A0, ZERO, 1
9D002038  2405FFFF   ADDIU A1, ZERO, -1
9D00203C  3C029D00   LUI V0, -25344
9D002040  2446615C   ADDIU A2, V0, 24924
9D002044  0F40095F   JAL moveSelection
9D002048  00000000   NOP
9D00204C  0B400845   J 0x9D002114
9D002050  00000000   NOP
544:                     else if(input == ADVANCE)
9D002054  8FC20018   LW V0, 24(S8)
9D002058  14400024   BNE V0, ZERO, 0x9D0020EC
9D00205C  00000000   NOP
545:                     {
546:                         if(confirm)
9D002060  8F828074   LW V0, -32652(GP)
9D002064  10400014   BEQ V0, ZERO, 0x9D0020B8
9D002068  00000000   NOP
547:                         {
548:                             do
549:                             {
550:                                 currentPlayer += 1;
9D00206C  8F8280C8   LW V0, -32568(GP)
9D002070  24420001   ADDIU V0, V0, 1
9D002074  AF8280C8   SW V0, -32568(GP)
551:                                 if(currentPlayer == numPlayers)
9D002078  8F8380C8   LW V1, -32568(GP)
9D00207C  8F8280D0   LW V0, -32560(GP)
9D002080  14620002   BNE V1, V0, 0x9D00208C
9D002084  00000000   NOP
552:                                     currentPlayer = 0;
9D002088  AF8080C8   SW ZERO, -32568(GP)
553:                             } while(!playerLiving(currentPlayer));
9D00208C  8F8280C8   LW V0, -32568(GP)
9D002090  00402021   ADDU A0, V0, ZERO
9D002094  0F400A94   JAL playerLiving
9D002098  00000000   NOP
9D00209C  1040FFF3   BEQ V0, ZERO, 0x9D00206C
9D0020A0  00000000   NOP
554:                 
555:                             changeState(REINFORCE);
9D0020A4  24040003   ADDIU A0, ZERO, 3
9D0020A8  0F4009A2   JAL changeState
9D0020AC  00000000   NOP
556:                             return;
9D0020B0  0B400845   J 0x9D002114
9D0020B4  00000000   NOP
557:                         }
558:                 
559:                         if(source == -1)
9D0020B8  8F8380E0   LW V1, -32544(GP)
9D0020BC  2402FFFF   ADDIU V0, ZERO, -1
9D0020C0  10620013   BEQ V1, V0, 0x9D002110
9D0020C4  00000000   NOP
560:                             return;
9D002110  00000000   NOP
561:                 
562:                         computeConnected(source);
9D0020C8  8F8280E0   LW V0, -32544(GP)
9D0020CC  00402021   ADDU A0, V0, ZERO
9D0020D0  0F4018D7   JAL computeConnected
9D0020D4  00000000   NOP
563:                         changeState(MOVE2);
9D0020D8  24040009   ADDIU A0, ZERO, 9
9D0020DC  0F4009A2   JAL changeState
9D0020E0  00000000   NOP
9D0020E4  0B400845   J 0x9D002114
9D0020E8  00000000   NOP
564:                     }
565:                     else if(input == CANCEL)
9D0020EC  8FC30018   LW V1, 24(S8)
9D0020F0  24020001   ADDIU V0, ZERO, 1
9D0020F4  14620007   BNE V1, V0, 0x9D002114
9D0020F8  00000000   NOP
566:                     {
567:                         confirm = !confirm;
9D0020FC  8F828074   LW V0, -32652(GP)
9D002100  2C420001   SLTIU V0, V0, 1
9D002104  AF828074   SW V0, -32652(GP)
9D002108  0B400845   J 0x9D002114
9D00210C  00000000   NOP
568:                     }
569:                 }
9D002114  03C0E821   ADDU SP, S8, ZERO
9D002118  8FBF0014   LW RA, 20(SP)
9D00211C  8FBE0010   LW S8, 16(SP)
9D002120  27BD0018   ADDIU SP, SP, 24
9D002124  03E00008   JR RA
9D002128  00000000   NOP
570:                 void moveTroopsTarget(Input input)
571:                 {
9D00212C  27BDFFE8   ADDIU SP, SP, -24
9D002130  AFBF0014   SW RA, 20(SP)
9D002134  AFBE0010   SW S8, 16(SP)
9D002138  03A0F021   ADDU S8, SP, ZERO
9D00213C  AFC40018   SW A0, 24(S8)
572:                     if(input == NEXT)
9D002140  8FC30018   LW V1, 24(S8)
9D002144  24020002   ADDIU V0, ZERO, 2
9D002148  14620009   BNE V1, V0, 0x9D002170
9D00214C  00000000   NOP
573:                         moveSelection(0, 1, predMoveTarget);
9D002150  00002021   ADDU A0, ZERO, ZERO
9D002154  24050001   ADDIU A1, ZERO, 1
9D002158  3C029D00   LUI V0, -25344
9D00215C  244662B4   ADDIU A2, V0, 25268
9D002160  0F40095F   JAL moveSelection
9D002164  00000000   NOP
9D002168  0B40087E   J 0x9D0021F8
9D00216C  00000000   NOP
574:                     else if(input == PREVIOUS)
9D002170  8FC30018   LW V1, 24(S8)
9D002174  24020003   ADDIU V0, ZERO, 3
9D002178  14620009   BNE V1, V0, 0x9D0021A0
9D00217C  00000000   NOP
575:                         moveSelection(0, -1, predMoveTarget);
9D002180  00002021   ADDU A0, ZERO, ZERO
9D002184  2405FFFF   ADDIU A1, ZERO, -1
9D002188  3C029D00   LUI V0, -25344
9D00218C  244662B4   ADDIU A2, V0, 25268
9D002190  0F40095F   JAL moveSelection
9D002194  00000000   NOP
9D002198  0B40087E   J 0x9D0021F8
9D00219C  00000000   NOP
576:                     else if(input == ADVANCE)
9D0021A0  8FC20018   LW V0, 24(S8)
9D0021A4  1440000A   BNE V0, ZERO, 0x9D0021D0
9D0021A8  00000000   NOP
577:                     {
578:                         if(destination == -1)
9D0021AC  8F8380D4   LW V1, -32556(GP)
9D0021B0  2402FFFF   ADDIU V0, ZERO, -1
9D0021B4  1062000F   BEQ V1, V0, 0x9D0021F4
9D0021B8  00000000   NOP
579:                             return;
9D0021F4  00000000   NOP
580:                         changeState(MOVE3);
9D0021BC  2404000A   ADDIU A0, ZERO, 10
9D0021C0  0F4009A2   JAL changeState
9D0021C4  00000000   NOP
9D0021C8  0B40087E   J 0x9D0021F8
9D0021CC  00000000   NOP
581:                     }
582:                     else if(input == CANCEL)
9D0021D0  8FC30018   LW V1, 24(S8)
9D0021D4  24020001   ADDIU V0, ZERO, 1
9D0021D8  14620007   BNE V1, V0, 0x9D0021F8
9D0021DC  00000000   NOP
583:                         changeState(MOVE1);
9D0021E0  24040008   ADDIU A0, ZERO, 8
9D0021E4  0F4009A2   JAL changeState
9D0021E8  00000000   NOP
9D0021EC  0B40087E   J 0x9D0021F8
9D0021F0  00000000   NOP
584:                 }
9D0021F8  03C0E821   ADDU SP, S8, ZERO
9D0021FC  8FBF0014   LW RA, 20(SP)
9D002200  8FBE0010   LW S8, 16(SP)
9D002204  27BD0018   ADDIU SP, SP, 24
9D002208  03E00008   JR RA
9D00220C  00000000   NOP
585:                 void moveTroopsNumber(Input input)
586:                 {
9D002210  27BDFFE8   ADDIU SP, SP, -24
9D002214  AFBF0014   SW RA, 20(SP)
9D002218  AFBE0010   SW S8, 16(SP)
9D00221C  03A0F021   ADDU S8, SP, ZERO
9D002220  AFC40018   SW A0, 24(S8)
587:                     if(input == NEXT)
9D002224  8FC30018   LW V1, 24(S8)
9D002228  24020002   ADDIU V0, ZERO, 2
9D00222C  14620032   BNE V1, V0, 0x9D0022F8
9D002230  00000000   NOP
588:                     {
589:                         if(territories[source].troops > 1)
9D002234  8F8280E0   LW V0, -32544(GP)
9D002238  3C038000   LUI V1, -32768
9D00223C  246341B0   ADDIU V1, V1, 16816
9D002240  000210C0   SLL V0, V0, 3
9D002244  00022080   SLL A0, V0, 2
9D002248  00821023   SUBU V0, A0, V0
9D00224C  00621021   ADDU V0, V1, V0
9D002250  8C420014   LW V0, 20(V0)
9D002254  28420002   SLTI V0, V0, 2
9D002258  144000B0   BNE V0, ZERO, 0x9D00251C
9D00225C  00000000   NOP
590:                         {
591:                             territories[destination].troops += 1;
9D002260  8F8580D4   LW A1, -32556(GP)
9D002264  8F8280D4   LW V0, -32556(GP)
9D002268  3C038000   LUI V1, -32768
9D00226C  246341B0   ADDIU V1, V1, 16816
9D002270  000210C0   SLL V0, V0, 3
9D002274  00022080   SLL A0, V0, 2
9D002278  00821023   SUBU V0, A0, V0
9D00227C  00621021   ADDU V0, V1, V0
9D002280  8C420014   LW V0, 20(V0)
9D002284  24430001   ADDIU V1, V0, 1
9D002288  3C028000   LUI V0, -32768
9D00228C  244441B0   ADDIU A0, V0, 16816
9D002290  00A01021   ADDU V0, A1, ZERO
9D002294  000210C0   SLL V0, V0, 3
9D002298  00022880   SLL A1, V0, 2
9D00229C  00A21023   SUBU V0, A1, V0
9D0022A0  00821021   ADDU V0, A0, V0
9D0022A4  AC430014   SW V1, 20(V0)
592:                             territories[source].troops -= 1;
9D0022A8  8F8580E0   LW A1, -32544(GP)
9D0022AC  8F8280E0   LW V0, -32544(GP)
9D0022B0  3C038000   LUI V1, -32768
9D0022B4  246341B0   ADDIU V1, V1, 16816
9D0022B8  000210C0   SLL V0, V0, 3
9D0022BC  00022080   SLL A0, V0, 2
9D0022C0  00821023   SUBU V0, A0, V0
9D0022C4  00621021   ADDU V0, V1, V0
9D0022C8  8C420014   LW V0, 20(V0)
9D0022CC  2443FFFF   ADDIU V1, V0, -1
9D0022D0  3C028000   LUI V0, -32768
9D0022D4  244441B0   ADDIU A0, V0, 16816
9D0022D8  00A01021   ADDU V0, A1, ZERO
9D0022DC  000210C0   SLL V0, V0, 3
9D0022E0  00022880   SLL A1, V0, 2
9D0022E4  00A21023   SUBU V0, A1, V0
9D0022E8  00821021   ADDU V0, A0, V0
9D0022EC  AC430014   SW V1, 20(V0)
9D0022F0  0B400947   J 0x9D00251C
9D0022F4  00000000   NOP
593:                         }
594:                     }
595:                     else if(input == PREVIOUS)
9D0022F8  8FC30018   LW V1, 24(S8)
9D0022FC  24020003   ADDIU V0, ZERO, 3
9D002300  14620033   BNE V1, V0, 0x9D0023D0
9D002304  00000000   NOP
596:                     {
597:                         if(territories[source].troops < numTroops)
9D002308  8F8280E0   LW V0, -32544(GP)
9D00230C  3C038000   LUI V1, -32768
9D002310  246341B0   ADDIU V1, V1, 16816
9D002314  000210C0   SLL V0, V0, 3
9D002318  00022080   SLL A0, V0, 2
9D00231C  00821023   SUBU V0, A0, V0
9D002320  00621021   ADDU V0, V1, V0
9D002324  8C430014   LW V1, 20(V0)
9D002328  8F828058   LW V0, -32680(GP)
9D00232C  0062102A   SLT V0, V1, V0
9D002330  1040007A   BEQ V0, ZERO, 0x9D00251C
9D002334  00000000   NOP
598:                         {
599:                             territories[destination].troops -= 1;
9D002338  8F8580D4   LW A1, -32556(GP)
9D00233C  8F8280D4   LW V0, -32556(GP)
9D002340  3C038000   LUI V1, -32768
9D002344  246341B0   ADDIU V1, V1, 16816
9D002348  000210C0   SLL V0, V0, 3
9D00234C  00022080   SLL A0, V0, 2
9D002350  00821023   SUBU V0, A0, V0
9D002354  00621021   ADDU V0, V1, V0
9D002358  8C420014   LW V0, 20(V0)
9D00235C  2443FFFF   ADDIU V1, V0, -1
9D002360  3C028000   LUI V0, -32768
9D002364  244441B0   ADDIU A0, V0, 16816
9D002368  00A01021   ADDU V0, A1, ZERO
9D00236C  000210C0   SLL V0, V0, 3
9D002370  00022880   SLL A1, V0, 2
9D002374  00A21023   SUBU V0, A1, V0
9D002378  00821021   ADDU V0, A0, V0
9D00237C  AC430014   SW V1, 20(V0)
600:                             territories[source].troops += 1;
9D002380  8F8580E0   LW A1, -32544(GP)
9D002384  8F8280E0   LW V0, -32544(GP)
9D002388  3C038000   LUI V1, -32768
9D00238C  246341B0   ADDIU V1, V1, 16816
9D002390  000210C0   SLL V0, V0, 3
9D002394  00022080   SLL A0, V0, 2
9D002398  00821023   SUBU V0, A0, V0
9D00239C  00621021   ADDU V0, V1, V0
9D0023A0  8C420014   LW V0, 20(V0)
9D0023A4  24430001   ADDIU V1, V0, 1
9D0023A8  3C028000   LUI V0, -32768
9D0023AC  244441B0   ADDIU A0, V0, 16816
9D0023B0  00A01021   ADDU V0, A1, ZERO
9D0023B4  000210C0   SLL V0, V0, 3
9D0023B8  00022880   SLL A1, V0, 2
9D0023BC  00A21023   SUBU V0, A1, V0
9D0023C0  00821021   ADDU V0, A0, V0
9D0023C4  AC430014   SW V1, 20(V0)
9D0023C8  0B400947   J 0x9D00251C
9D0023CC  00000000   NOP
601:                         }
602:                     }
603:                     else if(input == ADVANCE)
9D0023D0  8FC20018   LW V0, 24(S8)
9D0023D4  14400025   BNE V0, ZERO, 0x9D00246C
9D0023D8  00000000   NOP
604:                     {
605:                         logMove(currentPlayer, source, destination, 
9D0023DC  8F8480C8   LW A0, -32568(GP)
9D0023E0  8F8580E0   LW A1, -32544(GP)
9D0023E4  8F8380D4   LW V1, -32556(GP)
9D0023E8  8F868058   LW A2, -32680(GP)
9D00240C  00C21023   SUBU V0, A2, V0
9D002410  00603021   ADDU A2, V1, ZERO
9D002414  00403821   ADDU A3, V0, ZERO
9D002418  0F401E0F   JAL logMove
9D00241C  00000000   NOP
606:                                 numTroops - territories[source].troops);
9D0023EC  8F8280E0   LW V0, -32544(GP)
9D0023F0  3C078000   LUI A3, -32768
9D0023F4  24E741B0   ADDIU A3, A3, 16816
9D0023F8  000210C0   SLL V0, V0, 3
9D0023FC  00024080   SLL T0, V0, 2
9D002400  01021023   SUBU V0, T0, V0
9D002404  00E21021   ADDU V0, A3, V0
9D002408  8C420014   LW V0, 20(V0)
607:                 
608:                         do
609:                         {
610:                             currentPlayer += 1;
9D002420  8F8280C8   LW V0, -32568(GP)
9D002424  24420001   ADDIU V0, V0, 1
9D002428  AF8280C8   SW V0, -32568(GP)
611:                             if(currentPlayer == numPlayers)
9D00242C  8F8380C8   LW V1, -32568(GP)
9D002430  8F8280D0   LW V0, -32560(GP)
9D002434  14620002   BNE V1, V0, 0x9D002440
9D002438  00000000   NOP
612:                                 currentPlayer = 0;
9D00243C  AF8080C8   SW ZERO, -32568(GP)
613:                         } while(!playerLiving(currentPlayer));
9D002440  8F8280C8   LW V0, -32568(GP)
9D002444  00402021   ADDU A0, V0, ZERO
9D002448  0F400A94   JAL playerLiving
9D00244C  00000000   NOP
9D002450  1040FFF3   BEQ V0, ZERO, 0x9D002420
9D002454  00000000   NOP
614:                         
615:                         changeState(REINFORCE);
9D002458  24040003   ADDIU A0, ZERO, 3
9D00245C  0F4009A2   JAL changeState
9D002460  00000000   NOP
9D002464  0B400947   J 0x9D00251C
9D002468  00000000   NOP
616:                     }
617:                     else if(input == CANCEL)
9D00246C  8FC30018   LW V1, 24(S8)
9D002470  24020001   ADDIU V0, ZERO, 1
9D002474  14620029   BNE V1, V0, 0x9D00251C
9D002478  00000000   NOP
618:                     {
619:                         territories[destination].troops -= 
9D00247C  8F8580D4   LW A1, -32556(GP)
9D002480  8F8280D4   LW V0, -32556(GP)
9D002484  3C038000   LUI V1, -32768
9D002488  246341B0   ADDIU V1, V1, 16816
9D00248C  000210C0   SLL V0, V0, 3
9D002490  00022080   SLL A0, V0, 2
9D002494  00821023   SUBU V0, A0, V0
9D002498  00621021   ADDU V0, V1, V0
9D00249C  8C430014   LW V1, 20(V0)
9D0024C8  00621821   ADDU V1, V1, V0
9D0024CC  3C028000   LUI V0, -32768
9D0024D0  244441B0   ADDIU A0, V0, 16816
9D0024D4  00A01021   ADDU V0, A1, ZERO
9D0024D8  000210C0   SLL V0, V0, 3
9D0024DC  00022880   SLL A1, V0, 2
9D0024E0  00A21023   SUBU V0, A1, V0
9D0024E4  00821021   ADDU V0, A0, V0
9D0024E8  AC430014   SW V1, 20(V0)
620:                             numTroops - territories[source].troops;
9D0024A0  8F8280E0   LW V0, -32544(GP)
9D0024A4  3C048000   LUI A0, -32768
9D0024A8  248441B0   ADDIU A0, A0, 16816
9D0024AC  000210C0   SLL V0, V0, 3
9D0024B0  00023080   SLL A2, V0, 2
9D0024B4  00C21023   SUBU V0, A2, V0
9D0024B8  00821021   ADDU V0, A0, V0
9D0024BC  8C440014   LW A0, 20(V0)
9D0024C0  8F828058   LW V0, -32680(GP)
9D0024C4  00821023   SUBU V0, A0, V0
621:                         territories[source].troops = numTroops;
9D0024EC  8F8280E0   LW V0, -32544(GP)
9D0024F0  8F838058   LW V1, -32680(GP)
9D0024F4  3C048000   LUI A0, -32768
9D0024F8  248441B0   ADDIU A0, A0, 16816
9D0024FC  000210C0   SLL V0, V0, 3
9D002500  00022880   SLL A1, V0, 2
9D002504  00A21023   SUBU V0, A1, V0
9D002508  00821021   ADDU V0, A0, V0
9D00250C  AC430014   SW V1, 20(V0)
622:                         changeState(MOVE2);
9D002510  24040009   ADDIU A0, ZERO, 9
9D002514  0F4009A2   JAL changeState
9D002518  00000000   NOP
623:                     }
624:                 }
9D00251C  03C0E821   ADDU SP, S8, ZERO
9D002520  8FBF0014   LW RA, 20(SP)
9D002524  8FBE0010   LW S8, 16(SP)
9D002528  27BD0018   ADDIU SP, SP, 24
9D00252C  03E00008   JR RA
9D002530  00000000   NOP
625:                 void gameOver(Input input)
626:                 {
9D002534  27BDFFE8   ADDIU SP, SP, -24
9D002538  AFBF0014   SW RA, 20(SP)
9D00253C  AFBE0010   SW S8, 16(SP)
9D002540  03A0F021   ADDU S8, SP, ZERO
9D002544  AFC40018   SW A0, 24(S8)
627:                     if(input == CANCEL)
9D002548  8FC30018   LW V1, 24(S8)
9D00254C  24020001   ADDIU V0, ZERO, 1
9D002550  14620004   BNE V1, V0, 0x9D002564
9D002554  00000000   NOP
628:                     {
629:                         changeState(INIT);
9D002558  00002021   ADDU A0, ZERO, ZERO
9D00255C  0F4009A2   JAL changeState
9D002560  00000000   NOP
630:                     }
631:                 }
9D002564  03C0E821   ADDU SP, S8, ZERO
9D002568  8FBF0014   LW RA, 20(SP)
9D00256C  8FBE0010   LW S8, 16(SP)
9D002570  27BD0018   ADDIU SP, SP, 24
9D002574  03E00008   JR RA
9D002578  00000000   NOP
632:                 
633:                 void moveSelection(int movesource, int direction, int (*predicate)(int))
634:                 {
9D00257C  27BDFFE0   ADDIU SP, SP, -32
9D002580  AFBF001C   SW RA, 28(SP)
9D002584  AFBE0018   SW S8, 24(SP)
9D002588  03A0F021   ADDU S8, SP, ZERO
9D00258C  AFC40020   SW A0, 32(S8)
9D002590  AFC50024   SW A1, 36(S8)
9D002594  AFC60028   SW A2, 40(S8)
635:                     int * p = (movesource? &source : &destination);
9D002598  8FC20020   LW V0, 32(S8)
9D00259C  10400004   BEQ V0, ZERO, 0x9D0025B0
9D0025A0  00000000   NOP
9D0025A4  278280E0   ADDIU V0, GP, -32544
9D0025A8  0B40096D   J 0x9D0025B4
9D0025AC  00000000   NOP
9D0025B0  278280D4   ADDIU V0, GP, -32556
9D0025B4  AFC20014   SW V0, 20(S8)
636:                 
637:                     int tries = 0;
9D0025B8  AFC00010   SW ZERO, 16(S8)
638:                     while(tries < NUM_TERRITORIES)
9D0025BC  0B400992   J 0x9D002648
9D0025C0  00000000   NOP
9D002648  8FC20010   LW V0, 16(S8)
9D00264C  28420002   SLTI V0, V0, 2
9D002650  1440FFDC   BNE V0, ZERO, 0x9D0025C4
9D002654  00000000   NOP
639:                     {
640:                         *p += direction;
9D0025C4  8FC20014   LW V0, 20(S8)
9D0025C8  8C430000   LW V1, 0(V0)
9D0025CC  8FC20024   LW V0, 36(S8)
9D0025D0  00621821   ADDU V1, V1, V0
9D0025D4  8FC20014   LW V0, 20(S8)
9D0025D8  AC430000   SW V1, 0(V0)
641:                         if(*p < 0)
9D0025DC  8FC20014   LW V0, 20(S8)
9D0025E0  8C420000   LW V0, 0(V0)
9D0025E4  04410006   BGEZ V0, 0x9D002600
9D0025E8  00000000   NOP
642:                             *p = NUM_TERRITORIES - 1;
9D0025EC  8FC20014   LW V0, 20(S8)
9D0025F0  24030001   ADDIU V1, ZERO, 1
9D0025F4  AC430000   SW V1, 0(V0)
9D0025F8  0B400987   J 0x9D00261C
9D0025FC  00000000   NOP
643:                         else if(*p >= NUM_TERRITORIES)
9D002600  8FC20014   LW V0, 20(S8)
9D002604  8C420000   LW V0, 0(V0)
9D002608  28420002   SLTI V0, V0, 2
9D00260C  14400003   BNE V0, ZERO, 0x9D00261C
9D002610  00000000   NOP
644:                             *p = 0;
9D002614  8FC20014   LW V0, 20(S8)
9D002618  AC400000   SW ZERO, 0(V0)
645:                 
646:                         tries++;
9D00261C  8FC20010   LW V0, 16(S8)
9D002620  24420001   ADDIU V0, V0, 1
9D002624  AFC20010   SW V0, 16(S8)
647:                         if(predicate(*p))
9D002628  8FC20014   LW V0, 20(S8)
9D00262C  8C430000   LW V1, 0(V0)
9D002630  8FC20028   LW V0, 40(S8)
9D002634  00602021   ADDU A0, V1, ZERO
9D002638  0040F809   JALR V0
9D00263C  00000000   NOP
9D002640  1440000A   BNE V0, ZERO, 0x9D00266C
9D002644  00000000   NOP
648:                             return;
9D00266C  00000000   NOP
649:                     }
650:                     // Couldn't find a valid territory, so make sure nothing is selected
651:                     *p = -1; 
9D002658  8FC20014   LW V0, 20(S8)
9D00265C  2403FFFF   ADDIU V1, ZERO, -1
9D002660  AC430000   SW V1, 0(V0)
9D002664  0B40099C   J 0x9D002670
9D002668  00000000   NOP
652:                 }
9D002670  03C0E821   ADDU SP, S8, ZERO
9D002674  8FBF001C   LW RA, 28(SP)
9D002678  8FBE0018   LW S8, 24(SP)
9D00267C  27BD0020   ADDIU SP, SP, 32
9D002680  03E00008   JR RA
9D002684  00000000   NOP
653:                 
654:                 void changeState(State newstate)
655:                 {
9D002688  27BDFFE0   ADDIU SP, SP, -32
9D00268C  AFBF001C   SW RA, 28(SP)
9D002690  AFBE0018   SW S8, 24(SP)
9D002694  03A0F021   ADDU S8, SP, ZERO
9D002698  AFC40020   SW A0, 32(S8)
656:                     state = newstate;
9D00269C  8FC20020   LW V0, 32(S8)
9D0026A0  AF82804C   SW V0, -32692(GP)
657:                 
658:                     if(state == INIT)
9D0026A4  8F82804C   LW V0, -32692(GP)
9D0026A8  1440000D   BNE V0, ZERO, 0x9D0026E0
9D0026AC  00000000   NOP
659:                     {
660:                         resetGame();
9D0026B0  0F400A6D   JAL resetGame
9D0026B4  00000000   NOP
661:                         numPlayers = 2;
9D0026B8  24020002   ADDIU V0, ZERO, 2
9D0026BC  AF8280D0   SW V0, -32560(GP)
662:                         cardValueScheme = INCREASING;
9D0026C0  AF8080C0   SW ZERO, -32576(GP)
663:                         randomTerritories = 1;
9D0026C4  24020001   ADDIU V0, ZERO, 1
9D0026C8  AF8280CC   SW V0, -32564(GP)
664:                         multipleDeploy = 1;
9D0026CC  24020001   ADDIU V0, ZERO, 1
9D0026D0  AF8280E4   SW V0, -32540(GP)
665:                         currentOption = OPTION_NUM_PLAYERS; 
9D0026D4  AF80806C   SW ZERO, -32660(GP)
666:                 
667:                         currentPlayer = -1;
9D0026D8  2402FFFF   ADDIU V0, ZERO, -1
9D0026DC  AF8280C8   SW V0, -32568(GP)
668:                     }
669:                 
670:                     if(state == SELECT)
9D0026E0  8F83804C   LW V1, -32692(GP)
9D0026E4  24020001   ADDIU V0, ZERO, 1
9D0026E8  1462000C   BNE V1, V0, 0x9D00271C
9D0026EC  00000000   NOP
671:                     {
672:                         territoriesRemaining = NUM_TERRITORIES;
9D0026F0  24020002   ADDIU V0, ZERO, 2
9D0026F4  AF828054   SW V0, -32684(GP)
673:                         firstPlayer = randint(0, numPlayers - 1);
9D0026F8  8F8280D0   LW V0, -32560(GP)
9D0026FC  2442FFFF   ADDIU V0, V0, -1
9D002700  00002021   ADDU A0, ZERO, ZERO
9D002704  00402821   ADDU A1, V0, ZERO
9D002708  0F401966   JAL randint
9D00270C  00000000   NOP
9D002710  AF828050   SW V0, -32688(GP)
674:                         currentPlayer = firstPlayer;
9D002714  8F828050   LW V0, -32688(GP)
9D002718  AF8280C8   SW V0, -32568(GP)
675:                     }
676:                 
677:                     if(state != BATTLE && state != CONQUER && state != MOVE3)
9D00271C  8F83804C   LW V1, -32692(GP)
9D002720  24020006   ADDIU V0, ZERO, 6
9D002724  10620015   BEQ V1, V0, 0x9D00277C
9D002728  00000000   NOP
9D00272C  8F83804C   LW V1, -32692(GP)
9D002730  24020007   ADDIU V0, ZERO, 7
9D002734  10620011   BEQ V1, V0, 0x9D00277C
9D002738  00000000   NOP
9D00273C  8F83804C   LW V1, -32692(GP)
9D002740  2402000A   ADDIU V0, ZERO, 10
9D002744  1062000D   BEQ V1, V0, 0x9D00277C
9D002748  00000000   NOP
678:                     {
679:                         destination = -1;
9D00274C  2402FFFF   ADDIU V0, ZERO, -1
9D002750  AF8280D4   SW V0, -32556(GP)
680:                         if(state != ATTACK2 && state != MOVE2)
9D002754  8F83804C   LW V1, -32692(GP)
9D002758  24020005   ADDIU V0, ZERO, 5
9D00275C  10620007   BEQ V1, V0, 0x9D00277C
9D002760  00000000   NOP
9D002764  8F83804C   LW V1, -32692(GP)
9D002768  24020009   ADDIU V0, ZERO, 9
9D00276C  10620003   BEQ V1, V0, 0x9D00277C
9D002770  00000000   NOP
681:                             source = -1;
9D002774  2402FFFF   ADDIU V0, ZERO, -1
9D002778  AF8280E0   SW V0, -32544(GP)
682:                     }
683:                 
684:                     if(state != ATTACK1 && state != BATTLE && state != CONQUER)
9D00277C  8F83804C   LW V1, -32692(GP)
9D002780  24020004   ADDIU V0, ZERO, 4
9D002784  1062001A   BEQ V1, V0, 0x9D0027F0
9D002788  00000000   NOP
9D00278C  8F83804C   LW V1, -32692(GP)
9D002790  24020006   ADDIU V0, ZERO, 6
9D002794  10620016   BEQ V1, V0, 0x9D0027F0
9D002798  00000000   NOP
9D00279C  8F83804C   LW V1, -32692(GP)
9D0027A0  24020007   ADDIU V0, ZERO, 7
9D0027A4  10620012   BEQ V1, V0, 0x9D0027F0
9D0027A8  00000000   NOP
685:                     {
686:                         attackerDice[0] = attackerDice[1] = attackerDice[2] = 0;
9D0027AC  3C028000   LUI V0, -32768
9D0027B0  244201E0   ADDIU V0, V0, 480
9D0027B4  AC400008   SW ZERO, 8(V0)
9D0027B8  3C028000   LUI V0, -32768
9D0027BC  244201E0   ADDIU V0, V0, 480
9D0027C0  8C430008   LW V1, 8(V0)
9D0027C4  3C028000   LUI V0, -32768
9D0027C8  244201E0   ADDIU V0, V0, 480
9D0027CC  AC430004   SW V1, 4(V0)
9D0027D0  3C028000   LUI V0, -32768
9D0027D4  244201E0   ADDIU V0, V0, 480
9D0027D8  8C430004   LW V1, 4(V0)
9D0027DC  3C028000   LUI V0, -32768
9D0027E0  AC4301E0   SW V1, 480(V0)
687:                         defenderDice[0] = defenderDice[1] = 0;
9D0027E4  AF8080DC   SW ZERO, -32548(GP)
9D0027E8  8F8280DC   LW V0, -32548(GP)
9D0027EC  AF8280D8   SW V0, -32552(GP)
688:                     }
689:                     
690:                     if(state == SELECT)
9D0027F0  8F83804C   LW V1, -32692(GP)
9D0027F4  24020001   ADDIU V0, ZERO, 1
9D0027F8  14620019   BNE V1, V0, 0x9D002860
9D0027FC  00000000   NOP
691:                     {
692:                         for(int i = 0; i < numPlayers; i++)
9D002800  AFC00010   SW ZERO, 16(S8)
9D002804  0B400A11   J 0x9D002844
9D002808  00000000   NOP
9D002838  8FC20010   LW V0, 16(S8)
9D00283C  24420001   ADDIU V0, V0, 1
9D002840  AFC20010   SW V0, 16(S8)
9D002844  8F8280D0   LW V0, -32560(GP)
9D002848  8FC30010   LW V1, 16(S8)
9D00284C  0062102A   SLT V0, V1, V0
9D002850  1440FFEE   BNE V0, ZERO, 0x9D00280C
9D002854  00000000   NOP
9D002858  0B400A45   J 0x9D002914
9D00285C  00000000   NOP
693:                             deployTroopsLeft[i] = initialTroops[numPlayers];
9D00280C  8F8380D0   LW V1, -32560(GP)
9D002810  3C029D01   LUI V0, -25343
9D002814  00031880   SLL V1, V1, 2
9D002818  2442AF10   ADDIU V0, V0, -20720
9D00281C  00621021   ADDU V0, V1, V0
9D002820  8C430000   LW V1, 0(V0)
9D002824  8FC20010   LW V0, 16(S8)
9D002828  00022080   SLL A0, V0, 2
9D00282C  2782805C   ADDIU V0, GP, -32676
9D002830  00821021   ADDU V0, A0, V0
9D002834  AC430000   SW V1, 0(V0)
694:                     }
695:                     else if(state == DEPLOY)
9D002860  8F83804C   LW V1, -32692(GP)
9D002864  24020002   ADDIU V0, ZERO, 2
9D002868  1462000C   BNE V1, V0, 0x9D00289C
9D00286C  00000000   NOP
696:                     {
697:                         numTroops = min(deployTroopsLeft[currentPlayer], multipleDeploy);
9D002870  8F8280C8   LW V0, -32568(GP)
9D002874  00021880   SLL V1, V0, 2
9D002878  2782805C   ADDIU V0, GP, -32676
9D00287C  00621021   ADDU V0, V1, V0
9D002880  8C430000   LW V1, 0(V0)
9D002884  8F8280E4   LW V0, -32540(GP)
9D002888  0043202A   SLT A0, V0, V1
9D00288C  0064100A   MOVZ V0, V1, A0
9D002890  AF828058   SW V0, -32680(GP)
9D002894  0B400A45   J 0x9D002914
9D002898  00000000   NOP
698:                     }
699:                     else if(state == REINFORCE)
9D00289C  8F83804C   LW V1, -32692(GP)
9D0028A0  24020003   ADDIU V0, ZERO, 3
9D0028A4  1462000E   BNE V1, V0, 0x9D0028E0
9D0028A8  00000000   NOP
700:                     {
701:                         if(mustTrade)
9D0028AC  8F828064   LW V0, -32668(GP)
9D0028B0  10400004   BEQ V0, ZERO, 0x9D0028C4
9D0028B4  00000000   NOP
702:                             numTroops = 0;
9D0028B8  AF808058   SW ZERO, -32680(GP)
9D0028BC  0B400A45   J 0x9D002914
9D0028C0  00000000   NOP
703:                         else
704:                             numTroops = computeReinforcements(currentPlayer);
9D0028C4  8F8280C8   LW V0, -32568(GP)
9D0028C8  00402021   ADDU A0, V0, ZERO
9D0028CC  0F400AB6   JAL computeReinforcements
9D0028D0  00000000   NOP
9D0028D4  AF828058   SW V0, -32680(GP)
9D0028D8  0B400A45   J 0x9D002914
9D0028DC  00000000   NOP
705:                     }
706:                     else if(state == MOVE3)
9D0028E0  8F83804C   LW V1, -32692(GP)
9D0028E4  2402000A   ADDIU V0, ZERO, 10
9D0028E8  1462000A   BNE V1, V0, 0x9D002914
9D0028EC  00000000   NOP
707:                         numTroops = territories[source].troops;
9D0028F0  8F8280E0   LW V0, -32544(GP)
9D0028F4  3C038000   LUI V1, -32768
9D0028F8  246341B0   ADDIU V1, V1, 16816
9D0028FC  000210C0   SLL V0, V0, 3
9D002900  00022080   SLL A0, V0, 2
9D002904  00821023   SUBU V0, A0, V0
9D002908  00621021   ADDU V0, V1, V0
9D00290C  8C420014   LW V0, 20(V0)
9D002910  AF828058   SW V0, -32680(GP)
708:                     // numTroops is also used by CONQUER, but it needs to be set earlier than
709:                     // this function is called
710:                 
711:                     if(state == REINFORCE)
9D002914  8F83804C   LW V1, -32692(GP)
9D002918  24020003   ADDIU V0, ZERO, 3
9D00291C  14620011   BNE V1, V0, 0x9D002964
9D002920  00000000   NOP
712:                     {
713:                         reinforceMenu = 0;
9D002924  AF808070   SW ZERO, -32656(GP)
714:                         if(hands[currentPlayer].cards >= 5)
9D002928  8F8280C8   LW V0, -32568(GP)
9D00292C  3C038000   LUI V1, -32768
9D002930  00021080   SLL V0, V0, 2
9D002934  00022100   SLL A0, V0, 4
9D002938  00441021   ADDU V0, V0, A0
9D00293C  24630118   ADDIU V1, V1, 280
9D002940  00431021   ADDU V0, V0, V1
9D002944  8C420040   LW V0, 64(V0)
9D002948  28420005   SLTI V0, V0, 5
9D00294C  1440000A   BNE V0, ZERO, 0x9D002978
9D002950  00000000   NOP
715:                             mustTrade = 1;
9D002954  24020001   ADDIU V0, ZERO, 1
9D002958  AF828064   SW V0, -32668(GP)
9D00295C  0B400A5E   J 0x9D002978
9D002960  00000000   NOP
716:                     }
717:                     else if(state != CONQUER)
9D002964  8F83804C   LW V1, -32692(GP)
9D002968  24020007   ADDIU V0, ZERO, 7
9D00296C  10620002   BEQ V1, V0, 0x9D002978
9D002970  00000000   NOP
718:                         mustTrade = 0;
9D002974  AF808064   SW ZERO, -32668(GP)
719:                 
720:                     if(state == REINFORCE && !mustTrade)
9D002978  8F83804C   LW V1, -32692(GP)
9D00297C  24020003   ADDIU V0, ZERO, 3
9D002980  14620005   BNE V1, V0, 0x9D002998
9D002984  00000000   NOP
9D002988  8F828064   LW V0, -32668(GP)
9D00298C  14400002   BNE V0, ZERO, 0x9D002998
9D002990  00000000   NOP
721:                         needCard = 0;
9D002994  AF808068   SW ZERO, -32664(GP)
722:                 
723:                     confirm = 0;
9D002998  AF808074   SW ZERO, -32652(GP)
724:                 }
9D00299C  03C0E821   ADDU SP, S8, ZERO
9D0029A0  8FBF001C   LW RA, 28(SP)
9D0029A4  8FBE0018   LW S8, 24(SP)
9D0029A8  27BD0020   ADDIU SP, SP, 32
9D0029AC  03E00008   JR RA
9D0029B0  00000000   NOP
725:                 
726:                 void resetGame()
727:                 {
9D0029B4  27BDFFE0   ADDIU SP, SP, -32
9D0029B8  AFBF001C   SW RA, 28(SP)
9D0029BC  AFBE0018   SW S8, 24(SP)
9D0029C0  03A0F021   ADDU S8, SP, ZERO
728:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D0029C4  AFC00010   SW ZERO, 16(S8)
9D0029C8  0B400A88   J 0x9D002A20
9D0029CC  00000000   NOP
9D002A14  8FC20010   LW V0, 16(S8)
9D002A18  24420001   ADDIU V0, V0, 1
9D002A1C  AFC20010   SW V0, 16(S8)
9D002A20  8FC20010   LW V0, 16(S8)
9D002A24  28420002   SLTI V0, V0, 2
9D002A28  1440FFE9   BNE V0, ZERO, 0x9D0029D0
9D002A2C  00000000   NOP
729:                     {
730:                         territories[i].owner = -1;
9D0029D0  3C048000   LUI A0, -32768
9D0029D4  8FC20010   LW V0, 16(S8)
9D0029D8  000210C0   SLL V0, V0, 3
9D0029DC  00021880   SLL V1, V0, 2
9D0029E0  00621823   SUBU V1, V1, V0
9D0029E4  248241B0   ADDIU V0, A0, 16816
9D0029E8  00621021   ADDU V0, V1, V0
9D0029EC  2403FFFF   ADDIU V1, ZERO, -1
9D0029F0  AC430010   SW V1, 16(V0)
731:                         territories[i].troops = 0;
9D0029F4  3C038000   LUI V1, -32768
9D0029F8  8FC20010   LW V0, 16(S8)
9D0029FC  246341B0   ADDIU V1, V1, 16816
9D002A00  000210C0   SLL V0, V0, 3
9D002A04  00022080   SLL A0, V0, 2
9D002A08  00821023   SUBU V0, A0, V0
9D002A0C  00621021   ADDU V0, V1, V0
9D002A10  AC400014   SW ZERO, 20(V0)
732:                     }
733:                     initCards();
9D002A30  0F4012AE   JAL initCards
9D002A34  00000000   NOP
734:                 }
9D002A38  03C0E821   ADDU SP, S8, ZERO
9D002A3C  8FBF001C   LW RA, 28(SP)
9D002A40  8FBE0018   LW S8, 24(SP)
9D002A44  27BD0020   ADDIU SP, SP, 32
9D002A48  03E00008   JR RA
9D002A4C  00000000   NOP
735:                 
736:                 int playerLiving(int player)
737:                 {
9D002A50  27BDFFF0   ADDIU SP, SP, -16
9D002A54  AFBE000C   SW S8, 12(SP)
9D002A58  03A0F021   ADDU S8, SP, ZERO
9D002A5C  AFC40010   SW A0, 16(S8)
738:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D002A60  AFC00000   SW ZERO, 0(S8)
9D002A64  0B400AAC   J 0x9D002AB0
9D002A68  00000000   NOP
9D002AA4  8FC20000   LW V0, 0(S8)
9D002AA8  24420001   ADDIU V0, V0, 1
9D002AAC  AFC20000   SW V0, 0(S8)
9D002AB0  8FC20000   LW V0, 0(S8)
9D002AB4  28420002   SLTI V0, V0, 2
9D002AB8  1440FFEC   BNE V0, ZERO, 0x9D002A6C
9D002ABC  00000000   NOP
739:                         if(territories[i].owner == player)
9D002A6C  3C048000   LUI A0, -32768
9D002A70  8FC20000   LW V0, 0(S8)
9D002A74  000210C0   SLL V0, V0, 3
9D002A78  00021880   SLL V1, V0, 2
9D002A7C  00621823   SUBU V1, V1, V0
9D002A80  248241B0   ADDIU V0, A0, 16816
9D002A84  00621021   ADDU V0, V1, V0
9D002A88  8C430010   LW V1, 16(V0)
9D002A8C  8FC20010   LW V0, 16(S8)
9D002A90  14620004   BNE V1, V0, 0x9D002AA4
9D002A94  00000000   NOP
740:                             return 1;
9D002A98  24020001   ADDIU V0, ZERO, 1
9D002A9C  0B400AB1   J 0x9D002AC4
9D002AA0  00000000   NOP
741:                     return 0;
9D002AC0  00001021   ADDU V0, ZERO, ZERO
742:                 }
9D002AC4  03C0E821   ADDU SP, S8, ZERO
9D002AC8  8FBE000C   LW S8, 12(SP)
9D002ACC  27BD0010   ADDIU SP, SP, 16
9D002AD0  03E00008   JR RA
9D002AD4  00000000   NOP
743:                 
744:                 int computeReinforcements(int player)
745:                 {
9D002AD8  27BDFFE0   ADDIU SP, SP, -32
9D002ADC  AFBE001C   SW S8, 28(SP)
9D002AE0  03A0F021   ADDU S8, SP, ZERO
9D002AE4  AFC40020   SW A0, 32(S8)
746:                     int territoriesHeld = 0;
9D002AE8  AFC00000   SW ZERO, 0(S8)
747:                     int bonus = 0;
9D002AEC  AFC00004   SW ZERO, 4(S8)
748:                 
749:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D002AF0  AFC00008   SW ZERO, 8(S8)
9D002AF4  0B400AD0   J 0x9D002B40
9D002AF8  00000000   NOP
9D002B34  8FC20008   LW V0, 8(S8)
9D002B38  24420001   ADDIU V0, V0, 1
9D002B3C  AFC20008   SW V0, 8(S8)
9D002B40  8FC20008   LW V0, 8(S8)
9D002B44  28420002   SLTI V0, V0, 2
9D002B48  1440FFEC   BNE V0, ZERO, 0x9D002AFC
9D002B4C  00000000   NOP
750:                         if(territories[i].owner == player)
9D002AFC  3C048000   LUI A0, -32768
9D002B00  8FC20008   LW V0, 8(S8)
9D002B04  000210C0   SLL V0, V0, 3
9D002B08  00021880   SLL V1, V0, 2
9D002B0C  00621823   SUBU V1, V1, V0
9D002B10  248241B0   ADDIU V0, A0, 16816
9D002B14  00621021   ADDU V0, V1, V0
9D002B18  8C430010   LW V1, 16(V0)
9D002B1C  8FC20020   LW V0, 32(S8)
9D002B20  14620004   BNE V1, V0, 0x9D002B34
9D002B24  00000000   NOP
751:                             territoriesHeld += 1;
9D002B28  8FC20000   LW V0, 0(S8)
9D002B2C  24420001   ADDIU V0, V0, 1
9D002B30  AFC20000   SW V0, 0(S8)
752:                 
753:                     for(int i = 0; i < NUM_CONTINENTS; i++)
9D002B50  AFC0000C   SW ZERO, 12(S8)
9D002B54  0B400B11   J 0x9D002C44
9D002B58  00000000   NOP
9D002C38  8FC2000C   LW V0, 12(S8)
9D002C3C  24420001   ADDIU V0, V0, 1
9D002C40  AFC2000C   SW V0, 12(S8)
9D002C44  8FC2000C   LW V0, 12(S8)
9D002C48  0440FFC4   BLTZ V0, 0x9D002B5C
9D002C4C  00000000   NOP
754:                     {
755:                         int j;
756:                         for(j = 0; j < continents[i].members; j++)
9D002B5C  AFC00010   SW ZERO, 16(S8)
9D002B60  0B400AEF   J 0x9D002BBC
9D002B64  00000000   NOP
9D002BB0  8FC20010   LW V0, 16(S8)
9D002BB4  24420001   ADDIU V0, V0, 1
9D002BB8  AFC20010   SW V0, 16(S8)
9D002BBC  3C020000   LUI V0, 0
9D002BC0  8FC3000C   LW V1, 12(S8)
9D002BC4  00031900   SLL V1, V1, 4
9D002BC8  24420000   ADDIU V0, V0, 0
9D002BCC  00621021   ADDU V0, V1, V0
9D002BD0  8C430008   LW V1, 8(V0)
9D002BD4  8FC20010   LW V0, 16(S8)
9D002BD8  0043102A   SLT V0, V0, V1
9D002BDC  1440FFE2   BNE V0, ZERO, 0x9D002B68
9D002BE0  00000000   NOP
9D002BE4  0B400AFC   J 0x9D002BF0
9D002BE8  00000000   NOP
757:                         {
758:                             if(territories[j+continents[i].firstmember].owner != player)
9D002B68  3C030000   LUI V1, 0
9D002B6C  8FC2000C   LW V0, 12(S8)
9D002B70  24630000   ADDIU V1, V1, 0
9D002B74  00021100   SLL V0, V0, 4
9D002B78  00621021   ADDU V0, V1, V0
9D002B7C  8C430004   LW V1, 4(V0)
9D002B80  8FC20010   LW V0, 16(S8)
9D002B84  00621021   ADDU V0, V1, V0
9D002B88  3C048000   LUI A0, -32768
9D002B8C  000210C0   SLL V0, V0, 3
9D002B90  00021880   SLL V1, V0, 2
9D002B94  00621823   SUBU V1, V1, V0
9D002B98  248241B0   ADDIU V0, A0, 16816
9D002B9C  00621021   ADDU V0, V1, V0
9D002BA0  8C430010   LW V1, 16(V0)
9D002BA4  8FC20020   LW V0, 32(S8)
9D002BA8  14620010   BNE V1, V0, 0x9D002BEC
9D002BAC  00000000   NOP
759:                                 break;
9D002BEC  00000000   NOP
760:                         }
761:                         if(j == continents[i].members)
9D002BF0  3C020000   LUI V0, 0
9D002BF4  8FC3000C   LW V1, 12(S8)
9D002BF8  00031900   SLL V1, V1, 4
9D002BFC  24420000   ADDIU V0, V0, 0
9D002C00  00621021   ADDU V0, V1, V0
9D002C04  8C430008   LW V1, 8(V0)
9D002C08  8FC20010   LW V0, 16(S8)
9D002C0C  1462000A   BNE V1, V0, 0x9D002C38
9D002C10  00000000   NOP
762:                             bonus += continents[i].value;
9D002C14  3C030000   LUI V1, 0
9D002C18  8FC2000C   LW V0, 12(S8)
9D002C1C  24630000   ADDIU V1, V1, 0
9D002C20  00021100   SLL V0, V0, 4
9D002C24  00621021   ADDU V0, V1, V0
9D002C28  8C42000C   LW V0, 12(V0)
9D002C2C  8FC30004   LW V1, 4(S8)
9D002C30  00621021   ADDU V0, V1, V0
9D002C34  AFC20004   SW V0, 4(S8)
763:                     }
764:                 
765:                     return bonus + max(3, territoriesHeld / 3);
9D002C50  8FC20000   LW V0, 0(S8)
9D002C54  2842000C   SLTI V0, V0, 12
9D002C58  14400009   BNE V0, ZERO, 0x9D002C80
9D002C5C  00000000   NOP
9D002C60  8FC30000   LW V1, 0(S8)
9D002C64  24020003   ADDIU V0, ZERO, 3
9D002C68  0062001A   DIV V1, V0
9D002C6C  004001F4   TEQ V0, ZERO
9D002C70  00001810   MFHI V1, 0
9D002C74  00001012   MFLO V0, 0
9D002C78  0B400B21   J 0x9D002C84
9D002C7C  00000000   NOP
9D002C80  24020003   ADDIU V0, ZERO, 3
9D002C84  8FC30004   LW V1, 4(S8)
9D002C88  00431021   ADDU V0, V0, V1
766:                 }
9D002C8C  03C0E821   ADDU SP, S8, ZERO
9D002C90  8FBE001C   LW S8, 28(SP)
9D002C94  27BD0020   ADDIU SP, SP, 32
9D002C98  03E00008   JR RA
9D002C9C  00000000   NOP
767:                 
768:                 #define SWAP(a,b) do{int tmp = a; a = b; b = tmp;}while(0)
769:                 void allocateRandomTerritories()
770:                 {
9D002CA0  27BDFFC8   ADDIU SP, SP, -56
9D002CA4  AFBF0034   SW RA, 52(SP)
9D002CA8  AFBE0030   SW S8, 48(SP)
9D002CAC  03A0F021   ADDU S8, SP, ZERO
771:                     // create a list and randomize it
772:                     int list[NUM_TERRITORIES];
773:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D002CB0  AFC00010   SW ZERO, 16(S8)
9D002CB4  0B400B38   J 0x9D002CE0
9D002CB8  00000000   NOP
9D002CD4  8FC20010   LW V0, 16(S8)
9D002CD8  24420001   ADDIU V0, V0, 1
9D002CDC  AFC20010   SW V0, 16(S8)
9D002CE0  8FC20010   LW V0, 16(S8)
9D002CE4  28420002   SLTI V0, V0, 2
9D002CE8  1440FFF4   BNE V0, ZERO, 0x9D002CBC
9D002CEC  00000000   NOP
774:                         list[i] = i;
9D002CBC  8FC20010   LW V0, 16(S8)
9D002CC0  00021080   SLL V0, V0, 2
9D002CC4  27C30010   ADDIU V1, S8, 16
9D002CC8  00621021   ADDU V0, V1, V0
9D002CCC  8FC30010   LW V1, 16(S8)
9D002CD0  AC430014   SW V1, 20(V0)
775:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D002CF0  AFC00014   SW ZERO, 20(S8)
9D002CF4  0B400B5D   J 0x9D002D74
9D002CF8  00000000   NOP
9D002D68  8FC20014   LW V0, 20(S8)
9D002D6C  24420001   ADDIU V0, V0, 1
9D002D70  AFC20014   SW V0, 20(S8)
9D002D74  8FC20014   LW V0, 20(S8)
9D002D78  28420002   SLTI V0, V0, 2
9D002D7C  1440FFDF   BNE V0, ZERO, 0x9D002CFC
9D002D80  00000000   NOP
776:                     {
777:                         int r = randint(i, NUM_TERRITORIES - 1);
9D002CFC  8FC40014   LW A0, 20(S8)
9D002D00  24050001   ADDIU A1, ZERO, 1
9D002D04  0F401966   JAL randint
9D002D08  00000000   NOP
9D002D0C  AFC2001C   SW V0, 28(S8)
778:                         SWAP(list[i], list[r]);
9D002D10  8FC20014   LW V0, 20(S8)
9D002D14  00021080   SLL V0, V0, 2
9D002D18  27C30010   ADDIU V1, S8, 16
9D002D1C  00621021   ADDU V0, V1, V0
9D002D20  8C420014   LW V0, 20(V0)
9D002D24  AFC20020   SW V0, 32(S8)
9D002D28  8FC2001C   LW V0, 28(S8)
9D002D2C  00021080   SLL V0, V0, 2
9D002D30  27C30010   ADDIU V1, S8, 16
9D002D34  00621021   ADDU V0, V1, V0
9D002D38  8C430014   LW V1, 20(V0)
9D002D3C  8FC20014   LW V0, 20(S8)
9D002D40  00021080   SLL V0, V0, 2
9D002D44  27C40010   ADDIU A0, S8, 16
9D002D48  00821021   ADDU V0, A0, V0
9D002D4C  AC430014   SW V1, 20(V0)
9D002D50  8FC2001C   LW V0, 28(S8)
9D002D54  00021080   SLL V0, V0, 2
9D002D58  27C30010   ADDIU V1, S8, 16
9D002D5C  00621021   ADDU V0, V1, V0
9D002D60  8FC30020   LW V1, 32(S8)
9D002D64  AC430014   SW V1, 20(V0)
779:                     }
780:                 
781:                     // deal territories by forcing inputs
782:                     for(int i = 0; i < NUM_TERRITORIES; i++)
9D002D84  AFC00018   SW ZERO, 24(S8)
9D002D88  0B400B70   J 0x9D002DC0
9D002D8C  00000000   NOP
9D002DB4  8FC20018   LW V0, 24(S8)
9D002DB8  24420001   ADDIU V0, V0, 1
9D002DBC  AFC20018   SW V0, 24(S8)
9D002DC0  8FC20018   LW V0, 24(S8)
9D002DC4  28420002   SLTI V0, V0, 2
9D002DC8  1440FFF1   BNE V0, ZERO, 0x9D002D90
9D002DCC  00000000   NOP
783:                     {
784:                         destination = list[i];
9D002D90  8FC20018   LW V0, 24(S8)
9D002D94  00021080   SLL V0, V0, 2
9D002D98  27C30010   ADDIU V1, S8, 16
9D002D9C  00621021   ADDU V0, V1, V0
9D002DA0  8C420014   LW V0, 20(V0)
9D002DA4  AF8280D4   SW V0, -32556(GP)
785:                         selectTerritories(ADVANCE);
9D002DA8  00002021   ADDU A0, ZERO, ZERO
9D002DAC  0F40047F   JAL 0x9D0011FC
9D002DB0  00000000   NOP
786:                     }
787:                 }
9D002DD0  03C0E821   ADDU SP, S8, ZERO
9D002DD4  8FBF0034   LW RA, 52(SP)
9D002DD8  8FBE0030   LW S8, 48(SP)
9D002DDC  27BD0038   ADDIU SP, SP, 56
9D002DE0  03E00008   JR RA
9D002DE4  00000000   NOP
---  /home/jacob/Documents/477/RISK/game/cards.c  -------------------------------------------------------
1:                   #include "cards.h"
2:                   #include "gamedata.h"
3:                   #include "territory.h"
4:                   #include "io.h"
5:                   #include "log.h"
6:                   
7:                   Hand hands[MAX_PLAYERS];
8:                   int cardExchangeValue;
9:                   CardValueScheme cardValueScheme;
10:                  
11:                  int cardValueIndex;
12:                  
13:                  Card deck[NUM_CARDS];
14:                  int deckSize;
15:                  Card discards[NUM_CARDS];
16:                  int discardsSize;
17:                  
18:                  #define SWAP(a,b) do{Card tmp = a; a = b; b = tmp;}while(0)
19:                  
20:                  void shuffleDeck()
21:                  {
9D0049C8  27BDFFD8   ADDIU SP, SP, -40
9D0049CC  AFBF0024   SW RA, 36(SP)
9D0049D0  AFBE0020   SW S8, 32(SP)
9D0049D4  03A0F021   ADDU S8, SP, ZERO
22:                      for(int i = 0; i < deckSize; i++)
9D0049D8  AFC00010   SW ZERO, 16(S8)
9D0049DC  0B4012A3   J 0x9D004A8C
9D0049E0  00000000   NOP
9D004A80  8FC20010   LW V0, 16(S8)
9D004A84  24420001   ADDIU V0, V0, 1
9D004A88  AFC20010   SW V0, 16(S8)
9D004A8C  8F8280B8   LW V0, -32584(GP)
9D004A90  8FC30010   LW V1, 16(S8)
9D004A94  0062102A   SLT V0, V1, V0
9D004A98  1440FFD2   BNE V0, ZERO, 0x9D0049E4
9D004A9C  00000000   NOP
23:                      {
24:                          int r = randint(i, deckSize - 1);
9D0049E4  8F8280B8   LW V0, -32584(GP)
9D0049E8  2442FFFF   ADDIU V0, V0, -1
9D0049EC  8FC40010   LW A0, 16(S8)
9D0049F0  00402821   ADDU A1, V0, ZERO
9D0049F4  0F401966   JAL randint
9D0049F8  00000000   NOP
9D0049FC  AFC20014   SW V0, 20(S8)
25:                          SWAP(deck[i], deck[r]);
9D004A00  3C028000   LUI V0, -32768
9D004A04  8FC30010   LW V1, 16(S8)
9D004A08  000318C0   SLL V1, V1, 3
9D004A0C  244201C0   ADDIU V0, V0, 448
9D004A10  00621021   ADDU V0, V1, V0
9D004A14  8C430000   LW V1, 0(V0)
9D004A18  8C420004   LW V0, 4(V0)
9D004A1C  AFC30018   SW V1, 24(S8)
9D004A20  AFC2001C   SW V0, 28(S8)
9D004A24  3C028000   LUI V0, -32768
9D004A28  8FC30010   LW V1, 16(S8)
9D004A2C  000318C0   SLL V1, V1, 3
9D004A30  244201C0   ADDIU V0, V0, 448
9D004A34  00621021   ADDU V0, V1, V0
9D004A38  3C038000   LUI V1, -32768
9D004A3C  8FC40014   LW A0, 20(S8)
9D004A40  000420C0   SLL A0, A0, 3
9D004A44  246301C0   ADDIU V1, V1, 448
9D004A48  00831821   ADDU V1, A0, V1
9D004A4C  8C640000   LW A0, 0(V1)
9D004A50  8C630004   LW V1, 4(V1)
9D004A54  AC440000   SW A0, 0(V0)
9D004A58  AC430004   SW V1, 4(V0)
9D004A5C  3C028000   LUI V0, -32768
9D004A60  8FC30014   LW V1, 20(S8)
9D004A64  000318C0   SLL V1, V1, 3
9D004A68  244201C0   ADDIU V0, V0, 448
9D004A6C  00621021   ADDU V0, V1, V0
9D004A70  8FC40018   LW A0, 24(S8)
9D004A74  8FC3001C   LW V1, 28(S8)
9D004A78  AC440000   SW A0, 0(V0)
9D004A7C  AC430004   SW V1, 4(V0)
26:                      }
27:                  }
9D004AA0  03C0E821   ADDU SP, S8, ZERO
9D004AA4  8FBF0024   LW RA, 36(SP)
9D004AA8  8FBE0020   LW S8, 32(SP)
9D004AAC  27BD0028   ADDIU SP, SP, 40
9D004AB0  03E00008   JR RA
9D004AB4  00000000   NOP
28:                  
29:                  void initCards()
30:                  {
9D004AB8  27BDFFE0   ADDIU SP, SP, -32
9D004ABC  AFBF001C   SW RA, 28(SP)
9D004AC0  AFBE0018   SW S8, 24(SP)
9D004AC4  03A0F021   ADDU S8, SP, ZERO
31:                      for(int i = 0; i < MAX_PLAYERS; i++)
9D004AC8  AFC00010   SW ZERO, 16(S8)
9D004ACC  0B4012C0   J 0x9D004B00
9D004AD0  00000000   NOP
9D004AF4  8FC20010   LW V0, 16(S8)
9D004AF8  24420001   ADDIU V0, V0, 1
9D004AFC  AFC20010   SW V0, 16(S8)
9D004B00  8FC20010   LW V0, 16(S8)
9D004B04  28420002   SLTI V0, V0, 2
9D004B08  1440FFF2   BNE V0, ZERO, 0x9D004AD4
9D004B0C  00000000   NOP
32:                      {
33:                          hands[i].cards = 0;
9D004AD4  3C038000   LUI V1, -32768
9D004AD8  8FC20010   LW V0, 16(S8)
9D004ADC  00021080   SLL V0, V0, 2
9D004AE0  00022100   SLL A0, V0, 4
9D004AE4  00441021   ADDU V0, V0, A0
9D004AE8  24630118   ADDIU V1, V1, 280
9D004AEC  00431021   ADDU V0, V0, V1
9D004AF0  AC400040   SW ZERO, 64(V0)
34:                      }
35:                      discardsSize = 0;
9D004B10  AF8080B4   SW ZERO, -32588(GP)
36:                      
37:                      for(int i = 0; i < NUM_CARDS; i++)
9D004B14  AFC00014   SW ZERO, 20(S8)
9D004B18  0B4012F4   J 0x9D004BD0
9D004B1C  00000000   NOP
9D004BC4  8FC20014   LW V0, 20(S8)
9D004BC8  24420001   ADDIU V0, V0, 1
9D004BCC  AFC20014   SW V0, 20(S8)
9D004BD0  8FC20014   LW V0, 20(S8)
9D004BD4  28420004   SLTI V0, V0, 4
9D004BD8  1440FFD1   BNE V0, ZERO, 0x9D004B20
9D004BDC  00000000   NOP
38:                      {
39:                          if(i < NUM_TERRITORIES)
9D004B20  8FC20014   LW V0, 20(S8)
9D004B24  28420002   SLTI V0, V0, 2
9D004B28  10400018   BEQ V0, ZERO, 0x9D004B8C
9D004B2C  00000000   NOP
40:                          {
41:                              deck[i].territory = i;
9D004B30  3C038000   LUI V1, -32768
9D004B34  8FC20014   LW V0, 20(S8)
9D004B38  246301C0   ADDIU V1, V1, 448
9D004B3C  000210C0   SLL V0, V0, 3
9D004B40  00621021   ADDU V0, V1, V0
9D004B44  8FC30014   LW V1, 20(S8)
9D004B48  AC430004   SW V1, 4(V0)
42:                              deck[i].type = territories[i].cardtype;
9D004B4C  3C038000   LUI V1, -32768
9D004B50  8FC20014   LW V0, 20(S8)
9D004B54  246341B0   ADDIU V1, V1, 16816
9D004B58  000210C0   SLL V0, V0, 3
9D004B5C  00022080   SLL A0, V0, 2
9D004B60  00821023   SUBU V0, A0, V0
9D004B64  00621021   ADDU V0, V1, V0
9D004B68  8C43000C   LW V1, 12(V0)
9D004B6C  3C028000   LUI V0, -32768
9D004B70  8FC40014   LW A0, 20(S8)
9D004B74  000420C0   SLL A0, A0, 3
9D004B78  244201C0   ADDIU V0, V0, 448
9D004B7C  00821021   ADDU V0, A0, V0
9D004B80  AC430000   SW V1, 0(V0)
9D004B84  0B4012F1   J 0x9D004BC4
9D004B88  00000000   NOP
43:                          }
44:                          else
45:                          {
46:                              deck[i].territory = -1;
9D004B8C  3C038000   LUI V1, -32768
9D004B90  8FC20014   LW V0, 20(S8)
9D004B94  246301C0   ADDIU V1, V1, 448
9D004B98  000210C0   SLL V0, V0, 3
9D004B9C  00621021   ADDU V0, V1, V0
9D004BA0  2403FFFF   ADDIU V1, ZERO, -1
9D004BA4  AC430004   SW V1, 4(V0)
47:                              deck[i].type = WILD;
9D004BA8  3C028000   LUI V0, -32768
9D004BAC  8FC30014   LW V1, 20(S8)
9D004BB0  000318C0   SLL V1, V1, 3
9D004BB4  244201C0   ADDIU V0, V0, 448
9D004BB8  00621021   ADDU V0, V1, V0
9D004BBC  24030003   ADDIU V1, ZERO, 3
9D004BC0  AC430000   SW V1, 0(V0)
48:                          }
49:                      }
50:                      deckSize = NUM_CARDS;
9D004BE0  24020004   ADDIU V0, ZERO, 4
9D004BE4  AF8280B8   SW V0, -32584(GP)
51:                      shuffleDeck();
9D004BE8  0F401272   JAL shuffleDeck
9D004BEC  00000000   NOP
52:                  
53:                      cardValueIndex = 0;
9D004BF0  AF8080C4   SW ZERO, -32572(GP)
54:                      // Even if the values are increasing by 1, they start at the same first
55:                      // value. For set value sets, this number gets ignored completely.
56:                      cardExchangeValue = cardExchangeValues[0];
9D004BF4  3C029D01   LUI V0, -25343
9D004BF8  8C42AEF8   LW V0, -20744(V0)
9D004BFC  AF8280BC   SW V0, -32580(GP)
57:                  }
9D004C00  03C0E821   ADDU SP, S8, ZERO
9D004C04  8FBF001C   LW RA, 28(SP)
9D004C08  8FBE0018   LW S8, 24(SP)
9D004C0C  27BD0020   ADDIU SP, SP, 32
9D004C10  03E00008   JR RA
9D004C14  00000000   NOP
58:                  
59:                  Card drawCard(int player)
60:                  {
9D004C18  27BDFFD8   ADDIU SP, SP, -40
9D004C1C  AFBF0024   SW RA, 36(SP)
9D004C20  AFBE0020   SW S8, 32(SP)
9D004C24  AFB0001C   SW S0, 28(SP)
9D004C28  03A0F021   ADDU S8, SP, ZERO
9D004C2C  00808021   ADDU S0, A0, ZERO
9D004C30  AFC5002C   SW A1, 44(S8)
61:                      if(deckSize == 0)
9D004C34  8F8280B8   LW V0, -32584(GP)
9D004C38  1440001F   BNE V0, ZERO, 0x9D004CB8
9D004C3C  00000000   NOP
62:                      {
63:                          for(int i = 0; i < discardsSize; i++)
9D004C40  AFC00010   SW ZERO, 16(S8)
9D004C44  0B401324   J 0x9D004C90
9D004C48  00000000   NOP
9D004C84  8FC20010   LW V0, 16(S8)
9D004C88  24420001   ADDIU V0, V0, 1
9D004C8C  AFC20010   SW V0, 16(S8)
9D004C90  8F8280B4   LW V0, -32588(GP)
9D004C94  8FC30010   LW V1, 16(S8)
9D004C98  0062102A   SLT V0, V1, V0
9D004C9C  1440FFEB   BNE V0, ZERO, 0x9D004C4C
9D004CA0  00000000   NOP
64:                              deck[i] = discards[i];
9D004C4C  3C028000   LUI V0, -32768
9D004C50  8FC30010   LW V1, 16(S8)
9D004C54  000318C0   SLL V1, V1, 3
9D004C58  244201C0   ADDIU V0, V0, 448
9D004C5C  00621021   ADDU V0, V1, V0
9D004C60  3C038000   LUI V1, -32768
9D004C64  8FC40010   LW A0, 16(S8)
9D004C68  000420C0   SLL A0, A0, 3
9D004C6C  246301A0   ADDIU V1, V1, 416
9D004C70  00831821   ADDU V1, A0, V1
9D004C74  8C640000   LW A0, 0(V1)
9D004C78  8C630004   LW V1, 4(V1)
9D004C7C  AC440000   SW A0, 0(V0)
9D004C80  AC430004   SW V1, 4(V0)
65:                          deckSize = discardsSize;
9D004CA4  8F8280B4   LW V0, -32588(GP)
9D004CA8  AF8280B8   SW V0, -32584(GP)
66:                          discardsSize = 0;
9D004CAC  AF8080B4   SW ZERO, -32588(GP)
67:                          shuffleDeck();
9D004CB0  0F401272   JAL shuffleDeck
9D004CB4  00000000   NOP
68:                      }
69:                  
70:                      logCard(player, deck[deckSize].type, deck[deckSize].territory);
9D004CB8  8F8380B8   LW V1, -32584(GP)
9D004CBC  3C028000   LUI V0, -32768
9D004CC0  000318C0   SLL V1, V1, 3
9D004CC4  244201C0   ADDIU V0, V0, 448
9D004CC8  00621021   ADDU V0, V1, V0
9D004CCC  8C430000   LW V1, 0(V0)
9D004CD0  8F8280B8   LW V0, -32584(GP)
9D004CD4  3C048000   LUI A0, -32768
9D004CD8  248401C0   ADDIU A0, A0, 448
9D004CDC  000210C0   SLL V0, V0, 3
9D004CE0  00821021   ADDU V0, A0, V0
9D004CE4  8C420004   LW V0, 4(V0)
9D004CE8  8FC4002C   LW A0, 44(S8)
9D004CEC  00602821   ADDU A1, V1, ZERO
9D004CF0  00403021   ADDU A2, V0, ZERO
9D004CF4  0F401E3F   JAL logCard
9D004CF8  00000000   NOP
71:                  
72:                      deckSize -= 1;
9D004CFC  8F8280B8   LW V0, -32584(GP)
9D004D00  2442FFFF   ADDIU V0, V0, -1
9D004D04  AF8280B8   SW V0, -32584(GP)
73:                      hands[player].hand[hands[player].cards] = deck[deckSize];
9D004D08  3C038000   LUI V1, -32768
9D004D0C  8FC2002C   LW V0, 44(S8)
9D004D10  00021080   SLL V0, V0, 2
9D004D14  00022100   SLL A0, V0, 4
9D004D18  00441021   ADDU V0, V0, A0
9D004D1C  24630118   ADDIU V1, V1, 280
9D004D20  00431021   ADDU V0, V0, V1
9D004D24  8C430040   LW V1, 64(V0)
9D004D28  8F8480B8   LW A0, -32584(GP)
9D004D2C  3C058000   LUI A1, -32768
9D004D30  8FC2002C   LW V0, 44(S8)
9D004D34  000318C0   SLL V1, V1, 3
9D004D38  00021080   SLL V0, V0, 2
9D004D3C  00023100   SLL A2, V0, 4
9D004D40  00461021   ADDU V0, V0, A2
9D004D44  00621821   ADDU V1, V1, V0
9D004D48  24A20118   ADDIU V0, A1, 280
9D004D4C  00621021   ADDU V0, V1, V0
9D004D50  3C038000   LUI V1, -32768
9D004D54  000420C0   SLL A0, A0, 3
9D004D58  246301C0   ADDIU V1, V1, 448
9D004D5C  00831821   ADDU V1, A0, V1
9D004D60  8C640000   LW A0, 0(V1)
9D004D64  8C630004   LW V1, 4(V1)
9D004D68  AC440000   SW A0, 0(V0)
9D004D6C  AC430004   SW V1, 4(V0)
74:                      hands[player].cards += 1;
9D004D70  3C038000   LUI V1, -32768
9D004D74  8FC2002C   LW V0, 44(S8)
9D004D78  00021080   SLL V0, V0, 2
9D004D7C  00022100   SLL A0, V0, 4
9D004D80  00441021   ADDU V0, V0, A0
9D004D84  24630118   ADDIU V1, V1, 280
9D004D88  00431021   ADDU V0, V0, V1
9D004D8C  8C420040   LW V0, 64(V0)
9D004D90  24430001   ADDIU V1, V0, 1
9D004D94  3C048000   LUI A0, -32768
9D004D98  8FC2002C   LW V0, 44(S8)
9D004D9C  00021080   SLL V0, V0, 2
9D004DA0  00022900   SLL A1, V0, 4
9D004DA4  00451021   ADDU V0, V0, A1
9D004DA8  24840118   ADDIU A0, A0, 280
9D004DAC  00441021   ADDU V0, V0, A0
9D004DB0  AC430040   SW V1, 64(V0)
75:                      return deck[deckSize];
9D004DB4  8F8380B8   LW V1, -32584(GP)
9D004DB8  3C028000   LUI V0, -32768
9D004DBC  000318C0   SLL V1, V1, 3
9D004DC0  244201C0   ADDIU V0, V0, 448
9D004DC4  00621021   ADDU V0, V1, V0
9D004DC8  8C430000   LW V1, 0(V0)
9D004DCC  8C420004   LW V0, 4(V0)
9D004DD0  AE030000   SW V1, 0(S0)
9D004DD4  AE020004   SW V0, 4(S0)
76:                  }
9D004DD8  02001021   ADDU V0, S0, ZERO
9D004DDC  03C0E821   ADDU SP, S8, ZERO
9D004DE0  8FBF0024   LW RA, 36(SP)
9D004DE4  8FBE0020   LW S8, 32(SP)
9D004DE8  8FB0001C   LW S0, 28(SP)
9D004DEC  27BD0028   ADDIU SP, SP, 40
9D004DF0  03E00008   JR RA
9D004DF4  00000000   NOP
77:                  
78:                  int cardSetValue(Card c1, Card c2, Card c3)
79:                  {
9D004DF8  27BDFFE8   ADDIU SP, SP, -24
9D004DFC  AFBE0014   SW S8, 20(SP)
9D004E00  03A0F021   ADDU S8, SP, ZERO
9D004E04  AFC40018   SW A0, 24(S8)
9D004E08  AFC5001C   SW A1, 28(S8)
9D004E0C  AFC60020   SW A2, 32(S8)
9D004E10  AFC70024   SW A3, 36(S8)
80:                      int amount[4] = {0,0,0,0};
9D004E14  AFC00000   SW ZERO, 0(S8)
9D004E18  AFC00004   SW ZERO, 4(S8)
9D004E1C  AFC00008   SW ZERO, 8(S8)
9D004E20  AFC0000C   SW ZERO, 12(S8)
81:                      amount[c1.type] += 1;
9D004E24  8FC20018   LW V0, 24(S8)
9D004E28  8FC30018   LW V1, 24(S8)
9D004E2C  00031880   SLL V1, V1, 2
9D004E30  03C31821   ADDU V1, S8, V1
9D004E34  8C630000   LW V1, 0(V1)
9D004E38  24630001   ADDIU V1, V1, 1
9D004E3C  00021080   SLL V0, V0, 2
9D004E40  03C21021   ADDU V0, S8, V0
9D004E44  AC430000   SW V1, 0(V0)
82:                      amount[c2.type] += 1;
9D004E48  8FC20020   LW V0, 32(S8)
9D004E4C  8FC30020   LW V1, 32(S8)
9D004E50  00031880   SLL V1, V1, 2
9D004E54  03C31821   ADDU V1, S8, V1
9D004E58  8C630000   LW V1, 0(V1)
9D004E5C  24630001   ADDIU V1, V1, 1
9D004E60  00021080   SLL V0, V0, 2
9D004E64  03C21021   ADDU V0, S8, V0
9D004E68  AC430000   SW V1, 0(V0)
83:                      amount[c3.type] += 1;
9D004E6C  8FC20028   LW V0, 40(S8)
9D004E70  8FC30028   LW V1, 40(S8)
9D004E74  00031880   SLL V1, V1, 2
9D004E78  03C31821   ADDU V1, S8, V1
9D004E7C  8C630000   LW V1, 0(V1)
9D004E80  24630001   ADDIU V1, V1, 1
9D004E84  00021080   SLL V0, V0, 2
9D004E88  03C21021   ADDU V0, S8, V0
9D004E8C  AC430000   SW V1, 0(V0)
84:                  
85:                      if(amount[INFANTRY] == 3 || (amount[INFANTRY] == 2 && amount[WILD] == 1))
9D004E90  8FC30000   LW V1, 0(S8)
9D004E94  24020003   ADDIU V0, ZERO, 3
9D004E98  10620009   BEQ V1, V0, 0x9D004EC0
9D004E9C  00000000   NOP
9D004EA0  8FC30000   LW V1, 0(S8)
9D004EA4  24020002   ADDIU V0, ZERO, 2
9D004EA8  14620008   BNE V1, V0, 0x9D004ECC
9D004EAC  00000000   NOP
9D004EB0  8FC3000C   LW V1, 12(S8)
9D004EB4  24020001   ADDIU V0, ZERO, 1
9D004EB8  14620004   BNE V1, V0, 0x9D004ECC
9D004EBC  00000000   NOP
86:                          return 4;
9D004EC0  24020004   ADDIU V0, ZERO, 4
9D004EC4  0B401405   J 0x9D005014
9D004EC8  00000000   NOP
87:                      if(amount[CAVALRY] == 3 || (amount[CAVALRY] == 2 && amount[WILD] == 1))
9D004ECC  8FC30004   LW V1, 4(S8)
9D004ED0  24020003   ADDIU V0, ZERO, 3
9D004ED4  10620009   BEQ V1, V0, 0x9D004EFC
9D004ED8  00000000   NOP
9D004EDC  8FC30004   LW V1, 4(S8)
9D004EE0  24020002   ADDIU V0, ZERO, 2
9D004EE4  14620008   BNE V1, V0, 0x9D004F08
9D004EE8  00000000   NOP
9D004EEC  8FC3000C   LW V1, 12(S8)
9D004EF0  24020001   ADDIU V0, ZERO, 1
9D004EF4  14620004   BNE V1, V0, 0x9D004F08
9D004EF8  00000000   NOP
88:                          return 6;
9D004EFC  24020006   ADDIU V0, ZERO, 6
9D004F00  0B401405   J 0x9D005014
9D004F04  00000000   NOP
89:                      if(amount[ARTILLERY] == 3 || (amount[ARTILLERY] == 2 && amount[WILD] == 1))
9D004F08  8FC30008   LW V1, 8(S8)
9D004F0C  24020003   ADDIU V0, ZERO, 3
9D004F10  10620009   BEQ V1, V0, 0x9D004F38
9D004F14  00000000   NOP
9D004F18  8FC30008   LW V1, 8(S8)
9D004F1C  24020002   ADDIU V0, ZERO, 2
9D004F20  14620008   BNE V1, V0, 0x9D004F44
9D004F24  00000000   NOP
9D004F28  8FC3000C   LW V1, 12(S8)
9D004F2C  24020001   ADDIU V0, ZERO, 1
9D004F30  14620004   BNE V1, V0, 0x9D004F44
9D004F34  00000000   NOP
90:                          return 8;
9D004F38  24020008   ADDIU V0, ZERO, 8
9D004F3C  0B401405   J 0x9D005014
9D004F40  00000000   NOP
91:                      if((amount[INFANTRY] == 1 && amount[CAVALRY] == 1 
9D004F44  8FC30000   LW V1, 0(S8)
9D004F48  24020001   ADDIU V0, ZERO, 1
9D004F4C  14620009   BNE V1, V0, 0x9D004F74
9D004F50  00000000   NOP
9D004F54  8FC30004   LW V1, 4(S8)
9D004F58  24020001   ADDIU V0, ZERO, 1
9D004F5C  14620005   BNE V1, V0, 0x9D004F74
9D004F60  00000000   NOP
92:                                  && amount[ARTILLERY] == 1)
9D004F64  8FC30008   LW V1, 8(S8)
9D004F68  24020001   ADDIU V0, ZERO, 1
9D004F6C  10620025   BEQ V1, V0, 0x9D005004
9D004F70  00000000   NOP
93:                              || (amount[WILD] == 1 && amount[CAVALRY] == 1 
9D004F74  8FC3000C   LW V1, 12(S8)
9D004F78  24020001   ADDIU V0, ZERO, 1
9D004F7C  14620009   BNE V1, V0, 0x9D004FA4
9D004F80  00000000   NOP
9D004F84  8FC30004   LW V1, 4(S8)
9D004F88  24020001   ADDIU V0, ZERO, 1
9D004F8C  14620005   BNE V1, V0, 0x9D004FA4
9D004F90  00000000   NOP
94:                                  && amount[ARTILLERY] == 1)
9D004F94  8FC30008   LW V1, 8(S8)
9D004F98  24020001   ADDIU V0, ZERO, 1
9D004F9C  10620019   BEQ V1, V0, 0x9D005004
9D004FA0  00000000   NOP
95:                              || (amount[INFANTRY] == 1 && amount[WILD] == 1 
9D004FA4  8FC30000   LW V1, 0(S8)
9D004FA8  24020001   ADDIU V0, ZERO, 1
9D004FAC  14620009   BNE V1, V0, 0x9D004FD4
9D004FB0  00000000   NOP
9D004FB4  8FC3000C   LW V1, 12(S8)
9D004FB8  24020001   ADDIU V0, ZERO, 1
9D004FBC  14620005   BNE V1, V0, 0x9D004FD4
9D004FC0  00000000   NOP
96:                                  && amount[ARTILLERY] == 1)
9D004FC4  8FC30008   LW V1, 8(S8)
9D004FC8  24020001   ADDIU V0, ZERO, 1
9D004FCC  1062000D   BEQ V1, V0, 0x9D005004
9D004FD0  00000000   NOP
97:                              || (amount[INFANTRY] == 1 && amount[CAVALRY] == 1 
9D004FD4  8FC30000   LW V1, 0(S8)
9D004FD8  24020001   ADDIU V0, ZERO, 1
9D004FDC  1462000C   BNE V1, V0, 0x9D005010
9D004FE0  00000000   NOP
9D004FE4  8FC30004   LW V1, 4(S8)
9D004FE8  24020001   ADDIU V0, ZERO, 1
9D004FEC  14620008   BNE V1, V0, 0x9D005010
9D004FF0  00000000   NOP
98:                                  && amount[WILD] == 1))
9D004FF4  8FC3000C   LW V1, 12(S8)
9D004FF8  24020001   ADDIU V0, ZERO, 1
9D004FFC  14620004   BNE V1, V0, 0x9D005010
9D005000  00000000   NOP
99:                      {
100:                         return 10;
9D005004  2402000A   ADDIU V0, ZERO, 10
9D005008  0B401405   J 0x9D005014
9D00500C  00000000   NOP
101:                     }
102:                 
103:                     return 0;
9D005010  00001021   ADDU V0, ZERO, ZERO
104:                 }
9D005014  03C0E821   ADDU SP, S8, ZERO
9D005018  8FBE0014   LW S8, 20(SP)
9D00501C  27BD0018   ADDIU SP, SP, 24
9D005020  03E00008   JR RA
9D005024  00000000   NOP
105:                 
106:                 int exchangeCards(int player, int idx1, int idx2, int idx3)
107:                 {
9D005028  27BDFFA8   ADDIU SP, SP, -88
9D00502C  AFBF0054   SW RA, 84(SP)
9D005030  AFBE0050   SW S8, 80(SP)
9D005034  03A0F021   ADDU S8, SP, ZERO
9D005038  AFC40058   SW A0, 88(S8)
9D00503C  AFC5005C   SW A1, 92(S8)
9D005040  AFC60060   SW A2, 96(S8)
9D005044  AFC70064   SW A3, 100(S8)
108:                     int handsize = hands[player].cards;
9D005048  3C038000   LUI V1, -32768
9D00504C  8FC20058   LW V0, 88(S8)
9D005050  00021080   SLL V0, V0, 2
9D005054  00022100   SLL A0, V0, 4
9D005058  00441021   ADDU V0, V0, A0
9D00505C  24630118   ADDIU V1, V1, 280
9D005060  00431021   ADDU V0, V0, V1
9D005064  8C420040   LW V0, 64(V0)
9D005068  AFC2001C   SW V0, 28(S8)
109:                     if(idx1 >= handsize || idx2 >= handsize || idx3 >= handsize)
9D00506C  8FC3005C   LW V1, 92(S8)
9D005070  8FC2001C   LW V0, 28(S8)
9D005074  0062102A   SLT V0, V1, V0
9D005078  1040000B   BEQ V0, ZERO, 0x9D0050A8
9D00507C  00000000   NOP
9D005080  8FC30060   LW V1, 96(S8)
9D005084  8FC2001C   LW V0, 28(S8)
9D005088  0062102A   SLT V0, V1, V0
9D00508C  10400006   BEQ V0, ZERO, 0x9D0050A8
9D005090  00000000   NOP
9D005094  8FC30064   LW V1, 100(S8)
9D005098  8FC2001C   LW V0, 28(S8)
9D00509C  0062102A   SLT V0, V1, V0
9D0050A0  14400004   BNE V0, ZERO, 0x9D0050B4
9D0050A4  00000000   NOP
110:                         return 0;
9D0050A8  00001021   ADDU V0, ZERO, ZERO
9D0050AC  0B401603   J 0x9D00580C
9D0050B0  00000000   NOP
111:                     if(idx1 == idx2 || idx1 == idx3 || idx2 == idx3)
9D0050B4  8FC3005C   LW V1, 92(S8)
9D0050B8  8FC20060   LW V0, 96(S8)
9D0050BC  10620009   BEQ V1, V0, 0x9D0050E4
9D0050C0  00000000   NOP
9D0050C4  8FC3005C   LW V1, 92(S8)
9D0050C8  8FC20064   LW V0, 100(S8)
9D0050CC  10620005   BEQ V1, V0, 0x9D0050E4
9D0050D0  00000000   NOP
9D0050D4  8FC30060   LW V1, 96(S8)
9D0050D8  8FC20064   LW V0, 100(S8)
9D0050DC  14620004   BNE V1, V0, 0x9D0050F0
9D0050E0  00000000   NOP
112:                         return 0;
9D0050E4  00001021   ADDU V0, ZERO, ZERO
9D0050E8  0B401603   J 0x9D00580C
9D0050EC  00000000   NOP
113:                 
114:                     Card c1 = hands[player].hand[idx1];
9D0050F0  3C048000   LUI A0, -32768
9D0050F4  8FC3005C   LW V1, 92(S8)
9D0050F8  8FC20058   LW V0, 88(S8)
9D0050FC  000318C0   SLL V1, V1, 3
9D005100  00021080   SLL V0, V0, 2
9D005104  00022900   SLL A1, V0, 4
9D005108  00451021   ADDU V0, V0, A1
9D00510C  00621821   ADDU V1, V1, V0
9D005110  24820118   ADDIU V0, A0, 280
9D005114  00621021   ADDU V0, V1, V0
9D005118  8C430000   LW V1, 0(V0)
9D00511C  8C420004   LW V0, 4(V0)
9D005120  AFC30020   SW V1, 32(S8)
9D005124  AFC20024   SW V0, 36(S8)
115:                     Card c2 = hands[player].hand[idx2];
9D005128  3C048000   LUI A0, -32768
9D00512C  8FC30060   LW V1, 96(S8)
9D005130  8FC20058   LW V0, 88(S8)
9D005134  000318C0   SLL V1, V1, 3
9D005138  00021080   SLL V0, V0, 2
9D00513C  00022900   SLL A1, V0, 4
9D005140  00451021   ADDU V0, V0, A1
9D005144  00621821   ADDU V1, V1, V0
9D005148  24820118   ADDIU V0, A0, 280
9D00514C  00621021   ADDU V0, V1, V0
9D005150  8C430000   LW V1, 0(V0)
9D005154  8C420004   LW V0, 4(V0)
9D005158  AFC30028   SW V1, 40(S8)
9D00515C  AFC2002C   SW V0, 44(S8)
116:                     Card c3 = hands[player].hand[idx3];
9D005160  3C048000   LUI A0, -32768
9D005164  8FC30064   LW V1, 100(S8)
9D005168  8FC20058   LW V0, 88(S8)
9D00516C  000318C0   SLL V1, V1, 3
9D005170  00021080   SLL V0, V0, 2
9D005174  00022900   SLL A1, V0, 4
9D005178  00451021   ADDU V0, V0, A1
9D00517C  00621821   ADDU V1, V1, V0
9D005180  24820118   ADDIU V0, A0, 280
9D005184  00621021   ADDU V0, V1, V0
9D005188  8C430000   LW V1, 0(V0)
9D00518C  8C420004   LW V0, 4(V0)
9D005190  AFC30030   SW V1, 48(S8)
9D005194  AFC20034   SW V0, 52(S8)
117:                     int value = cardSetValue(c1, c2, c3);
9D005198  8FC30030   LW V1, 48(S8)
9D00519C  8FC20034   LW V0, 52(S8)
9D0051A0  AFA30010   SW V1, 16(SP)
9D0051A4  AFA20014   SW V0, 20(SP)
9D0051A8  8FC40020   LW A0, 32(S8)
9D0051AC  8FC50024   LW A1, 36(S8)
9D0051B0  8FC60028   LW A2, 40(S8)
9D0051B4  8FC7002C   LW A3, 44(S8)
9D0051B8  0F40137E   JAL cardSetValue
9D0051BC  00000000   NOP
9D0051C0  AFC20018   SW V0, 24(S8)
118:                     if(value == 0)
9D0051C4  8FC20018   LW V0, 24(S8)
9D0051C8  14400004   BNE V0, ZERO, 0x9D0051DC
9D0051CC  00000000   NOP
119:                         return 0;
9D0051D0  00001021   ADDU V0, ZERO, ZERO
9D0051D4  0B401603   J 0x9D00580C
9D0051D8  00000000   NOP
120:                 
121:                     
122:                     // Add the cards to the discard pile
123:                     discards[discardsSize++] = c1;
9D0051DC  8F8280B4   LW V0, -32588(GP)
9D0051E0  3C038000   LUI V1, -32768
9D0051E4  000220C0   SLL A0, V0, 3
9D0051E8  246301A0   ADDIU V1, V1, 416
9D0051EC  00831821   ADDU V1, A0, V1
9D0051F0  8FC50020   LW A1, 32(S8)
9D0051F4  8FC40024   LW A0, 36(S8)
9D0051F8  AC650000   SW A1, 0(V1)
9D0051FC  AC640004   SW A0, 4(V1)
9D005200  24420001   ADDIU V0, V0, 1
9D005204  AF8280B4   SW V0, -32588(GP)
124:                     discards[discardsSize++] = c2;
9D005208  8F8280B4   LW V0, -32588(GP)
9D00520C  3C038000   LUI V1, -32768
9D005210  000220C0   SLL A0, V0, 3
9D005214  246301A0   ADDIU V1, V1, 416
9D005218  00831821   ADDU V1, A0, V1
9D00521C  8FC50028   LW A1, 40(S8)
9D005220  8FC4002C   LW A0, 44(S8)
9D005224  AC650000   SW A1, 0(V1)
9D005228  AC640004   SW A0, 4(V1)
9D00522C  24420001   ADDIU V0, V0, 1
9D005230  AF8280B4   SW V0, -32588(GP)
125:                     discards[discardsSize++] = c3;
9D005234  8F8280B4   LW V0, -32588(GP)
9D005238  3C038000   LUI V1, -32768
9D00523C  000220C0   SLL A0, V0, 3
9D005240  246301A0   ADDIU V1, V1, 416
9D005244  00831821   ADDU V1, A0, V1
9D005248  8FC50030   LW A1, 48(S8)
9D00524C  8FC40034   LW A0, 52(S8)
9D005250  AC650000   SW A1, 0(V1)
9D005254  AC640004   SW A0, 4(V1)
9D005258  24420001   ADDIU V0, V0, 1
9D00525C  AF8280B4   SW V0, -32588(GP)
126:                 
127:                     // Move selected cards to end of hand, then remove them
128:                     SWAP(hands[player].hand[idx1], hands[player].hand[handsize - 1]);
9D005260  3C048000   LUI A0, -32768
9D005264  8FC3005C   LW V1, 92(S8)
9D005268  8FC20058   LW V0, 88(S8)
9D00526C  000318C0   SLL V1, V1, 3
9D005270  00021080   SLL V0, V0, 2
9D005274  00022900   SLL A1, V0, 4
9D005278  00451021   ADDU V0, V0, A1
9D00527C  00621821   ADDU V1, V1, V0
9D005280  24820118   ADDIU V0, A0, 280
9D005284  00621021   ADDU V0, V1, V0
9D005288  8C430000   LW V1, 0(V0)
9D00528C  8C420004   LW V0, 4(V0)
9D005290  AFC30038   SW V1, 56(S8)
9D005294  AFC2003C   SW V0, 60(S8)
9D005298  8FC2001C   LW V0, 28(S8)
9D00529C  2444FFFF   ADDIU A0, V0, -1
9D0052A0  3C058000   LUI A1, -32768
9D0052A4  8FC3005C   LW V1, 92(S8)
9D0052A8  8FC20058   LW V0, 88(S8)
9D0052AC  000318C0   SLL V1, V1, 3
9D0052B0  00021080   SLL V0, V0, 2
9D0052B4  00023100   SLL A2, V0, 4
9D0052B8  00461021   ADDU V0, V0, A2
9D0052BC  00621821   ADDU V1, V1, V0
9D0052C0  24A20118   ADDIU V0, A1, 280
9D0052C4  00621821   ADDU V1, V1, V0
9D0052C8  3C058000   LUI A1, -32768
9D0052CC  8FC20058   LW V0, 88(S8)
9D0052D0  000420C0   SLL A0, A0, 3
9D0052D4  00021080   SLL V0, V0, 2
9D0052D8  00023100   SLL A2, V0, 4
9D0052DC  00461021   ADDU V0, V0, A2
9D0052E0  00822021   ADDU A0, A0, V0
9D0052E4  24A20118   ADDIU V0, A1, 280
9D0052E8  00821021   ADDU V0, A0, V0
9D0052EC  8C440000   LW A0, 0(V0)
9D0052F0  8C420004   LW V0, 4(V0)
9D0052F4  AC640000   SW A0, 0(V1)
9D0052F8  AC620004   SW V0, 4(V1)
9D0052FC  8FC2001C   LW V0, 28(S8)
9D005300  2443FFFF   ADDIU V1, V0, -1
9D005304  3C048000   LUI A0, -32768
9D005308  8FC20058   LW V0, 88(S8)
9D00530C  000318C0   SLL V1, V1, 3
9D005310  00021080   SLL V0, V0, 2
9D005314  00022900   SLL A1, V0, 4
9D005318  00451021   ADDU V0, V0, A1
9D00531C  00621821   ADDU V1, V1, V0
9D005320  24820118   ADDIU V0, A0, 280
9D005324  00621021   ADDU V0, V1, V0
9D005328  8FC40038   LW A0, 56(S8)
9D00532C  8FC3003C   LW V1, 60(S8)
9D005330  AC440000   SW A0, 0(V0)
9D005334  AC430004   SW V1, 4(V0)
129:                     if(idx2 == handsize - 1)
9D005338  8FC2001C   LW V0, 28(S8)
9D00533C  2443FFFF   ADDIU V1, V0, -1
9D005340  8FC20060   LW V0, 96(S8)
9D005344  14620003   BNE V1, V0, 0x9D005354
9D005348  00000000   NOP
130:                         idx2 = idx1;
9D00534C  8FC2005C   LW V0, 92(S8)
9D005350  AFC20060   SW V0, 96(S8)
131:                     if(idx3 == handsize - 1)
9D005354  8FC2001C   LW V0, 28(S8)
9D005358  2443FFFF   ADDIU V1, V0, -1
9D00535C  8FC20064   LW V0, 100(S8)
9D005360  14620003   BNE V1, V0, 0x9D005370
9D005364  00000000   NOP
132:                         idx3 = idx1;
9D005368  8FC2005C   LW V0, 92(S8)
9D00536C  AFC20064   SW V0, 100(S8)
133:                     SWAP(hands[player].hand[idx2], hands[player].hand[handsize - 2]);
9D005370  3C048000   LUI A0, -32768
9D005374  8FC30060   LW V1, 96(S8)
9D005378  8FC20058   LW V0, 88(S8)
9D00537C  000318C0   SLL V1, V1, 3
9D005380  00021080   SLL V0, V0, 2
9D005384  00022900   SLL A1, V0, 4
9D005388  00451021   ADDU V0, V0, A1
9D00538C  00621821   ADDU V1, V1, V0
9D005390  24820118   ADDIU V0, A0, 280
9D005394  00621021   ADDU V0, V1, V0
9D005398  8C430000   LW V1, 0(V0)
9D00539C  8C420004   LW V0, 4(V0)
9D0053A0  AFC30040   SW V1, 64(S8)
9D0053A4  AFC20044   SW V0, 68(S8)
9D0053A8  8FC2001C   LW V0, 28(S8)
9D0053AC  2444FFFE   ADDIU A0, V0, -2
9D0053B0  3C058000   LUI A1, -32768
9D0053B4  8FC30060   LW V1, 96(S8)
9D0053B8  8FC20058   LW V0, 88(S8)
9D0053BC  000318C0   SLL V1, V1, 3
9D0053C0  00021080   SLL V0, V0, 2
9D0053C4  00023100   SLL A2, V0, 4
9D0053C8  00461021   ADDU V0, V0, A2
9D0053CC  00621821   ADDU V1, V1, V0
9D0053D0  24A20118   ADDIU V0, A1, 280
9D0053D4  00621821   ADDU V1, V1, V0
9D0053D8  3C058000   LUI A1, -32768
9D0053DC  8FC20058   LW V0, 88(S8)
9D0053E0  000420C0   SLL A0, A0, 3
9D0053E4  00021080   SLL V0, V0, 2
9D0053E8  00023100   SLL A2, V0, 4
9D0053EC  00461021   ADDU V0, V0, A2
9D0053F0  00822021   ADDU A0, A0, V0
9D0053F4  24A20118   ADDIU V0, A1, 280
9D0053F8  00821021   ADDU V0, A0, V0
9D0053FC  8C440000   LW A0, 0(V0)
9D005400  8C420004   LW V0, 4(V0)
9D005404  AC640000   SW A0, 0(V1)
9D005408  AC620004   SW V0, 4(V1)
9D00540C  8FC2001C   LW V0, 28(S8)
9D005410  2443FFFE   ADDIU V1, V0, -2
9D005414  3C048000   LUI A0, -32768
9D005418  8FC20058   LW V0, 88(S8)
9D00541C  000318C0   SLL V1, V1, 3
9D005420  00021080   SLL V0, V0, 2
9D005424  00022900   SLL A1, V0, 4
9D005428  00451021   ADDU V0, V0, A1
9D00542C  00621821   ADDU V1, V1, V0
9D005430  24820118   ADDIU V0, A0, 280
9D005434  00621021   ADDU V0, V1, V0
9D005438  8FC40040   LW A0, 64(S8)
9D00543C  8FC30044   LW V1, 68(S8)
9D005440  AC440000   SW A0, 0(V0)
9D005444  AC430004   SW V1, 4(V0)
134:                     if(idx3 == handsize - 2)
9D005448  8FC2001C   LW V0, 28(S8)
9D00544C  2443FFFE   ADDIU V1, V0, -2
9D005450  8FC20064   LW V0, 100(S8)
9D005454  14620003   BNE V1, V0, 0x9D005464
9D005458  00000000   NOP
135:                         idx3 = idx2;
9D00545C  8FC20060   LW V0, 96(S8)
9D005460  AFC20064   SW V0, 100(S8)
136:                     SWAP(hands[player].hand[idx3], hands[player].hand[handsize - 3]);
9D005464  3C048000   LUI A0, -32768
9D005468  8FC30064   LW V1, 100(S8)
9D00546C  8FC20058   LW V0, 88(S8)
9D005470  000318C0   SLL V1, V1, 3
9D005474  00021080   SLL V0, V0, 2
9D005478  00022900   SLL A1, V0, 4
9D00547C  00451021   ADDU V0, V0, A1
9D005480  00621821   ADDU V1, V1, V0
9D005484  24820118   ADDIU V0, A0, 280
9D005488  00621021   ADDU V0, V1, V0
9D00548C  8C430000   LW V1, 0(V0)
9D005490  8C420004   LW V0, 4(V0)
9D005494  AFC30048   SW V1, 72(S8)
9D005498  AFC2004C   SW V0, 76(S8)
9D00549C  8FC2001C   LW V0, 28(S8)
9D0054A0  2444FFFD   ADDIU A0, V0, -3
9D0054A4  3C058000   LUI A1, -32768
9D0054A8  8FC30064   LW V1, 100(S8)
9D0054AC  8FC20058   LW V0, 88(S8)
9D0054B0  000318C0   SLL V1, V1, 3
9D0054B4  00021080   SLL V0, V0, 2
9D0054B8  00023100   SLL A2, V0, 4
9D0054BC  00461021   ADDU V0, V0, A2
9D0054C0  00621821   ADDU V1, V1, V0
9D0054C4  24A20118   ADDIU V0, A1, 280
9D0054C8  00621821   ADDU V1, V1, V0
9D0054CC  3C058000   LUI A1, -32768
9D0054D0  8FC20058   LW V0, 88(S8)
9D0054D4  000420C0   SLL A0, A0, 3
9D0054D8  00021080   SLL V0, V0, 2
9D0054DC  00023100   SLL A2, V0, 4
9D0054E0  00461021   ADDU V0, V0, A2
9D0054E4  00822021   ADDU A0, A0, V0
9D0054E8  24A20118   ADDIU V0, A1, 280
9D0054EC  00821021   ADDU V0, A0, V0
9D0054F0  8C440000   LW A0, 0(V0)
9D0054F4  8C420004   LW V0, 4(V0)
9D0054F8  AC640000   SW A0, 0(V1)
9D0054FC  AC620004   SW V0, 4(V1)
9D005500  8FC2001C   LW V0, 28(S8)
9D005504  2443FFFD   ADDIU V1, V0, -3
9D005508  3C048000   LUI A0, -32768
9D00550C  8FC20058   LW V0, 88(S8)
9D005510  000318C0   SLL V1, V1, 3
9D005514  00021080   SLL V0, V0, 2
9D005518  00022900   SLL A1, V0, 4
9D00551C  00451021   ADDU V0, V0, A1
9D005520  00621821   ADDU V1, V1, V0
9D005524  24820118   ADDIU V0, A0, 280
9D005528  00621021   ADDU V0, V1, V0
9D00552C  8FC40048   LW A0, 72(S8)
9D005530  8FC3004C   LW V1, 76(S8)
9D005534  AC440000   SW A0, 0(V0)
9D005538  AC430004   SW V1, 4(V0)
137:                 
138:                     hands[player].cards -= 3;
9D00553C  3C038000   LUI V1, -32768
9D005540  8FC20058   LW V0, 88(S8)
9D005544  00021080   SLL V0, V0, 2
9D005548  00022100   SLL A0, V0, 4
9D00554C  00441021   ADDU V0, V0, A0
9D005550  24630118   ADDIU V1, V1, 280
9D005554  00431021   ADDU V0, V0, V1
9D005558  8C420040   LW V0, 64(V0)
9D00555C  2443FFFD   ADDIU V1, V0, -3
9D005560  3C048000   LUI A0, -32768
9D005564  8FC20058   LW V0, 88(S8)
9D005568  00021080   SLL V0, V0, 2
9D00556C  00022900   SLL A1, V0, 4
9D005570  00451021   ADDU V0, V0, A1
9D005574  24840118   ADDIU A0, A0, 280
9D005578  00441021   ADDU V0, V0, A0
9D00557C  AC430040   SW V1, 64(V0)
139:                 
140:                     // Bonuses for owning the territories being traded.
141:                     if(c1.type != WILD && territories[c1.territory].owner == player)
9D005580  8FC30020   LW V1, 32(S8)
9D005584  24020003   ADDIU V0, ZERO, 3
9D005588  10620024   BEQ V1, V0, 0x9D00561C
9D00558C  00000000   NOP
9D005590  8FC20024   LW V0, 36(S8)
9D005594  3C048000   LUI A0, -32768
9D005598  000210C0   SLL V0, V0, 3
9D00559C  00021880   SLL V1, V0, 2
9D0055A0  00621823   SUBU V1, V1, V0
9D0055A4  248241B0   ADDIU V0, A0, 16816
9D0055A8  00621021   ADDU V0, V1, V0
9D0055AC  8C430010   LW V1, 16(V0)
9D0055B0  8FC20058   LW V0, 88(S8)
9D0055B4  14620019   BNE V1, V0, 0x9D00561C
9D0055B8  00000000   NOP
142:                     {
143:                         territories[c1.territory].troops += 2;
9D0055BC  8FC50024   LW A1, 36(S8)
9D0055C0  8FC20024   LW V0, 36(S8)
9D0055C4  3C038000   LUI V1, -32768
9D0055C8  246341B0   ADDIU V1, V1, 16816
9D0055CC  000210C0   SLL V0, V0, 3
9D0055D0  00022080   SLL A0, V0, 2
9D0055D4  00821023   SUBU V0, A0, V0
9D0055D8  00621021   ADDU V0, V1, V0
9D0055DC  8C420014   LW V0, 20(V0)
9D0055E0  24430002   ADDIU V1, V0, 2
9D0055E4  3C028000   LUI V0, -32768
9D0055E8  244441B0   ADDIU A0, V0, 16816
9D0055EC  00A01021   ADDU V0, A1, ZERO
9D0055F0  000210C0   SLL V0, V0, 3
9D0055F4  00022880   SLL A1, V0, 2
9D0055F8  00A21023   SUBU V0, A1, V0
9D0055FC  00821021   ADDU V0, A0, V0
9D005600  AC430014   SW V1, 20(V0)
144:                         logReinforce(player, c1.territory, 2);
9D005604  8FC20024   LW V0, 36(S8)
9D005608  8FC40058   LW A0, 88(S8)
9D00560C  00402821   ADDU A1, V0, ZERO
9D005610  24060002   ADDIU A2, ZERO, 2
9D005614  0F401EDD   JAL logReinforce
9D005618  00000000   NOP
145:                     }
146:                     if(c2.type != WILD && territories[c2.territory].owner == player)
9D00561C  8FC30028   LW V1, 40(S8)
9D005620  24020003   ADDIU V0, ZERO, 3
9D005624  10620024   BEQ V1, V0, 0x9D0056B8
9D005628  00000000   NOP
9D00562C  8FC2002C   LW V0, 44(S8)
9D005630  3C048000   LUI A0, -32768
9D005634  000210C0   SLL V0, V0, 3
9D005638  00021880   SLL V1, V0, 2
9D00563C  00621823   SUBU V1, V1, V0
9D005640  248241B0   ADDIU V0, A0, 16816
9D005644  00621021   ADDU V0, V1, V0
9D005648  8C430010   LW V1, 16(V0)
9D00564C  8FC20058   LW V0, 88(S8)
9D005650  14620019   BNE V1, V0, 0x9D0056B8
9D005654  00000000   NOP
147:                     {
148:                         territories[c2.territory].troops += 2;
9D005658  8FC5002C   LW A1, 44(S8)
9D00565C  8FC2002C   LW V0, 44(S8)
9D005660  3C038000   LUI V1, -32768
9D005664  246341B0   ADDIU V1, V1, 16816
9D005668  000210C0   SLL V0, V0, 3
9D00566C  00022080   SLL A0, V0, 2
9D005670  00821023   SUBU V0, A0, V0
9D005674  00621021   ADDU V0, V1, V0
9D005678  8C420014   LW V0, 20(V0)
9D00567C  24430002   ADDIU V1, V0, 2
9D005680  3C028000   LUI V0, -32768
9D005684  244441B0   ADDIU A0, V0, 16816
9D005688  00A01021   ADDU V0, A1, ZERO
9D00568C  000210C0   SLL V0, V0, 3
9D005690  00022880   SLL A1, V0, 2
9D005694  00A21023   SUBU V0, A1, V0
9D005698  00821021   ADDU V0, A0, V0
9D00569C  AC430014   SW V1, 20(V0)
149:                         logReinforce(player, c1.territory, 2);
9D0056A0  8FC20024   LW V0, 36(S8)
9D0056A4  8FC40058   LW A0, 88(S8)
9D0056A8  00402821   ADDU A1, V0, ZERO
9D0056AC  24060002   ADDIU A2, ZERO, 2
9D0056B0  0F401EDD   JAL logReinforce
9D0056B4  00000000   NOP
150:                     }
151:                     if(c3.type != WILD && territories[c3.territory].owner == player)
9D0056B8  8FC30030   LW V1, 48(S8)
9D0056BC  24020003   ADDIU V0, ZERO, 3
9D0056C0  10620024   BEQ V1, V0, 0x9D005754
9D0056C4  00000000   NOP
9D0056C8  8FC20034   LW V0, 52(S8)
9D0056CC  3C048000   LUI A0, -32768
9D0056D0  000210C0   SLL V0, V0, 3
9D0056D4  00021880   SLL V1, V0, 2
9D0056D8  00621823   SUBU V1, V1, V0
9D0056DC  248241B0   ADDIU V0, A0, 16816
9D0056E0  00621021   ADDU V0, V1, V0
9D0056E4  8C430010   LW V1, 16(V0)
9D0056E8  8FC20058   LW V0, 88(S8)
9D0056EC  14620019   BNE V1, V0, 0x9D005754
9D0056F0  00000000   NOP
152:                     {
153:                         logReinforce(player, c1.territory, 2);
9D0056F4  8FC20024   LW V0, 36(S8)
9D0056F8  8FC40058   LW A0, 88(S8)
9D0056FC  00402821   ADDU A1, V0, ZERO
9D005700  24060002   ADDIU A2, ZERO, 2
9D005704  0F401EDD   JAL logReinforce
9D005708  00000000   NOP
154:                         territories[c3.territory].troops += 2;
9D00570C  8FC50034   LW A1, 52(S8)
9D005710  8FC20034   LW V0, 52(S8)
9D005714  3C038000   LUI V1, -32768
9D005718  246341B0   ADDIU V1, V1, 16816
9D00571C  000210C0   SLL V0, V0, 3
9D005720  00022080   SLL A0, V0, 2
9D005724  00821023   SUBU V0, A0, V0
9D005728  00621021   ADDU V0, V1, V0
9D00572C  8C420014   LW V0, 20(V0)
9D005730  24430002   ADDIU V1, V0, 2
9D005734  3C028000   LUI V0, -32768
9D005738  244441B0   ADDIU A0, V0, 16816
9D00573C  00A01021   ADDU V0, A1, ZERO
9D005740  000210C0   SLL V0, V0, 3
9D005744  00022880   SLL A1, V0, 2
9D005748  00A21023   SUBU V0, A1, V0
9D00574C  00821021   ADDU V0, A0, V0
9D005750  AC430014   SW V1, 20(V0)
155:                     }
156:                 
157:                     // If scheme is SET_VALUE, value is already set.
158:                     
159:                     if(cardValueScheme == INCREASING_ONE)
9D005754  8F8380C0   LW V1, -32576(GP)
9D005758  24020001   ADDIU V0, ZERO, 1
9D00575C  14620008   BNE V1, V0, 0x9D005780
9D005760  00000000   NOP
160:                     {
161:                         value = cardExchangeValue;
9D005764  8F8280BC   LW V0, -32580(GP)
9D005768  AFC20018   SW V0, 24(S8)
162:                         cardExchangeValue += 1;
9D00576C  8F8280BC   LW V0, -32580(GP)
9D005770  24420001   ADDIU V0, V0, 1
9D005774  AF8280BC   SW V0, -32580(GP)
9D005778  0B4015F8   J 0x9D0057E0
9D00577C  00000000   NOP
163:                     }
164:                     else if(cardValueScheme == INCREASING)
9D005780  8F8280C0   LW V0, -32576(GP)
9D005784  14400016   BNE V0, ZERO, 0x9D0057E0
9D005788  00000000   NOP
165:                     {
166:                         value = cardExchangeValue;
9D00578C  8F8280BC   LW V0, -32580(GP)
9D005790  AFC20018   SW V0, 24(S8)
167:                         if(cardValueIndex < NUM_EXCHANGE_VALUES - 1)
9D005794  8F8280C4   LW V0, -32572(GP)
9D005798  28420005   SLTI V0, V0, 5
9D00579C  1040000D   BEQ V0, ZERO, 0x9D0057D4
9D0057A0  00000000   NOP
168:                         {
169:                             cardValueIndex += 1;
9D0057A4  8F8280C4   LW V0, -32572(GP)
9D0057A8  24420001   ADDIU V0, V0, 1
9D0057AC  AF8280C4   SW V0, -32572(GP)
170:                             cardExchangeValue = cardExchangeValues[cardValueIndex];
9D0057B0  8F8380C4   LW V1, -32572(GP)
9D0057B4  3C029D01   LUI V0, -25343
9D0057B8  00031880   SLL V1, V1, 2
9D0057BC  2442AEF8   ADDIU V0, V0, -20744
9D0057C0  00621021   ADDU V0, V1, V0
9D0057C4  8C420000   LW V0, 0(V0)
9D0057C8  AF8280BC   SW V0, -32580(GP)
9D0057CC  0B4015F8   J 0x9D0057E0
9D0057D0  00000000   NOP
171:                         }
172:                         else
173:                         {
174:                             cardExchangeValue += 5;
9D0057D4  8F8280BC   LW V0, -32580(GP)
9D0057D8  24420005   ADDIU V0, V0, 5
9D0057DC  AF8280BC   SW V0, -32580(GP)
175:                         }
176:                     }
177:                 
178:                     logExchange(player, c1.type, c2.type, c3.type, value);
9D0057E0  8FC50020   LW A1, 32(S8)
9D0057E4  8FC30028   LW V1, 40(S8)
9D0057E8  8FC20030   LW V0, 48(S8)
9D0057EC  8FC40018   LW A0, 24(S8)
9D0057F0  AFA40010   SW A0, 16(SP)
9D0057F4  8FC40058   LW A0, 88(S8)
9D0057F8  00603021   ADDU A2, V1, ZERO
9D0057FC  00403821   ADDU A3, V0, ZERO
9D005800  0F401E69   JAL 0x9D0079A4
9D005804  00000000   NOP
179:                 
180:                     return value;
9D005808  8FC20018   LW V0, 24(S8)
181:                 }
9D00580C  03C0E821   ADDU SP, S8, ZERO
9D005810  8FBF0054   LW RA, 84(SP)
9D005814  8FBE0050   LW S8, 80(SP)
9D005818  27BD0058   ADDIU SP, SP, 88
9D00581C  03E00008   JR RA
9D005820  00000000   NOP
182:                 
183:                 void takeHand(int player, int eliminatedPlayer)
184:                 {
9D005824  27BDFFF0   ADDIU SP, SP, -16
9D005828  AFBE000C   SW S8, 12(SP)
9D00582C  03A0F021   ADDU S8, SP, ZERO
9D005830  AFC40010   SW A0, 16(S8)
9D005834  AFC50014   SW A1, 20(S8)
185:                     for(int i = 0; i < hands[eliminatedPlayer].cards; i++)
9D005838  AFC00000   SW ZERO, 0(S8)
9D00583C  0B401635   J 0x9D0058D4
9D005840  00000000   NOP
9D0058C8  8FC20000   LW V0, 0(S8)
9D0058CC  24420001   ADDIU V0, V0, 1
9D0058D0  AFC20000   SW V0, 0(S8)
9D0058D4  3C038000   LUI V1, -32768
9D0058D8  8FC20014   LW V0, 20(S8)
9D0058DC  00021080   SLL V0, V0, 2
9D0058E0  00022100   SLL A0, V0, 4
9D0058E4  00441021   ADDU V0, V0, A0
9D0058E8  24630118   ADDIU V1, V1, 280
9D0058EC  00431021   ADDU V0, V0, V1
9D0058F0  8C430040   LW V1, 64(V0)
9D0058F4  8FC20000   LW V0, 0(S8)
9D0058F8  0043102A   SLT V0, V0, V1
9D0058FC  1440FFD1   BNE V0, ZERO, 0x9D005844
9D005900  00000000   NOP
186:                     {
187:                         hands[player].hand[hands[player].cards + i] = 
9D005844  3C038000   LUI V1, -32768
9D005848  8FC20010   LW V0, 16(S8)
9D00584C  00021080   SLL V0, V0, 2
9D005850  00022100   SLL A0, V0, 4
9D005854  00441021   ADDU V0, V0, A0
9D005858  24630118   ADDIU V1, V1, 280
9D00585C  00431021   ADDU V0, V0, V1
9D005860  8C430040   LW V1, 64(V0)
9D005864  8FC20000   LW V0, 0(S8)
9D005868  00621821   ADDU V1, V1, V0
9D00586C  3C048000   LUI A0, -32768
9D005870  8FC20010   LW V0, 16(S8)
9D005874  000318C0   SLL V1, V1, 3
9D005878  00021080   SLL V0, V0, 2
9D00587C  00022900   SLL A1, V0, 4
9D005880  00451021   ADDU V0, V0, A1
9D005884  00621821   ADDU V1, V1, V0
9D005888  24820118   ADDIU V0, A0, 280
9D00588C  00621821   ADDU V1, V1, V0
9D005890  3C058000   LUI A1, -32768
9D005894  8FC40000   LW A0, 0(S8)
9D005898  8FC20014   LW V0, 20(S8)
9D00589C  000420C0   SLL A0, A0, 3
9D0058A0  00021080   SLL V0, V0, 2
9D0058A4  00023100   SLL A2, V0, 4
9D0058A8  00461021   ADDU V0, V0, A2
9D0058AC  00822021   ADDU A0, A0, V0
9D0058B0  24A20118   ADDIU V0, A1, 280
9D0058B4  00821021   ADDU V0, A0, V0
9D0058B8  8C440000   LW A0, 0(V0)
9D0058BC  8C420004   LW V0, 4(V0)
9D0058C0  AC640000   SW A0, 0(V1)
9D0058C4  AC620004   SW V0, 4(V1)
188:                             hands[eliminatedPlayer].hand[i];
189:                     }
190:                     hands[player].cards += hands[eliminatedPlayer].cards;
9D005904  3C038000   LUI V1, -32768
9D005908  8FC20010   LW V0, 16(S8)
9D00590C  00021080   SLL V0, V0, 2
9D005910  00022100   SLL A0, V0, 4
9D005914  00441021   ADDU V0, V0, A0
9D005918  24630118   ADDIU V1, V1, 280
9D00591C  00431021   ADDU V0, V0, V1
9D005920  8C430040   LW V1, 64(V0)
9D005924  3C048000   LUI A0, -32768
9D005928  8FC20014   LW V0, 20(S8)
9D00592C  00021080   SLL V0, V0, 2
9D005930  00022900   SLL A1, V0, 4
9D005934  00451021   ADDU V0, V0, A1
9D005938  24840118   ADDIU A0, A0, 280
9D00593C  00441021   ADDU V0, V0, A0
9D005940  8C420040   LW V0, 64(V0)
9D005944  00621821   ADDU V1, V1, V0
9D005948  3C048000   LUI A0, -32768
9D00594C  8FC20010   LW V0, 16(S8)
9D005950  00021080   SLL V0, V0, 2
9D005954  00022900   SLL A1, V0, 4
9D005958  00451021   ADDU V0, V0, A1
9D00595C  24840118   ADDIU A0, A0, 280
9D005960  00441021   ADDU V0, V0, A0
9D005964  AC430040   SW V1, 64(V0)
191:                     hands[eliminatedPlayer].cards = 0;
9D005968  3C038000   LUI V1, -32768
9D00596C  8FC20014   LW V0, 20(S8)
9D005970  00021080   SLL V0, V0, 2
9D005974  00022100   SLL A0, V0, 4
9D005978  00441021   ADDU V0, V0, A0
9D00597C  24630118   ADDIU V1, V1, 280
9D005980  00431021   ADDU V0, V0, V1
9D005984  AC400040   SW ZERO, 64(V0)
192:                 }
9D005988  03C0E821   ADDU SP, S8, ZERO
9D00598C  8FBE000C   LW S8, 12(SP)
9D005990  27BD0010   ADDIU SP, SP, 16
9D005994  03E00008   JR RA
9D005998  00000000   NOP
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/main.c  -----------------------------------------------
1:                   /*
2:                    * File:   main.c
3:                    * Author: jacob
4:                    *
5:                    * Created on February 19, 2015, 6:12 PM
6:                    */
7:                   
8:                   #include <p32xxxx.h>
9:                   #include <xc.h>
10:                  #include <sys/attribs.h> // __ISR macro here
11:                  
12:                  #include "device_config.h"
13:                  #include "init.h"
14:                  #include "lcd.h"
15:                  #include "gamelogic.h"
16:                  #include "buttons.h"
17:                  
18:                  // implement function required for game logic in io.h
19:                  #ifdef NO_RANDOM
20:                  int randint(int min, int max)
21:                  {
9D006598  27BDFFF8   ADDIU SP, SP, -8
9D00659C  AFBE0004   SW S8, 4(SP)
9D0065A0  03A0F021   ADDU S8, SP, ZERO
9D0065A4  AFC40008   SW A0, 8(S8)
9D0065A8  AFC5000C   SW A1, 12(S8)
22:                      return min;
9D0065AC  8FC20008   LW V0, 8(S8)
23:                  }
9D0065B0  03C0E821   ADDU SP, S8, ZERO
9D0065B4  8FBE0004   LW S8, 4(SP)
9D0065B8  27BD0008   ADDIU SP, SP, 8
9D0065BC  03E00008   JR RA
9D0065C0  00000000   NOP
24:                  #else
25:                  int randint(int min, int max)
26:                  {
27:                      unsigned random = RNGNUMGEN1;
28:                      return min + (random % (max - min + 1));
29:                  }
30:                  #endif
31:                  void panic(int line, const char * file, const char * fun, const char * text)
32:                  {
9D0065C4  27BDFFE8   ADDIU SP, SP, -24
9D0065C8  AFBF0014   SW RA, 20(SP)
9D0065CC  AFBE0010   SW S8, 16(SP)
9D0065D0  03A0F021   ADDU S8, SP, ZERO
9D0065D4  AFC40018   SW A0, 24(S8)
9D0065D8  AFC5001C   SW A1, 28(S8)
9D0065DC  AFC60020   SW A2, 32(S8)
9D0065E0  AFC70024   SW A3, 36(S8)
33:                      abort();
9D0065E4  0F402BE6   JAL abort
9D0065E8  00000000   NOP
34:                  }
35:                  
36:                  // Making two different writes to the same port in quick succession can cause
37:                  // problems, so call this macro to make sure both writes get through.
38:                  // eg: PORTAbits.RA0 = 1; SHORTWAIT(); PORTAbits.RA1 = 1;
39:                  #define SHORTWAIT() asm volatile ("nop\n nop\n nop\n nop\n nop\n nop")
40:                  
41:                  void msleep(int msecs);
42:                  void usleep(int usecs);
43:                  void SPIRiskTerritory(int terr);
44:                  void SPIblank();
45:                  void SPIbyte(unsigned char byte);
46:                  
47:                  int inputflag1, inputflag2, inputflag3;
48:                  
49:                  char stuff[17] = "DEADBEEFdeadbeef";
50:                  char * stuffptr = stuff;
51:                  unsigned char a = 0x10, b = 0xAA, c = 0x0F;
52:                  
53:                  static int digits[10] = {
54:                          //gfedcba
55:                          0b01111110, // 0
56:                          0b00001100, // 1
57:                          0b10110110, // 2
58:                          0b10011110, // 3
59:                          0b11001100, // 4
60:                          0b11011010, // 5
61:                          0b11111000, // 6
62:                          0b00001110, // 7
63:                          0b11111110, // 8
64:                          0b11001110, // 9
65:                      };
66:                  
67:                  unsigned char counter = 0;
68:                  int main(void)
69:                  {
9D0065EC  27BDFFE8   ADDIU SP, SP, -24
9D0065F0  AFBF0014   SW RA, 20(SP)
9D0065F4  AFBE0010   SW S8, 16(SP)
9D0065F8  03A0F021   ADDU S8, SP, ZERO
70:                      territories[0].troops = 0;
9D0065FC  3C028000   LUI V0, -32768
9D006600  244241B0   ADDIU V0, V0, 16816
9D006604  AC400014   SW ZERO, 20(V0)
71:                      initClocks();
9D006608  0F401B7F   JAL initClocks
9D00660C  00000000   NOP
72:                      initInterrupts();
9D006610  0F401BAE   JAL initInterrupts
9D006614  00000000   NOP
73:                      initPorts();
9D006618  0F401BF8   JAL initPorts
9D00661C  00000000   NOP
74:                      initTimers();
9D006620  0F401C23   JAL initTimers
9D006624  00000000   NOP
75:                      initSPI();
9D006628  0F401C8D   JAL initSPI
9D00662C  00000000   NOP
76:                      initRNG();
9D006630  0F401D1B   JAL initRNG
9D006634  00000000   NOP
77:                  
78:                      startLCD();
9D006638  0F4023B1   JAL startLCD
9D00663C  00000000   NOP
79:                  
80:                      //changeState(INIT);
81:                      //updateText();
82:                  
83:                      PORTFbits.RF2 = 0;
9D006640  3C03BF86   LUI V1, -16506
9D006644  8C620520   LW V0, 1312(V1)
9D006648  7C021084   INS V0, ZERO, 2, 1
9D00664C  AC620520   SW V0, 1312(V1)
9D006650  0B401997   J 0x9D00665C
9D006654  00000000   NOP
84:                  
85:                      while(1)
86:                      {
87:                          
88:                          a = 0;
9D00665C  A380801C   SB ZERO, -32740(GP)
89:                          if(SPI3STATbits.SPITBE == 1)
9D006660  3C02BF82   LUI V0, -16510
9D006664  8C421410   LW V0, 5136(V0)
9D006668  30420008   ANDI V0, V0, 8
9D00666C  10400005   BEQ V0, ZERO, 0x9D006684
9D006670  00000000   NOP
90:                              a |= 1;
9D006674  9382801C   LBU V0, -32740(GP)
9D006678  34420001   ORI V0, V0, 1
9D00667C  304200FF   ANDI V0, V0, 255
9D006680  A382801C   SB V0, -32740(GP)
91:                          if(SPI3STATbits.SPITBF == 1)
9D006684  3C02BF82   LUI V0, -16510
9D006688  8C421410   LW V0, 5136(V0)
9D00668C  30420002   ANDI V0, V0, 2
9D006690  10400005   BEQ V0, ZERO, 0x9D0066A8
9D006694  00000000   NOP
92:                              a |= 2;
9D006698  9382801C   LBU V0, -32740(GP)
9D00669C  34420002   ORI V0, V0, 2
9D0066A0  304200FF   ANDI V0, V0, 255
9D0066A4  A382801C   SB V0, -32740(GP)
93:                          a = digits[a];
9D0066A8  9382801C   LBU V0, -32740(GP)
9D0066AC  00401821   ADDU V1, V0, ZERO
9D0066B0  3C028000   LUI V0, -32768
9D0066B4  00031880   SLL V1, V1, 2
9D0066B8  24424120   ADDIU V0, V0, 16672
9D0066BC  00621021   ADDU V0, V1, V0
9D0066C0  8C420000   LW V0, 0(V0)
9D0066C4  304200FF   ANDI V0, V0, 255
9D0066C8  A382801C   SB V0, -32740(GP)
94:                          
95:                          
96:                          //b = ~b;
97:                          //c = ~c;
98:                          SPIbyte(a); // digit 2
9D0066CC  9382801C   LBU V0, -32740(GP)
9D0066D0  00402021   ADDU A0, V0, ZERO
9D0066D4  0F401AE7   JAL SPIbyte
9D0066D8  00000000   NOP
99:                          SPIbyte(b); // digit 1
9D0066DC  9382801D   LBU V0, -32739(GP)
9D0066E0  00402021   ADDU A0, V0, ZERO
9D0066E4  0F401AE7   JAL SPIbyte
9D0066E8  00000000   NOP
100:                         SPIbyte(c); // led
9D0066EC  9382801E   LBU V0, -32738(GP)
9D0066F0  00402021   ADDU A0, V0, ZERO
9D0066F4  0F401AE7   JAL SPIbyte
9D0066F8  00000000   NOP
101:                         //SPIRiskTerritory(0);
102:                         //SPIRiskTerritory(1);
103:                         //usleep(1000);
104:                         //SPIblank();
105:                         //SPIblank();
106:                 
107:                         setTextDisplay(0, stuff);
9D0066FC  00002021   ADDU A0, ZERO, ZERO
9D006700  3C028000   LUI V0, -32768
9D006704  2445410C   ADDIU A1, V0, 16652
9D006708  0F40240C   JAL setTextDisplay
9D00670C  00000000   NOP
108:                 
109:                 
110:                         if(flagSet_advance())
9D006710  0F4024D7   JAL 0x9D00935C
9D006714  00000000   NOP
9D006718  1040000A   BEQ V0, ZERO, 0x9D006744
9D00671C  00000000   NOP
111:                         {
112:                             static int RNGseeded = 0;
113:                 
114:                             if(!RNGseeded)
9D006720  8F828090   LW V0, -32624(GP)
9D006724  14400005   BNE V0, ZERO, 0x9D00673C
9D006728  00000000   NOP
115:                             {
116:                                 seedRNG();
9D00672C  0F401D2C   JAL seedRNG
9D006730  00000000   NOP
117:                                 RNGseeded = 1;
9D006734  24020001   ADDIU V0, ZERO, 1
9D006738  AF828090   SW V0, -32624(GP)
118:                             }
119:                             //gameInput(ADVANCE);
120:                 
121:                             clearFlag_advance();
9D00673C  0F4024F8   JAL clearFlag_advance
9D006740  00000000   NOP
122:                         }
123:                         if(flagSet_cancel())
9D006744  0F4024E2   JAL flagSet_cancel
9D006748  00000000   NOP
9D00674C  10400003   BEQ V0, ZERO, 0x9D00675C
9D006750  00000000   NOP
124:                         {
125:                             //gameInput(CANCEL);
126:                             clearFlag_cancel();
9D006754  0F402502   JAL clearFlag_cancel
9D006758  00000000   NOP
127:                         }
128:                         if(flagSet_next())
9D00675C  0F4024ED   JAL flagSet_next
9D006760  00000000   NOP
9D006764  1040FFBC   BEQ V0, ZERO, 0x9D006658
9D006768  00000000   NOP
129:                         {
130:                             //gameInput(NEXT);
131:                             
132:                             clearFlag_next();
9D00676C  0F40250C   JAL clearFlag_next
9D006770  00000000   NOP
133:                         }
134:                         //msleep(10);
135:                 
136:                     }
9D006658  00000000   NOP
9D006774  0B401997   J 0x9D00665C
9D006778  00000000   NOP
137:                 
138:                     return EXIT_SUCCESS;
139:                 }
140:                 
141:                 void msleep(int msecs)
142:                 {
9D00677C  27BDFFE8   ADDIU SP, SP, -24
9D006780  AFBF0014   SW RA, 20(SP)
9D006784  AFBE0010   SW S8, 16(SP)
9D006788  03A0F021   ADDU S8, SP, ZERO
9D00678C  AFC40018   SW A0, 24(S8)
143:                     // The timer has a maximum value of 0xFFFF * 0.64us ~= 41 ms
144:                     while(msecs > 40)
9D006790  0B4019EC   J 0x9D0067B0
9D006794  00000000   NOP
9D0067B0  8FC20018   LW V0, 24(S8)
9D0067B4  28420029   SLTI V0, V0, 41
9D0067B8  1040FFF7   BEQ V0, ZERO, 0x9D006798
9D0067BC  00000000   NOP
145:                     {
146:                         usleep(40000);
9D006798  34049C40   ORI A0, ZERO, -25536
9D00679C  0F401A01   JAL 0x9D006804
9D0067A0  00000000   NOP
147:                         msecs -= 40;
9D0067A4  8FC20018   LW V0, 24(S8)
9D0067A8  2442FFD8   ADDIU V0, V0, -40
9D0067AC  AFC20018   SW V0, 24(S8)
148:                     }
149:                 
150:                     usleep(msecs * 1000);
9D0067C0  8FC40018   LW A0, 24(S8)
9D0067C4  00801821   ADDU V1, A0, ZERO
9D0067C8  00031080   SLL V0, V1, 2
9D0067CC  00401821   ADDU V1, V0, ZERO
9D0067D0  00031140   SLL V0, V1, 5
9D0067D4  00431023   SUBU V0, V0, V1
9D0067D8  00441021   ADDU V0, V0, A0
9D0067DC  000210C0   SLL V0, V0, 3
9D0067E0  00402021   ADDU A0, V0, ZERO
9D0067E4  0F401A01   JAL 0x9D006804
9D0067E8  00000000   NOP
151:                 
152:                 }
9D0067EC  03C0E821   ADDU SP, S8, ZERO
9D0067F0  8FBF0014   LW RA, 20(SP)
9D0067F4  8FBE0010   LW S8, 16(SP)
9D0067F8  27BD0018   ADDIU SP, SP, 24
9D0067FC  03E00008   JR RA
9D006800  00000000   NOP
153:                 void usleep(int usecs)
154:                 {
9D006804  27BDFFF8   ADDIU SP, SP, -8
9D006808  AFBE0004   SW S8, 4(SP)
9D00680C  03A0F021   ADDU S8, SP, ZERO
9D006810  AFC40008   SW A0, 8(S8)
155:                     TMR1 = 0;
9D006814  3C02BF84   LUI V0, -16508
9D006818  AC400010   SW ZERO, 16(V0)
156:                     T1CONbits.ON = 1;
9D00681C  3C03BF84   LUI V1, -16508
9D006820  8C620000   LW V0, 0(V1)
9D006824  24040001   ADDIU A0, ZERO, 1
9D006828  7C827BC4   INS V0, A0, 15, 1
9D00682C  AC620000   SW V0, 0(V1)
157:                     while(TMR1 < usecs * 100 / 64) // timer counts in increments of 0.64 us
9D006830  00000000   NOP
9D006834  8FC20008   LW V0, 8(S8)
9D006838  00021080   SLL V0, V0, 2
9D00683C  00021880   SLL V1, V0, 2
9D006840  00431021   ADDU V0, V0, V1
9D006844  00021880   SLL V1, V0, 2
9D006848  00431021   ADDU V0, V0, V1
9D00684C  2443003F   ADDIU V1, V0, 63
9D006850  28440000   SLTI A0, V0, 0
9D006854  0064100B   MOVN V0, V1, A0
9D006858  00021183   SRA V0, V0, 6
9D00685C  00401821   ADDU V1, V0, ZERO
9D006860  3C02BF84   LUI V0, -16508
9D006864  8C420010   LW V0, 16(V0)
9D006868  0043102B   SLTU V0, V0, V1
9D00686C  1440FFF1   BNE V0, ZERO, 0x9D006834
9D006870  00000000   NOP
158:                     {}
159:                     T1CONbits.ON = 0;
9D006874  3C03BF84   LUI V1, -16508
9D006878  8C620000   LW V0, 0(V1)
9D00687C  7C027BC4   INS V0, ZERO, 15, 1
9D006880  AC620000   SW V0, 0(V1)
160:                 }
9D006884  03C0E821   ADDU SP, S8, ZERO
9D006888  8FBE0004   LW S8, 4(SP)
9D00688C  27BD0008   ADDIU SP, SP, 8
9D006890  03E00008   JR RA
9D006894  00000000   NOP
161:                 
162:                 void SPIRiskTerritory(int terr)
163:                 {
9D006898  27BDFFD8   ADDIU SP, SP, -40
9D00689C  AFBF0024   SW RA, 36(SP)
9D0068A0  AFBE0020   SW S8, 32(SP)
9D0068A4  03A0F021   ADDU S8, SP, ZERO
9D0068A8  AFC40028   SW A0, 40(S8)
164:                     static int digits[10] = {
165:                         //gfedcba
166:                         0b01111110, // 0
167:                         0b00001100, // 1
168:                         0b10110110, // 2
169:                         0b10011110, // 3
170:                         0b11001100, // 4
171:                         0b11011010, // 5
172:                         0b11111000, // 6
173:                         0b00001110, // 7
174:                         0b11111110, // 8
175:                         0b11001110, // 9
176:                     };
177:                 
178:                     int color = territories[terr].owner + 1;
9D0068AC  3C048000   LUI A0, -32768
9D0068B0  8FC20028   LW V0, 40(S8)
9D0068B4  000210C0   SLL V0, V0, 3
9D0068B8  00021880   SLL V1, V0, 2
9D0068BC  00621823   SUBU V1, V1, V0
9D0068C0  248241B0   ADDIU V0, A0, 16816
9D0068C4  00621021   ADDU V0, V1, V0
9D0068C8  8C420010   LW V0, 16(V0)
9D0068CC  24420001   ADDIU V0, V0, 1
9D0068D0  AFC20010   SW V0, 16(S8)
179:                     if((source == terr && TMR8 < T8_MSECS(125)) ||
9D0068D4  8F8380E0   LW V1, -32544(GP)
9D0068D8  8FC20028   LW V0, 40(S8)
9D0068DC  14620008   BNE V1, V0, 0x9D006900
9D0068E0  00000000   NOP
9D0068E4  3C02BF84   LUI V0, -16508
9D0068E8  8C430E10   LW V1, 3600(V0)
9D0068EC  3C020002   LUI V0, 2
9D0068F0  3442FAB2   ORI V0, V0, -1358
9D0068F4  0062102B   SLTU V0, V1, V0
9D0068F8  1440000C   BNE V0, ZERO, 0x9D00692C
9D0068FC  00000000   NOP
9D006904  8FC20028   LW V0, 40(S8)
9D006908  1462000A   BNE V1, V0, 0x9D006934
9D00690C  00000000   NOP
180:                             (destination == terr && TMR8 > T8_MSECS(125)))
9D006900  8F8380D4   LW V1, -32556(GP)
9D006910  3C02BF84   LUI V0, -16508
9D006914  8C430E10   LW V1, 3600(V0)
9D006918  3C020002   LUI V0, 2
9D00691C  3442FAB3   ORI V0, V0, -1357
9D006920  0062102B   SLTU V0, V1, V0
9D006924  14400003   BNE V0, ZERO, 0x9D006934
9D006928  00000000   NOP
181:                     {
182:                         color = 7;
9D00692C  24020007   ADDIU V0, ZERO, 7
9D006930  AFC20010   SW V0, 16(S8)
183:                     }
184:                     
185:                     int ones = territories[terr].troops % 10;
9D006934  3C038000   LUI V1, -32768
9D006938  8FC20028   LW V0, 40(S8)
9D00693C  246341B0   ADDIU V1, V1, 16816
9D006940  000210C0   SLL V0, V0, 3
9D006944  00022080   SLL A0, V0, 2
9D006948  00821023   SUBU V0, A0, V0
9D00694C  00621021   ADDU V0, V1, V0
9D006950  8C430014   LW V1, 20(V0)
9D006954  2402000A   ADDIU V0, ZERO, 10
9D006958  0062001A   DIV V1, V0
9D00695C  004001F4   TEQ V0, ZERO
9D006960  00001010   MFHI V0, 0
9D006964  AFC20014   SW V0, 20(S8)
186:                     int tens = (territories[terr].troops % 100) / 10;
9D006968  3C038000   LUI V1, -32768
9D00696C  8FC20028   LW V0, 40(S8)
9D006970  246341B0   ADDIU V1, V1, 16816
9D006974  000210C0   SLL V0, V0, 3
9D006978  00022080   SLL A0, V0, 2
9D00697C  00821023   SUBU V0, A0, V0
9D006980  00621021   ADDU V0, V1, V0
9D006984  8C430014   LW V1, 20(V0)
9D006988  24020064   ADDIU V0, ZERO, 100
9D00698C  0062001A   DIV V1, V0
9D006990  004001F4   TEQ V0, ZERO
9D006994  00001010   MFHI V0, 0
9D006998  00401821   ADDU V1, V0, ZERO
9D00699C  2402000A   ADDIU V0, ZERO, 10
9D0069A0  0062001A   DIV V1, V0
9D0069A4  004001F4   TEQ V0, ZERO
9D0069A8  00001810   MFHI V1, 0
9D0069AC  00001012   MFLO V0, 0
9D0069B0  AFC20018   SW V0, 24(S8)
187:                 
188:                  
189:                     while(SPI1STATbits.SPITBE != 1) {}
9D0069B4  00000000   NOP
9D0069B8  3C02BF82   LUI V0, -16510
9D0069BC  8C421010   LW V0, 4112(V0)
9D0069C0  30420008   ANDI V0, V0, 8
9D0069C4  1040FFFC   BEQ V0, ZERO, 0x9D0069B8
9D0069C8  00000000   NOP
190:                     SPI1BUF = digits[ones];
9D0069CC  3C028000   LUI V0, -32768
9D0069D0  8FC30014   LW V1, 20(S8)
9D0069D4  00031880   SLL V1, V1, 2
9D0069D8  24424148   ADDIU V0, V0, 16712
9D0069DC  00621021   ADDU V0, V1, V0
9D0069E0  8C420000   LW V0, 0(V0)
9D0069E4  00401821   ADDU V1, V0, ZERO
9D0069E8  3C02BF82   LUI V0, -16510
9D0069EC  AC431020   SW V1, 4128(V0)
191:                     while(SPI1STATbits.SPITBE != 1) {}
9D0069F0  00000000   NOP
9D0069F4  3C02BF82   LUI V0, -16510
9D0069F8  8C421010   LW V0, 4112(V0)
9D0069FC  30420008   ANDI V0, V0, 8
9D006A00  1040FFFC   BEQ V0, ZERO, 0x9D0069F4
9D006A04  00000000   NOP
192:                     SPI1BUF = (tens? digits[tens] : 0x00);
9D006A08  8FC20018   LW V0, 24(S8)
9D006A0C  10400009   BEQ V0, ZERO, 0x9D006A34
9D006A10  00000000   NOP
9D006A14  3C028000   LUI V0, -32768
9D006A18  8FC30018   LW V1, 24(S8)
9D006A1C  00031880   SLL V1, V1, 2
9D006A20  24424148   ADDIU V0, V0, 16712
9D006A24  00621021   ADDU V0, V1, V0
9D006A28  8C420000   LW V0, 0(V0)
9D006A2C  0B401A8E   J 0x9D006A38
9D006A30  00000000   NOP
9D006A34  00001021   ADDU V0, ZERO, ZERO
9D006A38  3C03BF82   LUI V1, -16510
9D006A3C  AC621020   SW V0, 4128(V1)
193:                     while(SPI1STATbits.SPITBE != 1) {}
9D006A40  00000000   NOP
9D006A44  3C02BF82   LUI V0, -16510
9D006A48  8C421010   LW V0, 4112(V0)
9D006A4C  30420008   ANDI V0, V0, 8
9D006A50  1040FFFC   BEQ V0, ZERO, 0x9D006A44
9D006A54  00000000   NOP
194:                     SPI1BUF = color << 2;
9D006A58  8FC20010   LW V0, 16(S8)
9D006A5C  00021080   SLL V0, V0, 2
9D006A60  00401821   ADDU V1, V0, ZERO
9D006A64  3C02BF82   LUI V0, -16510
9D006A68  AC431020   SW V1, 4128(V0)
195:                 
196:                     while(SPI1STATbits.SPITBE != 1) {}
9D006A6C  00000000   NOP
9D006A70  3C02BF82   LUI V0, -16510
9D006A74  8C421010   LW V0, 4112(V0)
9D006A78  30420008   ANDI V0, V0, 8
9D006A7C  1040FFFC   BEQ V0, ZERO, 0x9D006A70
9D006A80  00000000   NOP
197:                 
198:                 
199:                 
200:                     usleep(1);
9D006A84  24040001   ADDIU A0, ZERO, 1
9D006A88  0F401A01   JAL 0x9D006804
9D006A8C  00000000   NOP
201:                 
202:                     PORTFbits.RF2 = 0;
9D006A90  3C03BF86   LUI V1, -16506
9D006A94  8C620520   LW V0, 1312(V1)
9D006A98  7C021084   INS V0, ZERO, 2, 1
9D006A9C  AC620520   SW V0, 1312(V1)
203:                 
204:                     usleep(1);
9D006AA0  24040001   ADDIU A0, ZERO, 1
9D006AA4  0F401A01   JAL 0x9D006804
9D006AA8  00000000   NOP
205:                 
206:                     PORTFbits.RF2 = 1;
9D006AAC  3C03BF86   LUI V1, -16506
9D006AB0  8C620520   LW V0, 1312(V1)
9D006AB4  24040001   ADDIU A0, ZERO, 1
9D006AB8  7C821084   INS V0, A0, 2, 1
9D006ABC  AC620520   SW V0, 1312(V1)
207:                 
208:                 }
9D006AC0  03C0E821   ADDU SP, S8, ZERO
9D006AC4  8FBF0024   LW RA, 36(SP)
9D006AC8  8FBE0020   LW S8, 32(SP)
9D006ACC  27BD0028   ADDIU SP, SP, 40
9D006AD0  03E00008   JR RA
9D006AD4  00000000   NOP
209:                 
210:                 void SPIblank()
211:                 {
9D006AD8  27BDFFE8   ADDIU SP, SP, -24
9D006ADC  AFBF0014   SW RA, 20(SP)
9D006AE0  AFBE0010   SW S8, 16(SP)
9D006AE4  03A0F021   ADDU S8, SP, ZERO
212:                     SPI1BUF = 0;
9D006AE8  3C02BF82   LUI V0, -16510
9D006AEC  AC401020   SW ZERO, 4128(V0)
213:                     while(SPI1STATbits.SPITBE != 1) {}
9D006AF0  00000000   NOP
9D006AF4  3C02BF82   LUI V0, -16510
9D006AF8  8C421010   LW V0, 4112(V0)
9D006AFC  30420008   ANDI V0, V0, 8
9D006B00  1040FFFC   BEQ V0, ZERO, 0x9D006AF4
9D006B04  00000000   NOP
214:                     SPI1BUF = 0;
9D006B08  3C02BF82   LUI V0, -16510
9D006B0C  AC401020   SW ZERO, 4128(V0)
215:                     while(SPI1STATbits.SPITBE != 1) {}
9D006B10  00000000   NOP
9D006B14  3C02BF82   LUI V0, -16510
9D006B18  8C421010   LW V0, 4112(V0)
9D006B1C  30420008   ANDI V0, V0, 8
9D006B20  1040FFFC   BEQ V0, ZERO, 0x9D006B14
9D006B24  00000000   NOP
216:                     SPI1BUF = 0;
9D006B28  3C02BF82   LUI V0, -16510
9D006B2C  AC401020   SW ZERO, 4128(V0)
217:                     while(SPI1STATbits.SPITBE != 1) {}
9D006B30  00000000   NOP
9D006B34  3C02BF82   LUI V0, -16510
9D006B38  8C421010   LW V0, 4112(V0)
9D006B3C  30420008   ANDI V0, V0, 8
9D006B40  1040FFFC   BEQ V0, ZERO, 0x9D006B34
9D006B44  00000000   NOP
218:                 
219:                     usleep(1);
9D006B48  24040001   ADDIU A0, ZERO, 1
9D006B4C  0F401A01   JAL 0x9D006804
9D006B50  00000000   NOP
220:                     PORTFbits.RF2 = 0;
9D006B54  3C03BF86   LUI V1, -16506
9D006B58  8C620520   LW V0, 1312(V1)
9D006B5C  7C021084   INS V0, ZERO, 2, 1
9D006B60  AC620520   SW V0, 1312(V1)
221:                     usleep(1);
9D006B64  24040001   ADDIU A0, ZERO, 1
9D006B68  0F401A01   JAL 0x9D006804
9D006B6C  00000000   NOP
222:                     PORTFbits.RF2 = 1;
9D006B70  3C03BF86   LUI V1, -16506
9D006B74  8C620520   LW V0, 1312(V1)
9D006B78  24040001   ADDIU A0, ZERO, 1
9D006B7C  7C821084   INS V0, A0, 2, 1
9D006B80  AC620520   SW V0, 1312(V1)
223:                 }
9D006B84  03C0E821   ADDU SP, S8, ZERO
9D006B88  8FBF0014   LW RA, 20(SP)
9D006B8C  8FBE0010   LW S8, 16(SP)
9D006B90  27BD0018   ADDIU SP, SP, 24
9D006B94  03E00008   JR RA
9D006B98  00000000   NOP
224:                 
225:                 void SPIbyte(unsigned char byte)
226:                 {
9D006B9C  27BDFFE8   ADDIU SP, SP, -24
9D006BA0  AFBF0014   SW RA, 20(SP)
9D006BA4  AFBE0010   SW S8, 16(SP)
9D006BA8  03A0F021   ADDU S8, SP, ZERO
9D006BAC  00801021   ADDU V0, A0, ZERO
9D006BB0  A3C20018   SB V0, 24(S8)
227:                     SPI1BUF = byte;
9D006BB4  93C30018   LBU V1, 24(S8)
9D006BB8  3C02BF82   LUI V0, -16510
9D006BBC  AC431020   SW V1, 4128(V0)
228:                     while(SPI1STATbits.SPITBE != 1) {}
9D006BC0  00000000   NOP
9D006BC4  3C02BF82   LUI V0, -16510
9D006BC8  8C421010   LW V0, 4112(V0)
9D006BCC  30420008   ANDI V0, V0, 8
9D006BD0  1040FFFC   BEQ V0, ZERO, 0x9D006BC4
9D006BD4  00000000   NOP
229:                     usleep(1);
9D006BD8  24040001   ADDIU A0, ZERO, 1
9D006BDC  0F401A01   JAL 0x9D006804
9D006BE0  00000000   NOP
230:                     PORTFbits.RF2 = 0;
9D006BE4  3C03BF86   LUI V1, -16506
9D006BE8  8C620520   LW V0, 1312(V1)
9D006BEC  7C021084   INS V0, ZERO, 2, 1
9D006BF0  AC620520   SW V0, 1312(V1)
231:                     usleep(1);
9D006BF4  24040001   ADDIU A0, ZERO, 1
9D006BF8  0F401A01   JAL 0x9D006804
9D006BFC  00000000   NOP
232:                     PORTFbits.RF2 = 1;
9D006C00  3C03BF86   LUI V1, -16506
9D006C04  8C620520   LW V0, 1312(V1)
9D006C08  24040001   ADDIU A0, ZERO, 1
9D006C0C  7C821084   INS V0, A0, 2, 1
9D006C10  AC620520   SW V0, 1312(V1)
233:                 }
9D006C14  03C0E821   ADDU SP, S8, ZERO
9D006C18  8FBF0014   LW RA, 20(SP)
9D006C1C  8FBE0010   LW S8, 16(SP)
9D006C20  27BD0018   ADDIU SP, SP, 24
9D006C24  03E00008   JR RA
9D006C28  00000000   NOP
234:                 
235:                 void __ISR(_TIMER_3_VECTOR, IPL3SRS) timer3isr()
236:                 {
9D006C2C  415DE800   RDPGPR SP, SP
9D006C30  401A7000   MFC0 K0, EPC
9D006C34  401B6000   MFC0 K1, Status
9D006C38  27BDFFE8   ADDIU SP, SP, -24
9D006C3C  AFBA0014   SW K0, 20(SP)
9D006C40  401A6002   MFC0 K0, SRSCtl
9D006C44  AFBB0010   SW K1, 16(SP)
9D006C48  AFBA000C   SW K0, 12(SP)
9D006C4C  7C1B7844   INS K1, ZERO, 1, 15
9D006C50  377B0C00   ORI K1, K1, 3072
9D006C54  409B6000   MTC0 K1, Status
9D006C58  AFBE0004   SW S8, 4(SP)
9D006C5C  03A0F021   ADDU S8, SP, ZERO
237:                     IFS0bits.T3IF = 0; // clear interrupt flag
9D006C60  3C03BF81   LUI V1, -16511
9D006C64  8C620040   LW V0, 64(V1)
9D006C68  7C027384   INS V0, ZERO, 14, 1
9D006C6C  AC620040   SW V0, 64(V1)
238:                 }
9D006C70  03C0E821   ADDU SP, S8, ZERO
9D006C74  8FBE0004   LW S8, 4(SP)
9D006C78  41606000   DI ZERO
9D006C7C  000000C0   EHB
9D006C80  8FBB000C   LW K1, 12(SP)
9D006C84  8FBA0014   LW K0, 20(SP)
9D006C88  409B6002   MTC0 K1, SRSCtl
9D006C8C  8FBB0010   LW K1, 16(SP)
9D006C90  409A7000   MTC0 K0, EPC
9D006C94  27BD0018   ADDIU SP, SP, 24
9D006C98  41DDE800   WRPGPR SP, SP
9D006C9C  409B6000   MTC0 K1, Status
9D006CA0  42000018   ERET
239:                 
240:                 
241:                 //unsigned int counter = 0;
242:                 void __ISR(_SPI3_RX_VECTOR, IPL4SRS) SPI3RXisr()
243:                 {
9D006CA4  415DE800   RDPGPR SP, SP
9D006CA8  401A7000   MFC0 K0, EPC
9D006CAC  401B6000   MFC0 K1, Status
9D006CB0  27BDFFE8   ADDIU SP, SP, -24
9D006CB4  AFBA0014   SW K0, 20(SP)
9D006CB8  401A6002   MFC0 K0, SRSCtl
9D006CBC  AFBB0010   SW K1, 16(SP)
9D006CC0  AFBA000C   SW K0, 12(SP)
9D006CC4  7C1B7844   INS K1, ZERO, 1, 15
9D006CC8  377B1000   ORI K1, K1, 4096
9D006CCC  409B6000   MTC0 K1, Status
9D006CD0  AFBE0004   SW S8, 4(SP)
9D006CD4  03A0F021   ADDU S8, SP, ZERO
244:                     counter++;
9D006CD8  9382808C   LBU V0, -32628(GP)
9D006CDC  24420001   ADDIU V0, V0, 1
9D006CE0  304200FF   ANDI V0, V0, 255
9D006CE4  A382808C   SB V0, -32628(GP)
245:                     SPI3BUF = counter;
9D006CE8  9382808C   LBU V0, -32628(GP)
9D006CEC  00401821   ADDU V1, V0, ZERO
9D006CF0  3C02BF82   LUI V0, -16510
9D006CF4  AC431420   SW V1, 5152(V0)
246:                     //b = SPI3BUF;
247:                     *stuffptr = SPI3BUF;
9D006CF8  8F828018   LW V0, -32744(GP)
9D006CFC  3C03BF82   LUI V1, -16510
9D006D00  8C631420   LW V1, 5152(V1)
9D006D04  7C031C20   SEB V1, V1
9D006D08  A0430000   SB V1, 0(V0)
248:                     stuffptr++;
9D006D0C  8F828018   LW V0, -32744(GP)
9D006D10  24420001   ADDIU V0, V0, 1
9D006D14  AF828018   SW V0, -32744(GP)
249:                     if(stuffptr >= (stuff + 16))
9D006D18  8F838018   LW V1, -32744(GP)
9D006D1C  3C028000   LUI V0, -32768
9D006D20  2442411C   ADDIU V0, V0, 16668
9D006D24  0062102B   SLTU V0, V1, V0
9D006D28  14400004   BNE V0, ZERO, 0x9D006D3C
9D006D2C  00000000   NOP
250:                         stuffptr = stuff;
9D006D30  3C028000   LUI V0, -32768
9D006D34  2442410C   ADDIU V0, V0, 16652
9D006D38  AF828018   SW V0, -32744(GP)
251:                     //SPI3BUF = counter++;
252:                     //c = SPI2BUF;
253:                     //counter++;
254:                     //if(counter > 0)
255:                     //    a = 0xFF;
256:                 
257:                     IFS4bits.SPI3RXIF = 0; // clear interrupt flag
9D006D3C  3C03BF81   LUI V1, -16511
9D006D40  8C620080   LW V0, 128(V1)
9D006D44  7C02DEC4   INS V0, ZERO, 27, 1
9D006D48  AC620080   SW V0, 128(V1)
258:                 }
9D006D4C  03C0E821   ADDU SP, S8, ZERO
9D006D50  8FBE0004   LW S8, 4(SP)
9D006D54  41606000   DI ZERO
9D006D58  000000C0   EHB
9D006D5C  8FBB000C   LW K1, 12(SP)
9D006D60  8FBA0014   LW K0, 20(SP)
9D006D64  409B6002   MTC0 K1, SRSCtl
9D006D68  8FBB0010   LW K1, 16(SP)
9D006D6C  409A7000   MTC0 K0, EPC
9D006D70  27BD0018   ADDIU SP, SP, 24
9D006D74  41DDE800   WRPGPR SP, SP
9D006D78  409B6000   MTC0 K1, Status
9D006D7C  42000018   ERET
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/lcd.c  ------------------------------------------------
1:                   #include <p32xxxx.h>
2:                   #include "lcd.h"
3:                   
4:                   #define SHORTWAIT() asm volatile ("nop\n nop\n nop\n nop\n nop\n nop")
5:                   void msleep(int msecs);
6:                   void usleep(int msecs);
7:                   
8:                   #include <stdio.h>
9:                   #include <stdarg.h>
10:                  
11:                  // LCD needs 37us between commands, according to its datasheet.
12:                  
13:                  
14:                  #define LCDCMD_ON      0x0C
15:                  #define LCDCMD_TWOLINE 0x38
16:                  #define LCDCMD_CLR     0x01
17:                  #define LCDCMD_LINE1   0x80
18:                  #define LCDCMD_LINE2   0xC0
19:                  
20:                  #define LCD_LONG_WAIT_USEC 2000
21:                  #define LCD_SHORT_WAIT_USEC 40
22:                  
23:                  
24:                  void startLCD()
25:                  {
9D008EC4  27BDFFE8   ADDIU SP, SP, -24
9D008EC8  AFBF0014   SW RA, 20(SP)
9D008ECC  AFBE0010   SW S8, 16(SP)
9D008ED0  03A0F021   ADDU S8, SP, ZERO
26:                      usleep(LCD_LONG_WAIT_USEC); // make sure LCD has a chance to power up
9D008ED4  0F401A01   JAL 0x9D006804
9D008ED8  240407D0   ADDIU A0, ZERO, 2000
27:                  
28:                      LCD_RW = 0;  // writing
9D008EDC  3C03BF86   LUI V1, -16506
9D008EE0  8C620220   LW V0, 544(V1)
9D008EE4  7C022104   INS V0, ZERO, 4, 1
9D008EE8  AC620220   SW V0, 544(V1)
29:                      SHORTWAIT();
9D008EEC  00000000   NOP
9D008EF0  00000000   NOP
9D008EF4  00000000   NOP
9D008EF8  00000000   NOP
9D008EFC  00000000   NOP
9D008F00  00000000   NOP
30:                      LCD_CLK = 1; // hold clock high
9D008F04  3C03BF86   LUI V1, -16506
9D008F08  8C620220   LW V0, 544(V1)
9D008F0C  24040001   ADDIU A0, ZERO, 1
9D008F10  7C8218C4   INS V0, A0, 3, 1
9D008F14  AC620220   SW V0, 544(V1)
31:                      
32:                      usleep(LCD_LONG_WAIT_USEC);
9D008F18  0F401A01   JAL 0x9D006804
9D008F1C  240407D0   ADDIU A0, ZERO, 2000
33:                      sendLCDcmd(LCDCMD_ON);
9D008F20  0F4023E2   JAL sendLCDcmd
9D008F24  2404000C   ADDIU A0, ZERO, 12
34:                      sendLCDcmd(LCDCMD_TWOLINE);
9D008F28  0F4023E2   JAL sendLCDcmd
9D008F2C  24040038   ADDIU A0, ZERO, 56
35:                      sendLCDcmd(LCDCMD_CLR);
9D008F30  0F4023E2   JAL sendLCDcmd
9D008F34  24040001   ADDIU A0, ZERO, 1
36:                      usleep(LCD_LONG_WAIT_USEC);
9D008F38  0F401A01   JAL 0x9D006804
9D008F3C  240407D0   ADDIU A0, ZERO, 2000
37:                  }
9D008F40  03C0E821   ADDU SP, S8, ZERO
9D008F44  8FBF0014   LW RA, 20(SP)
9D008F48  8FBE0010   LW S8, 16(SP)
9D008F4C  03E00008   JR RA
9D008F50  27BD0018   ADDIU SP, SP, 24
38:                  
39:                  void clearLCD()
40:                  {
9D008F54  27BDFFE8   ADDIU SP, SP, -24
9D008F58  AFBF0014   SW RA, 20(SP)
9D008F5C  AFBE0010   SW S8, 16(SP)
9D008F60  03A0F021   ADDU S8, SP, ZERO
41:                      sendLCDcmd(0x01);
9D008F64  24040001   ADDIU A0, ZERO, 1
9D008F68  0F4023E2   JAL sendLCDcmd
9D008F6C  00000000   NOP
42:                  }
9D008F70  03C0E821   ADDU SP, S8, ZERO
9D008F74  8FBF0014   LW RA, 20(SP)
9D008F78  8FBE0010   LW S8, 16(SP)
9D008F7C  27BD0018   ADDIU SP, SP, 24
9D008F80  03E00008   JR RA
9D008F84  00000000   NOP
43:                  void sendLCDcmd(unsigned char cmd)
44:                  {
9D008F88  27BDFFE8   ADDIU SP, SP, -24
9D008F8C  AFBF0014   SW RA, 20(SP)
9D008F90  AFBE0010   SW S8, 16(SP)
9D008F94  03A0F021   ADDU S8, SP, ZERO
9D008F98  00801021   ADDU V0, A0, ZERO
9D008F9C  A3C20018   SB V0, 24(S8)
45:                      LCD_RS = 0;
9D008FA0  3C03BF86   LUI V1, -16506
9D008FA4  8C620120   LW V0, 288(V1)
9D008FA8  7C027BC4   INS V0, ZERO, 15, 1
9D008FAC  AC620120   SW V0, 288(V1)
46:                      usleep(LCD_SHORT_WAIT_USEC);
9D008FB0  24040028   ADDIU A0, ZERO, 40
9D008FB4  0F401A01   JAL 0x9D006804
9D008FB8  00000000   NOP
47:                      LCD_DATA = cmd;
9D008FBC  93C30018   LBU V1, 24(S8)
9D008FC0  3C02BF86   LUI V0, -16506
9D008FC4  AC430420   SW V1, 1056(V0)
48:                      LCD_CLK = 0;
9D008FC8  3C03BF86   LUI V1, -16506
9D008FCC  8C620220   LW V0, 544(V1)
9D008FD0  7C0218C4   INS V0, ZERO, 3, 1
9D008FD4  AC620220   SW V0, 544(V1)
49:                      usleep(LCD_SHORT_WAIT_USEC);
9D008FD8  24040028   ADDIU A0, ZERO, 40
9D008FDC  0F401A01   JAL 0x9D006804
9D008FE0  00000000   NOP
50:                      LCD_RS = 1;
9D008FE4  3C03BF86   LUI V1, -16506
9D008FE8  8C620120   LW V0, 288(V1)
9D008FEC  24040001   ADDIU A0, ZERO, 1
9D008FF0  7C827BC4   INS V0, A0, 15, 1
9D008FF4  AC620120   SW V0, 288(V1)
51:                      LCD_CLK = 1;
9D008FF8  3C03BF86   LUI V1, -16506
9D008FFC  8C620220   LW V0, 544(V1)
9D009000  24040001   ADDIU A0, ZERO, 1
9D009004  7C8218C4   INS V0, A0, 3, 1
9D009008  AC620220   SW V0, 544(V1)
52:                      usleep(LCD_SHORT_WAIT_USEC);
9D00900C  24040028   ADDIU A0, ZERO, 40
9D009010  0F401A01   JAL 0x9D006804
9D009014  00000000   NOP
53:                  }
9D009018  03C0E821   ADDU SP, S8, ZERO
9D00901C  8FBF0014   LW RA, 20(SP)
9D009020  8FBE0010   LW S8, 16(SP)
9D009024  27BD0018   ADDIU SP, SP, 24
9D009028  03E00008   JR RA
9D00902C  00000000   NOP
54:                  
55:                  void setTextDisplay(int line, const char * format, ...)
56:                  {
9D009030  27BDFFC8   ADDIU SP, SP, -56
9D009034  AFBF0034   SW RA, 52(SP)
9D009038  AFBE0030   SW S8, 48(SP)
9D00903C  03A0F021   ADDU S8, SP, ZERO
9D009040  AFC40038   SW A0, 56(S8)
9D009044  AFC60040   SW A2, 64(S8)
9D009048  AFC70044   SW A3, 68(S8)
9D00904C  AFC5003C   SW A1, 60(S8)
57:                      if(line != 0 && line != 1)
9D009050  8FC20038   LW V0, 56(S8)
9D009054  10400005   BEQ V0, ZERO, 0x9D00906C
9D009058  00000000   NOP
9D00905C  8FC30038   LW V1, 56(S8)
9D009060  24020001   ADDIU V0, ZERO, 1
9D009064  1462004D   BNE V1, V0, 0x9D00919C
9D009068  00000000   NOP
58:                          return;
9D00919C  00000000   NOP
59:                      char text[17] = {0};
9D00906C  AFC00014   SW ZERO, 20(S8)
9D009070  AFC00018   SW ZERO, 24(S8)
9D009074  AFC0001C   SW ZERO, 28(S8)
9D009078  AFC00020   SW ZERO, 32(S8)
9D00907C  A3C00024   SB ZERO, 36(S8)
60:                      va_list args;
61:                      va_start(args, format);
9D009080  27C20040   ADDIU V0, S8, 64
9D009084  AFC20028   SW V0, 40(S8)
62:                      vsnprintf(text, 17, format, args);
9D009088  8FC20028   LW V0, 40(S8)
9D00908C  27C30014   ADDIU V1, S8, 20
9D009090  00602021   ADDU A0, V1, ZERO
9D009094  24050011   ADDIU A1, ZERO, 17
9D009098  8FC6003C   LW A2, 60(S8)
9D00909C  00403821   ADDU A3, V0, ZERO
9D0090A0  0F400064   JAL vsnprintf
9D0090A4  00000000   NOP
63:                      va_end(args);
64:                  
65:                      usleep(LCD_SHORT_WAIT_USEC);
9D0090A8  24040028   ADDIU A0, ZERO, 40
9D0090AC  0F401A01   JAL 0x9D006804
9D0090B0  00000000   NOP
66:                      if(line == 0)
9D0090B4  8FC20038   LW V0, 56(S8)
9D0090B8  14400004   BNE V0, ZERO, 0x9D0090CC
9D0090BC  00000000   NOP
67:                          sendLCDcmd(LCDCMD_LINE1);
9D0090C0  24040080   ADDIU A0, ZERO, 128
9D0090C4  0F4023E2   JAL sendLCDcmd
9D0090C8  00000000   NOP
68:                      if(line == 1)
9D0090CC  8FC30038   LW V1, 56(S8)
9D0090D0  24020001   ADDIU V0, ZERO, 1
9D0090D4  14620004   BNE V1, V0, 0x9D0090E8
9D0090D8  00000000   NOP
69:                          sendLCDcmd(LCDCMD_LINE2);
9D0090DC  240400C0   ADDIU A0, ZERO, 192
9D0090E0  0F4023E2   JAL sendLCDcmd
9D0090E4  00000000   NOP
70:                      usleep(LCD_SHORT_WAIT_USEC);
9D0090E8  24040028   ADDIU A0, ZERO, 40
9D0090EC  0F401A01   JAL 0x9D006804
9D0090F0  00000000   NOP
71:                      for(int i = 0; i < 16; i++)
9D0090F4  AFC00010   SW ZERO, 16(S8)
9D0090F8  0B402461   J 0x9D009184
9D0090FC  00000000   NOP
9D009178  8FC20010   LW V0, 16(S8)
9D00917C  24420001   ADDIU V0, V0, 1
9D009180  AFC20010   SW V0, 16(S8)
9D009184  8FC20010   LW V0, 16(S8)
9D009188  28420010   SLTI V0, V0, 16
9D00918C  1440FFDC   BNE V0, ZERO, 0x9D009100
9D009190  00000000   NOP
9D009194  0B402468   J 0x9D0091A0
9D009198  00000000   NOP
72:                      {
73:                          LCD_DATA = text[i]? text[i] : ' ';
9D009100  8FC20010   LW V0, 16(S8)
9D009104  27C30010   ADDIU V1, S8, 16
9D009108  00621021   ADDU V0, V1, V0
9D00910C  80420004   LB V0, 4(V0)
9D009110  10400007   BEQ V0, ZERO, 0x9D009130
9D009114  00000000   NOP
9D009118  8FC20010   LW V0, 16(S8)
9D00911C  27C30010   ADDIU V1, S8, 16
9D009120  00621021   ADDU V0, V1, V0
9D009124  80420004   LB V0, 4(V0)
9D009128  0B40244D   J 0x9D009134
9D00912C  00000000   NOP
9D009130  24020020   ADDIU V0, ZERO, 32
9D009134  3C03BF86   LUI V1, -16506
9D009138  AC620420   SW V0, 1056(V1)
74:                          LCD_CLK = 0;
9D00913C  3C03BF86   LUI V1, -16506
9D009140  8C620220   LW V0, 544(V1)
9D009144  7C0218C4   INS V0, ZERO, 3, 1
9D009148  AC620220   SW V0, 544(V1)
75:                          usleep(LCD_SHORT_WAIT_USEC);
9D00914C  24040028   ADDIU A0, ZERO, 40
9D009150  0F401A01   JAL 0x9D006804
9D009154  00000000   NOP
76:                          LCD_CLK = 1;
9D009158  3C03BF86   LUI V1, -16506
9D00915C  8C620220   LW V0, 544(V1)
9D009160  24040001   ADDIU A0, ZERO, 1
9D009164  7C8218C4   INS V0, A0, 3, 1
9D009168  AC620220   SW V0, 544(V1)
77:                          usleep(LCD_SHORT_WAIT_USEC);
9D00916C  24040028   ADDIU A0, ZERO, 40
9D009170  0F401A01   JAL 0x9D006804
9D009174  00000000   NOP
78:                      }
79:                  }
9D0091A0  03C0E821   ADDU SP, S8, ZERO
9D0091A4  8FBF0034   LW RA, 52(SP)
9D0091A8  8FBE0030   LW S8, 48(SP)
9D0091AC  27BD0038   ADDIU SP, SP, 56
9D0091B0  03E00008   JR RA
9D0091B4  00000000   NOP
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/init.c  -----------------------------------------------
1:                   #include <p32xxxx.h>
2:                   #include "init.h"
3:                   
4:                   static inline void systemUnlock()
5:                   {
9D006D80  27BDFFF8   ADDIU SP, SP, -8
9D006D84  AFBE0004   SW S8, 4(SP)
9D006D88  03A0F021   ADDU S8, SP, ZERO
6:                       __builtin_disable_interrupts();
9D006D8C  41626000   DI V0
9D006D90  000000C0   EHB
7:                       // The datasheet emphasizes that these writes MUST be consecutive
8:                       // instructions, which is why we disable interrupts
9:                       SYSKEY = 0x0;
9D006D94  3C02BF80   LUI V0, -16512
9D006D98  AC400030   SW ZERO, 48(V0)
10:                      SYSKEY = 0xAA996655;
9D006D9C  3C02BF80   LUI V0, -16512
9D006DA0  3C03AA99   LUI V1, -21863
9D006DA4  34636655   ORI V1, V1, 26197
9D006DA8  AC430030   SW V1, 48(V0)
11:                      SYSKEY = 0x556699AA;
9D006DAC  3C02BF80   LUI V0, -16512
9D006DB0  3C035566   LUI V1, 21862
9D006DB4  346399AA   ORI V1, V1, -26198
9D006DB8  AC430030   SW V1, 48(V0)
12:                  }
9D006DBC  03C0E821   ADDU SP, S8, ZERO
9D006DC0  8FBE0004   LW S8, 4(SP)
9D006DC4  27BD0008   ADDIU SP, SP, 8
9D006DC8  03E00008   JR RA
9D006DCC  00000000   NOP
13:                  
14:                  static inline void systemLock()
15:                  {
9D006DD0  27BDFFF8   ADDIU SP, SP, -8
9D006DD4  AFBE0004   SW S8, 4(SP)
9D006DD8  03A0F021   ADDU S8, SP, ZERO
16:                      SYSKEY = 0x0;
9D006DDC  3C02BF80   LUI V0, -16512
9D006DE0  AC400030   SW ZERO, 48(V0)
17:                     __builtin_enable_interrupts();
9D006DE4  41626020   EI V0
18:                  }
9D006DE8  03C0E821   ADDU SP, S8, ZERO
9D006DEC  8FBE0004   LW S8, 4(SP)
9D006DF0  27BD0008   ADDIU SP, SP, 8
9D006DF4  03E00008   JR RA
9D006DF8  00000000   NOP
19:                  
20:                  // PB clocks are maximum 100 MHz, except PB7 at 200 MHz
21:                  void initClocks()
22:                  {
9D006DFC  27BDFFE8   ADDIU SP, SP, -24
9D006E00  AFBF0014   SW RA, 20(SP)
9D006E04  AFBE0010   SW S8, 16(SP)
9D006E08  03A0F021   ADDU S8, SP, ZERO
23:                      systemUnlock();
9D006E0C  0F401B60   JAL 0x9D006D80
9D006E10  00000000   NOP
24:                  
25:                      OSCCONbits.FRCDIV = 0;
9D006E14  3C03BF80   LUI V1, -16512
9D006E18  8C621200   LW V0, 4608(V1)
9D006E1C  7C02D604   INS V0, ZERO, 24, 3
9D006E20  AC621200   SW V0, 4608(V1)
26:                      PB1DIV = 0x8001; // system usage
9D006E24  3C02BF80   LUI V0, -16512
9D006E28  34038001   ORI V1, ZERO, -32767
9D006E2C  AC431300   SW V1, 4864(V0)
27:                      PB2DIV = 0x8001; // SPI
9D006E30  3C02BF80   LUI V0, -16512
9D006E34  34038001   ORI V1, ZERO, -32767
9D006E38  AC431310   SW V1, 4880(V0)
28:                      PB3DIV = 0x8001; // timers
9D006E3C  3C02BF80   LUI V0, -16512
9D006E40  34038001   ORI V1, ZERO, -32767
9D006E44  AC431320   SW V1, 4896(V0)
29:                      PB4DIV = 0x8001; // I/O port access
9D006E48  3C02BF80   LUI V0, -16512
9D006E4C  34038001   ORI V1, ZERO, -32767
9D006E50  AC431330   SW V1, 4912(V0)
30:                      PB5DIV = 0x8001; // RNG
9D006E54  3C02BF80   LUI V0, -16512
9D006E58  34038001   ORI V1, ZERO, -32767
9D006E5C  AC431340   SW V1, 4928(V0)
31:                      PB7DIV = 0x8000; // CPU clock
9D006E60  3C02BF80   LUI V0, -16512
9D006E64  34038000   ORI V1, ZERO, -32768
9D006E68  AC431360   SW V1, 4960(V0)
32:                      PB8DIV = 0x8001; // not used in this project
9D006E6C  3C02BF80   LUI V0, -16512
9D006E70  34038001   ORI V1, ZERO, -32767
9D006E74  AC431370   SW V1, 4976(V0)
33:                  
34:                      //REFO1CONCLR = 0b1001000000000000;
35:                      //REFO2CONCLR = 0b1001000000000000;
36:                      //REFO3CONCLR = 0b1001000000000000;
37:                      //REFO4CONCLR = 0b1001000000000000;
38:                      REFO1CON = 0;
9D006E78  3C02BF80   LUI V0, -16512
9D006E7C  AC401280   SW ZERO, 4736(V0)
39:                      REFO2CON = 0;
9D006E80  3C02BF80   LUI V0, -16512
9D006E84  AC4012A0   SW ZERO, 4768(V0)
40:                      REFO3CON = 0;
9D006E88  3C02BF80   LUI V0, -16512
9D006E8C  AC4012C0   SW ZERO, 4800(V0)
41:                      REFO4CON = 0;
9D006E90  3C02BF80   LUI V0, -16512
9D006E94  AC4012E0   SW ZERO, 4832(V0)
42:                  
43:                      systemLock();
9D006E98  0F401B74   JAL 0x9D006DD0
9D006E9C  00000000   NOP
44:                  }
9D006EA0  03C0E821   ADDU SP, S8, ZERO
9D006EA4  8FBF0014   LW RA, 20(SP)
9D006EA8  8FBE0010   LW S8, 16(SP)
9D006EAC  27BD0018   ADDIU SP, SP, 24
9D006EB0  03E00008   JR RA
9D006EB4  00000000   NOP
45:                  
46:                  void initInterrupts()
47:                  {
9D006EB8  27BDFFF8   ADDIU SP, SP, -8
9D006EBC  AFBE0004   SW S8, 4(SP)
9D006EC0  03A0F021   ADDU S8, SP, ZERO
48:                      __builtin_disable_interrupts();
9D006EC4  41626000   DI V0
9D006EC8  000000C0   EHB
49:                  
50:                      // Shadow register sets for each interrupt level
51:                      // why this is configurable is beyond me
52:                      PRISS = 0x76543210;
9D006ECC  3C02BF81   LUI V0, -16511
9D006ED0  3C037654   LUI V1, 30292
9D006ED4  34633210   ORI V1, V1, 12816
9D006ED8  AC430010   SW V1, 16(V0)
53:                  
54:                      // Timer 2 interrupts
55:                      // Interrupt every 2 ms, priority 2.0
56:                      IFS0bits.T2IF = 0;
9D006EDC  3C03BF81   LUI V1, -16511
9D006EE0  8C620040   LW V0, 64(V1)
9D006EE4  7C024A44   INS V0, ZERO, 9, 1
9D006EE8  AC620040   SW V0, 64(V1)
57:                      IEC0bits.T2IE = 1;
9D006EEC  3C03BF81   LUI V1, -16511
9D006EF0  8C6200C0   LW V0, 192(V1)
9D006EF4  24040001   ADDIU A0, ZERO, 1
9D006EF8  7C824A44   INS V0, A0, 9, 1
9D006EFC  AC6200C0   SW V0, 192(V1)
58:                      IPC2bits.T2IP = 2;
9D006F00  3C03BF81   LUI V1, -16511
9D006F04  8C620160   LW V0, 352(V1)
9D006F08  24040002   ADDIU A0, ZERO, 2
9D006F0C  7C826284   INS V0, A0, 10, 3
9D006F10  AC620160   SW V0, 352(V1)
59:                      IPC2bits.T2IS = 0;
9D006F14  3C03BF81   LUI V1, -16511
9D006F18  8C620160   LW V0, 352(V1)
9D006F1C  7C024A04   INS V0, ZERO, 8, 2
9D006F20  AC620160   SW V0, 352(V1)
60:                  
61:                      // Timer 3 interrupts
62:                      // Interrupt every 1 ms, priority 3.0
63:                      IFS0bits.T3IF = 0;
9D006F24  3C03BF81   LUI V1, -16511
9D006F28  8C620040   LW V0, 64(V1)
9D006F2C  7C027384   INS V0, ZERO, 14, 1
9D006F30  AC620040   SW V0, 64(V1)
64:                      IEC0bits.T3IE = 1;
9D006F34  3C03BF81   LUI V1, -16511
9D006F38  8C6200C0   LW V0, 192(V1)
9D006F3C  24040001   ADDIU A0, ZERO, 1
9D006F40  7C827384   INS V0, A0, 14, 1
9D006F44  AC6200C0   SW V0, 192(V1)
65:                      IPC3bits.T3IP = 3;
9D006F48  3C03BF81   LUI V1, -16511
9D006F4C  8C620170   LW V0, 368(V1)
9D006F50  24040003   ADDIU A0, ZERO, 3
9D006F54  7C82A484   INS V0, A0, 18, 3
9D006F58  AC620170   SW V0, 368(V1)
66:                      IPC3bits.T3IS = 0;
9D006F5C  3C03BF81   LUI V1, -16511
9D006F60  8C620170   LW V0, 368(V1)
9D006F64  7C028C04   INS V0, ZERO, 16, 2
9D006F68  AC620170   SW V0, 368(V1)
67:                  
68:                      // SPI 2 rx interrupt
69:                      // priority 4.0
70:                      //IFS4bits.SPI2RXIF = 0;
71:                      //IEC4bits.SPI2RXIE = 0; // 1;
72:                      //IPC35bits.SPI2RXIP = 4;
73:                      //IPC35bits.SPI2RXIS = 0;
74:                  
75:                      // SPI 3 rx interrupt
76:                      // priority 4.0
77:                      IFS4bits.SPI3RXIF = 0;
9D006F6C  3C03BF81   LUI V1, -16511
9D006F70  8C620080   LW V0, 128(V1)
9D006F74  7C02DEC4   INS V0, ZERO, 27, 1
9D006F78  AC620080   SW V0, 128(V1)
78:                      IEC4bits.SPI3RXIE = 1; // 1;
9D006F7C  3C03BF81   LUI V1, -16511
9D006F80  8C620100   LW V0, 256(V1)
9D006F84  24040001   ADDIU A0, ZERO, 1
9D006F88  7C82DEC4   INS V0, A0, 27, 1
9D006F8C  AC620100   SW V0, 256(V1)
79:                      IPC38bits.SPI3RXIP = 4;
9D006F90  3C03BF81   LUI V1, -16511
9D006F94  8C6203A0   LW V0, 928(V1)
9D006F98  24040004   ADDIU A0, ZERO, 4
9D006F9C  7C82E684   INS V0, A0, 26, 3
9D006FA0  AC6203A0   SW V0, 928(V1)
80:                      IPC38bits.SPI3RXIS = 0;
9D006FA4  3C03BF81   LUI V1, -16511
9D006FA8  8C6203A0   LW V0, 928(V1)
9D006FAC  7C02CE04   INS V0, ZERO, 24, 2
9D006FB0  AC6203A0   SW V0, 928(V1)
81:                  
82:                      // Port A, D, F change interrupts enabled with priority 7.0
83:                      //IFS3bits.CNAIF = 0;
84:                      //IEC3bits.CNAIE = 1;
85:                      //IPC29bits.CNAIP = 7;
86:                      //IPC29bits.CNAIS = 0;
87:                  
88:                      //IFS3bits.CNDIF = 0;
89:                      //IEC3bits.CNDIE = 1;
90:                      //IPC30bits.CNDIP = 7;
91:                      //IPC30bits.CNDIS = 0;
92:                  
93:                      //IFS3bits.CNFIF = 0;
94:                      //IEC3bits.CNFIE = 1;
95:                      //IPC30bits.CNFIP = 7;
96:                      //IPC30bits.CNFIS = 0;
97:                  
98:                  
99:                      // enable change interrupt on A7, D13, F8
100:                     //CNCONAbits.ON = 1;
101:                     //CNENAbits.CNIEA7 = 1;
102:                     //CNPUAbits.CNPUA7 = 1;
103:                     //CNCONDbits.ON = 1;
104:                     //CNENDbits.CNIED13 = 1;
105:                     //CNPUDbits.CNPUD13 = 1;
106:                     //CNCONFbits.ON = 1;
107:                     //CNENFbits.CNIEF8 = 1;
108:                     //CNPUFbits.CNPUF8 = 1;
109:                 
110:                     INTCONbits.MVEC = 1;
9D006FB4  3C03BF81   LUI V1, -16511
9D006FB8  8C620000   LW V0, 0(V1)
9D006FBC  24040001   ADDIU A0, ZERO, 1
9D006FC0  7C826304   INS V0, A0, 12, 1
9D006FC4  AC620000   SW V0, 0(V1)
111:                 
112:                     __builtin_enable_interrupts();
9D006FC8  41626020   EI V0
113:                 }
9D006FCC  03C0E821   ADDU SP, S8, ZERO
9D006FD0  8FBE0004   LW S8, 4(SP)
9D006FD4  27BD0008   ADDIU SP, SP, 8
9D006FD8  03E00008   JR RA
9D006FDC  00000000   NOP
114:                 
115:                 void initPorts()
116:                 {
9D006FE0  27BDFFF8   ADDIU SP, SP, -8
9D006FE4  AFBE0004   SW S8, 4(SP)
9D006FE8  03A0F021   ADDU S8, SP, ZERO
117:                     // On the Explorer 16 board, the LEDs are (from left to right):
118:                     // A7  A6  F12 F13 A3  A2  A1  A0
119:                     // Buttons are:
120:                     // N/C D13 A7  F8                   (yes A7 again)
121:                     // LCD uses:
122:                     // B15 C3  C4  E0..E7
123:                     //
124:                     // F1 and D1 are used for SPI1
125:                     // G is used for ??? but it got set that way in harmony
126:                     //
127:                     //        111111
128:                     //        5432109876543210
129:                     TRISA = 0b1111111111111111;
9D006FEC  3C02BF86   LUI V0, -16506
9D006FF0  3403FFFF   ORI V1, ZERO, -1
9D006FF4  AC430010   SW V1, 16(V0)
130:                     TRISB = 0b0111111111111111;
9D006FF8  3C02BF86   LUI V0, -16506
9D006FFC  24037FFF   ADDIU V1, ZERO, 32767
9D007000  AC430110   SW V1, 272(V0)
131:                     TRISC = 0b1111111111100111;
9D007004  3C02BF86   LUI V0, -16506
9D007008  3403FFE7   ORI V1, ZERO, -25
9D00700C  AC430210   SW V1, 528(V0)
132:                     TRISD = 0b1111111111111101;
9D007010  3C02BF86   LUI V0, -16506
9D007014  3403FFFD   ORI V1, ZERO, -3
9D007018  AC430310   SW V1, 784(V0)
133:                     TRISE = 0b1111111100000000;
9D00701C  3C02BF86   LUI V0, -16506
9D007020  3403FF00   ORI V1, ZERO, -256
9D007024  AC430410   SW V1, 1040(V0)
134:                     TRISF = 0b1111111111111001;
9D007028  3C02BF86   LUI V0, -16506
9D00702C  3403FFF9   ORI V1, ZERO, -7
9D007030  AC430510   SW V1, 1296(V0)
135:                     TRISG = 0b1111001111000011;
9D007034  3C02BF86   LUI V0, -16506
9D007038  3403F3C3   ORI V1, ZERO, -3133
9D00703C  AC430610   SW V1, 1552(V0)
136:                 
137:                     ANSELA = 0x0000;
9D007040  3C02BF86   LUI V0, -16506
9D007044  AC400000   SW ZERO, 0(V0)
138:                     ANSELB = 0x0000;
9D007048  3C02BF86   LUI V0, -16506
9D00704C  AC400100   SW ZERO, 256(V0)
139:                     ANSELC = 0x0000;
9D007050  3C02BF86   LUI V0, -16506
9D007054  AC400200   SW ZERO, 512(V0)
140:                     ANSELD = 0x0000;
9D007058  3C02BF86   LUI V0, -16506
9D00705C  AC400300   SW ZERO, 768(V0)
141:                     ANSELE = 0x0000;
9D007060  3C02BF86   LUI V0, -16506
9D007064  AC400400   SW ZERO, 1024(V0)
142:                     ANSELF = 0x0000;
9D007068  3C02BF86   LUI V0, -16506
9D00706C  AC400500   SW ZERO, 1280(V0)
143:                     ANSELG = 0x0000;
9D007070  3C02BF86   LUI V0, -16506
9D007074  AC400600   SW ZERO, 1536(V0)
144:                 
145:                     // Clear LEDs at start of program
146:                     //PORTACLR = 0b11001111;
147:                     //PORTFCLR = 0b0011000000000000;
148:                 
149:                 }
9D007078  03C0E821   ADDU SP, S8, ZERO
9D00707C  8FBE0004   LW S8, 4(SP)
9D007080  27BD0008   ADDIU SP, SP, 8
9D007084  03E00008   JR RA
9D007088  00000000   NOP
150:                 
151:                 void initTimers()
152:                 {
9D00708C  27BDFFF8   ADDIU SP, SP, -8
9D007090  AFBE0004   SW S8, 4(SP)
9D007094  03A0F021   ADDU S8, SP, ZERO
153:                     // ----- TIMER 1 -----
154:                     // Used to provide short, precise waits for the usleep and msleep functions
155:                     // which are used mostly in the LCD driver.
156:                     // Will be started when a wait is called for.
157:                     T1CON = 0;
9D007098  3C02BF84   LUI V0, -16508
9D00709C  AC400000   SW ZERO, 0(V0)
158:                     T1CONbits.TCKPS = 0b10; // 1:64 prescale = 0.64us increments
9D0070A0  3C03BF84   LUI V1, -16508
9D0070A4  8C620000   LW V0, 0(V1)
9D0070A8  24040002   ADDIU A0, ZERO, 2
9D0070AC  7C822904   INS V0, A0, 4, 2
9D0070B0  AC620000   SW V0, 0(V1)
159:                                             // 0.64us * 0xFFFF = 41.9ms maximum
160:                     PR1 = 0xFFFF; // maximum period
9D0070B4  3C02BF84   LUI V0, -16508
9D0070B8  3403FFFF   ORI V1, ZERO, -1
9D0070BC  AC430020   SW V1, 32(V0)
161:                     TMR1 = 0;
9D0070C0  3C02BF84   LUI V0, -16508
9D0070C4  AC400010   SW ZERO, 16(V0)
162:                 
163:                     // ----- TIMER 2 -----
164:                     // Generates interrupts to poll button state.
165:                     T2CON = 0;
9D0070C8  3C02BF84   LUI V0, -16508
9D0070CC  AC400200   SW ZERO, 512(V0)
166:                     T2CONbits.TCKPS = 0b010; // 1:4 prescale = 0.04us increments
9D0070D0  3C03BF84   LUI V1, -16508
9D0070D4  8C620200   LW V0, 512(V1)
9D0070D8  24040002   ADDIU A0, ZERO, 2
9D0070DC  7C823104   INS V0, A0, 4, 3
9D0070E0  AC620200   SW V0, 512(V1)
167:                     PR2 = 50000; // 0.04us * 50 000 = 2 ms
9D0070E4  3C02BF84   LUI V0, -16508
9D0070E8  3403C350   ORI V1, ZERO, -15536
9D0070EC  AC430220   SW V1, 544(V0)
168:                     TMR2 = 0;
9D0070F0  3C02BF84   LUI V0, -16508
9D0070F4  AC400210   SW ZERO, 528(V0)
169:                     T2CONbits.ON = 1;
9D0070F8  3C03BF84   LUI V1, -16508
9D0070FC  8C620200   LW V0, 512(V1)
9D007100  24040001   ADDIU A0, ZERO, 1
9D007104  7C827BC4   INS V0, A0, 15, 1
9D007108  AC620200   SW V0, 512(V1)
170:                 
171:                     // ----- TIMER 3 -----
172:                     // Generates interrupts to start LED SPI shifting.
173:                     T3CON = 0;
9D00710C  3C02BF84   LUI V0, -16508
9D007110  AC400400   SW ZERO, 1024(V0)
174:                     T3CONbits.TCKPS = 0b010; // 1:4 prescale = 0.04us increments
9D007114  3C03BF84   LUI V1, -16508
9D007118  8C620400   LW V0, 1024(V1)
9D00711C  24040002   ADDIU A0, ZERO, 2
9D007120  7C823104   INS V0, A0, 4, 3
9D007124  AC620400   SW V0, 1024(V1)
175:                     PR3 = 25000; // 0.04us * 25 000 = 1 ms
9D007128  3C02BF84   LUI V0, -16508
9D00712C  240361A8   ADDIU V1, ZERO, 25000
9D007130  AC430420   SW V1, 1056(V0)
176:                     TMR3 = 0;
9D007134  3C02BF84   LUI V0, -16508
9D007138  AC400410   SW ZERO, 1040(V0)
177:                     T3CONbits.ON = 1;
9D00713C  3C03BF84   LUI V1, -16508
9D007140  8C620400   LW V0, 1024(V1)
9D007144  24040001   ADDIU A0, ZERO, 1
9D007148  7C827BC4   INS V0, A0, 15, 1
9D00714C  AC620400   SW V0, 1024(V1)
178:                 
179:                     // ----- TIMER 4 -----
180:                     // Not used
181:                     T4CON = 0;
9D007150  3C02BF84   LUI V0, -16508
9D007154  AC400600   SW ZERO, 1536(V0)
182:                 
183:                     // ----- TIMER 5 -----
184:                     // Not used
185:                     T5CON = 0;
9D007158  3C02BF84   LUI V0, -16508
9D00715C  AC400800   SW ZERO, 2048(V0)
186:                 
187:                     // ----- TIMER 6/7 -----
188:                     // Used to provide a random value to seed the RNG.
189:                     T6CON = 0;
9D007160  3C02BF84   LUI V0, -16508
9D007164  AC400A00   SW ZERO, 2560(V0)
190:                     T7CON = 0;
9D007168  3C02BF84   LUI V0, -16508
9D00716C  AC400C00   SW ZERO, 3072(V0)
191:                     T6CONbits.T32 = 1;       // 32-bit timer
9D007170  3C03BF84   LUI V1, -16508
9D007174  8C620A00   LW V0, 2560(V1)
9D007178  24040001   ADDIU A0, ZERO, 1
9D00717C  7C8218C4   INS V0, A0, 3, 1
9D007180  AC620A00   SW V0, 2560(V1)
192:                     T6CONbits.TCKPS = 0b000; // no prescale
9D007184  3C03BF84   LUI V1, -16508
9D007188  8C620A00   LW V0, 2560(V1)
9D00718C  7C023104   INS V0, ZERO, 4, 3
9D007190  AC620A00   SW V0, 2560(V1)
193:                     PR6 = 0xFFFFFFFF;        // maximum period
9D007194  3C02BF84   LUI V0, -16508
9D007198  2403FFFF   ADDIU V1, ZERO, -1
9D00719C  AC430A20   SW V1, 2592(V0)
194:                     TMR6 = 0;
9D0071A0  3C02BF84   LUI V0, -16508
9D0071A4  AC400A10   SW ZERO, 2576(V0)
195:                     T6CONbits.ON = 1;
9D0071A8  3C03BF84   LUI V1, -16508
9D0071AC  8C620A00   LW V0, 2560(V1)
9D0071B0  24040001   ADDIU A0, ZERO, 1
9D0071B4  7C827BC4   INS V0, A0, 15, 1
9D0071B8  AC620A00   SW V0, 2560(V1)
196:                 
197:                     // ----- TIMER 8/9 -----
198:                     // Used to flash LEDs of selected territories.
199:                     T8CON = 0;
9D0071BC  3C02BF84   LUI V0, -16508
9D0071C0  AC400E00   SW ZERO, 3584(V0)
200:                     T9CON = 0;
9D0071C4  3C02BF84   LUI V0, -16508
9D0071C8  AC401000   SW ZERO, 4096(V0)
201:                     T8CONbits.T32 = 1;       // 32-bit timer
9D0071CC  3C03BF84   LUI V1, -16508
9D0071D0  8C620E00   LW V0, 3584(V1)
9D0071D4  24040001   ADDIU A0, ZERO, 1
9D0071D8  7C8218C4   INS V0, A0, 3, 1
9D0071DC  AC620E00   SW V0, 3584(V1)
202:                     T8CONbits.TCKPS = 0b110; // 1:64 prescale
9D0071E0  3C03BF84   LUI V1, -16508
9D0071E4  8C620E00   LW V0, 3584(V1)
9D0071E8  24040006   ADDIU A0, ZERO, 6
9D0071EC  7C823104   INS V0, A0, 4, 3
9D0071F0  AC620E00   SW V0, 3584(V1)
203:                     PR8 = 390625;            // 0.64us * 390625 = 250 ms
9D0071F4  3C02BF84   LUI V0, -16508
9D0071F8  3C030005   LUI V1, 5
9D0071FC  3463F5E1   ORI V1, V1, -2591
9D007200  AC430E20   SW V1, 3616(V0)
204:                     TMR8 = 0;
9D007204  3C02BF84   LUI V0, -16508
9D007208  AC400E10   SW ZERO, 3600(V0)
205:                     T8CONbits.ON = 1;
9D00720C  3C03BF84   LUI V1, -16508
9D007210  8C620E00   LW V0, 3584(V1)
9D007214  24040001   ADDIU A0, ZERO, 1
9D007218  7C827BC4   INS V0, A0, 15, 1
9D00721C  AC620E00   SW V0, 3584(V1)
206:                 }
9D007220  03C0E821   ADDU SP, S8, ZERO
9D007224  8FBE0004   LW S8, 4(SP)
9D007228  27BD0008   ADDIU SP, SP, 8
9D00722C  03E00008   JR RA
9D007230  00000000   NOP
207:                 
208:                 void initSPI()
209:                 {
9D007234  27BDFFF8   ADDIU SP, SP, -8
9D007238  AFBE0004   SW S8, 4(SP)
9D00723C  03A0F021   ADDU S8, SP, ZERO
210:                     // Let's configure an SPI!
211:                     SPI1CON = 0;
9D007240  3C02BF82   LUI V0, -16510
9D007244  AC401000   SW ZERO, 4096(V0)
212:                     SPI1CON2 = 0;
9D007248  3C02BF82   LUI V0, -16510
9D00724C  AC401040   SW ZERO, 4160(V0)
213:                     SPI1BRG = 3;                // baud rate = 12.5 MHz
9D007250  3C02BF82   LUI V0, -16510
9D007254  24030003   ADDIU V1, ZERO, 3
9D007258  AC431030   SW V1, 4144(V0)
214:                     SPI1STATbits.SPIROV = 0;    // clear status
9D00725C  3C03BF82   LUI V1, -16510
9D007260  8C621010   LW V0, 4112(V1)
9D007264  7C023184   INS V0, ZERO, 6, 1
9D007268  AC621010   SW V0, 4112(V1)
215:                     RPF1R = 0b0101;             // SPI data out on F1
9D00726C  3C02BF80   LUI V0, -16512
9D007270  24030005   ADDIU V1, ZERO, 5
9D007274  AC431644   SW V1, 5700(V0)
216:                     SPI1CONbits.MODE32 = 0;     // 8-bit mode
9D007278  3C03BF82   LUI V1, -16510
9D00727C  8C621000   LW V0, 4096(V1)
9D007280  7C025AC4   INS V0, ZERO, 11, 1
9D007284  AC621000   SW V0, 4096(V1)
217:                     SPI1CONbits.MODE16 = 0;
9D007288  3C03BF82   LUI V1, -16510
9D00728C  8C621000   LW V0, 4096(V1)
9D007290  7C025284   INS V0, ZERO, 10, 1
9D007294  AC621000   SW V0, 4096(V1)
218:                     SPI1CONbits.MSTEN = 1;      // master mode
9D007298  3C03BF82   LUI V1, -16510
9D00729C  8C621000   LW V0, 4096(V1)
9D0072A0  24040001   ADDIU A0, ZERO, 1
9D0072A4  7C822944   INS V0, A0, 5, 1
9D0072A8  AC621000   SW V0, 4096(V1)
219:                     SPI1CONbits.ON = 1;         // SPI on
9D0072AC  3C03BF82   LUI V1, -16510
9D0072B0  8C621000   LW V0, 4096(V1)
9D0072B4  24040001   ADDIU A0, ZERO, 1
9D0072B8  7C827BC4   INS V0, A0, 15, 1
9D0072BC  AC621000   SW V0, 4096(V1)
220:                 
221:                     // Let's configure another SPI!
222:                     SPI2CON = 0;
9D0072C0  3C02BF82   LUI V0, -16510
9D0072C4  AC401200   SW ZERO, 4608(V0)
223:                     SPI2CON2 = 0;
9D0072C8  3C02BF82   LUI V0, -16510
9D0072CC  AC401240   SW ZERO, 4672(V0)
224:                     SPI2BUF = 0;
9D0072D0  3C02BF82   LUI V0, -16510
9D0072D4  AC401220   SW ZERO, 4640(V0)
225:                     SPI2STATbits.SPIROV = 0;    // clear status
9D0072D8  3C03BF82   LUI V1, -16510
9D0072DC  8C621210   LW V0, 4624(V1)
9D0072E0  7C023184   INS V0, ZERO, 6, 1
9D0072E4  AC621210   SW V0, 4624(V1)
226:                     RPG8R = 0b0110;             // SDO on pin G8
9D0072E8  3C02BF80   LUI V0, -16512
9D0072EC  24030006   ADDIU V1, ZERO, 6
9D0072F0  AC4316A0   SW V1, 5792(V0)
227:                     SDI2R = 0b0001;             // SDI on pin G7
9D0072F4  3C02BF80   LUI V0, -16512
9D0072F8  24030001   ADDIU V1, ZERO, 1
9D0072FC  AC4314A8   SW V1, 5288(V0)
228:                     SS2R = 0b0001;
9D007300  3C02BF80   LUI V0, -16512
9D007304  24030001   ADDIU V1, ZERO, 1
9D007308  AC4314AC   SW V1, 5292(V0)
229:                     SPI2CONbits.MODE32 = 0;     // 8-bit mode
9D00730C  3C03BF82   LUI V1, -16510
9D007310  8C621200   LW V0, 4608(V1)
9D007314  7C025AC4   INS V0, ZERO, 11, 1
9D007318  AC621200   SW V0, 4608(V1)
230:                     SPI2CONbits.MODE16 = 0;
9D00731C  3C03BF82   LUI V1, -16510
9D007320  8C621200   LW V0, 4608(V1)
9D007324  7C025284   INS V0, ZERO, 10, 1
9D007328  AC621200   SW V0, 4608(V1)
231:                     SPI2CONbits.MSTEN = 0;      // slave mode
9D00732C  3C03BF82   LUI V1, -16510
9D007330  8C621200   LW V0, 4608(V1)
9D007334  7C022944   INS V0, ZERO, 5, 1
9D007338  AC621200   SW V0, 4608(V1)
232:                     SPI2CONbits.SSEN = 1;
9D00733C  3C03BF82   LUI V1, -16510
9D007340  8C621200   LW V0, 4608(V1)
9D007344  24040001   ADDIU A0, ZERO, 1
9D007348  7C8239C4   INS V0, A0, 7, 1
9D00734C  AC621200   SW V0, 4608(V1)
233:                     SPI2CONbits.ENHBUF = 1;
9D007350  3C03BF82   LUI V1, -16510
9D007354  8C621200   LW V0, 4608(V1)
9D007358  24040001   ADDIU A0, ZERO, 1
9D00735C  7C828404   INS V0, A0, 16, 1
9D007360  AC621200   SW V0, 4608(V1)
234:                     SPI2CONbits.SRXISEL = 0b01; // interrupt when rbuf not empty
9D007364  3C03BF82   LUI V1, -16510
9D007368  8C621200   LW V0, 4608(V1)
9D00736C  24040001   ADDIU A0, ZERO, 1
9D007370  7C820804   INS V0, A0, 0, 2
9D007374  AC621200   SW V0, 4608(V1)
235:                     SPI2CONbits.ON = 1;         // SPI on
9D007378  3C03BF82   LUI V1, -16510
9D00737C  8C621200   LW V0, 4608(V1)
9D007380  24040001   ADDIU A0, ZERO, 1
9D007384  7C827BC4   INS V0, A0, 15, 1
9D007388  AC621200   SW V0, 4608(V1)
236:                 
237:                     // Let's configure another SPI!
238:                     SPI3CON = 0;
9D00738C  3C02BF82   LUI V0, -16510
9D007390  AC401400   SW ZERO, 5120(V0)
239:                     SPI3CON2 = 0;
9D007394  3C02BF82   LUI V0, -16510
9D007398  AC401440   SW ZERO, 5184(V0)
240:                     (void) SPI3BUF;             // clear receive buffer
9D00739C  3C02BF82   LUI V0, -16510
9D0073A0  8C421420   LW V0, 5152(V0)
241:                     SPI3STATbits.SPIROV = 0;    // clear status
9D0073A4  3C03BF82   LUI V1, -16510
9D0073A8  8C621410   LW V0, 5136(V1)
9D0073AC  7C023184   INS V0, ZERO, 6, 1
9D0073B0  AC621410   SW V0, 5136(V1)
242:                     SDI3R = 0b0110;             // SDI on pin B10
9D0073B4  3C02BF80   LUI V0, -16512
9D0073B8  24030006   ADDIU V1, ZERO, 6
9D0073BC  AC4314B4   SW V1, 5300(V0)
243:                     RPB5R = 0b0111;             // SDO on pin B5
9D0073C0  3C02BF80   LUI V0, -16512
9D0073C4  24030007   ADDIU V1, ZERO, 7
9D0073C8  AC431554   SW V1, 5460(V0)
244:                     SPI3CONbits.MODE32 = 0;     // 8-bit mode
9D0073CC  3C03BF82   LUI V1, -16510
9D0073D0  8C621400   LW V0, 5120(V1)
9D0073D4  7C025AC4   INS V0, ZERO, 11, 1
9D0073D8  AC621400   SW V0, 5120(V1)
245:                     SPI3CONbits.MODE16 = 0;
9D0073DC  3C03BF82   LUI V1, -16510
9D0073E0  8C621400   LW V0, 5120(V1)
9D0073E4  7C025284   INS V0, ZERO, 10, 1
9D0073E8  AC621400   SW V0, 5120(V1)
246:                     SPI3CONbits.MSTEN = 0;      // slave mode
9D0073EC  3C03BF82   LUI V1, -16510
9D0073F0  8C621400   LW V0, 5120(V1)
9D0073F4  7C022944   INS V0, ZERO, 5, 1
9D0073F8  AC621400   SW V0, 5120(V1)
247:                     SPI3CONbits.CKE = 1;        // output transition on falling clock edge
9D0073FC  3C03BF82   LUI V1, -16510
9D007400  8C621400   LW V0, 5120(V1)
9D007404  24040001   ADDIU A0, ZERO, 1
9D007408  7C824204   INS V0, A0, 8, 1
9D00740C  AC621400   SW V0, 5120(V1)
248:                     SPI3CONbits.ENHBUF = 1;     // use 128-bit buffer
9D007410  3C03BF82   LUI V1, -16510
9D007414  8C621400   LW V0, 5120(V1)
9D007418  24040001   ADDIU A0, ZERO, 1
9D00741C  7C828404   INS V0, A0, 16, 1
9D007420  AC621400   SW V0, 5120(V1)
249:                     SPI3CONbits.SRXISEL = 0b01; // interrupt when rbuf not empty
9D007424  3C03BF82   LUI V1, -16510
9D007428  8C621400   LW V0, 5120(V1)
9D00742C  24040001   ADDIU A0, ZERO, 1
9D007430  7C820804   INS V0, A0, 0, 2
9D007434  AC621400   SW V0, 5120(V1)
250:                     SPI3CONbits.ON = 1;         // SPI on
9D007438  3C03BF82   LUI V1, -16510
9D00743C  8C621400   LW V0, 5120(V1)
9D007440  24040001   ADDIU A0, ZERO, 1
9D007444  7C827BC4   INS V0, A0, 15, 1
9D007448  AC621400   SW V0, 5120(V1)
251:                     SPI3BUF = 0xFF;
9D00744C  3C02BF82   LUI V0, -16510
9D007450  240300FF   ADDIU V1, ZERO, 255
9D007454  AC431420   SW V1, 5152(V0)
252:                 
253:                 }
9D007458  03C0E821   ADDU SP, S8, ZERO
9D00745C  8FBE0004   LW S8, 4(SP)
9D007460  27BD0008   ADDIU SP, SP, 8
9D007464  03E00008   JR RA
9D007468  00000000   NOP
254:                 
255:                 void initRNG()
256:                 {
9D00746C  27BDFFF8   ADDIU SP, SP, -8
9D007470  AFBE0004   SW S8, 4(SP)
9D007474  03A0F021   ADDU S8, SP, ZERO
257:                     RNGPOLY1 = 0x00C00003;
9D007478  3C02BF8E   LUI V0, -16498
9D00747C  3C0300C0   LUI V1, 192
9D007480  34630003   ORI V1, V1, 3
9D007484  AC436008   SW V1, 24584(V0)
258:                     RNGPOLY2 = 0x00000000;
9D007488  3C02BF8E   LUI V0, -16498
9D00748C  AC40600C   SW ZERO, 24588(V0)
259:                     RNGCONbits.PLEN = 42;
9D007490  3C02BF8E   LUI V0, -16498
9D007494  2403002A   ADDIU V1, ZERO, 42
9D007498  A0436004   SB V1, 24580(V0)
260:                 
261:                     // RNG cannot be used until seedRNG() is called to start it running.
262:                 }
9D00749C  03C0E821   ADDU SP, S8, ZERO
9D0074A0  8FBE0004   LW S8, 4(SP)
9D0074A4  27BD0008   ADDIU SP, SP, 8
9D0074A8  03E00008   JR RA
9D0074AC  00000000   NOP
263:                 
264:                 void seedRNG()
265:                 {
9D0074B0  27BDFFF8   ADDIU SP, SP, -8
9D0074B4  AFBE0004   SW S8, 4(SP)
9D0074B8  03A0F021   ADDU S8, SP, ZERO
266:                     RNGNUMGEN1 = RNGNUMGEN2 = TMR6;
9D0074BC  3C02BF84   LUI V0, -16508
9D0074C0  8C430A10   LW V1, 2576(V0)
9D0074C4  3C02BF8E   LUI V0, -16498
9D0074C8  AC436014   SW V1, 24596(V0)
9D0074CC  3C02BF8E   LUI V0, -16498
9D0074D0  8C436014   LW V1, 24596(V0)
9D0074D4  3C02BF8E   LUI V0, -16498
9D0074D8  AC436010   SW V1, 24592(V0)
267:                     RNGCONbits.PRNGEN = 1;
9D0074DC  3C03BF8E   LUI V1, -16498
9D0074E0  8C626004   LW V0, 24580(V1)
9D0074E4  24040001   ADDIU A0, ZERO, 1
9D0074E8  7C824A44   INS V0, A0, 9, 1
9D0074EC  AC626004   SW V0, 24580(V1)
268:                 
269:                     // Turn off the timer, we don't need it anymore
270:                     T6CONbits.ON = 0;
9D0074F0  3C03BF84   LUI V1, -16508
9D0074F4  8C620A00   LW V0, 2560(V1)
9D0074F8  7C027BC4   INS V0, ZERO, 15, 1
9D0074FC  AC620A00   SW V0, 2560(V1)
271:                 }
9D007500  03C0E821   ADDU SP, S8, ZERO
9D007504  8FBE0004   LW S8, 4(SP)
9D007508  27BD0008   ADDIU SP, SP, 8
9D00750C  03E00008   JR RA
9D007510  00000000   NOP
---  /home/jacob/Documents/477/RISK/RISK-ECH100.X/buttons.c  --------------------------------------------
1:                   #include "buttons.h"
2:                   #include <p32xxxx.h>
3:                   #include <sys/attribs.h> // __ISR macro here
4:                   #include <stdint.h>
5:                   
6:                   #define READY 0
7:                   #define SET 1
8:                   #define CLEARED -1
9:                   
10:                  static int buttonAdvanceFlag = READY;
11:                  static int buttonCancelFlag = READY;
12:                  static int buttonNextFlag = READY;
13:                  
14:                  static unsigned buttonAdvanceState = 0;
15:                  static unsigned buttonCancelState = 0;
16:                  static unsigned buttonNextState = 0;
17:                  
18:                  // Timer 2 interrupt: poll the buttons
19:                  void __ISR(_TIMER_2_VECTOR, IPL2SRS) pollButtons()
20:                  {
9D0091B8  415DE800   RDPGPR SP, SP
9D0091BC  401A7000   MFC0 K0, EPC
9D0091C0  401B6000   MFC0 K1, Status
9D0091C4  27BDFFE8   ADDIU SP, SP, -24
9D0091C8  AFBA0014   SW K0, 20(SP)
9D0091CC  401A6002   MFC0 K0, SRSCtl
9D0091D0  AFBB0010   SW K1, 16(SP)
9D0091D4  AFBA000C   SW K0, 12(SP)
9D0091D8  7C1B7844   INS K1, ZERO, 1, 15
9D0091DC  377B0800   ORI K1, K1, 2048
9D0091E0  409B6000   MTC0 K1, Status
9D0091E4  AFBE0004   SW S8, 4(SP)
9D0091E8  03A0F021   ADDU S8, SP, ZERO
21:                      buttonAdvanceState = (buttonAdvanceState << 1) | BUTTON_ADVANCE_PIN;
9D0091EC  8F8280A0   LW V0, -32608(GP)
9D0091F0  00021840   SLL V1, V0, 1
9D0091F4  3C02BF86   LUI V0, -16506
9D0091F8  8C420520   LW V0, 1312(V0)
9D0091FC  7C420200   EXT V0, V0, 8, 1
9D009200  304200FF   ANDI V0, V0, 255
9D009204  00621025   OR V0, V1, V0
9D009208  AF8280A0   SW V0, -32608(GP)
22:                      buttonCancelState = (buttonCancelState << 1) | BUTTON_CANCEL_PIN;
9D00920C  8F8280A4   LW V0, -32604(GP)
9D009210  00021840   SLL V1, V0, 1
9D009214  3C02BF86   LUI V0, -16506
9D009218  8C420320   LW V0, 800(V0)
9D00921C  7C420340   EXT V0, V0, 13, 1
9D009220  304200FF   ANDI V0, V0, 255
9D009224  00621025   OR V0, V1, V0
9D009228  AF8280A4   SW V0, -32604(GP)
23:                      buttonNextState = (buttonNextState << 1) | BUTTON_NEXT_PIN;
9D00922C  8F8280A8   LW V0, -32600(GP)
9D009230  00021840   SLL V1, V0, 1
9D009234  3C02BF86   LUI V0, -16506
9D009238  8C420020   LW V0, 32(V0)
9D00923C  7C4201C0   EXT V0, V0, 7, 1
9D009240  304200FF   ANDI V0, V0, 255
9D009244  00621025   OR V0, V1, V0
9D009248  AF8280A8   SW V0, -32600(GP)
24:                  
25:                      // Button has been pressed if the last six reads were false
26:                      // Button has been released if the last six reads were true
27:                      if(buttonAdvanceFlag == READY)
9D00924C  8F828094   LW V0, -32620(GP)
9D009250  14400009   BNE V0, ZERO, 0x9D009278
9D009254  00000000   NOP
28:                      {
29:                          if((buttonAdvanceState & 0x3F) == 0)
9D009258  8F8280A0   LW V0, -32608(GP)
9D00925C  3042003F   ANDI V0, V0, 63
9D009260  1440000B   BNE V0, ZERO, 0x9D009290
9D009264  00000000   NOP
30:                              buttonAdvanceFlag = SET;
9D009268  24020001   ADDIU V0, ZERO, 1
9D00926C  AF828094   SW V0, -32620(GP)
9D009270  0B4024A4   J 0x9D009290
9D009274  00000000   NOP
31:                      }
32:                      else
33:                      {
34:                          if((buttonAdvanceState & 0x3F) == 0x3F)
9D009278  8F8280A0   LW V0, -32608(GP)
9D00927C  3043003F   ANDI V1, V0, 63
9D009280  2402003F   ADDIU V0, ZERO, 63
9D009284  14620002   BNE V1, V0, 0x9D009290
9D009288  00000000   NOP
35:                              buttonAdvanceFlag = READY;
9D00928C  AF808094   SW ZERO, -32620(GP)
36:                      }
37:                  
38:                      if(buttonCancelFlag == READY)
9D009290  8F828098   LW V0, -32616(GP)
9D009294  14400009   BNE V0, ZERO, 0x9D0092BC
9D009298  00000000   NOP
39:                      {
40:                          if((buttonCancelState & 0x3F) == 0)
9D00929C  8F8280A4   LW V0, -32604(GP)
9D0092A0  3042003F   ANDI V0, V0, 63
9D0092A4  1440000B   BNE V0, ZERO, 0x9D0092D4
9D0092A8  00000000   NOP
41:                              buttonCancelFlag = SET;
9D0092AC  24020001   ADDIU V0, ZERO, 1
9D0092B0  AF828098   SW V0, -32616(GP)
9D0092B4  0B4024B5   J 0x9D0092D4
9D0092B8  00000000   NOP
42:                      }
43:                      else
44:                      {
45:                          if((buttonCancelState & 0x3F) == 0x3F)
9D0092BC  8F8280A4   LW V0, -32604(GP)
9D0092C0  3043003F   ANDI V1, V0, 63
9D0092C4  2402003F   ADDIU V0, ZERO, 63
9D0092C8  14620002   BNE V1, V0, 0x9D0092D4
9D0092CC  00000000   NOP
46:                              buttonCancelFlag = READY;
9D0092D0  AF808098   SW ZERO, -32616(GP)
47:                      }
48:                  
49:                      if(buttonNextFlag == READY)
9D0092D4  8F82809C   LW V0, -32612(GP)
9D0092D8  14400009   BNE V0, ZERO, 0x9D009300
9D0092DC  00000000   NOP
50:                      {
51:                          if((buttonNextState & 0x3F) == 0)
9D0092E0  8F8280A8   LW V0, -32600(GP)
9D0092E4  3042003F   ANDI V0, V0, 63
9D0092E8  1440000B   BNE V0, ZERO, 0x9D009318
9D0092EC  00000000   NOP
52:                              buttonNextFlag = SET;
9D0092F0  24020001   ADDIU V0, ZERO, 1
9D0092F4  AF82809C   SW V0, -32612(GP)
9D0092F8  0B4024C6   J 0x9D009318
9D0092FC  00000000   NOP
53:                      }
54:                      else
55:                      {
56:                          if((buttonNextState & 0x3F) == 0x3F)
9D009300  8F8280A8   LW V0, -32600(GP)
9D009304  3043003F   ANDI V1, V0, 63
9D009308  2402003F   ADDIU V0, ZERO, 63
9D00930C  14620002   BNE V1, V0, 0x9D009318
9D009310  00000000   NOP
57:                              buttonNextFlag = READY;
9D009314  AF80809C   SW ZERO, -32612(GP)
58:                      }
59:                  
60:                      IFS0bits.T2IF = 0; // clear interrupt flag
9D009318  3C03BF81   LUI V1, -16511
9D00931C  8C620040   LW V0, 64(V1)
9D009320  7C024A44   INS V0, ZERO, 9, 1
9D009324  AC620040   SW V0, 64(V1)
61:                  }
9D009328  03C0E821   ADDU SP, S8, ZERO
9D00932C  8FBE0004   LW S8, 4(SP)
9D009330  41606000   DI ZERO
9D009334  000000C0   EHB
9D009338  8FBB000C   LW K1, 12(SP)
9D00933C  8FBA0014   LW K0, 20(SP)
9D009340  409B6002   MTC0 K1, SRSCtl
9D009344  8FBB0010   LW K1, 16(SP)
9D009348  409A7000   MTC0 K0, EPC
9D00934C  27BD0018   ADDIU SP, SP, 24
9D009350  41DDE800   WRPGPR SP, SP
9D009354  409B6000   MTC0 K1, Status
9D009358  42000018   ERET
62:                  
63:                  int flagSet_advance() { return buttonAdvanceFlag == SET; }
9D00935C  27BDFFF8   ADDIU SP, SP, -8
9D009360  AFBE0004   SW S8, 4(SP)
9D009364  03A0F021   ADDU S8, SP, ZERO
9D009368  8F828094   LW V0, -32620(GP)
9D00936C  38420001   XORI V0, V0, 1
9D009370  2C420001   SLTIU V0, V0, 1
9D009374  03C0E821   ADDU SP, S8, ZERO
9D009378  8FBE0004   LW S8, 4(SP)
9D00937C  27BD0008   ADDIU SP, SP, 8
9D009380  03E00008   JR RA
9D009384  00000000   NOP
64:                  int flagSet_cancel() { return buttonCancelFlag == SET; }
9D009388  27BDFFF8   ADDIU SP, SP, -8
9D00938C  AFBE0004   SW S8, 4(SP)
9D009390  03A0F021   ADDU S8, SP, ZERO
9D009394  8F828098   LW V0, -32616(GP)
9D009398  38420001   XORI V0, V0, 1
9D00939C  2C420001   SLTIU V0, V0, 1
9D0093A0  03C0E821   ADDU SP, S8, ZERO
9D0093A4  8FBE0004   LW S8, 4(SP)
9D0093A8  27BD0008   ADDIU SP, SP, 8
9D0093AC  03E00008   JR RA
9D0093B0  00000000   NOP
65:                  int flagSet_next() { return buttonNextFlag == SET; }
9D0093B4  27BDFFF8   ADDIU SP, SP, -8
9D0093B8  AFBE0004   SW S8, 4(SP)
9D0093BC  03A0F021   ADDU S8, SP, ZERO
9D0093C0  8F82809C   LW V0, -32612(GP)
9D0093C4  38420001   XORI V0, V0, 1
9D0093C8  2C420001   SLTIU V0, V0, 1
9D0093CC  03C0E821   ADDU SP, S8, ZERO
9D0093D0  8FBE0004   LW S8, 4(SP)
9D0093D4  27BD0008   ADDIU SP, SP, 8
9D0093D8  03E00008   JR RA
9D0093DC  00000000   NOP
66:                  
67:                  void clearFlag_advance() { buttonAdvanceFlag = CLEARED; }
9D0093E0  27BDFFF8   ADDIU SP, SP, -8
9D0093E4  AFBE0004   SW S8, 4(SP)
9D0093E8  03A0F021   ADDU S8, SP, ZERO
9D0093EC  2402FFFF   ADDIU V0, ZERO, -1
9D0093F0  AF828094   SW V0, -32620(GP)
9D0093F4  03C0E821   ADDU SP, S8, ZERO
9D0093F8  8FBE0004   LW S8, 4(SP)
9D0093FC  27BD0008   ADDIU SP, SP, 8
9D009400  03E00008   JR RA
9D009404  00000000   NOP
68:                  void clearFlag_cancel() { buttonCancelFlag = CLEARED; }
9D009408  27BDFFF8   ADDIU SP, SP, -8
9D00940C  AFBE0004   SW S8, 4(SP)
9D009410  03A0F021   ADDU S8, SP, ZERO
9D009414  2402FFFF   ADDIU V0, ZERO, -1
9D009418  AF828098   SW V0, -32616(GP)
9D00941C  03C0E821   ADDU SP, S8, ZERO
9D009420  8FBE0004   LW S8, 4(SP)
9D009424  27BD0008   ADDIU SP, SP, 8
9D009428  03E00008   JR RA
9D00942C  00000000   NOP
69:                  void clearFlag_next() { buttonNextFlag = CLEARED; }
9D009430  27BDFFF8   ADDIU SP, SP, -8
9D009434  AFBE0004   SW S8, 4(SP)
9D009438  03A0F021   ADDU S8, SP, ZERO
9D00943C  2402FFFF   ADDIU V0, ZERO, -1
9D009440  AF82809C   SW V0, -32612(GP)
9D009444  03C0E821   ADDU SP, S8, ZERO
9D009448  8FBE0004   LW S8, 4(SP)
9D00944C  27BD0008   ADDIU SP, SP, 8
9D009450  03E00008   JR RA
9D009454  00000000   NOP
---  /Volumes/home/c11067/xc32/build/xc32-XC32_v1_34_branch/src45x/gcc/gcc/libgcc2.c  -------------------
9D008210  00C01021   ADDU V0, A2, ZERO
9D00866C  00C04821   ADDU T1, A2, ZERO
9D008214  00804021   ADDU T0, A0, ZERO
9D008670  00804021   ADDU T0, A0, ZERO
9D008218  14E0003F   BNE A3, ZERO, 0x9D008318
9D00821C  00A01821   ADDU V1, A1, ZERO
9D008674  14E0003B   BNE A3, ZERO, 0x9D008764
9D008678  00A01821   ADDU V1, A1, ZERO
9D008220  00A6302B   SLTU A2, A1, A2
9D008224  10C0004C   BEQ A2, ZERO, 0x9D008358
9D008228  00000000   NOP
9D00867C  00A6102B   SLTU V0, A1, A2
9D008680  10400048   BEQ V0, ZERO, 0x9D0087A4
9D008684  70C21020   CLZ V0, A2
9D00822C  70442020   CLZ A0, V0
9D008230  50800008   BEQL A0, ZERO, 0x9D008254
9D008234  00022402   SRL A0, V0, 16
9D008688  10400008   BEQ V0, ZERO, 0x9D0086AC
9D00868C  00093C02   SRL A3, T1, 16
9D008244  00821004   SLLV V0, V0, A0
9D00869C  00464804   SLLV T1, A2, V0
9D008238  00042823   SUBU A1, ZERO, A0
9D00823C  00A82806   SRLV A1, T0, A1
9D008240  00831804   SLLV V1, V1, A0
9D008248  00A31825   OR V1, A1, V1
9D008690  00022023   SUBU A0, ZERO, V0
9D008694  00882006   SRLV A0, T0, A0
9D008698  00451804   SLLV V1, A1, V0
9D0086A0  00831825   OR V1, A0, V1
9D00824C  00884004   SLLV T0, T0, A0
9D0086A4  00484004   SLLV T0, T0, V0
9D008250  00022402   SRL A0, V0, 16
9D008254  0064001B   DIVU V1, A0
9D008258  008001F4   TEQ A0, ZERO
9D00825C  3049FFFF   ANDI T1, V0, -1
9D008260  00085C02   SRL T3, T0, 16
9D008264  00003812   MFLO A3, 0
9D008268  00005010   MFHI T2, 0
9D00826C  70E93002   MUL A2, A3, T1
9D008270  000A2C00   SLL A1, T2, 16
9D008274  00AB2825   OR A1, A1, T3
9D008278  00A6502B   SLTU T2, A1, A2
9D00827C  0064001B   DIVU V1, A0
9D008280  008001F4   TEQ A0, ZERO
9D008284  1140000B   BEQ T2, ZERO, 0x9D0082B4
9D008288  00A61823   SUBU V1, A1, A2
9D00828C  00A22821   ADDU A1, A1, V0
9D008290  00A2182B   SLTU V1, A1, V0
9D008294  14600006   BNE V1, ZERO, 0x9D0082B0
9D008298  24E7FFFF   ADDIU A3, A3, -1
9D00829C  00A6182B   SLTU V1, A1, A2
9D0082A0  10600004   BEQ V1, ZERO, 0x9D0082B4
9D0082A4  00A61823   SUBU V1, A1, A2
9D0082A8  24E7FFFF   ADDIU A3, A3, -1
9D0082AC  00A22821   ADDU A1, A1, V0
9D0082B0  00A61823   SUBU V1, A1, A2
9D0082B4  0064001B   DIVU V1, A0
9D0082B8  008001F4   TEQ A0, ZERO
9D0082BC  3108FFFF   ANDI T0, T0, -1
9D0082C0  00002812   MFLO A1, 0
9D0082C4  00003010   MFHI A2, 0
9D0082C8  70A94802   MUL T1, A1, T1
9D0082CC  00063400   SLL A2, A2, 16
9D0082D0  00C84025   OR T0, A2, T0
9D0082D4  0109302B   SLTU A2, T0, T1
9D0082D8  0064001B   DIVU V1, A0
9D0082DC  008001F4   TEQ A0, ZERO
9D0082E0  10C00007   BEQ A2, ZERO, 0x9D008300
9D0082E4  01024021   ADDU T0, T0, V0
9D0082E8  0102102B   SLTU V0, T0, V0
9D0082EC  14400004   BNE V0, ZERO, 0x9D008300
9D0082F0  24A5FFFF   ADDIU A1, A1, -1
9D0082F4  0109482B   SLTU T1, T0, T1
9D0082F8  55200001   BNEL T1, ZERO, 0x9D008300
9D0082FC  24A5FFFF   ADDIU A1, A1, -1
9D008300  00073C00   SLL A3, A3, 16
9D008304  00A72825   OR A1, A1, A3
9D008308  00002021   ADDU A0, ZERO, ZERO
9D0086A8  00093C02   SRL A3, T1, 16
9D0086AC  0067001B   DIVU V1, A3
9D0086B0  00E001F4   TEQ A3, ZERO
9D0086B4  312AFFFF   ANDI T2, T1, -1
9D0086B8  00082C02   SRL A1, T0, 16
9D0086BC  00005812   MFLO T3, 0
9D0086C0  00002010   MFHI A0, 0
9D0086C4  716A5802   MUL T3, T3, T2
9D0086C8  00043400   SLL A2, A0, 16
9D0086CC  00C53025   OR A2, A2, A1
9D0086D0  00CB602B   SLTU T4, A2, T3
9D0086D4  0067001B   DIVU V1, A3
9D0086D8  00E001F4   TEQ A3, ZERO
9D0086DC  11800009   BEQ T4, ZERO, 0x9D008704
9D0086E0  00CB1823   SUBU V1, A2, T3
9D0086E4  00C93021   ADDU A2, A2, T1
9D0086E8  00C9182B   SLTU V1, A2, T1
9D0086EC  14600005   BNE V1, ZERO, 0x9D008704
9D0086F0  00CB1823   SUBU V1, A2, T3
9D0086F4  00CB182B   SLTU V1, A2, T3
9D0086F8  54600001   BNEL V1, ZERO, 0x9D008700
9D0086FC  00C93021   ADDU A2, A2, T1
9D008700  00CB1823   SUBU V1, A2, T3
9D008704  0067001B   DIVU V1, A3
9D008708  00E001F4   TEQ A3, ZERO
9D00870C  3108FFFF   ANDI T0, T0, -1
9D008710  00002012   MFLO A0, 0
9D008714  00002810   MFHI A1, 0
9D008718  708A5002   MUL T2, A0, T2
9D00871C  00052C00   SLL A1, A1, 16
9D008720  00A84025   OR T0, A1, T0
9D008724  010A202B   SLTU A0, T0, T2
9D008728  0067001B   DIVU V1, A3
9D00872C  00E001F4   TEQ A3, ZERO
9D008730  50800009   BEQL A0, ZERO, 0x9D008758
9D008734  010A4023   SUBU T0, T0, T2
9D008358  14400006   BNE V0, ZERO, 0x9D008374
9D00835C  70431820   CLZ V1, V0
9D0087A4  14C00006   BNE A2, ZERO, 0x9D0087C0
9D0087A8  71221020   CLZ V0, T1
9D008360  24030001   ADDIU V1, ZERO, 1
9D008364  0062001B   DIVU V1, V0
9D008368  004001F4   TEQ V0, ZERO
9D00836C  00001012   MFLO V0, 0
9D0087AC  24020001   ADDIU V0, ZERO, 1
9D0087B0  0046001B   DIVU V0, A2
9D0087B4  00C001F4   TEQ A2, ZERO
9D0087B8  00004812   MFLO T1, 0
9D008370  70431820   CLZ V1, V0
9D0087BC  71221020   CLZ V0, T1
9D008374  5460007B   BNEL V1, ZERO, 0x9D008564
9D008378  24080020   ADDIU T0, ZERO, 32
9D0087C0  5440007D   BNEL V0, ZERO, 0x9D0089B8
9D0087C4  24080020   ADDIU T0, ZERO, 32
9D00837C  00A22823   SUBU A1, A1, V0
9D008380  00023402   SRL A2, V0, 16
9D008384  3049FFFF   ANDI T1, V0, -1
9D0087C8  00A93023   SUBU A2, A1, T1
9D0087CC  00091C02   SRL V1, T1, 16
9D0087D0  312AFFFF   ANDI T2, T1, -1
9D008388  24040001   ADDIU A0, ZERO, 1
9D008568  01034023   SUBU T0, T0, V1
9D0089B8  01024023   SUBU T0, T0, V0
9D008564  00621004   SLLV V0, V0, V1
9D0089BC  00494804   SLLV T1, T1, V0
9D00856C  01053806   SRLV A3, A1, T0
9D0089C0  01053806   SRLV A3, A1, T0
9D00857C  01044006   SRLV T0, A0, T0
9D008580  00652804   SLLV A1, A1, V1
9D008588  01052825   OR A1, T0, A1
9D0089D4  01046006   SRLV T4, A0, T0
9D0089D8  00452804   SLLV A1, A1, V0
9D0089DC  01856025   OR T4, T4, A1
9D00858C  00644004   SLLV T0, A0, V1
9D0089E4  00444004   SLLV T0, A0, V0
9D008570  00023402   SRL A2, V0, 16
9D008574  00E6001B   DIVU A3, A2
9D008578  00C001F4   TEQ A2, ZERO
9D008584  3049FFFF   ANDI T1, V0, -1
9D008590  00056402   SRL T4, A1, 16
9D008594  00005012   MFLO T2, 0
9D008598  00005810   MFHI T3, 0
9D00859C  71492002   MUL A0, T2, T1
9D0085A0  000B5C00   SLL T3, T3, 16
9D0085A4  018B1825   OR V1, T4, T3
9D0085A8  0064582B   SLTU T3, V1, A0
9D0085AC  00E6001B   DIVU A3, A2
9D0085B0  00C001F4   TEQ A2, ZERO
9D0085B4  5160000B   BEQL T3, ZERO, 0x9D0085E4
9D0085B8  00641823   SUBU V1, V1, A0
9D0085BC  00621821   ADDU V1, V1, V0
9D0085C0  0062382B   SLTU A3, V1, V0
9D0085C4  14E00006   BNE A3, ZERO, 0x9D0085E0
9D0085C8  254AFFFF   ADDIU T2, T2, -1
9D0085CC  0064382B   SLTU A3, V1, A0
9D0085D0  50E00004   BEQL A3, ZERO, 0x9D0085E4
9D0085D4  00641823   SUBU V1, V1, A0
9D0085D8  254AFFFF   ADDIU T2, T2, -1
9D0085DC  00621821   ADDU V1, V1, V0
9D0085E0  00641823   SUBU V1, V1, A0
9D0085E4  0066001B   DIVU V1, A2
9D0085E8  00C001F4   TEQ A2, ZERO
9D0085EC  30A5FFFF   ANDI A1, A1, -1
9D0085F0  00002012   MFLO A0, 0
9D0085F4  00005810   MFHI T3, 0
9D0085F8  70893802   MUL A3, A0, T1
9D0085FC  000B5C00   SLL T3, T3, 16
9D008600  01652825   OR A1, T3, A1
9D008604  00A7582B   SLTU T3, A1, A3
9D008608  0066001B   DIVU V1, A2
9D00860C  00C001F4   TEQ A2, ZERO
9D008610  5160000B   BEQL T3, ZERO, 0x9D008640
9D008614  000A5400   SLL T2, T2, 16
9D008618  00A22821   ADDU A1, A1, V0
9D00861C  00A2182B   SLTU V1, A1, V0
9D008620  14600006   BNE V1, ZERO, 0x9D00863C
9D008624  2484FFFF   ADDIU A0, A0, -1
9D008628  00A7182B   SLTU V1, A1, A3
9D00862C  50600004   BEQL V1, ZERO, 0x9D008640
9D008630  000A5400   SLL T2, T2, 16
9D008634  2484FFFF   ADDIU A0, A0, -1
9D008638  00A22821   ADDU A1, A1, V0
9D00863C  000A5400   SLL T2, T2, 16
9D008640  00A72823   SUBU A1, A1, A3
9D008644  0B4020E3   J 0x9D00838C
9D008648  008A2025   OR A0, A0, T2
9D0089C4  00091C02   SRL V1, T1, 16
9D0089C8  00E3001B   DIVU A3, V1
9D0089CC  006001F4   TEQ V1, ZERO
9D0089D0  312AFFFF   ANDI T2, T1, -1
9D0089E0  000C2C02   SRL A1, T4, 16
9D0089E8  00005812   MFLO T3, 0
9D0089EC  00006810   MFHI T5, 0
9D0089F0  716A5802   MUL T3, T3, T2
9D0089F4  000D6C00   SLL T5, T5, 16
9D0089F8  00AD2025   OR A0, A1, T5
9D0089FC  008B282B   SLTU A1, A0, T3
9D008A00  00E3001B   DIVU A3, V1
9D008A04  006001F4   TEQ V1, ZERO
9D008A08  50A00009   BEQL A1, ZERO, 0x9D008A30
9D008A0C  008B2023   SUBU A0, A0, T3
9D008A10  00892021   ADDU A0, A0, T1
9D008A14  0089282B   SLTU A1, A0, T1
9D008A18  54A00005   BNEL A1, ZERO, 0x9D008A30
9D008A1C  008B2023   SUBU A0, A0, T3
9D008A20  008B282B   SLTU A1, A0, T3
9D008A24  54A00001   BNEL A1, ZERO, 0x9D008A2C
9D008A28  00892021   ADDU A0, A0, T1
9D008A2C  008B2023   SUBU A0, A0, T3
9D008A30  0083001B   DIVU A0, V1
9D008A34  006001F4   TEQ V1, ZERO
9D008A38  318CFFFF   ANDI T4, T4, -1
9D008A3C  00002812   MFLO A1, 0
9D008A40  00003810   MFHI A3, 0
9D008A44  70AA2802   MUL A1, A1, T2
9D008A48  00073400   SLL A2, A3, 16
9D008A4C  00CC3025   OR A2, A2, T4
9D008A50  00C5382B   SLTU A3, A2, A1
9D008A54  0083001B   DIVU A0, V1
9D008A58  006001F4   TEQ V1, ZERO
9D008A5C  50E0FF5D   BEQL A3, ZERO, 0x9D0087D4
9D008A60  00C53023   SUBU A2, A2, A1
9D008A64  00C93021   ADDU A2, A2, T1
9D008A68  00C9202B   SLTU A0, A2, T1
9D008A6C  5480FF59   BNEL A0, ZERO, 0x9D0087D4
9D008A70  00C53023   SUBU A2, A2, A1
9D008A74  00C5202B   SLTU A0, A2, A1
9D008A78  54800001   BNEL A0, ZERO, 0x9D008A80
9D008A7C  00C93021   ADDU A2, A2, T1
9D008A80  0B4021F5   J 0x9D0087D4
9D008A84  00C53023   SUBU A2, A2, A1
9D00838C  00A6001B   DIVU A1, A2
9D008390  00C001F4   TEQ A2, ZERO
9D008394  00086402   SRL T4, T0, 16
9D008398  00003812   MFLO A3, 0
9D00839C  00005810   MFHI T3, 0
9D0083A0  70E95002   MUL T2, A3, T1
9D0083A4  000B1C00   SLL V1, T3, 16
9D0083A8  006C1825   OR V1, V1, T4
9D0083AC  006A582B   SLTU T3, V1, T2
9D0083B0  00A6001B   DIVU A1, A2
9D0083B4  00C001F4   TEQ A2, ZERO
9D0083B8  51600009   BEQL T3, ZERO, 0x9D0083E0
9D0083BC  006A1823   SUBU V1, V1, T2
9D0083C0  00621821   ADDU V1, V1, V0
9D0083C4  0062282B   SLTU A1, V1, V0
9D0083C8  14A00004   BNE A1, ZERO, 0x9D0083DC
9D0083CC  24E7FFFF   ADDIU A3, A3, -1
9D0083D0  006A282B   SLTU A1, V1, T2
9D0083D4  54A000A3   BNEL A1, ZERO, 0x9D008664
9D0083D8  24E7FFFF   ADDIU A3, A3, -1
9D0083DC  006A1823   SUBU V1, V1, T2
9D0083E0  0066001B   DIVU V1, A2
9D0083E4  00C001F4   TEQ A2, ZERO
9D0083E8  3108FFFF   ANDI T0, T0, -1
9D0083EC  00002812   MFLO A1, 0
9D0083F0  00005010   MFHI T2, 0
9D0083F4  70A94802   MUL T1, A1, T1
9D0083F8  000A5400   SLL T2, T2, 16
9D0083FC  01484025   OR T0, T2, T0
9D008400  0109502B   SLTU T2, T0, T1
9D008404  0066001B   DIVU V1, A2
9D008408  00C001F4   TEQ A2, ZERO
9D00840C  11400007   BEQ T2, ZERO, 0x9D00842C
9D008410  01024021   ADDU T0, T0, V0
9D008414  0102102B   SLTU V0, T0, V0
9D008418  14400004   BNE V0, ZERO, 0x9D00842C
9D00841C  24A5FFFF   ADDIU A1, A1, -1
9D008420  0109482B   SLTU T1, T0, T1
9D008424  55200001   BNEL T1, ZERO, 0x9D00842C
9D008428  24A5FFFF   ADDIU A1, A1, -1
9D00842C  00073C00   SLL A3, A3, 16
9D008430  00A72825   OR A1, A1, A3
9D008664  0B4020F7   J 0x9D0083DC
9D008668  00621821   ADDU V1, V1, V0
9D008738  01094021   ADDU T0, T0, T1
9D00873C  0109182B   SLTU V1, T0, T1
9D008740  54600005   BNEL V1, ZERO, 0x9D008758
9D008744  010A4023   SUBU T0, T0, T2
9D008748  010A182B   SLTU V1, T0, T2
9D00874C  54600001   BNEL V1, ZERO, 0x9D008754
9D008750  01094021   ADDU T0, T0, T1
9D008754  010A4023   SUBU T0, T0, T2
9D0087D4  00C3001B   DIVU A2, V1
9D0087D8  006001F4   TEQ V1, ZERO
9D0087DC  00086402   SRL T4, T0, 16
9D0087E0  00002012   MFLO A0, 0
9D0087E4  00005810   MFHI T3, 0
9D0087E8  708A2002   MUL A0, A0, T2
9D0087EC  000B3C00   SLL A3, T3, 16
9D0087F0  00EC3825   OR A3, A3, T4
9D0087F4  00E4582B   SLTU T3, A3, A0
9D0087F8  00C3001B   DIVU A2, V1
9D0087FC  006001F4   TEQ V1, ZERO
9D008800  11600009   BEQ T3, ZERO, 0x9D008828
9D008804  00E42823   SUBU A1, A3, A0
9D008808  00E93821   ADDU A3, A3, T1
9D00880C  00E9282B   SLTU A1, A3, T1
9D008810  14A00005   BNE A1, ZERO, 0x9D008828
9D008814  00E42823   SUBU A1, A3, A0
9D008818  00E4282B   SLTU A1, A3, A0
9D00881C  54A00001   BNEL A1, ZERO, 0x9D008824
9D008820  00E93821   ADDU A3, A3, T1
9D008824  00E42823   SUBU A1, A3, A0
9D008828  00A3001B   DIVU A1, V1
9D00882C  006001F4   TEQ V1, ZERO
9D008830  3108FFFF   ANDI T0, T0, -1
9D008834  00002012   MFLO A0, 0
9D008838  00003010   MFHI A2, 0
9D00883C  708A5002   MUL T2, A0, T2
9D008840  00063400   SLL A2, A2, 16
9D008844  00C84025   OR T0, A2, T0
9D008848  010A202B   SLTU A0, T0, T2
9D00884C  00A3001B   DIVU A1, V1
9D008850  006001F4   TEQ V1, ZERO
9D008854  5080FFC0   BEQL A0, ZERO, 0x9D008758
9D008858  010A4023   SUBU T0, T0, T2
9D00885C  01094021   ADDU T0, T0, T1
9D008860  0109182B   SLTU V1, T0, T1
9D008864  5460FFBC   BNEL V1, ZERO, 0x9D008758
9D008868  010A4023   SUBU T0, T0, T2
9D00886C  0B4021D3   J 0x9D00874C
9D008870  010A182B   SLTU V1, T0, T2
9D008758  00481006   SRLV V0, T0, V0
9D00875C  03E00008   JR RA
9D008760  00001821   ADDU V1, ZERO, ZERO
9D008318  00A7102B   SLTU V0, A1, A3
9D00831C  54400048   BNEL V0, ZERO, 0x9D008440
9D008320  00002021   ADDU A0, ZERO, ZERO
9D008440  00002821   ADDU A1, ZERO, ZERO
9D008764  00A7102B   SLTU V0, A1, A3
9D008768  14400042   BNE V0, ZERO, 0x9D008874
9D00876C  70EA5020   CLZ T2, A3
9D008874  00801021   ADDU V0, A0, ZERO
9D008878  03E00008   JR RA
9D00887C  00A01821   ADDU V1, A1, ZERO
9D008324  70E31820   CLZ V1, A3
9D008328  14600049   BNE V1, ZERO, 0x9D008450
9D00832C  240C0020   ADDIU T4, ZERO, 32
9D008770  15400043   BNE T2, ZERO, 0x9D008880
9D008774  240C0020   ADDIU T4, ZERO, 32
9D008330  00E5282B   SLTU A1, A3, A1
9D008334  14A00003   BNE A1, ZERO, 0x9D008344
9D008338  0086302B   SLTU A2, A0, A2
9D00833C  14C00086   BNE A2, ZERO, 0x9D008558
9D008340  00002021   ADDU A0, ZERO, ZERO
9D008344  00002021   ADDU A0, ZERO, ZERO
9D008348  24050001   ADDIU A1, ZERO, 1
9D008778  00E5102B   SLTU V0, A3, A1
9D00877C  14400005   BNE V0, ZERO, 0x9D008794
9D008780  00861023   SUBU V0, A0, A2
9D008784  0086102B   SLTU V0, A0, A2
9D008788  544000C8   BNEL V0, ZERO, 0x9D008AAC
9D00878C  00801021   ADDU V0, A0, ZERO
9D008790  00861023   SUBU V0, A0, A2
9D008794  00A72823   SUBU A1, A1, A3
9D008798  0082202B   SLTU A0, A0, V0
9D00879C  03E00008   JR RA
9D0087A0  00A41823   SUBU V1, A1, A0
9D008450  01836023   SUBU T4, T4, V1
9D008880  018A6023   SUBU T4, T4, T2
9D008454  01864006   SRLV T0, A2, T4
9D008458  00673804   SLLV A3, A3, V1
9D00845C  01074025   OR T0, T0, A3
9D008884  01473804   SLLV A3, A3, T2
9D008888  01865806   SRLV T3, A2, T4
9D00888C  01675825   OR T3, T3, A3
9D0088B4  01463004   SLLV A2, A2, T2
9D008464  01853806   SRLV A3, A1, T4
9D008890  01856806   SRLV T5, A1, T4
9D008474  00652804   SLLV A1, A1, V1
9D008478  01846006   SRLV T4, A0, T4
9D00847C  01856025   OR T4, T4, A1
9D0088A4  01841006   SRLV V0, A0, T4
9D0088A8  01452804   SLLV A1, A1, T2
9D0088AC  00452825   OR A1, V0, A1
9D008460  00081402   SRL V0, T0, 16
9D008468  00E2001B   DIVU A3, V0
9D00846C  004001F4   TEQ V0, ZERO
9D008470  310DFFFF   ANDI T5, T0, -1
9D008480  000C4C02   SRL T1, T4, 16
9D008484  00005812   MFLO T3, 0
9D008488  00007810   MFHI T7, 0
9D00848C  716D7002   MUL T6, T3, T5
9D008490  000F5400   SLL T2, T7, 16
9D008494  01495025   OR T2, T2, T1
9D008498  014E282B   SLTU A1, T2, T6
9D00849C  00E2001B   DIVU A3, V0
9D0084A0  004001F4   TEQ V0, ZERO
9D0084A4  10A0000A   BEQ A1, ZERO, 0x9D0084D0
9D0084A8  00663004   SLLV A2, A2, V1
9D0084AC  01485021   ADDU T2, T2, T0
9D0084B0  0148282B   SLTU A1, T2, T0
9D0084B4  14A00006   BNE A1, ZERO, 0x9D0084D0
9D0084B8  256BFFFF   ADDIU T3, T3, -1
9D0084BC  014E282B   SLTU A1, T2, T6
9D0084C0  50A00004   BEQL A1, ZERO, 0x9D0084D4
9D0084C4  014E5023   SUBU T2, T2, T6
9D0084C8  256BFFFF   ADDIU T3, T3, -1
9D0084CC  01485021   ADDU T2, T2, T0
9D0084D0  014E5023   SUBU T2, T2, T6
9D0084D4  0142001B   DIVU T2, V0
9D0084D8  004001F4   TEQ V0, ZERO
9D0084DC  318CFFFF   ANDI T4, T4, -1
9D0084E0  00002812   MFLO A1, 0
9D0084E4  00007010   MFHI T6, 0
9D0084E8  70AD6802   MUL T5, A1, T5
9D0084EC  000E4C00   SLL T1, T6, 16
9D0084F0  012C4825   OR T1, T1, T4
9D0084F4  012D382B   SLTU A3, T1, T5
9D0084F8  0142001B   DIVU T2, V0
9D0084FC  004001F4   TEQ V0, ZERO
9D008500  50E0000B   BEQL A3, ZERO, 0x9D008530
9D008504  000B5C00   SLL T3, T3, 16
9D008508  01284821   ADDU T1, T1, T0
9D00850C  0128102B   SLTU V0, T1, T0
9D008510  14400006   BNE V0, ZERO, 0x9D00852C
9D008514  24A5FFFF   ADDIU A1, A1, -1
9D008518  012D102B   SLTU V0, T1, T5
9D00851C  50400004   BEQL V0, ZERO, 0x9D008530
9D008520  000B5C00   SLL T3, T3, 16
9D008524  24A5FFFF   ADDIU A1, A1, -1
9D008528  01284821   ADDU T1, T1, T0
9D00852C  000B5C00   SLL T3, T3, 16
9D008530  00AB2825   OR A1, A1, T3
9D008538  012D4823   SUBU T1, T1, T5
9D008894  000B3C02   SRL A3, T3, 16
9D008898  01A7001B   DIVU T5, A3
9D00889C  00E001F4   TEQ A3, ZERO
9D0088A0  316FFFFF   ANDI T7, T3, -1
9D0088B0  00051402   SRL V0, A1, 16
9D0088B8  00007012   MFLO T6, 0
9D0088BC  00001810   MFHI V1, 0
9D0088C0  71CFC002   MUL T8, T6, T7
9D0088C4  00034C00   SLL T1, V1, 16
9D0088C8  01224825   OR T1, T1, V0
9D0088CC  0138102B   SLTU V0, T1, T8
9D0088D0  01A7001B   DIVU T5, A3
9D0088D4  00E001F4   TEQ A3, ZERO
9D0088D8  1040000A   BEQ V0, ZERO, 0x9D008904
9D0088DC  01442004   SLLV A0, A0, T2
9D0088E0  012B4821   ADDU T1, T1, T3
9D0088E4  012B102B   SLTU V0, T1, T3
9D0088E8  14400006   BNE V0, ZERO, 0x9D008904
9D0088EC  25CEFFFF   ADDIU T6, T6, -1
9D0088F0  0138102B   SLTU V0, T1, T8
9D0088F4  50400004   BEQL V0, ZERO, 0x9D008908
9D0088F8  01384823   SUBU T1, T1, T8
9D0088FC  25CEFFFF   ADDIU T6, T6, -1
9D008900  012B4821   ADDU T1, T1, T3
9D008904  01384823   SUBU T1, T1, T8
9D008908  0127001B   DIVU T1, A3
9D00890C  00E001F4   TEQ A3, ZERO
9D008910  30A5FFFF   ANDI A1, A1, -1
9D008914  00006812   MFLO T5, 0
9D008918  00001810   MFHI V1, 0
9D00891C  71AF7802   MUL T7, T5, T7
9D008920  00031400   SLL V0, V1, 16
9D008924  00451025   OR V0, V0, A1
9D008928  004F182B   SLTU V1, V0, T7
9D00892C  0127001B   DIVU T1, A3
9D008930  00E001F4   TEQ A3, ZERO
9D008934  1060000B   BEQ V1, ZERO, 0x9D008964
9D008938  000E4400   SLL T0, T6, 16
9D00893C  004B1021   ADDU V0, V0, T3
9D008940  004B182B   SLTU V1, V0, T3
9D008944  14600007   BNE V1, ZERO, 0x9D008964
9D008948  25ADFFFF   ADDIU T5, T5, -1
9D00894C  004F182B   SLTU V1, V0, T7
9D008950  10600005   BEQ V1, ZERO, 0x9D008968
9D008954  01A84025   OR T0, T5, T0
9D008958  25ADFFFF   ADDIU T5, T5, -1
9D00895C  004B1021   ADDU V0, V0, T3
9D008960  000E4400   SLL T0, T6, 16
9D008964  01A84025   OR T0, T5, T0
9D00896C  004F7823   SUBU T7, V0, T7
9D008534  00A60019   MULTU 0, A1, A2
9D00853C  00003810   MFHI A3, 0
9D008968  01060019   MULTU 0, T0, A2
9D008970  00004810   MFHI T1, 0
9D008974  00004012   MFLO T0, 0
9D00897C  01201821   ADDU V1, T1, ZERO
9D008980  01203821   ADDU A3, T1, ZERO
9D008540  0127402B   SLTU T0, T1, A3
9D008544  15000044   BNE T0, ZERO, 0x9D008658
9D008548  00003012   MFLO A2, 0
9D00854C  1127003F   BEQ T1, A3, 0x9D00864C
9D008550  00642004   SLLV A0, A0, V1
9D00864C  0086302B   SLTU A2, A0, A2
9D008650  50C0FFC1   BEQL A2, ZERO, 0x9D008558
9D008654  00002021   ADDU A0, ZERO, ZERO
9D008978  01E9282B   SLTU A1, T7, T1
9D008984  14A00040   BNE A1, ZERO, 0x9D008A88
9D008988  00001012   MFLO V0, 0
9D00898C  51E90043   BEQL T7, T1, 0x9D008A9C
9D008990  0082182B   SLTU V1, A0, V0
9D008A9C  5460FFFB   BNEL V1, ZERO, 0x9D008A8C
9D008AA0  00464023   SUBU T0, V0, A2
9D008AA4  0B402266   J 0x9D008998
9D008AA8  00001821   ADDU V1, ZERO, ZERO
9D008AAC  03E00008   JR RA
9D008AB0  00000000   NOP
9D008554  00002021   ADDU A0, ZERO, ZERO
9D008658  24A5FFFF   ADDIU A1, A1, -1
9D00865C  0B402156   J 0x9D008558
9D008660  00002021   ADDU A0, ZERO, ZERO
9D008994  01E31823   SUBU V1, T7, V1
9D008A88  00464023   SUBU T0, V0, A2
9D008A8C  00EB1823   SUBU V1, A3, T3
9D008A90  0048102B   SLTU V0, V0, T0
9D008A94  0B402265   J 0x9D008994
9D008A98  00621823   SUBU V1, V1, V0
9D008998  00883023   SUBU A2, A0, T0
9D00899C  0086202B   SLTU A0, A0, A2
9D0089A0  00641823   SUBU V1, V1, A0
9D0089A4  01836004   SLLV T4, V1, T4
9D0089A8  01461006   SRLV V0, A2, T2
9D0089AC  004C1025   OR V0, V0, T4
9D00830C  00A01021   ADDU V0, A1, ZERO
9D00834C  00A01021   ADDU V0, A1, ZERO
9D008434  00A01021   ADDU V0, A1, ZERO
9D008444  00A01021   ADDU V0, A1, ZERO
9D008558  00A01021   ADDU V0, A1, ZERO
9D0089B0  03E00008   JR RA
9D0089B4  01431806   SRLV V1, V1, T2
9D008310  03E00008   JR RA
9D008314  00801821   ADDU V1, A0, ZERO
9D008350  03E00008   JR RA
9D008354  00801821   ADDU V1, A0, ZERO
9D008438  03E00008   JR RA
9D00843C  00801821   ADDU V1, A0, ZERO
9D008448  03E00008   JR RA
9D00844C  00801821   ADDU V1, A0, ZERO
9D00855C  03E00008   JR RA
9D008560  00801821   ADDU V1, A0, ZERO
9D00A4AC  27BDFFE0   ADDIU SP, SP, -32
9D00A4B0  AFBF001C   SW RA, 28(SP)
9D00A4B4  AFB10018   SW S1, 24(SP)
9D00A4B8  AFB00014   SW S0, 20(SP)
9D00A4BC  10A0002D   BEQ A1, ZERO, 0x9D00A574
9D00A4C0  00801021   ADDU V0, A0, ZERO
9D00A574  0F402B3A   JAL __floatunsisf
9D00A578  00000000   NOP
9D00A4C4  70A63020   CLZ A2, A1
9D00A4C8  24100020   ADDIU S0, ZERO, 32
9D00A4CC  02068023   SUBU S0, S0, A2
9D00A4D0  00101827   NOR V1, ZERO, S0
9D00A4D4  00052040   SLL A0, A1, 1
9D00A4D8  00642004   SLLV A0, A0, V1
9D00A4DC  02021806   SRLV V1, V0, S0
9D00A4E0  00831825   OR V1, A0, V1
9D00A4E4  32070020   ANDI A3, S0, 32
9D00A4E8  02052006   SRLV A0, A1, S0
9D00A4EC  00C21004   SLLV V0, V0, A2
9D00A4F0  14400014   BNE V0, ZERO, 0x9D00A544
9D00A4F4  0067200A   MOVZ A0, V1, A3
9D00A4F8  0F402B3A   JAL __floatunsisf
9D00A4FC  00000000   NOP
9D00A500  00408821   ADDU S1, V0, ZERO
9D00A544  0F402B3A   JAL __floatunsisf
9D00A548  34840001   ORI A0, A0, 1
9D00A54C  00408821   ADDU S1, V0, ZERO
9D00A504  24020020   ADDIU V0, ZERO, 32
9D00A508  12020015   BEQ S0, V0, 0x9D00A560
9D00A50C  3C029D01   LUI V0, -25343
9D00A550  24020020   ADDIU V0, ZERO, 32
9D00A554  1602FFEF   BNE S0, V0, 0x9D00A514
9D00A558  2402001F   ADDIU V0, ZERO, 31
9D00A55C  3C029D01   LUI V0, -25343
9D00A560  0B40294A   J 0x9D00A528
9D00A564  8C45AFB0   LW A1, -20560(V0)
9D00A510  2402001F   ADDIU V0, ZERO, 31
9D00A514  12020014   BEQ S0, V0, 0x9D00A568
9D00A518  24040001   ADDIU A0, ZERO, 1
9D00A568  3C029D01   LUI V0, -25343
9D00A56C  0B40294A   J 0x9D00A528
9D00A570  8C45AFB4   LW A1, -20556(V0)
9D00A51C  0F402B0F   JAL __floatsisf
9D00A520  02042004   SLLV A0, A0, S0
9D00A524  00402821   ADDU A1, V0, ZERO
9D00A528  0F402770   JAL fpmul
9D00A52C  02202021   ADDU A0, S1, ZERO
9D00A530  8FBF001C   LW RA, 28(SP)
9D00A534  8FB10018   LW S1, 24(SP)
9D00A538  8FB00014   LW S0, 20(SP)
9D00A53C  03E00008   JR RA
9D00A540  27BD0020   ADDIU SP, SP, 32
9D00A57C  8FBF001C   LW RA, 28(SP)
9D00A580  8FB10018   LW S1, 24(SP)
9D00A584  8FB00014   LW S0, 20(SP)
9D00A588  03E00008   JR RA
9D00A58C  27BD0020   ADDIU SP, SP, 32
---  /Volumes/home/c11067/xc32/build/xc32-XC32_v1_34_branch/src45x/gcc/gcc/config/floatunsisf.c  --------
9D00ACE8  27BDFFE8   ADDIU SP, SP, -24
9D00ACEC  AFBF0014   SW RA, 20(SP)
9D00ACF0  04800006   BLTZ A0, 0x9D00AD0C
9D00ACF4  00801021   ADDU V0, A0, ZERO
9D00AD0C  30420001   ANDI V0, V0, 1
9D00AD10  00042042   SRL A0, A0, 1
9D00AD14  0F402B0F   JAL __floatsisf
9D00AD18  00822025   OR A0, A0, V0
9D00AD1C  00402021   ADDU A0, V0, ZERO
9D00AD20  0F4025C0   JAL fpadd
9D00AD24  00402821   ADDU A1, V0, ZERO
9D00ACF8  0F402B0F   JAL __floatsisf
9D00ACFC  00000000   NOP
9D00AD00  8FBF0014   LW RA, 20(SP)
9D00AD04  03E00008   JR RA
9D00AD08  27BD0018   ADDIU SP, SP, 24
9D00AD28  8FBF0014   LW RA, 20(SP)
9D00AD2C  03E00008   JR RA
9D00AD30  27BD0018   ADDIU SP, SP, 24
